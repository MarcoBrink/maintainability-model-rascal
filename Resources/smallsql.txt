results(|project://smallsql|,<<<47.34605257,21.42098212,19.51771608,11.71524923>,score("Very Low","--",1)>,<<74.74476833,7.996489121,11.46117245,5.797570102>,score("Very Low","--",1)>,2494,8.679631115,2.542101043,[<|project://smallsql/src/smallsql/database/Where.java|(3279,109,<128,1>,<131,2>),"last",4,2>,<|project://smallsql/src/smallsql/database/SSConnection.java|(7814,98,<248,4>,<250,5>),"setReadOnly",2,1>,<|project://smallsql/src/smallsql/database/ForeignKey.java|(1634,177,<48,1>,<53,2>),"ForeignKey",6,1>,<|project://smallsql/src/smallsql/database/Column.java|(4486,152,<162,4>,<166,5>),"getFlag",5,4>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(4284,185,<126,4>,<129,5>),"setBigDecimal",4,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(15925,150,<505,4>,<507,5>),"updateShort",3,1>,<|project://smallsql/src/smallsql/database/NoFromResult.java|(1665,57,<55,1>,<57,2>),"isBeforeFirst",3,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(3068,186,<90,4>,<93,5>),"setByte",4,1>,<|project://smallsql/src/smallsql/junit/TestExceptionMethods.java|(4434,844,<129,4>,<150,5>),"testGetConnection",17,2>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(30853,422,<830,4>,<838,5>),"createUnspportedConversion",9,2>,<|project://smallsql/src/smallsql/database/DateTime.java|(9931,9699,<340,1>,<632,2>),"toString",289,43>,<|project://smallsql/src/smallsql/junit/TestResultSet.java|(1512,575,<48,4>,<63,5>),"setUp",14,2>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(2913,212,<89,4>,<95,5>),"getColumn",3,1>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(11849,128,<369,1>,<374,2>),"isAfterLast",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(7542,66,<340,4>,<342,5>),"supportsANSI92FullSQL",3,1>,<|project://smallsql/src/smallsql/database/TableResult.java|(10076,143,<369,1>,<372,5>),"getMoney",4,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(32283,2708,<889,4>,<952,5>),"getInt",61,33>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(6715,72,<290,4>,<292,5>),"supportsGroupByBeyondSelect",3,1>,<|project://smallsql/src/smallsql/database/TableStorePageInsert.java|(1823,158,<49,1>,<53,2>),"TableStorePageInsert",5,1>,<|project://smallsql/src/smallsql/database/Column.java|(3721,61,<132,4>,<134,5>),"setScale",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(12930,375,<663,4>,<667,5>),"getProcedures",5,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(11890,58,<615,4>,<617,5>),"getMaxUserNameLength",3,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(40303,2625,<1085,4>,<1147,5>),"getDouble",60,33>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(3143,198,<98,4>,<104,5>),"addColumn",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(39032,135,<1268,1>,<1272,2>),"updateNClob",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(4008,68,<180,4>,<182,5>),"getIdentifierQuoteString",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(35236,65,<967,4>,<969,5>),"supportsNamedParameters",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(17434,148,<397,4>,<399,5>),"getTime",3,1>,<|project://smallsql/src/smallsql/database/Command.java|(4439,170,<148,4>,<152,5>),"getQueryResult",5,2>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(10231,887,<308,4>,<332,5>),"getFloat",25,16>,<|project://smallsql/src/smallsql/junit/TestResultSet.java|(10356,757,<262,4>,<281,5>),"testOther",14,1>,<|project://smallsql/src/smallsql/junit/TestOrderBy.java|(11277,655,<414,1>,<437,2>),"testOrderBy_int_asc",20,2>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(22980,133,<632,1>,<636,2>),"getNClob",4,1>,<|project://smallsql/src/smallsql/database/TableViewMap.java|(2313,99,<69,4>,<71,5>),"put",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(7788,67,<355,4>,<357,5>),"supportsFullOuterJoins",3,1>,<|project://smallsql/src/smallsql/database/TableResult.java|(2585,233,<82,1>,<88,2>),"execute",7,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(31049,997,<880,4>,<900,5>),"createIndex",20,3>,<|project://smallsql/src/smallsql/database/Database.java|(17286,1016,<480,1>,<508,2>),"getPrimaryKeys",28,6>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(6233,322,<174,4>,<183,5>),"getTime",10,3>,<|project://smallsql/src/smallsql/database/Strings.java|(1887,155,<71,1>,<75,2>),"resize",5,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(2964,88,<120,4>,<122,5>),"getDriverMajorVersion",3,1>,<|project://smallsql/src/smallsql/database/DateTime.java|(21576,92,<705,1>,<707,2>),"getTime",3,1>,<|project://smallsql/src/smallsql/junit/TestOrderBy.java|(4576,664,<143,1>,<167,2>),"testOrderBy_varchar",21,2>,<|project://smallsql/src/smallsql/database/Join.java|(3188,82,<116,1>,<118,2>),"rowDeleted",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(31298,215,<928,1>,<934,2>),"getCmd",7,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionMod.java|(1416,51,<38,4>,<38,55>),"getFunction",1,1>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(3688,79,<123,1>,<125,2>),"isBeforeFirst",3,1>,<|project://smallsql/src/smallsql/database/Database.java|(4721,48,<132,1>,<134,2>),"isReadOnly",3,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(3479,180,<102,4>,<105,5>),"setInt",4,1>,<|project://smallsql/src/smallsql/database/UnionAll.java|(2757,90,<93,1>,<95,2>),"getLong",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(30964,327,<920,1>,<925,2>),"updateValue",6,2>,<|project://smallsql/src/smallsql/database/LongLongList.java|(1662,147,<55,1>,<59,2>),"get1",5,2>,<|project://smallsql/src/smallsql/database/ViewResult.java|(5811,74,<250,1>,<252,2>),"getRowPosition",3,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(13843,511,<388,4>,<400,5>),"writeLong",12,2>,<|project://smallsql/src/smallsql/database/TableView.java|(5331,37,<152,1>,<154,2>),"getName",3,1>,<|project://smallsql/src/smallsql/junit/TestExceptionMethods.java|(8853,759,<253,4>,<275,5>),"testClosedStatement",23,4>,<|project://smallsql/src/smallsql/database/MemoryStream.java|(1830,142,<61,1>,<65,2>),"writeShort",5,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|(1527,121,<48,1>,<52,2>),"isNull",5,2>,<|project://smallsql/src/smallsql/junit/BenchTest.java|(21576,2559,<507,4>,<558,5>),"test_UpdateRowsPrepareBatch",47,5>,<|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|(6706,90,<227,4>,<229,5>),"getSchemaName",3,1>,<|project://smallsql/src/smallsql/database/ViewResult.java|(3884,100,<148,1>,<150,2>),"getMoney",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|(1466,85,<39,4>,<41,5>),"getBoolean",3,1>,<|project://smallsql/src/smallsql/database/Money.java|(3115,180,<110,4>,<113,5>),"parseMoney",3,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(11380,118,<429,1>,<433,2>),"isClosed",4,1>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(11717,975,<348,4>,<373,5>),"getMoney",26,16>,<|project://smallsql/src/smallsql/database/DateTime.java|(19639,291,<635,1>,<642,2>),"formatNumber",8,3>,<|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|(1798,85,<56,1>,<58,2>),"isNull",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(18951,143,<454,1>,<459,2>),"setSQLXML",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionSubstring.java|(2405,442,<75,1>,<85,2>),"getString",11,3>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(9815,264,<285,4>,<289,5>),"setArray",4,1>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(4731,620,<154,1>,<166,2>),"testGroupByWithExpression",13,2>,<|project://smallsql/src/smallsql/database/IndexDescription.java|(4545,138,<149,1>,<151,2>),"getFile",3,1>,<|project://smallsql/src/smallsql/database/IndexDescription.java|(4691,541,<154,1>,<165,2>),"createFile",12,3>,<|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|(2544,102,<89,1>,<91,2>),"getMoney",3,1>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(5379,1073,<175,4>,<202,5>),"getInt",25,16>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(19217,130,<576,4>,<578,5>),"updateLong",3,1>,<|project://smallsql/src/smallsql/database/Scrollable.java|(5569,172,<239,4>,<244,5>),"isExpressionsFromThisRowSource",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(22495,180,<657,4>,<662,5>),"deleteRow",6,1>,<|project://smallsql/src/smallsql/database/Utils.java|(4578,114,<147,4>,<149,5>),"bytes2double",3,1>,<|project://smallsql/src/smallsql/database/Scrollable.java|(5025,45,<200,1>,<202,2>),"getRowPosition",3,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(11417,292,<323,4>,<327,5>),"setNull",4,1>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(13948,1555,<444,1>,<484,2>),"insertRow",36,12>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(13196,92,<367,4>,<369,5>),"readShort",3,1>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(28317,243,<727,4>,<732,5>),"getString",6,2>,<|project://smallsql/src/smallsql/junit/TestOrderBy.java|(12629,645,<467,1>,<490,2>),"testOrderBy_double",20,2>,<|project://smallsql/src/smallsql/database/Index.java|(11592,93,<314,1>,<316,2>),"findNull",3,1>,<|project://smallsql/src/smallsql/database/Utils.java|(4960,249,<160,4>,<167,5>),"bytes2int",8,2>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(11501,138,<329,4>,<331,5>),"getBigDecimal",3,1>,<|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|(2133,273,<65,4>,<72,5>),"isCurrency",8,3>,<|project://smallsql/src/smallsql/database/TableViewResult.java|(2286,48,<76,1>,<78,2>),"hasAlias",3,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(2462,441,<70,4>,<78,5>),"SSConnection",9,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionMod.java|(1478,93,<41,4>,<43,5>),"isNull",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|(4468,59,<133,1>,<135,2>),"getFloat",3,1>,<|project://smallsql/src/smallsql/junit/TestAlterTable.java|(2620,887,<72,4>,<92,5>),"testAddWithTableLock_REPEATABLE_READ",21,2>,<|project://smallsql/src/smallsql/database/LongList.java|(1546,63,<50,1>,<52,2>),"LongList",3,1>,<|project://smallsql/src/smallsql/database/MutableInteger.java|(1509,50,<47,1>,<49,2>),"doubleValue",3,1>,<|project://smallsql/src/smallsql/database/FileIndex.java|(2673,125,<80,4>,<82,5>),"FileIndex",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|(3046,88,<84,4>,<86,5>),"getPrecision",3,1>,<|project://smallsql/src/smallsql/database/Where.java|(3576,71,<144,1>,<146,2>),"getRowPosition",3,1>,<|project://smallsql/src/smallsql/database/DateTime.java|(2581,170,<81,1>,<83,2>),"calcMillis",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(34350,69,<930,4>,<932,5>),"updatesAreDetected",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(6561,364,<184,4>,<193,5>),"getTimestamp",10,3>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(12464,1478,<403,1>,<442,2>),"updateRow",35,11>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(5050,363,<177,4>,<190,5>),"add",14,3>,<|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|(7452,160,<245,4>,<247,5>),"getColumnTypeName",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(3312,73,<140,4>,<142,5>),"supportsMixedCaseIdentifiers",3,1>,<|project://smallsql/src/smallsql/database/MemoryStream.java|(3421,49,<119,1>,<121,2>),"readByte",3,1>,<|project://smallsql/src/smallsql/database/Where.java|(4129,172,<181,4>,<186,5>),"isExpressionsFromThisRowSource",3,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(30650,389,<867,4>,<877,5>),"createView",9,1>,<|project://smallsql/src/smallsql/junit/TestOperatoren.java|(11600,133,<261,4>,<263,5>),"main",3,1>,<|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|(1559,100,<45,1>,<47,2>),"noCurrentRow",3,1>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(4012,56,<141,1>,<144,2>),"next",4,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(34923,158,<1087,1>,<1092,2>),"updateNCharacterStream",4,1>,<|project://smallsql/src/smallsql/database/MutableFloat.java|(1669,52,<59,1>,<61,2>),"longValue",3,1>,<|project://smallsql/src/smallsql/database/ViewResult.java|(3560,98,<133,1>,<135,2>),"getLong",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(35160,64,<962,4>,<964,5>),"supportsSavepoints",3,1>,<|project://smallsql/src/smallsql/database/Table.java|(9303,205,<269,1>,<274,2>),"getLobStore",6,2>,<|project://smallsql/src/smallsql/database/NoFromResult.java|(1927,61,<74,1>,<77,2>),"next",4,1>,<|project://smallsql/src/smallsql/database/UnionAll.java|(5127,132,<211,1>,<214,2>),"getRowPosition",4,1>,<|project://smallsql/src/smallsql/database/DataSource.java|(2540,341,<82,4>,<93,5>),"isExpressionsFromThisRowSource",9,3>,<|project://smallsql/src/smallsql/database/ViewResult.java|(5892,111,<255,1>,<257,2>),"setRowPosition",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(8097,117,<231,4>,<233,5>),"getInt",3,1>,<|project://smallsql/src/smallsql/junit/TestTransactions.java|(15641,778,<427,1>,<446,2>),"testReadCommited",18,1>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(22651,311,<689,1>,<697,5>),"createUnsupportedConversion",8,1>,<|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|(2749,413,<85,1>,<100,2>),"isSignedDataType",16,11>,<|project://smallsql/src/smallsql/database/CommandDrop.java|(1441,179,<40,4>,<45,5>),"CommandDrop",6,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionLCase.java|(1494,59,<42,1>,<44,2>),"getFunction",3,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(4387,239,<126,4>,<132,5>),"setAutoCommit",7,3>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(18628,161,<440,1>,<445,2>),"setBlob",4,1>,<|project://smallsql/src/smallsql/database/TableResult.java|(4177,582,<140,1>,<156,2>),"insertRow",14,3>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(6393,2265,<193,4>,<238,5>),"compileLinkExpressionName",38,10>,<|project://smallsql/src/smallsql/database/IndexNode.java|(3957,168,<133,1>,<139,2>),"getValue",3,1>,<|project://smallsql/src/smallsql/database/Database.java|(9011,445,<266,4>,<274,5>),"checkForeignKeys",9,3>,<|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|(2320,252,<82,1>,<91,2>),"setParams",10,3>,<|project://smallsql/src/smallsql/database/TableResult.java|(10840,93,<394,1>,<397,5>),"getDataType",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|(4489,180,<194,1>,<200,2>),"getScale",7,2>,<|project://smallsql/src/smallsql/database/TableResult.java|(6810,133,<228,1>,<233,2>),"first",6,1>,<|project://smallsql/src/smallsql/database/Utils.java|(6094,228,<196,1>,<203,2>),"int2bytes",8,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionRadians.java|(1488,129,<40,4>,<43,5>),"getDouble",4,2>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(7591,504,<213,4>,<220,5>),"getRef",3,1>,<|project://smallsql/src/smallsql/database/SQLToken.java|(1515,146,<45,1>,<49,2>),"SQLToken",5,1>,<|project://smallsql/src/smallsql/database/ColumnExpression.java|(2066,46,<82,1>,<84,2>),"getScale",3,1>,<|project://smallsql/src/smallsql/junit/TestTransactions.java|(4602,975,<138,1>,<163,2>),"testRollback",21,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionRound.java|(1425,53,<38,4>,<38,57>),"getFunction",1,1>,<|project://smallsql/src/smallsql/database/Utils.java|(13669,247,<397,1>,<405,2>),"getInteger",6,3>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(12283,118,<339,1>,<343,2>),"isClosed",4,1>,<|project://smallsql/src/smallsql/database/TableResult.java|(9775,144,<359,1>,<362,5>),"getFloat",4,1>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(7383,144,<233,1>,<236,2>),"testMaxReal",4,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(38524,1051,<1093,4>,<1118,5>),"expressionDefList",24,6>,<|project://smallsql/src/smallsql/database/Table.java|(3458,288,<101,4>,<106,5>),"Table",3,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(4363,134,<164,4>,<167,5>),"setQueryTimeout",4,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(10108,188,<252,4>,<254,5>),"registerOutParameter",3,1>,<|project://smallsql/src/smallsql/database/View.java|(1611,813,<50,1>,<73,2>),"View",17,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(11820,58,<610,4>,<612,5>),"getMaxTablesInSelect",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(13461,161,<316,4>,<318,5>),"setObject",3,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(4234,119,<158,4>,<161,5>),"getQueryTimeout",4,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(8346,123,<237,4>,<239,5>),"getFloat",3,1>,<|project://smallsql/src/smallsql/junit/BenchTest.java|(12545,2566,<306,4>,<363,5>),"test_RowRequestPages",51,9>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(60000,146,<1542,4>,<1547,5>),"isRollback",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(5231,375,<145,4>,<154,5>),"getBigDecimal",10,3>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(38181,191,<1083,1>,<1088,2>),"getFunctions",5,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionRight.java|(1658,301,<52,1>,<61,2>),"getBytes",9,3>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(9555,200,<288,4>,<292,2>),"getDoubleImpl",5,2>,<|project://smallsql/src/smallsql/database/UnionAll.java|(5924,58,<244,1>,<247,2>),"noRow",4,1>,<|project://smallsql/src/smallsql/database/Utils.java|(4271,179,<133,1>,<139,2>),"double2long",7,3>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(5248,41,<208,1>,<210,2>),"nullRow",3,1>,<|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|(1945,90,<65,1>,<67,2>),"getDouble",3,1>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(6619,166,<206,1>,<209,2>),"testSumDecimal",4,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(9098,253,<237,4>,<240,5>),"getTime",3,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(19336,2557,<580,4>,<640,5>),"createTable",56,13>,<|project://smallsql/src/smallsql/junit/TestDBMetaData.java|(2814,1029,<75,4>,<86,5>),"testFunctions",12,1>,<|project://smallsql/src/smallsql/junit/TestExceptions.java|(3772,986,<86,4>,<111,5>),"runTest",26,6>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(35912,162,<1129,1>,<1134,2>),"updateBinaryStream",4,1>,<|project://smallsql/src/smallsql/database/Scrollable.java|(2255,65,<78,1>,<80,2>),"isFirst",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(34196,146,<1056,1>,<1061,2>),"updateSQLXML",4,1>,<|project://smallsql/src/smallsql/database/TableResult.java|(6703,96,<220,1>,<225,2>),"beforeFirst",6,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(10943,153,<408,4>,<412,5>),"checkStatement",5,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(10748,58,<535,4>,<537,5>),"getMaxColumnsInIndex",3,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(13831,142,<455,1>,<460,2>),"setClientInfo",4,1>,<|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|(2042,88,<70,1>,<72,2>),"getFloat",3,1>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(17345,77,<557,1>,<559,5>),"setOrder",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|(3853,142,<134,1>,<137,2>),"getString",4,2>,<|project://smallsql/src/smallsql/database/SQLParser.java|(10018,211,<294,1>,<302,2>),"lastToken",6,2>,<|project://smallsql/src/smallsql/database/ViewResult.java|(5372,82,<225,1>,<227,2>),"isAfterLast",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(18472,151,<433,1>,<438,2>),"setClob",4,1>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(8012,637,<246,1>,<258,5>),"getLongImpl",13,9>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(11046,142,<268,4>,<270,5>),"setBoolean",3,1>,<|project://smallsql/src/smallsql/junit/TestTokenizer.java|(2192,282,<73,1>,<82,2>),"createTable",9,1>,<|project://smallsql/src/smallsql/database/Index.java|(5028,3047,<139,1>,<217,2>),"findRows",65,33>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(14688,69,<461,4>,<463,5>),"setFetchSize",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|(1957,357,<67,1>,<80,2>),"setEnd",11,4>,<|project://smallsql/src/smallsql/database/DateTime.java|(2035,537,<57,1>,<78,2>),"DateTime",22,6>,<|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|(1520,780,<44,1>,<68,2>),"mapIntervalType",25,11>,<|project://smallsql/src/smallsql/junit/TestOrderBy.java|(13282,638,<493,1>,<516,2>),"testOrderBy_real",20,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(2491,62,<95,4>,<97,5>),"nullsAreSortedAtEnd",3,1>,<|project://smallsql/src/smallsql/database/MutableFloat.java|(1507,50,<47,1>,<49,2>),"doubleValue",3,1>,<|project://smallsql/src/smallsql/database/ViewResult.java|(5055,76,<205,1>,<207,2>),"previous",3,1>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(9168,128,<290,1>,<293,2>),"testMin",4,1>,<|project://smallsql/src/smallsql/database/FileIndex.java|(3332,258,<101,4>,<107,5>),"save",7,2>,<|project://smallsql/src/smallsql/database/Index.java|(11930,392,<328,1>,<341,2>),"find",12,5>,<|project://smallsql/src/smallsql/junit/TestDBMetaData.java|(7095,656,<155,4>,<171,5>),"testGetTableTypes",17,2>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(1561,166,<45,4>,<51,5>),"ExpressionValue",4,1>,<|project://smallsql/src/smallsql/database/NoFromResult.java|(2789,48,<128,1>,<130,2>),"rowDeleted",3,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(15383,148,<478,1>,<483,2>),"setBlob",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionTruncate.java|(1431,56,<38,4>,<38,60>),"getFunction",1,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionLCase.java|(1560,72,<47,1>,<49,2>),"isNull",3,1>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(3853,186,<129,4>,<132,5>),"MutableNumeric",3,1>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(6314,144,<196,1>,<199,2>),"testSumReal",4,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(11875,249,<380,4>,<384,5>),"prepareStatement",5,1>,<|project://smallsql/src/smallsql/junit/TestTransactions.java|(10101,2533,<290,1>,<336,5>),"testUpdateAndSavepoint",34,1>,<|project://smallsql/src/smallsql/database/NoFromResult.java|(1616,44,<51,1>,<53,2>),"beforeFirst",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionRTrim.java|(1969,272,<65,1>,<73,2>),"getString",9,4>,<|project://smallsql/src/smallsql/database/TableStorePage.java|(2218,57,<76,4>,<78,5>),"freeLock",3,1>,<|project://smallsql/src/smallsql/database/Where.java|(3654,108,<149,1>,<151,2>),"setRowPosition",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(12837,81,<658,4>,<660,5>),"dataDefinitionIgnoredInTransactions",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|(3406,79,<139,1>,<141,2>),"getFloat",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|(2730,129,<111,1>,<115,2>),"getString",5,2>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(32403,129,<974,1>,<978,2>),"updateRowId",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(1932,234,<56,4>,<59,5>),"getValue",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionUCase.java|(1494,59,<42,1>,<44,2>),"getFunction",3,1>,<|project://smallsql/src/smallsql/database/Expression.java|(2080,45,<63,1>,<65,2>),"getName",3,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(7147,476,<178,4>,<188,5>),"loadUpdatedStore",6,2>,<|project://smallsql/src/smallsql/database/IndexNode.java|(8384,452,<278,1>,<294,2>),"moveRemainderValue",12,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionDayOfYear.java|(1561,175,<48,1>,<52,2>),"getInt",5,2>,<|project://smallsql/src/smallsql/database/RowSource.java|(3328,106,<127,1>,<129,2>),"relative",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(18794,152,<447,1>,<452,2>),"setNClob",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|(2446,140,<97,1>,<101,2>),"getNumeric",5,2>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(11108,303,<318,4>,<322,5>),"setTimestamp",4,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(32265,133,<968,1>,<972,2>),"getRowId",4,1>,<|project://smallsql/src/smallsql/database/MutableLong.java|(1502,50,<47,1>,<49,2>),"doubleValue",3,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(2273,104,<65,4>,<68,5>),"executeUpdate",4,1>,<|project://smallsql/src/smallsql/database/IndexDescriptions.java|(3304,114,<122,1>,<126,2>),"drop",5,2>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(25805,151,<753,1>,<758,2>),"setNCharacterStream",4,1>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(34049,730,<914,1>,<936,2>),"getBestNumberDataType",14,6>,<|project://smallsql/src/smallsql/database/ExpressionFunctionRTrim.java|(1494,59,<42,1>,<44,2>),"getFunction",3,1>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(7803,224,<271,4>,<277,5>),"mul",6,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(16081,143,<508,4>,<510,5>),"updateInt",3,1>,<|project://smallsql/src/smallsql/database/Utils.java|(7207,261,<227,4>,<232,5>),"hexDigit2int",6,5>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(25009,161,<718,1>,<723,2>),"setBinaryStream",4,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(16523,146,<517,4>,<519,5>),"updateDouble",3,1>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(18644,9508,<530,4>,<718,5>),"getBoolean",188,124>,<|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|(1566,72,<47,1>,<49,2>),"isNull",3,1>,<|project://smallsql/src/smallsql/database/UnionAll.java|(3156,106,<113,1>,<115,2>),"getNumeric",3,1>,<|project://smallsql/src/smallsql/database/SortedResult.java|(7427,60,<281,1>,<285,2>),"nullRow",4,1>,<|project://smallsql/src/smallsql/junit/TestJoins.java|(10182,245,<195,4>,<201,5>),"suite",7,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|(4787,180,<208,1>,<213,2>),"getResult",6,3>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(23194,229,<687,4>,<694,5>),"moveToInsertRow",8,2>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(16872,129,<385,4>,<387,5>),"getBlob",3,1>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(14338,1837,<417,4>,<471,5>),"getNumericImpl",55,11>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(21625,276,<629,4>,<637,5>),"testNotInsertRow",5,2>,<|project://smallsql/src/smallsql/database/TableResult.java|(9924,147,<364,1>,<367,5>),"getDouble",4,1>,<|project://smallsql/src/smallsql/database/Table.java|(5876,335,<171,4>,<184,5>),"close",11,3>,<|project://smallsql/src/smallsql/database/SmallSQLException.java|(5057,352,<156,4>,<165,5>),"createFromException",10,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(12742,83,<653,4>,<655,5>),"dataDefinitionCausesTransactionCommit",3,1>,<|project://smallsql/src/smallsql/database/Expressions.java|(1499,66,<47,1>,<49,2>),"Expressions",3,1>,<|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|(2618,90,<100,1>,<102,2>),"getString",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionYear.java|(1481,58,<43,1>,<45,2>),"getFunction",3,1>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(22049,42,<659,1>,<661,2>),"getTableName",3,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(9828,64,<324,4>,<326,5>),"getHoldability",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|(3945,79,<169,1>,<171,2>),"getBytes",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(33215,133,<1012,1>,<1016,2>),"updateNClob",3,1>,<|project://smallsql/src/smallsql/database/Scrollable.java|(5391,56,<226,1>,<229,2>),"noRow",4,1>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(7818,95,<323,1>,<328,2>),"getRowCount",3,1>,<|project://smallsql/src/smallsql/database/SortedResult.java|(6541,431,<236,4>,<252,5>),"relative",17,7>,<|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|(2102,99,<69,1>,<71,2>),"getInt",3,1>,<|project://smallsql/src/smallsql/database/IndexDescription.java|(3125,645,<99,1>,<118,2>),"matchFactor",14,5>,<|project://smallsql/src/smallsql/database/Command.java|(2719,207,<93,4>,<100,5>),"clearParams",5,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|(3715,131,<128,1>,<131,2>),"getObject",4,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(37572,161,<1058,1>,<1063,2>),"getSchemas",5,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(35584,157,<1115,1>,<1120,2>),"updateCharacterStream",4,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(6267,359,<193,4>,<202,5>),"rollback",10,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|(2021,211,<65,4>,<70,5>),"getNumeric",6,3>,<|project://smallsql/src/smallsql/database/SQLParser.java|(10567,904,<315,4>,<335,5>),"nextToken",20,9>,<|project://smallsql/src/smallsql/database/DateTime.java|(8670,41,<291,1>,<293,2>),"getTimeMillis",3,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(8732,173,<328,4>,<331,5>),"setNeedGeneratedKeys",4,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(20206,130,<597,4>,<599,5>),"updateTime",3,1>,<|project://smallsql/src/smallsql/database/DateTime.java|(21675,92,<710,1>,<712,2>),"getDate",3,1>,<|project://smallsql/src/smallsql/database/Command.java|(2404,307,<83,4>,<91,5>),"verifyParams",6,3>,<|project://smallsql/src/smallsql/database/ViewResult.java|(1750,401,<56,1>,<69,2>),"ViewResult",9,2>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(37524,145,<1199,1>,<1204,2>),"updateAsciiStream",4,1>,<|project://smallsql/src/smallsql/database/ColumnExpression.java|(2001,58,<77,1>,<79,2>),"getDisplaySize",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(20202,134,<510,1>,<514,2>),"setClob",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(5890,67,<240,4>,<242,5>),"supportsColumnAliasing",3,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(10815,281,<357,4>,<363,5>),"releaseSavepoint",7,2>,<|project://smallsql/src/smallsql/database/ExpressionFunction.java|(3524,451,<113,4>,<123,5>),"createUnspportedConversion",7,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(11237,62,<570,4>,<572,5>),"getMaxSchemaNameLength",3,1>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(6371,99,<262,1>,<264,2>),"getNumeric",3,1>,<|project://smallsql/src/smallsql/junit/TestDBMetaData.java|(10665,1763,<224,4>,<254,5>),"testGetCrossReference",25,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(26228,4410,<748,4>,<865,5>),"datatype",107,42>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(15891,63,<449,4>,<451,5>),"writeTimestamp",3,1>,<|project://smallsql/src/smallsql/database/CommandCreateView.java|(1450,137,<42,4>,<46,5>),"CommandCreateView",5,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(9873,70,<480,4>,<482,5>),"supportsCorrelatedSubqueries",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(18642,474,<787,4>,<795,5>),"getVersionColumns",9,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|(2654,116,<94,1>,<96,2>),"getNumeric",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(6215,74,<260,4>,<262,5>),"supportsTableCorrelationNames",3,1>,<|project://smallsql/src/smallsql/database/Column.java|(3406,54,<115,4>,<117,5>),"isNullable",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionTruncate.java|(1599,529,<45,4>,<68,5>),"getDouble",24,6>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(38747,134,<1255,1>,<1259,2>),"updateClob",3,1>,<|project://smallsql/src/smallsql/junit/TestResultSet.java|(5880,1303,<154,4>,<182,5>),"testUpdate",24,1>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(8027,167,<257,1>,<260,2>),"testMaxNumeric",4,1>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(5094,272,<163,1>,<171,2>),"equals",6,4>,<|project://smallsql/src/smallsql/database/Utils.java|(6330,321,<205,4>,<212,5>),"bytes2hex",8,2>,<|project://smallsql/src/smallsql/database/MutableInteger.java|(1450,53,<43,1>,<45,2>),"MutableInteger",3,1>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(16193,2433,<474,4>,<527,5>),"getObject",53,33>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(9955,55,<485,4>,<487,5>),"supportsUnion",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(1948,248,<57,4>,<62,5>),"SSResultSet",6,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|(3434,55,<96,1>,<98,2>),"getDataType",3,1>,<|project://smallsql/src/smallsql/database/UnionAll.java|(3576,80,<133,1>,<135,2>),"getDataType",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(11116,379,<319,4>,<328,5>),"getBigDecimal",10,3>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(34431,91,<935,4>,<937,5>),"deletesAreDetected",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionLocate.java|(1484,54,<43,1>,<45,2>),"getFunction",3,1>,<|project://smallsql/src/smallsql/junit/AllTests.java|(1799,406,<53,4>,<62,2>),"createConnection",5,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(19492,136,<582,4>,<584,5>),"updateDouble",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(28864,230,<857,4>,<860,5>),"updateClob",3,1>,<|project://smallsql/src/smallsql/database/ViewResult.java|(5734,68,<245,1>,<247,2>),"getRow",3,1>,<|project://smallsql/src/smallsql/database/Identity.java|(2753,175,<88,1>,<94,2>),"setNextValue",7,2>,<|project://smallsql/src/smallsql/database/UnionAll.java|(5266,432,<217,1>,<225,2>),"setRowPosition",7,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(10682,254,<308,4>,<311,5>),"getCharacterStream",3,1>,<|project://smallsql/src/smallsql/junit/BasicTestCase.java|(2348,221,<74,4>,<80,5>),"dropView",7,2>,<|project://smallsql/src/smallsql/junit/TestScrollable.java|(7663,1069,<182,1>,<200,2>),"testAbsoluteRelative",17,1>,<|project://smallsql/src/smallsql/database/ExpressionFunction.java|(3083,433,<101,4>,<111,5>),"createUnspportedDataType",7,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(9092,80,<344,4>,<346,5>),"getGeneratedKeyNames",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionDayOfMonth.java|(1564,167,<48,1>,<52,2>),"getInt",5,2>,<|project://smallsql/src/smallsql/database/ViewResult.java|(5140,69,<210,1>,<212,2>),"next",3,1>,<|project://smallsql/src/smallsql/database/NoFromResult.java|(2955,72,<143,1>,<143,73>),"execute",1,1>,<|project://smallsql/src/smallsql/database/UnionAll.java|(4211,168,<163,1>,<169,2>),"first",7,2>,<|project://smallsql/src/smallsql/database/IndexNode.java|(6480,873,<229,1>,<244,2>),"addRemainderKey",4,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnString.java|(1819,115,<60,1>,<63,2>),"getLong",4,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(13814,1812,<677,4>,<727,5>),"getTables",49,13>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(9788,73,<475,4>,<477,5>),"supportsSubqueriesInQuantifieds",3,1>,<|project://smallsql/src/smallsql/database/Database.java|(5375,359,<160,1>,<173,2>),"close",11,2>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(27394,154,<813,4>,<815,5>),"getTimestamp",3,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(3677,182,<108,4>,<111,5>),"setLong",4,1>,<|project://smallsql/src/smallsql/database/Table.java|(9522,198,<278,1>,<284,5>),"getFirstPage",3,1>,<|project://smallsql/src/smallsql/database/Utils.java|(12105,410,<347,4>,<359,5>),"indexOf",13,4>,<|project://smallsql/src/smallsql/junit/TestOrderBy.java|(15290,824,<572,1>,<604,2>),"test_boolean",29,5>,<|project://smallsql/src/smallsql/database/SSSavepoint.java|(1537,140,<48,1>,<52,2>),"SSSavepoint",5,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(15024,344,<447,4>,<458,5>),"delete",12,3>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(12482,133,<298,4>,<300,5>),"setDate",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(17166,457,<762,4>,<766,5>),"getColumnPrivileges",4,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(6644,484,<205,4>,<218,5>),"rollback",14,2>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(6286,113,<181,4>,<184,5>),"clearParameters",4,1>,<|project://smallsql/src/smallsql/junit/TestDBMetaData.java|(4400,679,<99,4>,<106,5>),"testGetProcedureColumns",8,1>,<|project://smallsql/src/smallsql/database/LongTreeList.java|(17649,41,<620,1>,<622,2>),"getSize",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java|(2258,118,<74,1>,<77,2>),"getMoney",4,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionLeft.java|(1557,91,<47,1>,<49,2>),"isNull",3,1>,<|project://smallsql/src/smallsql/junit/TestAlterTable2.java|(1126,573,<41,4>,<50,5>),"testAddPrimaryKey",10,1>,<|project://smallsql/src/smallsql/junit/TestOther.java|(3460,103,<85,1>,<87,2>),"testConstantAndRowPos",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(2834,118,<115,4>,<117,5>),"getDriverVersion",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(33771,132,<1037,1>,<1041,2>),"getSQLXML",4,1>,<|project://smallsql/src/smallsql/database/StoreNull.java|(2203,78,<84,1>,<86,2>),"getInt",3,1>,<|project://smallsql/src/smallsql/junit/TestThreads.java|(1850,1874,<72,4>,<121,5>),"testConcurrentThreadWrite",35,5>,<|project://smallsql/src/smallsql/database/Join.java|(3556,315,<139,4>,<147,5>),"execute",7,2>,<|project://smallsql/src/smallsql/database/IndexNode.java|(9364,234,<312,1>,<317,2>),"saveRemainderValue",6,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(5625,253,<234,4>,<237,5>),"supportsAlterTableWithDropColumn",3,1>,<|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|(1666,77,<50,1>,<52,2>),"isNull",3,1>,<|project://smallsql/src/smallsql/database/Expression.java|(3134,633,<106,1>,<128,2>),"equals",19,11>,<|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|(3311,240,<108,1>,<117,2>),"isBinaryDataType",10,5>,<|project://smallsql/src/smallsql/database/Scrollable.java|(2329,72,<83,1>,<86,2>),"first",4,1>,<|project://smallsql/src/smallsql/junit/TestLanguage.java|(1914,60,<56,1>,<58,2>),"setUp",3,1>,<|project://smallsql/src/smallsql/database/IndexDescription.java|(5250,1192,<168,4>,<195,5>),"load",28,7>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(21008,127,<547,1>,<551,2>),"unwrap",4,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(11354,231,<370,4>,<373,5>),"prepareStatement",3,1>,<|project://smallsql/src/smallsql/database/MemoryStream.java|(3358,54,<114,4>,<116,5>),"skip",3,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(11992,286,<333,4>,<337,5>),"getParameterMetaData",4,1>,<|project://smallsql/src/smallsql/database/Identity.java|(3002,65,<101,1>,<104,2>),"doubleValue",4,1>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(3776,73,<127,1>,<129,2>),"isFirst",3,1>,<|project://smallsql/src/smallsql/database/DateTime.java|(8780,919,<301,4>,<330,2>),"toString",26,6>,<|project://smallsql/src/smallsql/database/ExpressionFunctionCeiling.java|(1426,55,<38,4>,<38,59>),"getFunction",1,1>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(3020,516,<101,4>,<117,5>),"MutableNumeric",17,3>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(9017,258,<270,4>,<274,5>),"setRef",4,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(14114,152,<328,4>,<330,5>),"setTime",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(20494,135,<523,1>,<527,2>),"setNClob",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(17107,146,<529,4>,<531,5>),"updateDate",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(33353,140,<1018,1>,<1023,2>),"updateNClob",4,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(6651,178,<194,4>,<197,5>),"setObject",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionLTrim.java|(1639,376,<52,1>,<64,2>),"getBytes",13,4>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(34347,133,<1063,1>,<1067,2>),"getNString",4,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(13836,152,<409,1>,<414,2>),"setNClob",4,1>,<|project://smallsql/src/smallsql/database/LongTreeList.java|(16315,228,<565,1>,<575,2>),"getPointer",8,2>,<|project://smallsql/src/smallsql/database/MemoryStream.java|(2856,166,<96,1>,<100,2>),"writeBytes",5,1>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(9451,392,<259,4>,<266,5>),"compileAdd_All_Table_Columns",8,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(1906,220,<62,4>,<67,5>),"getURL",6,2>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(2905,107,<96,4>,<99,5>),"MutableNumeric",4,1>,<|project://smallsql/src/smallsql/database/NoFromResult.java|(2177,42,<92,1>,<94,2>),"afterLast",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(8176,61,<380,4>,<382,5>),"isCatalogAtStart",3,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(8191,115,<264,4>,<268,5>),"getCatalog",5,2>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(8836,848,<315,1>,<342,2>),"divImpl",27,11>,<|project://smallsql/src/smallsql/database/Distinct.java|(1939,80,<70,1>,<73,2>),"first",4,1>,<|project://smallsql/src/smallsql/database/Expression.java|(1934,46,<55,1>,<57,2>),"Expression",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(3648,79,<160,4>,<162,5>),"supportsMixedCaseQuotedIdentifiers",3,1>,<|project://smallsql/src/smallsql/database/Database.java|(9470,775,<277,4>,<293,5>),"createTable",7,1>,<|project://smallsql/src/smallsql/database/Utils.java|(12523,527,<361,4>,<374,5>),"compareBytes",14,7>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(10091,417,<292,4>,<305,5>),"getMetaData",14,3>,<|project://smallsql/src/smallsql/database/language/Language.java|(9234,665,<196,1>,<215,2>),"getLanguage",8,2>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(9898,42,<354,1>,<356,5>),"getScale",3,1>,<|project://smallsql/src/smallsql/database/Join.java|(2648,32,<94,1>,<96,2>),"getRow",3,1>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(7081,132,<221,1>,<224,2>),"testMaxString",4,1>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(13061,92,<396,4>,<398,5>),"getBoolean",3,1>,<|project://smallsql/src/smallsql/database/DateTime.java|(4539,148,<155,1>,<158,2>),"valueOf",4,2>,<|project://smallsql/src/smallsql/database/SSStatement.java|(2489,135,<91,4>,<94,5>),"executeUpdate",4,1>,<|project://smallsql/src/smallsql/database/Expression.java|(4807,42,<171,1>,<173,2>),"getTableName",3,1>,<|project://smallsql/src/smallsql/database/SortedResult.java|(3157,108,<108,4>,<112,2>),"beforeFirst",5,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionLog10.java|(1483,133,<40,4>,<43,5>),"getDouble",4,2>,<|project://smallsql/src/smallsql/database/Join.java|(3282,162,<121,4>,<128,5>),"nullRow",5,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(13993,143,<416,1>,<421,2>),"setSQLXML",4,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(36899,152,<1171,1>,<1176,2>),"updateNClob",4,1>,<|project://smallsql/src/smallsql/database/LongTreeList.java|(13553,552,<472,1>,<487,2>),"insertNodeLastLevel",8,2>,<|project://smallsql/src/smallsql/database/UnionAll.java|(5781,65,<233,1>,<235,2>),"rowDeleted",3,1>,<|project://smallsql/src/smallsql/database/CommandTable.java|(1956,312,<56,4>,<65,5>),"addColumn",3,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(1659,164,<48,4>,<50,5>),"SSPreparedStatement",3,1>,<|project://smallsql/src/smallsql/junit/TestJoins.java|(5353,858,<109,4>,<126,5>),"setUp",17,1>,<|project://smallsql/src/smallsql/junit/TestDataTypes.java|(13004,262,<327,4>,<333,5>),"suite",7,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|(1731,60,<51,1>,<53,2>),"getFunction",3,1>,<|project://smallsql/src/smallsql/database/Join.java|(2249,88,<71,4>,<74,5>),"first",4,1>,<|project://smallsql/src/smallsql/database/IndexNode.java|(4468,61,<158,1>,<160,2>),"getRemainderValue",3,1>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(2829,66,<84,1>,<86,2>),"addRow",3,1>,<|project://smallsql/src/smallsql/database/MutableInteger.java|(1785,74,<67,1>,<69,2>),"getImmutableObject",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|(1469,51,<43,1>,<45,2>),"getFunction",3,1>,<|project://smallsql/src/smallsql/database/Utils.java|(8778,2364,<269,4>,<315,5>),"bytes2unique",42,2>,<|project://smallsql/src/smallsql/database/Database.java|(6931,367,<205,4>,<215,5>),"dropTable",11,2>,<|project://smallsql/src/smallsql/database/Command.java|(2313,80,<78,4>,<80,5>),"addParameter",3,1>,<|project://smallsql/src/smallsql/junit/TestAlterTable2.java|(2472,575,<71,4>,<80,5>),"testAdd2Keys",10,1>,<|project://smallsql/src/smallsql/database/TransactionStep.java|(1551,74,<48,4>,<50,5>),"TransactionStep",3,1>,<|project://smallsql/src/smallsql/database/Column.java|(2702,59,<85,4>,<87,5>),"isAutoIncrement",3,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(57166,2557,<1466,4>,<1527,5>),"scanObjectOffsets",62,36>,<|project://smallsql/src/smallsql/junit/TestDBMetaData.java|(1488,40,<44,1>,<46,2>),"TestDBMetaData",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|(2593,129,<104,1>,<108,2>),"getObject",5,2>,<|project://smallsql/src/smallsql/database/Store.java|(2328,174,<69,1>,<75,2>),"isValidPage",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|(7256,362,<243,1>,<256,2>),"getPrecision",14,7>,<|project://smallsql/src/smallsql/database/SSStatement.java|(8915,76,<334,4>,<336,5>),"needGeneratedKeys",3,1>,<|project://smallsql/src/smallsql/database/SmallSQLException.java|(2596,679,<83,4>,<103,5>),"setLanguage",9,4>,<|project://smallsql/src/smallsql/database/ExpressionFunctionPI.java|(1546,74,<44,4>,<46,5>),"getDouble",3,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(3984,603,<117,4>,<132,5>),"createSyntaxError",5,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(36875,57,<1021,4>,<1023,5>),"getJDBCMinorVersion",3,1>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(2503,394,<80,4>,<94,5>),"MutableNumeric",15,3>,<|project://smallsql/src/smallsql/database/TableResult.java|(3118,138,<103,1>,<107,2>),"deleteRow",5,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(19099,158,<461,1>,<466,2>),"setAsciiStream",4,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(35746,161,<1122,1>,<1127,2>),"updateAsciiStream",4,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(28468,230,<846,4>,<849,5>),"updateBlob",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionSpace.java|(1988,61,<66,1>,<68,2>),"getDataType",3,1>,<|project://smallsql/src/smallsql/database/IndexNode.java|(8212,163,<272,1>,<275,2>),"addRootValue",4,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(16376,141,<514,4>,<516,5>),"updateFloat",3,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(6020,128,<234,4>,<237,5>),"getResultSetConcurrency",4,1>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(7115,888,<219,1>,<243,5>),"getLong",25,16>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(8685,83,<410,4>,<412,5>),"supportsSchemasInPrivilegeDefinitions",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(18167,162,<420,1>,<425,2>),"setNCharacterStream",4,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(23408,135,<651,1>,<655,2>),"getSQLXML",4,1>,<|project://smallsql/src/smallsql/database/UnionAll.java|(4711,171,<187,1>,<192,2>),"afterLast",6,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(9151,135,<255,4>,<257,5>),"getTimestamp",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|(3514,67,<117,1>,<119,2>),"getMoney",3,1>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(4356,77,<160,1>,<163,2>),"afterLast",4,1>,<|project://smallsql/src/smallsql/database/CommandDelete.java|(1473,269,<48,1>,<58,2>),"executeImpl",10,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|(3151,85,<124,1>,<126,2>),"getBoolean",3,1>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(8203,167,<263,1>,<266,2>),"testMaxDate",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionSubstring.java|(1548,63,<44,1>,<46,2>),"getFunction",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(4561,107,<205,4>,<207,5>),"getStringFunctions",3,1>,<|project://smallsql/src/smallsql/junit/TestStatement.java|(9479,2934,<243,4>,<304,5>),"testGeneratedKeysWithPrepare",55,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|(4917,106,<160,1>,<163,2>),"getString",4,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(33410,293,<892,4>,<897,5>),"supportsResultSetConcurrency",6,5>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(12366,74,<455,4>,<457,5>),"intValue",3,1>,<|project://smallsql/src/smallsql/junit/TestDBMetaData.java|(12446,2219,<257,4>,<289,5>),"testGetBestRowIdentifier",29,1>,<|project://smallsql/src/smallsql/database/MutableLong.java|(1557,48,<51,1>,<53,2>),"floatValue",3,1>,<|project://smallsql/src/smallsql/database/Scrollable.java|(5455,96,<232,1>,<236,2>),"execute",5,1>,<|project://smallsql/src/smallsql/database/SSDriver.java|(3831,341,<112,4>,<118,5>),"getPropertyInfo",7,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(5731,311,<168,4>,<172,5>),"setUnicodeStream",4,1>,<|project://smallsql/src/smallsql/junit/TestAlterTable.java|(1958,648,<57,4>,<69,5>),"testAdd2Column",13,2>,<|project://smallsql/src/smallsql/database/NoFromResult.java|(2645,78,<118,1>,<120,2>),"setRowPosition",3,1>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(16036,375,<503,1>,<514,2>),"findColumn",8,3>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(38377,227,<1090,1>,<1096,2>),"getFunctionColumns",6,1>,<|project://smallsql/src/smallsql/junit/BasicTestCase.java|(3529,284,<102,1>,<109,2>),"bytes2hex",8,2>,<|project://smallsql/src/smallsql/database/TableResult.java|(10386,147,<379,1>,<382,5>),"getObject",4,1>,<|project://smallsql/src/smallsql/database/Columns.java|(1893,562,<64,4>,<81,5>),"get",9,3>,<|project://smallsql/src/smallsql/database/IndexScrollStatus.java|(2347,2542,<66,1>,<147,2>),"getRowOffset",69,16>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(3615,67,<118,1>,<121,2>),"beforeFirst",4,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(7842,120,<225,4>,<227,5>),"getByte",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionPI.java|(1474,64,<40,4>,<42,5>),"isNull",3,1>,<|project://smallsql/src/smallsql/database/MemoryStream.java|(1580,141,<51,1>,<54,2>),"writeTo",4,1>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(4256,91,<156,1>,<158,2>),"isAfterLast",3,1>,<|project://smallsql/src/smallsql/database/NoFromResult.java|(1731,51,<59,1>,<61,2>),"isFirst",3,1>,<|project://smallsql/src/smallsql/database/Column.java|(2648,46,<81,4>,<83,5>),"getName",3,1>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(3410,1196,<107,4>,<137,5>),"convertExpressionIfNeeded",31,17>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(21520,900,<621,1>,<646,5>),"readColumn",19,3>,<|project://smallsql/src/smallsql/database/SQLParser.java|(5667,1705,<165,4>,<214,5>),"getErrorString",28,4>,<|project://smallsql/src/smallsql/database/ExpressionFunctionATan2.java|(1584,145,<44,4>,<47,5>),"getDouble",4,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionCharLen.java|(1632,75,<48,4>,<50,5>),"isNull",3,1>,<|project://smallsql/src/smallsql/database/GroupResult.java|(7203,583,<202,1>,<226,2>),"execute",20,7>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(7412,145,<214,4>,<216,5>),"getBinaryStream",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|(4676,119,<148,1>,<151,2>),"getNumeric",4,2>,<|project://smallsql/src/smallsql/database/language/Language_de.java|(1503,55,<43,1>,<45,2>),"getEntries",3,1>,<|project://smallsql/src/smallsql/database/Scrollable.java|(5077,90,<205,1>,<207,2>),"setRowPosition",3,1>,<|project://smallsql/src/smallsql/junit/TestFunctions.java|(23670,253,<406,4>,<412,5>),"suite",7,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(11463,51,<585,4>,<587,5>),"getMaxRowSize",3,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(12704,183,<348,4>,<353,5>),"writeBoolean",5,3>,<|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|(2583,301,<94,4>,<106,5>),"setParamAt",13,3>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(2840,210,<84,4>,<87,5>),"setBoolean",4,2>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(20670,173,<606,4>,<608,5>),"updateBinaryStream",3,1>,<|project://smallsql/src/smallsql/database/UnionAll.java|(2854,93,<98,1>,<100,2>),"getFloat",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnString.java|(2197,118,<78,1>,<81,2>),"getMoney",4,2>,<|project://smallsql/src/smallsql/database/MemoryStream.java|(3776,392,<137,1>,<146,2>),"readLong",10,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|(2462,59,<82,1>,<84,2>),"getDataType",3,1>,<|project://smallsql/src/smallsql/database/ExpressionName.java|(2433,91,<78,4>,<80,5>),"getBoolean",3,1>,<|project://smallsql/src/smallsql/database/Distinct.java|(2659,71,<107,1>,<109,2>),"getRowPosition",3,1>,<|project://smallsql/src/smallsql/database/Identity.java|(3072,64,<106,1>,<109,2>),"intValue",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionRepeat.java|(1604,351,<49,1>,<58,2>),"getBytes",10,3>,<|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|(2306,171,<70,1>,<73,2>),"ExpressionFunctionTimestampDiff",4,1>,<|project://smallsql/src/smallsql/database/NoFromResult.java|(1558,49,<46,1>,<48,2>),"isScrollable",3,1>,<|project://smallsql/src/smallsql/junit/TestMoneyRounding.java|(1787,301,<53,4>,<62,5>),"tearDown",9,2>,<|project://smallsql/src/smallsql/database/Utils.java|(8359,411,<260,4>,<267,5>),"hex2byte",8,2>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(20929,583,<604,4>,<618,5>),"writeColumn",14,3>,<|project://smallsql/src/smallsql/database/TableView.java|(2638,1483,<75,1>,<114,2>),"load",37,10>,<|project://smallsql/src/smallsql/junit/TestDeleteUpdate.java|(4914,918,<143,1>,<161,2>),"testUpdateMultiTables",17,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(4119,311,<122,4>,<130,5>),"getLong",9,2>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(29088,522,<761,1>,<781,2>),"getScale",21,9>,<|project://smallsql/src/smallsql/database/ViewResult.java|(5465,68,<230,1>,<232,2>),"afterLast",3,1>,<|project://smallsql/src/smallsql/database/Database.java|(3750,908,<104,4>,<126,5>),"Database",16,4>,<|project://smallsql/src/smallsql/database/ColumnExpression.java|(1810,64,<62,1>,<64,2>),"isCaseSensitive",3,1>,<|project://smallsql/src/smallsql/database/Expressions.java|(1574,37,<52,1>,<54,2>),"size",3,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(13680,146,<448,1>,<453,2>),"setClientInfo",4,1>,<|project://smallsql/src/smallsql/database/Expressions.java|(3167,163,<130,1>,<134,2>),"resize",5,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(9025,120,<252,4>,<254,5>),"getTime",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionLTrim.java|(1494,59,<42,1>,<44,2>),"getFunction",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(11031,55,<555,4>,<557,5>),"getMaxConnections",3,1>,<|project://smallsql/src/smallsql/database/IndexScrollStatus.java|(2066,273,<56,1>,<63,2>),"reset",5,1>,<|project://smallsql/src/smallsql/database/TableViewMap.java|(2213,90,<64,4>,<66,5>),"get",3,1>,<|project://smallsql/src/smallsql/database/language/Language.java|(13314,178,<340,1>,<344,2>),"getSqlState",5,1>,<|project://smallsql/src/smallsql/database/language/Language_it.java|(1446,54,<39,1>,<41,2>),"Language_it",3,1>,<|project://smallsql/src/smallsql/database/Table.java|(7421,266,<220,1>,<227,2>),"writeMagic",8,1>,<|project://smallsql/src/smallsql/database/Column.java|(3249,64,<107,4>,<109,5>),"isCaseSensitive",3,1>,<|project://smallsql/src/smallsql/database/TableStorePageInsert.java|(1989,205,<56,1>,<64,2>),"commit",6,1>,<|project://smallsql/src/smallsql/database/Lobs.java|(1435,151,<43,1>,<46,2>),"Lobs",4,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(15962,56,<453,4>,<455,5>),"readTimestamp",3,1>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(15430,1154,<535,4>,<563,5>),"toString",26,11>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(10896,144,<265,4>,<267,5>),"setNull",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(25326,123,<753,4>,<755,5>),"getArray",3,1>,<|project://smallsql/src/smallsql/database/Money.java|(1978,151,<67,4>,<71,5>),"createFromUnscaledValue",5,1>,<|project://smallsql/src/smallsql/junit/TestStatement.java|(13741,264,<340,4>,<346,5>),"testTruncate",6,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(36619,83,<1006,4>,<1008,5>),"getDatabaseMajorVersion",3,1>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(16897,181,<575,4>,<578,5>),"toBigDecimal",4,2>,<|project://smallsql/src/smallsql/database/Utils.java|(2363,127,<67,1>,<69,2>),"createIdxFileName",3,1>,<|project://smallsql/src/smallsql/database/Columns.java|(4062,155,<156,1>,<160,2>),"resize",5,1>,<|project://smallsql/src/smallsql/database/ViewResult.java|(4710,73,<184,1>,<186,2>),"beforeFirst",3,1>,<|project://smallsql/src/smallsql/database/Strings.java|(1511,40,<46,1>,<48,2>),"Strings",3,1>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(13159,733,<400,1>,<417,5>),"getBoolean",18,11>,<|project://smallsql/src/smallsql/database/ViewResult.java|(2681,45,<96,1>,<98,2>),"getTableView",3,1>,<|project://smallsql/src/smallsql/junit/BenchTest.java|(15131,1372,<367,4>,<399,5>),"test_UpdateRows",28,5>,<|project://smallsql/src/smallsql/database/Expression.java|(4574,33,<163,4>,<163,37>),"getType",1,1>,<|project://smallsql/src/smallsql/database/IndexNode.java|(5763,709,<208,1>,<226,2>),"saveValue",12,4>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(8607,156,<243,4>,<245,5>),"getBigDecimal",3,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(29401,96,<816,4>,<819,5>),"isNull",4,1>,<|project://smallsql/src/smallsql/database/ViewResult.java|(5637,88,<240,1>,<242,2>),"relative",3,1>,<|project://smallsql/src/smallsql/junit/TestLanguage.java|(5634,138,<200,1>,<203,2>),"recreateTestTab",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|(1638,85,<49,4>,<51,5>),"getLong",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionCot.java|(1477,125,<40,4>,<43,5>),"getDouble",4,2>,<|project://smallsql/src/smallsql/database/ExpressionFunction.java|(1956,45,<53,1>,<55,2>),"ExpressionFunction",3,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(12930,129,<369,1>,<373,2>),"setRowId",3,1>,<|project://smallsql/src/smallsql/database/ForeignKeys.java|(1628,154,<56,1>,<60,2>),"get",5,2>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(4436,314,<131,4>,<139,5>),"getFloat",9,2>,<|project://smallsql/src/smallsql/database/SQLParser.java|(44098,7343,<1221,4>,<1345,5>),"expressionSingle",114,41>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(9440,146,<300,1>,<303,2>),"testMinOfNull",4,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(37436,131,<1052,1>,<1056,2>),"getRowIdLifetime",4,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(32674,116,<986,1>,<990,2>),"getHoldability",4,1>,<|project://smallsql/src/smallsql/database/SSDriver.java|(1928,202,<58,4>,<63,5>),"connect",6,2>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(26843,533,<798,4>,<810,5>),"getTimestamp",13,4>,<|project://smallsql/src/smallsql/database/ExpressionFunctionRound.java|(1486,93,<40,4>,<42,5>),"isNull",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(20849,174,<609,4>,<611,5>),"updateCharacterStream",3,1>,<|project://smallsql/src/smallsql/database/IndexDescriptions.java|(2033,309,<70,1>,<79,2>),"add",10,4>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(18125,784,<530,4>,<549,5>),"writeBinary",18,6>,<|project://smallsql/src/smallsql/database/Command.java|(3618,337,<123,1>,<132,2>),"setParamValue",6,2>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(8705,122,<306,1>,<312,2>),"div",5,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(4088,68,<185,4>,<187,5>),"getSQLKeywords",3,1>,<|project://smallsql/src/smallsql/junit/TestFunctions.java|(22524,301,<374,4>,<383,5>),"tearDown",9,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionTan.java|(1477,123,<40,4>,<43,5>),"getDouble",4,2>,<|project://smallsql/src/smallsql/database/SSStatement.java|(9970,172,<378,4>,<381,5>),"executeUpdate",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionMinute.java|(1552,170,<48,1>,<52,2>),"getInt",5,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnString.java|(1559,131,<48,1>,<51,2>),"getBoolean",4,2>,<|project://smallsql/src/smallsql/database/SSConnection.java|(7635,72,<238,4>,<240,5>),"isClosed",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(15726,133,<361,4>,<363,5>),"getBytes",3,1>,<|project://smallsql/src/smallsql/database/Money.java|(1818,152,<61,4>,<65,5>),"createFromUnscaledValue",5,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(7131,70,<315,4>,<317,5>),"supportsMinimumSQLGrammar",3,1>,<|project://smallsql/src/smallsql/database/Money.java|(3307,445,<115,4>,<128,5>),"toByteArray",13,1>,<|project://smallsql/src/smallsql/junit/TestTokenizer.java|(2056,130,<65,1>,<71,2>),"tearDown",7,2>,<|project://smallsql/src/smallsql/junit/TestJoins.java|(7129,3045,<158,4>,<193,5>),"runTest",33,1>,<|project://smallsql/src/smallsql/junit/TestOrderBy.java|(19244,808,<729,1>,<757,2>),"testOrderBy_ScollableDesc",23,4>,<|project://smallsql/src/smallsql/junit/TestOrderBy.java|(1839,2044,<52,1>,<112,2>),"init",57,4>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(7949,60,<365,4>,<367,5>),"getSchemaTerm",3,1>,<|project://smallsql/src/smallsql/database/Distinct.java|(3062,66,<134,1>,<136,2>),"rowDeleted",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(14600,70,<456,4>,<458,5>),"getFetchDirection",3,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(19349,253,<563,4>,<567,5>),"readLongBinary",5,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(12923,129,<412,1>,<416,2>),"setTypeMap",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|(6319,522,<206,1>,<222,2>),"convertToString",16,6>,<|project://smallsql/src/smallsql/database/TableStorePage.java|(1822,382,<59,4>,<73,5>),"commit",11,3>,<|project://smallsql/src/smallsql/database/GroupResult.java|(8367,180,<248,1>,<253,2>),"accumulateRow",6,2>,<|project://smallsql/src/smallsql/database/Scrollable.java|(2023,49,<62,1>,<64,2>),"isScrollable",3,1>,<|project://smallsql/src/smallsql/database/ViewResult.java|(3044,293,<113,0>,<120,2>),"isNull",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionBitLen.java|(1644,60,<47,1>,<49,2>),"getFunction",3,1>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(9696,195,<345,4>,<351,5>),"mod",6,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(3565,71,<155,4>,<157,5>),"storesMixedCaseIdentifiers",3,1>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(18838,82,<564,4>,<566,5>),"getNumeric",3,1>,<|project://smallsql/src/smallsql/database/ColumnExpression.java|(1942,52,<72,1>,<74,2>),"getDataType",3,1>,<|project://smallsql/src/smallsql/database/IndexNode.java|(4134,55,<142,1>,<144,2>),"getChildNodes",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(15312,129,<352,4>,<354,5>),"getLong",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(10505,249,<258,4>,<261,5>),"getURL",3,1>,<|project://smallsql/src/smallsql/database/Expression.java|(2707,48,<91,4>,<91,52>),"getParams",1,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(45600,2913,<1208,4>,<1267,5>),"getNumeric",56,33>,<|project://smallsql/src/smallsql/database/Column.java|(2769,82,<89,4>,<91,5>),"setAutoIncrement",3,1>,<|project://smallsql/src/smallsql/database/IndexDescription.java|(1970,507,<58,1>,<68,2>),"IndexDescription",6,1>,<|project://smallsql/src/smallsql/database/CommandUpdate.java|(1512,47,<46,1>,<48,2>),"CommandUpdate",3,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(14408,160,<481,1>,<486,2>),"createStruct",5,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(17007,129,<388,4>,<390,5>),"getClob",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(26261,141,<774,1>,<779,2>),"setNClob",4,1>,<|project://smallsql/src/smallsql/database/Expressions.java|(2498,91,<99,1>,<101,2>),"remove",3,1>,<|project://smallsql/src/smallsql/database/ExpressionName.java|(5324,97,<199,1>,<204,2>),"getTableName",6,2>,<|project://smallsql/src/smallsql/database/ViewResult.java|(3665,101,<138,1>,<140,2>),"getFloat",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(14076,220,<432,4>,<439,5>),"relative",8,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(2344,59,<85,4>,<87,5>),"nullsAreSortedLow",3,1>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(16749,139,<570,1>,<573,2>),"equals",4,2>,<|project://smallsql/src/smallsql/database/SQLParser.java|(33913,679,<955,4>,<971,5>),"alterTable",16,4>,<|project://smallsql/src/smallsql/database/SSStatement.java|(4711,79,<181,4>,<183,5>),"clearWarnings",2,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|(3854,82,<164,1>,<166,2>),"getString",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(8249,62,<385,4>,<387,5>),"getCatalogSeparator",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(2415,64,<90,4>,<92,5>),"nullsAreSortedAtStart",3,1>,<|project://smallsql/src/smallsql/junit/TestDataTypes.java|(3418,9247,<83,4>,<312,5>),"runTest",219,64>,<|project://smallsql/src/smallsql/database/SortedResult.java|(3001,63,<98,4>,<100,5>),"isBeforeFirst",3,1>,<|project://smallsql/src/smallsql/database/language/Language.java|(13497,56,<346,1>,<348,2>),"getEntries",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(33065,145,<1005,1>,<1010,2>),"updateNString",4,1>,<|project://smallsql/src/smallsql/database/GroupResult.java|(1908,1086,<50,1>,<77,2>),"GroupResult",23,6>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(19262,159,<468,1>,<473,2>),"setBinaryStream",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionRound.java|(1590,488,<45,4>,<68,5>),"getDouble",24,6>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(4074,75,<146,1>,<149,2>),"last",4,1>,<|project://smallsql/src/smallsql/junit/TestScrollable.java|(4338,1050,<108,1>,<126,2>),"testFirstWithWhere",17,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(24276,144,<687,1>,<691,2>),"getCharacterStream",4,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(29112,130,<863,4>,<865,5>),"updateClob",3,1>,<|project://smallsql/src/smallsql/junit/TestScrollable.java|(5944,1192,<144,1>,<164,2>),"testPreviousWithWhere",18,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(10814,288,<313,4>,<317,5>),"setTime",4,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(25200,120,<750,4>,<752,5>),"getClob",3,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(1883,1344,<56,4>,<93,5>),"parse",37,12>,<|project://smallsql/src/smallsql/database/ExpressionFunctionRight.java|(1494,59,<42,1>,<44,2>),"getFunction",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|(1783,647,<54,1>,<66,2>),"getBytes",13,3>,<|project://smallsql/src/smallsql/junit/TestOperatoren.java|(5025,116,<90,4>,<93,5>),"TestOperatoren",4,1>,<|project://smallsql/src/smallsql/database/ColumnExpression.java|(1881,54,<67,1>,<69,2>),"isNullable",3,1>,<|project://smallsql/src/smallsql/junit/TestTransactions.java|(7734,352,<231,1>,<241,2>),"testInsertRow_Last",11,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(21913,564,<639,4>,<654,5>),"updateRow",15,3>,<|project://smallsql/src/smallsql/database/FileIndex.java|(3608,64,<110,4>,<112,5>),"close",3,1>,<|project://smallsql/src/smallsql/junit/TestTokenizer.java|(2747,532,<93,1>,<110,2>),"testSingleLine",15,1>,<|project://smallsql/src/smallsql/database/ViewResult.java|(6010,76,<260,1>,<262,2>),"rowInserted",3,1>,<|project://smallsql/src/smallsql/database/Index.java|(2531,218,<67,1>,<73,2>),"Index",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(9997,72,<284,4>,<286,5>),"getMetaData",3,1>,<|project://smallsql/src/smallsql/database/Expression.java|(5577,48,<214,1>,<216,2>),"isCaseSensitive",3,1>,<|project://smallsql/src/smallsql/database/DataSources.java|(1663,219,<54,1>,<61,2>),"add",8,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(19792,174,<814,4>,<816,5>),"getExportedKeys",3,1>,<|project://smallsql/src/smallsql/database/Database.java|(5937,819,<180,4>,<197,5>),"getTableView",10,2>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(4078,188,<120,4>,<123,5>),"setDouble",4,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(4634,67,<176,4>,<178,5>),"getWarnings",3,1>,<|project://smallsql/src/smallsql/junit/TestOther.java|(1456,854,<43,1>,<60,2>),"testInsertSelect",15,1>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(5580,559,<170,1>,<183,5>),"compileJoin",9,4>,<|project://smallsql/src/smallsql/database/MutableDouble.java|(1512,50,<47,1>,<49,2>),"doubleValue",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(34626,142,<1075,1>,<1079,2>),"getNCharacterStream",4,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(34485,136,<1069,1>,<1073,2>),"getNString",4,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(13057,116,<418,1>,<422,2>),"createClob",4,1>,<|project://smallsql/src/smallsql/database/MutableDouble.java|(1567,55,<51,1>,<53,2>),"floatValue",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(3244,289,<85,4>,<93,5>),"getString",9,2>,<|project://smallsql/src/smallsql/database/Expression.java|(4249,177,<149,1>,<155,2>),"getApiObject",7,2>,<|project://smallsql/src/smallsql/database/ExpressionName.java|(2802,88,<94,4>,<96,5>),"getDouble",3,1>,<|project://smallsql/src/smallsql/junit/TestTransactions.java|(8094,1998,<244,1>,<287,2>),"testInsertAndUpdate",30,2>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(12292,219,<360,4>,<367,5>),"beforeFirst",8,2>,<|project://smallsql/src/smallsql/junit/BenchTest.java|(27303,1649,<645,4>,<681,5>),"test_UpdateLargeBinaryWithSP",32,3>,<|project://smallsql/src/smallsql/database/ExpressionFunctionLength.java|(1483,60,<43,1>,<45,2>),"getFunction",3,1>,<|project://smallsql/src/smallsql/database/ViewResult.java|(5293,72,<220,1>,<222,2>),"isLast",3,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(5765,122,<222,4>,<225,5>),"setFetchSize",4,1>,<|project://smallsql/src/smallsql/database/StorePageMap.java|(2675,176,<110,1>,<117,2>),"containsKey",3,1>,<|project://smallsql/src/smallsql/database/Column.java|(3118,123,<101,4>,<105,5>),"setNewAutoIncrementValue",5,2>,<|project://smallsql/src/smallsql/database/GroupResult.java|(3000,644,<79,1>,<95,2>),"addInternalExpressionFromGroupBy",11,3>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(29624,510,<784,4>,<799,5>),"isNull",16,10>,<|project://smallsql/src/smallsql/database/SSConnection.java|(7146,153,<221,4>,<226,5>),"close",6,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(74321,391,<1930,4>,<1938,5>),"limit",9,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(12076,65,<625,4>,<627,5>),"supportsTransactions",3,1>,<|project://smallsql/src/smallsql/database/DateTime.java|(9714,202,<333,4>,<337,5>),"equals",5,2>,<|project://smallsql/src/smallsql/database/ColumnExpression.java|(1614,59,<47,1>,<49,2>),"ColumnExpression",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(19353,133,<579,4>,<581,5>),"updateFloat",3,1>,<|project://smallsql/src/smallsql/database/ColumnExpression.java|(2119,54,<87,1>,<89,2>),"getPrecision",3,1>,<|project://smallsql/src/smallsql/junit/TestThreads.java|(3734,1973,<124,4>,<175,5>),"testConcurrentConnectionWrite",37,5>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(19610,344,<569,4>,<578,5>),"writeChars",10,3>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(4930,295,<136,4>,<144,5>),"getDouble",9,2>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(17117,88,<513,4>,<515,5>),"getDouble",3,1>,<|project://smallsql/src/smallsql/database/DateTime.java|(20606,584,<672,4>,<688,5>),"addDateTimeOffset",16,2>,<|project://smallsql/src/smallsql/junit/TestOrderBy.java|(9837,610,<355,1>,<378,2>),"test_function",20,2>,<|project://smallsql/src/smallsql/database/Column.java|(2046,177,<62,4>,<65,5>),"setDefaultValue",4,1>,<|project://smallsql/src/smallsql/database/Index.java|(15002,183,<449,1>,<454,2>),"floatToBinarySortOrder",6,2>,<|project://smallsql/src/smallsql/database/Join.java|(2351,214,<77,4>,<85,5>),"next",9,3>,<|project://smallsql/src/smallsql/database/Index.java|(14655,338,<436,1>,<446,68>),"clear",3,1>,<|project://smallsql/src/smallsql/database/CreateFile.java|(1836,120,<56,4>,<63,5>),"commit",5,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|(2208,102,<74,1>,<76,2>),"getLong",3,1>,<|project://smallsql/src/smallsql/database/UnionAll.java|(1925,525,<61,1>,<75,2>),"init",15,4>,<|project://smallsql/src/smallsql/database/Expression.java|(2330,76,<79,4>,<81,5>),"setParams",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(28716,130,<852,4>,<854,5>),"updateBlob",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|(1939,1410,<64,4>,<119,2>),"getString",55,25>,<|project://smallsql/src/smallsql/database/ExpressionFunctionCharLen.java|(1561,61,<43,1>,<45,2>),"getFunction",3,1>,<|project://smallsql/src/smallsql/database/TableViewResult.java|(1832,296,<56,1>,<64,2>),"getTableViewResult",9,3>,<|project://smallsql/src/smallsql/database/LongList.java|(1813,115,<67,1>,<72,2>),"add",6,2>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(11059,1299,<419,4>,<453,5>),"toByteArray",26,10>,<|project://smallsql/src/smallsql/database/Command.java|(5185,28,<180,4>,<180,32>),"getMaxRows",1,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(32130,130,<962,1>,<966,2>),"getRowId",4,1>,<|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|(1917,198,<59,4>,<62,5>),"isSearchable",4,1>,<|project://smallsql/src/smallsql/database/View.java|(2433,301,<76,1>,<84,2>),"View",6,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(3805,308,<113,4>,<121,5>),"getInt",9,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|(1880,68,<62,1>,<64,2>),"setElseResult",3,1>,<|project://smallsql/src/smallsql/junit/TestOrderBy.java|(5248,660,<170,1>,<195,2>),"testOrderBy_varchar_asc",22,2>,<|project://smallsql/src/smallsql/database/SQLParser.java|(7384,655,<216,4>,<230,5>),"checkValidIdentifier",15,8>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(14445,171,<334,4>,<336,5>),"setNull",3,1>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(10333,2276,<325,4>,<379,5>),"set",48,16>,<|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|(2903,50,<117,1>,<120,2>),"getNextPagePos",3,1>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(22404,239,<677,1>,<686,2>),"getScale",10,4>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(21452,168,<566,1>,<571,2>),"getObject",5,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(6599,836,<261,4>,<282,5>),"executeBatch",22,6>,<|project://smallsql/src/smallsql/database/SQLParser.java|(34904,1339,<984,4>,<1015,5>),"setTransaction",30,6>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(12971,217,<359,4>,<365,5>),"writeShort",6,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionTruncate.java|(1495,93,<40,4>,<42,5>),"isNull",3,1>,<|project://smallsql/src/smallsql/junit/TestTransactions.java|(6652,1073,<197,1>,<228,2>),"testInsertRow_Last",26,3>,<|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|(2643,68,<85,1>,<87,2>),"getBoolean",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionDegrees.java|(1425,55,<38,4>,<38,59>),"getFunction",1,1>,<|project://smallsql/src/smallsql/database/Strings.java|(1604,150,<56,1>,<60,2>),"get",5,2>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(24124,147,<681,1>,<685,2>),"getNCharacterStream",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|(3070,85,<128,1>,<130,2>),"getScale",3,1>,<|project://smallsql/src/smallsql/database/LongLongList.java|(1815,152,<61,1>,<65,2>),"get2",5,2>,<|project://smallsql/src/smallsql/database/Table.java|(4865,380,<141,1>,<147,5>),"drop",4,2>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(10302,197,<255,4>,<257,5>),"registerOutParameter",3,1>,<|project://smallsql/src/smallsql/database/IndexDescription.java|(6450,195,<198,1>,<202,2>),"drop",5,2>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(6026,131,<186,1>,<189,2>),"testSumInt",4,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(8007,66,<204,4>,<207,5>),"getUsedSize",4,1>,<|project://smallsql/src/smallsql/database/IndexDescription.java|(3779,497,<121,1>,<137,2>),"init",10,3>,<|project://smallsql/src/smallsql/database/Command.java|(2931,360,<102,1>,<110,2>),"getParam",5,3>,<|project://smallsql/src/smallsql/database/UnionAll.java|(3057,92,<108,1>,<110,2>),"getMoney",3,1>,<|project://smallsql/src/smallsql/database/FileIndexNode.java|(2951,453,<91,4>,<98,5>),"loadRootNode",8,1>,<|project://smallsql/src/smallsql/database/TableView.java|(5764,269,<174,1>,<183,2>),"findColumn",7,3>,<|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|(2317,105,<79,1>,<81,2>),"getFloat",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(5079,395,<149,4>,<158,5>),"getBigDecimal",10,3>,<|project://smallsql/src/smallsql/database/SQLTokenizer.java|(1621,9201,<46,4>,<250,5>),"parseSQL",184,90>,<|project://smallsql/src/smallsql/database/JoinScroll.java|(1912,300,<58,4>,<66,5>),"JoinScroll",9,2>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(5081,188,<150,4>,<153,5>),"setTime",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|(1472,79,<42,1>,<47,2>),"ExpressionFunctionCase",3,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(10152,171,<384,4>,<387,5>),"execute",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|(1724,800,<54,1>,<77,2>),"getBytes",24,5>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(13317,485,<670,4>,<674,5>),"getProcedureColumns",5,1>,<|project://smallsql/src/smallsql/junit/TestOrderBy.java|(16122,497,<607,1>,<625,2>),"testVarcharEmpty",14,1>,<|project://smallsql/src/smallsql/database/IndexDescriptions.java|(2351,175,<82,1>,<86,2>),"resize",5,1>,<|project://smallsql/src/smallsql/junit/BenchTest.java|(7700,2106,<194,4>,<243,5>),"test_DeleteRows",43,7>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(2146,115,<60,4>,<63,5>),"executeQuery",4,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(3908,102,<110,4>,<112,5>),"createStatement",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(30653,296,<911,4>,<917,5>),"updateValue",6,2>,<|project://smallsql/src/smallsql/database/StorePageMap.java|(2384,286,<95,1>,<108,2>),"get",11,4>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(5133,49,<198,1>,<200,2>),"rowInserted",3,1>,<|project://smallsql/src/smallsql/database/IndexNode.java|(2729,379,<80,1>,<89,2>),"IndexNode",4,1>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(7229,128,<301,1>,<303,2>),"insertRow",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(13070,206,<391,1>,<398,2>),"next",8,2>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(8379,163,<269,1>,<272,2>),"testMaxTime",4,1>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(6207,321,<218,4>,<227,5>),"resizeValue",6,1>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(9592,133,<305,1>,<308,2>),"testFirst1",4,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(35420,159,<1108,1>,<1113,2>),"updateBinaryStream",4,1>,<|project://smallsql/src/smallsql/database/LongTreeList.java|(5765,1445,<199,1>,<251,2>),"add",48,12>,<|project://smallsql/src/smallsql/database/StorePage.java|(1640,182,<49,1>,<54,2>),"StorePage",6,1>,<|project://smallsql/src/smallsql/database/Expression.java|(5524,47,<210,1>,<212,2>),"isAutoIncrement",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(33715,93,<900,4>,<902,5>),"ownUpdatesAreVisible",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(10602,62,<525,4>,<527,5>),"getMaxColumnNameLength",3,1>,<|project://smallsql/src/smallsql/database/IndexNode.java|(4963,395,<180,1>,<193,2>),"removeNode",10,2>,<|project://smallsql/src/smallsql/database/SSConnection.java|(11591,266,<374,4>,<377,5>),"prepareCall",3,1>,<|project://smallsql/src/smallsql/junit/TestDeleteUpdate.java|(1513,87,<50,1>,<55,2>),"TestDeleteUpdate",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(37974,148,<1220,1>,<1225,2>),"updateAsciiStream",4,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(2915,302,<80,4>,<89,5>),"SSConnection",6,1>,<|project://smallsql/src/smallsql/database/SortedResult.java|(7978,281,<309,4>,<315,5>),"currentInsertedRow",3,1>,<|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|(2521,90,<95,1>,<97,2>),"getObject",3,1>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(6187,89,<254,1>,<256,2>),"getDouble",3,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(8131,403,<309,4>,<319,5>),"setNeedGeneratedKeys",11,3>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(14775,60,<466,4>,<468,5>),"getFetchSize",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(22821,154,<625,1>,<630,2>),"setNClob",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|(1559,78,<44,1>,<46,2>),"getInt",3,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(11633,120,<443,1>,<447,2>),"isPoolable",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|(1926,87,<61,4>,<63,5>),"getMoney",3,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(8458,312,<245,4>,<252,5>),"nextIdentifier",3,1>,<|project://smallsql/src/smallsql/database/language/Language_de.java|(1443,54,<39,1>,<41,2>),"Language_de",3,1>,<|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|(2415,99,<90,1>,<92,2>),"getNumeric",3,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(59728,168,<1529,1>,<1535,2>),"deleteRow",7,1>,<|project://smallsql/src/smallsql/junit/BenchTest.java|(18736,2820,<452,4>,<503,5>),"test_UpdateRowsPrepareSP",46,5>,<|project://smallsql/src/smallsql/junit/TestIdentifer.java|(1441,39,<43,1>,<45,2>),"TestIdentifer",3,1>,<|project://smallsql/src/smallsql/database/Scrollable.java|(5174,67,<210,1>,<212,2>),"rowInserted",3,1>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(16271,85,<488,4>,<490,5>),"getFloat",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(2410,459,<65,0>,<73,5>),"registerOutParameter",3,1>,<|project://smallsql/src/smallsql/database/Scrollable.java|(3043,74,<117,1>,<120,2>),"last",4,1>,<|project://smallsql/src/smallsql/database/Join.java|(5879,1876,<204,4>,<246,5>),"createJoinScrollIndex",41,12>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(17259,146,<532,4>,<534,5>),"updateTime",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionRadians.java|(1425,55,<38,4>,<38,59>),"getFunction",1,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(2634,139,<97,4>,<100,5>),"execute",4,1>,<|project://smallsql/src/smallsql/junit/TestJoins.java|(5283,62,<105,4>,<107,5>),"tearDown",3,1>,<|project://smallsql/src/smallsql/database/language/Language.java|(10283,1112,<232,1>,<268,2>),"getFromLocaleTree",22,6>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(36740,154,<1164,1>,<1169,2>),"updateClob",4,1>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(20747,89,<618,4>,<620,5>),"getBytes",3,1>,<|project://smallsql/src/smallsql/database/Index.java|(15700,380,<476,1>,<486,2>),"stringToBinarySortOrder",11,5>,<|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|(1655,133,<55,1>,<59,2>),"getBoolean",5,2>,<|project://smallsql/src/smallsql/database/ViewResult.java|(5216,68,<215,1>,<217,2>),"last",3,1>,<|project://smallsql/src/smallsql/database/IndexDescriptions.java|(2535,415,<89,1>,<106,2>),"findBestMatch",17,5>,<|project://smallsql/src/smallsql/database/SSStatement.java|(5897,113,<228,4>,<231,5>),"getFetchSize",4,1>,<|project://smallsql/src/smallsql/database/Database.java|(4666,46,<128,4>,<130,5>),"getName",3,1>,<|project://smallsql/src/smallsql/database/Index.java|(13249,523,<378,1>,<397,2>),"find",17,8>,<|project://smallsql/src/smallsql/database/Join.java|(2580,56,<88,1>,<91,2>),"afterLast",4,1>,<|project://smallsql/src/smallsql/junit/BasicTestCase.java|(1907,433,<60,4>,<72,5>),"dropTable",13,5>,<|project://smallsql/src/smallsql/junit/TestFunctions.java|(23289,373,<398,4>,<404,5>),"runTest",7,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java|(1880,115,<56,1>,<59,2>),"getLong",4,2>,<|project://smallsql/src/smallsql/database/LongTreeList.java|(12755,788,<446,1>,<469,2>),"insertNode",12,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(36081,326,<990,4>,<993,5>),"getAttributes",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionDayOfWeek.java|(1490,63,<43,1>,<45,2>),"getFunction",3,1>,<|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|(2959,82,<122,1>,<124,2>),"deleteRow",3,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(1959,134,<72,4>,<74,5>),"SSStatement",3,1>,<|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|(7193,91,<239,4>,<241,5>),"getCatalogName",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(26106,150,<767,1>,<772,2>),"setBlob",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionLocate.java|(1637,391,<53,1>,<64,2>),"getInt",10,6>,<|project://smallsql/src/smallsql/junit/TestDataTypes.java|(3362,48,<79,4>,<81,5>),"setUp",3,1>,<|project://smallsql/src/smallsql/database/Strings.java|(1559,37,<51,1>,<53,2>),"size",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(19128,466,<798,4>,<806,5>),"getPrimaryKeys",9,2>,<|project://smallsql/src/smallsql/database/Column.java|(2863,243,<93,4>,<99,5>),"initAutoIncrement",7,2>,<|project://smallsql/src/smallsql/database/language/Language.java|(13138,171,<334,1>,<338,2>),"getMessage",5,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionLog.java|(1477,123,<40,4>,<43,5>),"getDouble",4,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|(1749,75,<54,1>,<56,2>),"getFloat",3,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(1542,329,<46,4>,<54,5>),"parse",9,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(2658,83,<105,4>,<107,5>),"getDatabaseProductVersion",3,1>,<|project://smallsql/src/smallsql/junit/BenchTest.java|(30286,240,<724,4>,<730,5>),"deleteTestTable",7,2>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(29260,234,<868,4>,<871,5>),"updateArray",3,1>,<|project://smallsql/src/smallsql/junit/TestOrderBy.java|(17187,1243,<649,1>,<694,2>),"test2Columns",39,6>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|(2409,90,<80,4>,<82,5>),"getMoney",3,1>,<|project://smallsql/src/smallsql/junit/AllTests.java|(1604,183,<46,4>,<51,5>),"getConnection",6,3>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(2564,664,<77,4>,<95,5>),"ExpressionArithmetic",15,2>,<|project://smallsql/src/smallsql/junit/TestOrderBy.java|(10455,814,<381,1>,<411,2>),"test_functionAscDesc",27,3>,<|project://smallsql/src/smallsql/database/SSStatement.java|(7445,68,<285,4>,<287,5>),"getConnection",3,1>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(7222,152,<227,1>,<230,2>),"testMaxTinyint",4,1>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(4960,50,<187,1>,<189,2>),"getRowPosition",3,1>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(1702,53,<55,1>,<57,2>),"TestGroupBy",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(20493,171,<603,4>,<605,5>),"updateAsciiStream",3,1>,<|project://smallsql/src/smallsql/database/LongLongList.java|(1510,32,<44,1>,<46,2>),"LongLongList",3,1>,<|project://smallsql/src/smallsql/database/IndexNode.java|(3487,43,<102,1>,<104,2>),"getDigit",3,1>,<|project://smallsql/src/smallsql/junit/TestTransactions.java|(12649,1193,<339,1>,<371,2>),"testInsertRow_withWrongWhere",23,2>,<|project://smallsql/src/smallsql/database/LongTreeList.java|(15155,1150,<526,1>,<562,2>),"correctPointers",30,9>,<|project://smallsql/src/smallsql/database/Money.java|(3900,65,<136,1>,<138,2>),"getImmutableObject",3,1>,<|project://smallsql/src/smallsql/database/ViewResult.java|(4974,74,<199,1>,<202,2>),"first",3,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(8009,164,<258,4>,<261,5>),"setCatalog",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionATan.java|(1480,124,<40,4>,<43,5>),"getDouble",4,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(15638,225,<730,4>,<734,5>),"getSchemas",5,1>,<|project://smallsql/src/smallsql/junit/TestDBMetaData.java|(7766,1675,<174,1>,<201,2>),"testGetColumn",24,1>,<|project://smallsql/src/smallsql/database/Index.java|(4001,1018,<112,1>,<136,5>),"findRows",14,4>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(16185,78,<465,4>,<467,5>),"writeDate",3,1>,<|project://smallsql/src/smallsql/database/ExpressionName.java|(1937,101,<59,4>,<62,5>),"setNameAfterTableAlias",4,1>,<|project://smallsql/src/smallsql/database/DateTime.java|(3800,106,<124,1>,<127,2>),"parse",4,1>,<|project://smallsql/src/smallsql/junit/TestMoneyRounding.java|(3413,353,<101,1>,<110,2>),"testMoney2",10,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(11610,59,<595,4>,<597,5>),"getMaxStatementLength",3,1>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(10673,706,<346,1>,<364,2>),"testViewWidthGroupBy",15,1>,<|project://smallsql/src/smallsql/database/Table.java|(7877,252,<234,4>,<237,5>),"getStore",4,1>,<|project://smallsql/src/smallsql/database/ExpressionName.java|(4791,116,<173,1>,<179,2>),"getColumnIndex",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(3739,78,<165,4>,<167,5>),"storesUpperCaseQuotedIdentifiers",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionCeiling.java|(1489,124,<40,4>,<43,5>),"getDouble",4,2>,<|project://smallsql/src/smallsql/database/SQLParser.java|(24783,1435,<709,1>,<745,2>),"index",24,6>,<|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|(9959,133,<311,4>,<313,5>),"getColumnExpression",3,1>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(6281,85,<258,1>,<260,2>),"getMoney",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(7713,63,<350,4>,<352,5>),"supportsOuterJoins",3,1>,<|project://smallsql/src/smallsql/junit/TestAlterTable2.java|(237,48,<16,4>,<18,5>),"setUp",3,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(16645,649,<485,4>,<502,5>),"writeString",16,5>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(1719,776,<52,4>,<78,5>),"setValue",27,8>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(14763,138,<340,4>,<342,5>),"getBoolean",3,1>,<|project://smallsql/src/smallsql/database/FileIndexNode.java|(2028,274,<65,1>,<70,2>),"save",6,1>,<|project://smallsql/src/smallsql/database/MutableFloat.java|(1615,49,<55,1>,<57,2>),"intValue",3,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(59905,83,<1538,1>,<1540,2>),"getLink",3,1>,<|project://smallsql/src/smallsql/database/Utils.java|(2495,1577,<71,1>,<122,2>),"like",50,22>,<|project://smallsql/src/smallsql/database/IndexNodeScrollStatus.java|(1862,244,<57,1>,<63,2>),"IndexNodeScrollStatus",7,2>,<|project://smallsql/src/smallsql/database/language/Language.java|(11734,717,<281,1>,<306,2>),"addMessages",14,3>,<|project://smallsql/src/smallsql/database/Money.java|(2137,70,<73,4>,<75,5>),"intValue",3,1>,<|project://smallsql/src/smallsql/database/Utils.java|(13922,245,<407,1>,<415,2>),"getShort",6,3>,<|project://smallsql/src/smallsql/database/FileIndex.java|(2816,113,<85,4>,<88,5>),"FileIndex",4,1>,<|project://smallsql/src/smallsql/database/Column.java|(1974,62,<57,4>,<59,5>),"setName",3,1>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(8672,765,<241,4>,<256,5>),"compileLinkExpressionParams",15,4>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(16824,135,<523,4>,<525,5>),"updateString",3,1>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(28574,505,<735,4>,<758,5>),"getDataType",24,17>,<|project://smallsql/src/smallsql/junit/TestMoneyRounding.java|(1556,223,<46,4>,<51,5>),"setUp",6,1>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(20499,240,<609,4>,<616,5>),"getString",8,4>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(17929,188,<523,4>,<528,5>),"readBytes",6,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(51452,3101,<1336,4>,<1400,5>),"getString",62,34>,<|project://smallsql/src/smallsql/database/SSStatement.java|(9182,184,<349,4>,<356,5>),"setGeneratedKeys",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(14493,89,<451,4>,<453,5>),"setFetchDirection",3,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(4305,64,<121,4>,<123,5>),"nativeSQL",3,1>,<|project://smallsql/src/smallsql/database/NoFromResult.java|(2114,54,<88,1>,<90,2>),"isAfterLast",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(8021,67,<370,4>,<372,5>),"getProcedureTerm",3,1>,<|project://smallsql/src/smallsql/database/MutableLong.java|(1715,62,<63,1>,<65,2>),"toString",3,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(7156,507,<212,4>,<226,5>),"addBatch",15,4>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(7226,359,<203,4>,<212,5>),"getBigDecimal",10,3>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(22096,299,<663,1>,<674,2>),"getPrecision",12,5>,<|project://smallsql/src/smallsql/database/JoinScrollIndex.java|(1671,329,<53,4>,<60,5>),"JoinScrollIndex",8,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(32537,132,<980,1>,<984,2>),"updateRowId",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(7620,81,<345,4>,<347,5>),"supportsIntegrityEnhancementFacility",3,1>,<|project://smallsql/src/smallsql/database/Identity.java|(3207,80,<116,1>,<119,2>),"toString",4,1>,<|project://smallsql/src/smallsql/database/SSDriver.java|(4264,57,<126,4>,<128,5>),"getMinorVersion",3,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(6158,114,<240,4>,<243,5>),"getResultSetType",4,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(37449,1057,<1054,4>,<1090,5>),"expressionTokenList",30,9>,<|project://smallsql/src/smallsql/database/SSSavepoint.java|(1684,46,<55,1>,<57,2>),"getSavepointId",3,1>,<|project://smallsql/src/smallsql/database/NoFromResult.java|(2586,51,<113,1>,<115,2>),"getRowPosition",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|(2429,108,<84,1>,<86,2>),"getDouble",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(2582,656,<81,4>,<97,5>),"getString",14,5>,<|project://smallsql/src/smallsql/database/FileIndex.java|(2321,287,<67,0>,<74,1>),"print",8,2>,<|project://smallsql/src/smallsql/database/IndexScrollStatus.java|(4898,235,<150,1>,<158,2>),"afterLast",5,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(12789,136,<363,1>,<367,2>),"isWrapperFor",4,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(25649,151,<746,1>,<751,2>),"setCharacterStream",4,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(17302,120,<504,4>,<507,5>),"readString",4,1>,<|project://smallsql/src/smallsql/junit/TestTransactions.java|(16429,1610,<449,4>,<481,5>),"testReadSerialized",28,2>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(37056,155,<1178,1>,<1183,2>),"updateNClob",4,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(10520,288,<308,4>,<312,5>),"setDate",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|(1953,227,<63,1>,<69,5>),"getNumeric",7,4>,<|project://smallsql/src/smallsql/junit/TestOther.java|(6406,922,<164,1>,<182,2>),"testSetTransaction",15,1>,<|project://smallsql/src/smallsql/junit/TestScrollable.java|(3984,345,<97,4>,<105,5>),"testNextWithWhereAssert",9,2>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(5612,287,<155,4>,<163,5>),"getBytes",9,2>,<|project://smallsql/src/smallsql/database/ExpressionName.java|(5809,51,<230,1>,<232,2>),"isDefinitelyWritable",3,1>,<|project://smallsql/src/smallsql/database/Where.java|(2552,200,<98,1>,<105,2>),"first",8,3>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(25467,513,<758,4>,<770,5>),"getDate",13,4>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(8032,341,<279,1>,<293,2>),"mul",15,4>,<|project://smallsql/src/smallsql/database/SortedResult.java|(5433,123,<194,4>,<197,5>),"isAfterLast",4,1>,<|project://smallsql/src/smallsql/database/SortedResult.java|(7133,136,<265,1>,<268,2>),"setRowPosition",4,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(11750,136,<283,4>,<285,5>),"setFloat",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(6119,84,<255,4>,<257,5>),"supportsConvert",3,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(4682,175,<138,4>,<141,5>),"setBytes",4,1>,<|project://smallsql/src/smallsql/database/StoreNull.java|(1674,29,<51,1>,<53,2>),"StoreNull",3,1>,<|project://smallsql/src/smallsql/database/ExpressionName.java|(2990,98,<102,4>,<104,5>),"getNumeric",3,1>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(6470,630,<205,4>,<216,5>),"getIntImpl",12,8>,<|project://smallsql/src/smallsql/database/LongTreeList.java|(14649,497,<508,1>,<523,2>),"removeNodeLastLevel",7,1>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(9016,146,<285,1>,<288,2>),"testMaxOfNull",4,1>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(1760,981,<59,1>,<89,2>),"init",27,3>,<|project://smallsql/src/smallsql/database/Money.java|(2845,112,<98,4>,<100,5>),"equals",3,1>,<|project://smallsql/src/smallsql/database/Index.java|(8083,2880,<220,1>,<291,2>),"addValues",66,32>,<|project://smallsql/src/smallsql/junit/TestStatement.java|(2641,325,<84,4>,<88,5>),"testMultiValues",5,1>,<|project://smallsql/src/smallsql/junit/TestLanguage.java|(4888,245,<174,1>,<180,2>),"assertMessage",3,1>,<|project://smallsql/src/smallsql/database/ExpressionName.java|(5487,48,<210,1>,<212,2>),"getScale",3,1>,<|project://smallsql/src/smallsql/junit/TestAlterTable.java|(273,1048,<17,4>,<37,5>),"setUp",21,2>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(7092,128,<296,1>,<298,2>),"updateRow",3,1>,<|project://smallsql/src/smallsql/database/CreateFile.java|(1630,196,<48,4>,<53,5>),"CreateFile",6,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(3855,201,<145,4>,<149,5>),"setMaxRows",5,2>,<|project://smallsql/src/smallsql/database/RowSource.java|(4636,179,<174,1>,<181,5>),"hasAlias",3,1>,<|project://smallsql/src/smallsql/database/Columns.java|(1734,150,<58,1>,<62,2>),"get",5,2>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(10186,135,<319,1>,<322,2>),"set",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|(2315,124,<90,1>,<94,2>),"getMoney",5,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(35775,300,<986,4>,<989,5>),"getSuperTables",3,1>,<|project://smallsql/src/smallsql/junit/TestThreads.java|(2645,435,<91,20>,<99,21>),"run",9,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionChar.java|(1481,58,<42,1>,<44,2>),"getFunction",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionCharLen.java|(1714,145,<53,1>,<59,2>),"getInt",5,2>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(15180,126,<349,4>,<351,5>),"getInt",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(10092,76,<495,4>,<497,5>),"supportsOpenCursorsAcrossCommit",3,1>,<|project://smallsql/src/smallsql/database/Database.java|(5743,180,<175,4>,<177,5>),"getTableView",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(38281,152,<1234,1>,<1239,2>),"updateCharacterStream",4,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(11475,130,<277,4>,<279,5>),"setInt",3,1>,<|project://smallsql/src/smallsql/database/StoreNull.java|(2376,81,<94,1>,<96,2>),"getMoney",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|(3581,78,<149,1>,<151,2>),"getMoney",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(8475,126,<240,4>,<242,5>),"getDouble",3,1>,<|project://smallsql/src/smallsql/junit/TestExceptions.java|(5041,306,<123,4>,<130,5>),"a",8,1>,<|project://smallsql/src/smallsql/database/Expression.java|(2207,47,<71,1>,<73,2>),"getAlias",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(37891,146,<1071,1>,<1075,2>),"autoCommitFailureClosesAllResultSets",4,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(17051,877,<514,4>,<541,5>),"update",26,6>,<|project://smallsql/src/smallsql/database/ViewResult.java|(1581,161,<49,1>,<53,2>),"ViewResult",5,1>,<|project://smallsql/src/smallsql/database/MemoryStream.java|(3478,96,<124,1>,<126,2>),"readShort",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(8414,77,<395,4>,<397,5>),"supportsSchemasInProcedureCalls",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(21140,136,<553,1>,<557,2>),"isWrapperFor",4,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(73406,729,<1901,4>,<1923,5>),"from",22,5>,<|project://smallsql/src/smallsql/database/StoreNull.java|(1775,54,<61,1>,<63,2>),"isNull",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionLTrim.java|(2024,263,<67,1>,<75,2>),"getString",9,4>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(17588,163,<400,4>,<402,5>),"getTimestamp",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(22799,114,<669,4>,<672,5>),"cancelRowUpdates",4,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(10818,60,<540,4>,<542,5>),"getMaxColumnsInOrderBy",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(35257,158,<1101,1>,<1106,2>),"updateAsciiStream",4,1>,<|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|(7761,136,<251,4>,<253,5>),"isWritable",3,1>,<|project://smallsql/src/smallsql/database/MemoryStream.java|(2632,218,<87,1>,<94,2>),"writeChars",8,2>,<|project://smallsql/src/smallsql/database/UnionAll.java|(4953,166,<200,1>,<208,2>),"getBitCount",9,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|(7184,63,<238,1>,<240,2>),"getDataType",3,1>,<|project://smallsql/src/smallsql/database/CommandTable.java|(4933,253,<133,4>,<138,5>),"addColumn",6,2>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(9767,453,<295,4>,<305,5>),"getDoubleImpl",11,7>,<|project://smallsql/src/smallsql/database/UnionAll.java|(3269,96,<118,1>,<120,2>),"getObject",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(32531,619,<870,4>,<878,5>),"getIndexInfo",9,2>,<|project://smallsql/src/smallsql/database/Strings.java|(1763,115,<63,1>,<68,2>),"add",6,2>,<|project://smallsql/src/smallsql/database/SmallSQLException.java|(3488,101,<115,1>,<118,2>),"printStackTrace",4,2>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(16517,120,<481,4>,<483,5>),"writeString",3,1>,<|project://smallsql/src/smallsql/junit/TestTokenizer.java|(4121,287,<142,1>,<151,2>),"failureTest",9,2>,<|project://smallsql/src/smallsql/database/Command.java|(4617,54,<154,4>,<156,5>),"getResultSet",3,1>,<|project://smallsql/src/smallsql/database/StoreNull.java|(2023,84,<74,1>,<76,2>),"getDouble",3,1>,<|project://smallsql/src/smallsql/database/DateTime.java|(3394,85,<104,1>,<106,2>),"now",3,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(15090,149,<465,1>,<470,2>),"setNCharacterStream",4,1>,<|project://smallsql/src/smallsql/database/CommandUpdate.java|(2560,978,<85,1>,<113,2>),"executeImpl",24,4>,<|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|(1758,113,<56,1>,<59,2>),"addCase",4,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(2507,57,<76,4>,<78,5>),"wasNull",3,1>,<|project://smallsql/src/smallsql/database/CommandDelete.java|(1420,45,<43,1>,<45,2>),"CommandDelete",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|(3666,92,<154,1>,<156,2>),"getNumeric",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionSqrt.java|(1420,52,<38,4>,<38,56>),"getFunction",1,1>,<|project://smallsql/src/smallsql/database/DataSources.java|(1468,37,<44,1>,<46,2>),"size",3,1>,<|project://smallsql/src/smallsql/junit/TestLanguage.java|(2959,840,<99,1>,<132,2>),"testLocalizedErrors",30,4>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(6928,147,<216,1>,<219,2>),"testMaxBigInt",4,1>,<|project://smallsql/src/smallsql/database/StoreNull.java|(2289,80,<89,1>,<91,2>),"getLong",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionACos.java|(1420,52,<38,4>,<38,56>),"getFunction",1,1>,<|project://smallsql/src/smallsql/database/TableResult.java|(10945,258,<399,4>,<403,5>),"copyValueInto",5,2>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(28079,226,<835,4>,<838,5>),"updateRef",3,1>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(11305,288,<338,1>,<350,2>),"last",10,3>,<|project://smallsql/src/smallsql/database/Where.java|(3903,68,<166,1>,<168,2>),"rowInserted",3,1>,<|project://smallsql/src/smallsql/junit/BasicTestCase.java|(1784,111,<56,4>,<58,5>),"makeNameValid",3,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(4875,188,<144,4>,<147,5>),"setDate",4,1>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(10274,390,<332,1>,<343,2>),"testGroupBy",11,1>,<|project://smallsql/src/smallsql/database/StorePageMap.java|(2170,209,<86,1>,<93,2>),"isEmpty",3,1>,<|project://smallsql/src/smallsql/database/ViewResult.java|(2735,74,<101,1>,<103,2>),"deleteRow",3,1>,<|project://smallsql/src/smallsql/junit/BasicTestCase.java|(14295,236,<363,4>,<372,5>),"getMonth3L",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|(3217,3093,<114,1>,<203,2>),"getObject",88,38>,<|project://smallsql/src/smallsql/database/Utils.java|(7476,875,<234,4>,<258,5>),"unique2bytes",21,1>,<|project://smallsql/src/smallsql/database/SmallSQLException.java|(1763,266,<52,1>,<61,2>),"SmallSQLException",4,1>,<|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|(1763,136,<54,4>,<56,5>),"isCaseSensitive",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(13840,218,<422,4>,<429,5>),"absolute",8,2>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(14785,146,<451,1>,<456,2>),"setBinaryStream",4,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(12299,75,<328,1>,<330,2>),"setCurrentOffsetInPage",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(19894,149,<496,1>,<501,2>),"setCharacterStream",4,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(33498,130,<1025,1>,<1029,2>),"getNClob",4,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(4966,724,<151,4>,<172,5>),"commit",22,4>,<|project://smallsql/src/smallsql/database/TableView.java|(5432,325,<162,1>,<171,2>),"findColumnIdx",6,3>,<|project://smallsql/src/smallsql/database/ExpressionFunctionSin.java|(1477,123,<40,4>,<43,5>),"getDouble",4,2>,<|project://smallsql/src/smallsql/database/IndexNode.java|(9115,240,<305,1>,<309,2>),"saveRemainderValue",5,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnString.java|(2322,135,<84,1>,<87,2>),"getNumeric",4,2>,<|project://smallsql/src/smallsql/database/ExpressionFunction.java|(2235,285,<64,4>,<70,5>),"setParams",7,5>,<|project://smallsql/src/smallsql/database/ExpressionFunctionRepeat.java|(1537,60,<44,1>,<46,2>),"getFunction",3,1>,<|project://smallsql/src/smallsql/database/Expression.java|(4965,54,<182,1>,<184,2>),"getScale",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(13276,179,<313,4>,<315,5>),"setObject",3,1>,<|project://smallsql/src/smallsql/database/TableResult.java|(9331,150,<344,1>,<347,5>),"getBoolean",4,1>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(6475,89,<266,1>,<268,2>),"getObject",3,1>,<|project://smallsql/src/smallsql/junit/TestTransactions.java|(18046,850,<484,1>,<506,2>),"testReadWriteLock",21,2>,<|project://smallsql/src/smallsql/database/StoreNull.java|(2567,87,<104,1>,<106,2>),"getObject",3,1>,<|project://smallsql/src/smallsql/database/ExpressionName.java|(5605,66,<218,1>,<220,2>),"isAutoIncrement",3,1>,<|project://smallsql/src/smallsql/junit/TestOperatoren.java|(11337,255,<253,4>,<259,5>),"suite",7,2>,<|project://smallsql/src/smallsql/database/Column.java|(3790,185,<136,4>,<144,5>),"getScale",9,3>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(3688,156,<125,1>,<128,2>),"testCountWhere",4,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(7807,865,<235,4>,<260,2>),"executeBatch",26,8>,<|project://smallsql/src/smallsql/database/NoFromResult.java|(2731,49,<123,1>,<125,2>),"rowInserted",3,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(34606,290,<974,4>,<982,5>),"set",9,2>,<|project://smallsql/src/smallsql/junit/TestTokenizer.java|(3947,168,<134,1>,<140,2>),"successTest",5,1>,<|project://smallsql/src/smallsql/database/LongTreeList.java|(5361,171,<180,1>,<186,2>),"LongTreeList",4,1>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(1992,3288,<60,4>,<158,5>),"compile",83,26>,<|project://smallsql/src/smallsql/database/TableViewResult.java|(1637,186,<49,1>,<53,2>),"createResult",5,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(35088,60,<957,4>,<959,5>),"getConnection",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(4938,65,<220,4>,<222,5>),"getSearchStringEscape",3,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(9907,156,<329,1>,<332,2>),"getSavepoint",4,1>,<|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|(4724,1563,<161,1>,<215,2>),"getDataTypePrecision",55,32>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(8957,79,<425,4>,<427,5>),"supportsCatalogsInTableDefinitions",3,1>,<|project://smallsql/src/smallsql/database/View.java|(4310,265,<137,1>,<144,2>),"writeMagic",8,1>,<|project://smallsql/src/smallsql/database/StoreNull.java|(2464,96,<99,1>,<101,2>),"getNumeric",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(8769,124,<246,4>,<248,5>),"getBytes",3,1>,<|project://smallsql/src/smallsql/database/language/Language.java|(11400,328,<270,1>,<279,2>),"Language",6,1>,<|project://smallsql/src/smallsql/database/ViewResult.java|(4443,88,<173,1>,<175,2>),"getDataType",3,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(3453,519,<103,4>,<115,5>),"createSyntaxError",4,1>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(16362,747,<492,1>,<511,5>),"getFloat",20,14>,<|project://smallsql/src/smallsql/database/TableResult.java|(10224,157,<374,1>,<377,5>),"getNumeric",4,1>,<|project://smallsql/src/smallsql/database/IndexNode.java|(10810,385,<366,1>,<377,2>),"findNodePos",12,5>,<|project://smallsql/src/smallsql/database/LongTreeList.java|(5103,94,<163,1>,<169,2>),"LongTreeList",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(19606,174,<809,4>,<811,5>),"getImportedKeys",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(9309,66,<445,4>,<447,5>),"supportsPositionedUpdate",3,1>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(9955,436,<359,1>,<381,2>),"setScale",23,7>,<|project://smallsql/src/smallsql/database/SSStatement.java|(6282,142,<246,4>,<250,5>),"addBatch",5,2>,<|project://smallsql/src/smallsql/database/NoFromResult.java|(1791,57,<63,1>,<66,2>),"first",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnInt.java|(2242,112,<87,1>,<90,2>),"getString",4,2>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(7692,149,<245,1>,<248,2>),"testMaxDouble",4,1>,<|project://smallsql/src/smallsql/database/Scrollable.java|(2667,369,<102,1>,<114,2>),"next",13,3>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(17943,275,<546,4>,<549,5>),"updateCharacterStream",3,1>,<|project://smallsql/src/smallsql/database/UnionAll.java|(3664,65,<138,1>,<140,2>),"getTableView",3,1>,<|project://smallsql/src/smallsql/junit/TestAlterTable.java|(3525,885,<95,4>,<115,5>),"testAddWithTableLock_READ_COMMITTED",21,2>,<|project://smallsql/src/smallsql/database/UnionAll.java|(4386,318,<172,1>,<184,2>),"next",13,4>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(9548,261,<280,4>,<284,5>),"setClob",4,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(21189,136,<615,4>,<617,5>),"updateObject",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionFloor.java|(1476,93,<41,4>,<43,5>),"getDouble",3,1>,<|project://smallsql/src/smallsql/database/LongTreeList.java|(17228,416,<606,1>,<618,2>),"resize",10,3>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(8323,79,<390,4>,<392,5>),"supportsSchemasInDataManipulation",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|(1835,562,<59,4>,<77,5>),"getNumeric",19,7>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(21763,135,<579,1>,<583,2>),"getRowId",4,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(3064,85,<125,4>,<127,5>),"getDriverMinorVersion",3,1>,<|project://smallsql/src/smallsql/database/IndexScrollStatus.java|(5148,575,<161,4>,<181,2>),"getReturnValue",9,2>,<|project://smallsql/src/smallsql/database/StorePageMap.java|(5923,517,<229,1>,<244,2>),"containsValue",8,4>,<|project://smallsql/src/smallsql/database/SortedResult.java|(7353,65,<276,1>,<278,2>),"rowDeleted",3,1>,<|project://smallsql/src/smallsql/database/TableResult.java|(10538,147,<384,1>,<387,5>),"getString",4,1>,<|project://smallsql/src/smallsql/database/Where.java|(3395,90,<134,1>,<136,2>),"afterLast",3,2>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(15027,119,<476,4>,<478,5>),"getConcurrency",3,2>,<|project://smallsql/src/smallsql/database/Identity.java|(3141,61,<111,1>,<114,2>),"longValue",4,1>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(6921,51,<286,1>,<288,2>),"getTableView",3,1>,<|project://smallsql/src/smallsql/database/Column.java|(3610,103,<128,4>,<130,5>),"getDisplaySize",3,1>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(5297,39,<213,1>,<215,2>),"noRow",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(15772,147,<502,4>,<504,5>),"updateByte",3,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(16441,68,<477,4>,<479,5>),"readSmallDateTime",3,1>,<|project://smallsql/src/smallsql/database/Index.java|(15191,199,<456,1>,<461,2>),"doubleToBinarySortOrder",6,2>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(10087,312,<289,4>,<297,5>),"getObject",9,2>,<|project://smallsql/src/smallsql/database/SSConnection.java|(14245,158,<474,1>,<479,2>),"createArrayOf",5,1>,<|project://smallsql/src/smallsql/junit/TestExceptionMethods.java|(5715,597,<165,4>,<179,5>),"testDuplicatedColumnAlter",15,2>,<|project://smallsql/src/smallsql/database/SortedResult.java|(4047,1013,<143,1>,<172,2>),"next",30,8>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(13064,140,<375,1>,<380,2>),"setNString",4,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(10549,119,<303,4>,<305,5>),"findColumn",3,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(7725,71,<243,4>,<245,5>),"getMetaData",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionDifference.java|(1491,64,<43,1>,<45,2>),"getFunction",3,1>,<|project://smallsql/src/smallsql/database/Utils.java|(15370,448,<449,4>,<459,5>),"getExpressionNameFromTree",5,1>,<|project://smallsql/src/smallsql/database/CommandInsert.java|(2326,74,<69,4>,<71,5>),"addValues",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(19930,134,<591,4>,<593,5>),"updateBytes",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(30308,330,<899,1>,<908,2>),"getUpdateValue",10,3>,<|project://smallsql/src/smallsql/database/GroupResult.java|(5413,1779,<152,1>,<198,2>),"patchExpression",37,9>,<|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|(4293,188,<185,1>,<191,2>),"getPrecision",7,2>,<|project://smallsql/src/smallsql/database/Money.java|(2213,68,<76,4>,<78,5>),"floatValue",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(9546,73,<460,4>,<462,5>),"supportsSubqueriesInComparisons",3,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(13422,120,<436,1>,<440,2>),"createSQLXML",4,1>,<|project://smallsql/src/smallsql/database/MemoryStream.java|(4176,157,<149,1>,<155,2>),"readChars",7,2>,<|project://smallsql/src/smallsql/database/Utils.java|(4462,108,<143,4>,<145,5>),"bytes2float",3,1>,<|project://smallsql/src/smallsql/database/RowSource.java|(2836,143,<104,1>,<109,2>),"isLast",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(35472,297,<982,4>,<985,5>),"getSuperTypes",3,1>,<|project://smallsql/src/smallsql/junit/TestLanguage.java|(1980,284,<60,1>,<71,2>),"tearDown",10,2>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(15585,135,<358,4>,<360,5>),"getDouble",3,1>,<|project://smallsql/src/smallsql/database/ViewResult.java|(2930,110,<109,1>,<111,2>),"insertRow",3,1>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(6882,913,<244,4>,<269,5>),"sub",18,7>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(17142,132,<391,4>,<393,5>),"getArray",3,1>,<|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|(2228,86,<80,1>,<82,2>),"getLong",3,1>,<|project://smallsql/src/smallsql/database/Distinct.java|(3146,172,<139,4>,<144,5>),"isExpressionsFromThisRowSource",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(5793,342,<168,4>,<177,5>),"getDate",10,3>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnInt.java|(1546,66,<45,1>,<47,2>),"isNull",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionUCase.java|(1639,120,<52,1>,<55,2>),"getBytes",4,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(3829,78,<170,4>,<172,5>),"storesLowerCaseQuotedIdentifiers",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionMinute.java|(1484,60,<43,1>,<45,2>),"getFunction",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java|(2383,135,<80,1>,<83,2>),"getNumeric",4,2>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(1715,105,<51,1>,<54,38>),"MemoryResult",1,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionOctetLen.java|(1813,162,<57,1>,<63,2>),"getInt",5,2>,<|project://smallsql/src/smallsql/database/Columns.java|(2465,446,<84,4>,<100,5>),"add",9,3>,<|project://smallsql/src/smallsql/junit/BasicTestCase.java|(14034,249,<352,4>,<361,5>),"printRS",9,3>,<|project://smallsql/src/smallsql/database/Where.java|(4053,66,<176,1>,<178,2>),"execute",3,1>,<|project://smallsql/src/smallsql/database/IndexNodeScrollStatus.java|(2115,60,<66,1>,<68,2>),"afterLast",3,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(34637,62,<945,4>,<947,5>),"supportsBatchUpdates",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(11333,136,<274,4>,<276,5>),"setShort",3,1>,<|project://smallsql/src/smallsql/junit/TestDeleteUpdate.java|(3563,1343,<110,1>,<140,2>),"testUpdate2",25,2>,<|project://smallsql/src/smallsql/database/LongList.java|(1663,141,<60,1>,<64,2>),"get",5,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(35313,69,<972,4>,<974,5>),"supportsMultipleOpenResults",3,1>,<|project://smallsql/src/smallsql/database/DataSource.java|(2387,64,<76,1>,<76,65>),"init",1,1>,<|project://smallsql/src/smallsql/junit/TestAlterTable2.java|(498,610,<29,4>,<38,5>),"testWithPrimaryKey",10,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(7968,123,<228,4>,<230,5>),"getShort",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(18539,119,<561,4>,<563,5>),"updateNull",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(2565,81,<100,4>,<102,5>),"getDatabaseProductName",3,1>,<|project://smallsql/src/smallsql/database/TableResult.java|(7611,170,<258,4>,<264,5>),"next",7,2>,<|project://smallsql/src/smallsql/database/IndexNode.java|(5367,387,<196,1>,<205,2>),"addNode",5,2>,<|project://smallsql/src/smallsql/database/SSStatement.java|(9598,179,<366,4>,<369,5>),"executeUpdate",4,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(39586,4504,<1121,1>,<1219,5>),"expression",94,31>,<|project://smallsql/src/smallsql/database/Index.java|(2764,68,<76,4>,<78,5>),"Index",3,1>,<|project://smallsql/src/smallsql/database/Distinct.java|(1787,51,<59,1>,<61,2>),"isScrollable",3,1>,<|project://smallsql/src/smallsql/junit/BenchTest.java|(4122,1320,<103,4>,<131,5>),"test_InsertClassic",24,4>,<|project://smallsql/src/smallsql/database/CommandInsert.java|(2182,126,<63,4>,<66,5>),"addValues",3,1>,<|project://smallsql/src/smallsql/database/UnionAll.java|(5990,128,<250,1>,<254,2>),"execute",5,2>,<|project://smallsql/src/smallsql/database/Join.java|(1766,199,<52,4>,<57,5>),"Join",6,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionRand.java|(1571,101,<46,4>,<48,5>),"isNull",3,1>,<|project://smallsql/src/smallsql/database/ExpressionName.java|(2898,84,<98,4>,<100,5>),"getMoney",3,1>,<|project://smallsql/src/smallsql/database/MutableInteger.java|(1564,48,<51,1>,<53,2>),"floatValue",3,1>,<|project://smallsql/src/smallsql/database/ExpressionName.java|(4555,61,<158,4>,<160,5>),"getDataSource",3,1>,<|project://smallsql/src/smallsql/junit/TestTransactions.java|(3539,1055,<107,1>,<135,2>),"testCommitWithOneCommitRow",21,2>,<|project://smallsql/src/smallsql/database/Scrollable.java|(3534,271,<134,1>,<142,2>),"isAfterLast",9,5>,<|project://smallsql/src/smallsql/database/DataSource.java|(2454,31,<77,1>,<77,32>),"getAlias",1,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(13628,139,<319,4>,<321,5>),"setObject",3,1>,<|project://smallsql/src/smallsql/database/Database.java|(2063,1466,<59,1>,<94,5>),"getDatabase",28,7>,<|project://smallsql/src/smallsql/database/IndexNode.java|(11987,59,<412,1>,<414,2>),"saveRef",2,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(8619,76,<279,4>,<281,5>),"getTransactionIsolation",3,1>,<|project://smallsql/src/smallsql/junit/TestThreads.java|(4508,555,<143,20>,<153,21>),"run",11,2>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(12914,174,<307,4>,<309,5>),"setAsciiStream",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(36516,91,<1001,4>,<1003,5>),"getResultSetHoldability",3,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(3589,2747,<93,4>,<149,5>),"createStore",48,10>,<|project://smallsql/src/smallsql/database/IndexDescriptions.java|(3552,154,<136,4>,<140,5>),"add",5,2>,<|project://smallsql/src/smallsql/database/Utils.java|(5447,437,<177,4>,<188,5>),"long2bytes",12,1>,<|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|(2137,84,<75,1>,<77,2>),"getInt",3,1>,<|project://smallsql/src/smallsql/database/StoreNull.java|(1834,90,<65,1>,<67,2>),"getBoolean",3,1>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(1829,994,<57,1>,<82,2>),"MemoryResult",23,6>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(12339,137,<295,4>,<297,5>),"setBytes",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(11311,65,<575,4>,<577,5>),"getMaxProcedureNameLength",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(31650,136,<942,1>,<946,2>),"isWrapperFor",4,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(39172,142,<1274,1>,<1279,2>),"updateNClob",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionLeft.java|(1946,226,<64,1>,<70,2>),"getString",7,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|(1582,257,<46,1>,<51,2>),"ExpressionFunctionConvert",6,2>,<|project://smallsql/src/smallsql/database/Table.java|(2302,1142,<64,1>,<98,5>),"Table",28,5>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|(2508,104,<85,1>,<88,2>),"getString",4,2>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(20342,145,<600,4>,<602,5>),"updateTimestamp",3,1>,<|project://smallsql/src/smallsql/database/StorePageMap.java|(1990,173,<77,1>,<84,2>),"size",3,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(12650,127,<400,1>,<404,2>),"unwrap",4,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(22931,249,<675,4>,<684,5>),"clearRowBuffer",7,3>,<|project://smallsql/src/smallsql/junit/TestScrollable.java|(2921,1045,<76,1>,<94,2>),"testNextWithWhere",17,1>,<|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|(6441,127,<221,4>,<223,5>),"getColumnLabel",3,1>,<|project://smallsql/src/smallsql/junit/TestTokenizer.java|(4414,768,<153,1>,<172,71>),"failureTest",14,2>,<|project://smallsql/src/smallsql/database/LongTreeList.java|(12245,496,<423,1>,<441,2>),"loopToEndOfNode",16,4>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(34048,143,<1049,1>,<1054,2>),"updateSQLXML",4,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(18413,120,<558,4>,<560,5>),"updateObject",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(3686,113,<110,4>,<112,5>),"getShort",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionSubstring.java|(1618,110,<49,1>,<51,2>),"isNull",3,1>,<|project://smallsql/src/smallsql/database/JoinScroll.java|(2230,236,<69,4>,<76,5>),"beforeFirst",8,1>,<|project://smallsql/src/smallsql/junit/TestStatement.java|(13059,664,<321,4>,<337,5>),"testOther",10,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(3370,201,<85,4>,<90,5>),"StoreImpl",6,1>,<|project://smallsql/src/smallsql/database/IndexDescription.java|(7693,310,<244,1>,<254,2>),"save",8,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionChar.java|(1549,144,<47,4>,<51,2>),"getString",5,2>,<|project://smallsql/src/smallsql/junit/TestStatement.java|(4294,1624,<123,4>,<157,5>),"testMoreResults",30,2>,<|project://smallsql/src/smallsql/database/Table.java|(4648,212,<131,4>,<139,5>),"Table",6,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(9830,72,<274,4>,<276,5>),"clearWarnings",2,1>,<|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|(6574,126,<224,4>,<226,5>),"getColumnName",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|(3492,82,<144,1>,<146,2>),"getDouble",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunction.java|(2823,249,<91,1>,<98,2>),"equals",5,3>,<|project://smallsql/src/smallsql/database/MemoryStream.java|(3582,186,<129,1>,<134,2>),"readInt",6,1>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(16583,195,<525,1>,<531,5>),"setSource",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(27566,360,<818,4>,<827,5>),"getURL",10,3>,<|project://smallsql/src/smallsql/database/TableResult.java|(1985,52,<55,1>,<57,2>),"TableResult",3,1>,<|project://smallsql/src/smallsql/database/Strings.java|(2052,158,<78,4>,<82,5>),"toArray",5,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|(2777,432,<99,1>,<111,2>),"getString",13,7>,<|project://smallsql/src/smallsql/junit/TestFunctions.java|(22182,205,<361,4>,<366,5>),"a",6,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(17641,432,<769,4>,<773,5>),"getTablePrivileges",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionFloor.java|(1580,148,<46,4>,<50,5>),"getString",5,2>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(23548,137,<657,1>,<661,2>),"getSQLXML",4,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(16135,144,<370,4>,<372,5>),"getTimestamp",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionFloor.java|(1419,47,<38,4>,<38,51>),"getFunction",1,1>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(10528,65,<394,4>,<396,5>),"setSignum",3,1>,<|project://smallsql/src/smallsql/database/GroupResult.java|(3653,1139,<98,1>,<128,2>),"addInternalExpressionFromSelect",24,8>,<|project://smallsql/src/smallsql/junit/TestScrollable.java|(12009,892,<289,4>,<317,5>),"testUpdatableAssert",22,2>,<|project://smallsql/src/smallsql/database/SmallSQLException.java|(5421,767,<167,4>,<185,5>),"createFromException",7,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnInt.java|(1995,125,<75,1>,<78,2>),"getNumeric",4,2>,<|project://smallsql/src/smallsql/junit/BenchTest.java|(30534,237,<732,4>,<738,5>),"dropTestTable",7,2>,<|project://smallsql/src/smallsql/database/SortedResult.java|(5069,74,<175,1>,<178,2>),"last",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnInt.java|(1770,65,<60,1>,<62,2>),"getFloat",3,1>,<|project://smallsql/src/smallsql/database/Database.java|(8544,145,<250,1>,<252,2>),"dropView",3,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(9376,212,<359,4>,<363,5>),"getGeneratedKeys",5,2>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(6847,159,<200,4>,<203,5>),"setObject",4,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(7308,315,<228,1>,<236,2>),"testClosedConnection",3,2>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(12561,56,<340,4>,<342,5>),"readByte",3,1>,<|project://smallsql/src/smallsql/database/StoreNull.java|(2114,82,<79,1>,<81,2>),"getFloat",3,1>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(4047,74,<134,4>,<136,5>),"MutableNumeric",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(11194,133,<271,4>,<273,5>),"setByte",3,1>,<|project://smallsql/src/smallsql/database/Utils.java|(11610,255,<331,4>,<337,5>),"indexOf",7,3>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(8503,79,<400,4>,<402,5>),"supportsSchemasInTableDefinitions",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(1746,69,<52,4>,<54,5>),"allProceduresAreCallable",3,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(22627,6766,<655,4>,<814,5>),"writeExpression",151,72>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|(2621,105,<91,1>,<93,2>),"getDataType",3,1>,<|project://smallsql/src/smallsql/database/View.java|(3458,380,<114,1>,<121,2>),"drop",5,2>,<|project://smallsql/src/smallsql/database/SQLParser.java|(74143,166,<1925,4>,<1928,5>),"order",4,1>,<|project://smallsql/src/smallsql/database/Database.java|(11911,478,<344,1>,<357,5>),"getTables",14,5>,<|project://smallsql/src/smallsql/junit/TestDataTypes.java|(13274,132,<335,4>,<337,5>),"main",3,1>,<|project://smallsql/src/smallsql/database/UnionAll.java|(1624,97,<49,1>,<52,2>),"addDataSource",4,1>,<|project://smallsql/src/smallsql/junit/TestOperatoren.java|(6811,4518,<149,4>,<251,5>),"runTest",88,1>,<|project://smallsql/src/smallsql/junit/TestTokenizer.java|(3285,656,<112,1>,<132,2>),"testMultiLine",16,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(7637,227,<191,4>,<196,5>),"resizePage",6,1>,<|project://smallsql/src/smallsql/database/Expression.java|(5347,114,<202,1>,<204,2>),"getDisplaySize",3,1>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(4418,219,<149,1>,<154,2>),"MutableNumeric",6,1>,<|project://smallsql/src/smallsql/database/Distinct.java|(2506,83,<96,1>,<99,2>),"afterLast",4,1>,<|project://smallsql/src/smallsql/database/CommandInsert.java|(1916,256,<55,4>,<60,5>),"addColumnExpression",6,2>,<|project://smallsql/src/smallsql/database/CommandSet.java|(1402,84,<40,4>,<43,5>),"CommandSet",4,1>,<|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|(7903,146,<254,4>,<256,5>),"isDefinitelyWritable",3,1>,<|project://smallsql/src/smallsql/database/ViewResult.java|(4223,104,<163,1>,<165,2>),"getString",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(12760,148,<304,4>,<306,5>),"setTimestamp",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(11758,217,<337,4>,<343,5>),"isAfterLast",7,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionRand.java|(1508,52,<43,4>,<43,56>),"getFunction",1,1>,<|project://smallsql/src/smallsql/database/JoinScroll.java|(2486,3786,<80,4>,<175,5>),"next",94,28>,<|project://smallsql/src/smallsql/junit/TestOrderBy.java|(5916,667,<198,1>,<223,2>),"testOrderBy_varchar_desc",22,4>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(37738,148,<1065,1>,<1069,2>),"supportsStoredFunctionsUsingCallSyntax",4,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(74720,168,<1940,4>,<1943,5>),"group",4,1>,<|project://smallsql/src/smallsql/database/TableViewMap.java|(2422,96,<74,4>,<76,5>),"remove",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|(6850,327,<225,1>,<235,2>),"getDateTimeLong",9,4>,<|project://smallsql/src/smallsql/database/CommandUpdate.java|(1565,357,<50,1>,<62,2>),"addSetting",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|(2034,1336,<71,1>,<104,2>),"getLong",33,11>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(10454,63,<515,4>,<517,5>),"getMaxBinaryLiteralLength",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(23441,240,<697,4>,<704,5>),"moveToCurrentRow",7,2>,<|project://smallsql/src/smallsql/database/SSStatement.java|(5050,128,<192,4>,<195,5>),"getResultSet",4,1>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(10607,103,<399,4>,<404,2>),"floor",5,1>,<|project://smallsql/src/smallsql/database/Database.java|(11069,830,<316,4>,<341,5>),"getCatalogs",20,6>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(18917,106,<551,4>,<554,5>),"readBinary",4,1>,<|project://smallsql/src/smallsql/database/GroupResult.java|(4801,329,<131,1>,<140,2>),"patchExpressions",6,3>,<|project://smallsql/src/smallsql/database/IndexDescriptions.java|(3428,114,<129,4>,<133,5>),"close",5,2>,<|project://smallsql/src/smallsql/database/LongList.java|(1509,28,<45,1>,<47,2>),"LongList",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(6047,60,<250,4>,<252,5>),"supportsConvert",3,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(32984,911,<929,4>,<952,5>),"alter",20,7>,<|project://smallsql/src/smallsql/database/Join.java|(2130,111,<65,4>,<69,5>),"beforeFirst",5,1>,<|project://smallsql/src/smallsql/database/Join.java|(1980,136,<60,1>,<62,2>),"isScrollable",3,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(1831,307,<52,4>,<58,5>),"SSPreparedStatement",7,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionChar.java|(1700,58,<54,1>,<56,2>),"getDataType",3,1>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(17086,191,<580,4>,<583,5>),"toBigDecimal",4,2>,<|project://smallsql/src/smallsql/database/NoFromResult.java|(2225,136,<96,1>,<101,2>),"absolute",6,2>,<|project://smallsql/src/smallsql/database/ViewResult.java|(4334,102,<168,1>,<170,2>),"getBytes",3,1>,<|project://smallsql/src/smallsql/database/DateTime.java|(3488,306,<109,1>,<122,2>),"dayOfWeek",3,1>,<|project://smallsql/src/smallsql/database/LongTreeList.java|(16812,165,<588,1>,<593,2>),"getUnsignedShort",3,1>,<|project://smallsql/src/smallsql/junit/TestResultSet.java|(2097,1852,<66,4>,<108,5>),"testScrollStates",36,1>,<|project://smallsql/src/smallsql/database/SQLTokenizer.java|(10830,1224,<252,4>,<286,5>),"addKeyWord",34,7>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(12895,68,<355,4>,<357,5>),"readBoolean",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(31959,166,<955,1>,<960,2>),"getObject",5,1>,<|project://smallsql/src/smallsql/junit/BasicTestCase.java|(13830,195,<345,1>,<350,2>),"printSQL",6,1>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(10628,119,<300,1>,<305,2>),"isFirst",3,1>,<|project://smallsql/src/smallsql/database/Where.java|(2761,256,<108,1>,<115,2>),"previous",8,5>,<|project://smallsql/src/smallsql/database/UnionAll.java|(2557,99,<83,1>,<85,2>),"getBoolean",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(7141,253,<208,4>,<211,5>),"getUnicodeStream",3,1>,<|project://smallsql/src/smallsql/database/Column.java|(4819,110,<176,4>,<181,5>),"copy",5,2>,<|project://smallsql/src/smallsql/database/SSConnection.java|(9548,53,<309,4>,<311,5>),"getTypeMap",3,1>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(10758,122,<308,1>,<313,5>),"first",3,1>,<|project://smallsql/src/smallsql/database/SQLToken.java|(1666,236,<51,1>,<59,2>),"SQLToken",6,1>,<|project://smallsql/src/smallsql/database/DateTime.java|(8723,42,<296,1>,<298,2>),"getDataType",3,1>,<|project://smallsql/src/smallsql/database/Where.java|(2164,208,<78,1>,<84,2>),"isLast",7,2>,<|project://smallsql/src/smallsql/database/SQLParser.java|(67818,1669,<1763,4>,<1803,5>),"tableSource",32,8>,<|project://smallsql/src/smallsql/database/Expression.java|(5028,312,<187,1>,<199,2>),"getScale",13,6>,<|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|(1983,111,<64,1>,<66,2>),"getBoolean",3,1>,<|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|(3560,1152,<120,1>,<158,2>),"getDisplaySize",39,23>,<|project://smallsql/src/smallsql/database/SSConnection.java|(4725,229,<140,1>,<148,2>),"add",6,1>,<|project://smallsql/src/smallsql/junit/TestOther.java|(10095,1423,<252,4>,<277,5>),"testLike",22,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(11681,54,<600,4>,<602,5>),"getMaxStatements",3,1>,<|project://smallsql/src/smallsql/junit/TestDeleteUpdate.java|(2319,1238,<79,1>,<108,2>),"testUpdate1",25,2>,<|project://smallsql/src/smallsql/database/ExpressionInSelect.java|(1820,445,<55,1>,<69,2>),"loadInList",14,5>,<|project://smallsql/src/smallsql/database/CommandInsert.java|(1812,94,<49,4>,<52,5>),"CommandInsert",4,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(14272,167,<331,4>,<333,5>),"setTimestamp",3,1>,<|project://smallsql/src/smallsql/junit/BasicTestCase.java|(4257,1021,<124,4>,<152,5>),"assertEqualsObject",27,13>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(16119,58,<461,4>,<463,5>),"readTime",3,1>,<|project://smallsql/src/smallsql/junit/AllTests.java|(3281,1265,<98,4>,<123,5>),"suite",26,1>,<|project://smallsql/src/smallsql/database/LongLongList.java|(1545,69,<47,1>,<49,2>),"LongLongList",3,1>,<|project://smallsql/src/smallsql/database/IndexDescription.java|(3066,50,<94,1>,<96,2>),"getColumns",3,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(11715,271,<328,4>,<332,5>),"setURL",4,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(13178,116,<424,1>,<428,2>),"createBlob",4,1>,<|project://smallsql/src/smallsql/junit/TestOther.java|(8348,1733,<219,4>,<249,5>),"testCharEqualsVarchar",23,1>,<|project://smallsql/src/smallsql/database/IndexNode.java|(12058,79,<417,1>,<419,2>),"loadRef",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|(2179,129,<83,1>,<87,2>),"getDouble",5,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(9136,80,<435,4>,<437,5>),"supportsCatalogsInPrivilegeDefinitions",3,1>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(1629,289,<47,4>,<55,5>),"ExpressionArithmetic",6,1>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(6008,83,<246,1>,<248,2>),"getLong",3,1>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(6791,131,<211,1>,<214,2>),"testMaxInt",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionRTrim.java|(1639,321,<52,1>,<62,2>),"getBytes",11,4>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(3941,92,<106,4>,<108,5>),"getShort",3,1>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(1659,38,<51,1>,<53,2>),"TestGroupBy",3,1>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(9731,128,<310,1>,<313,2>),"testFirst2",4,1>,<|project://smallsql/src/smallsql/database/ExpressionName.java|(2709,85,<90,4>,<92,5>),"getFloat",3,1>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(17504,55,<567,4>,<569,5>),"getMaxRows",3,1>,<|project://smallsql/src/smallsql/database/MutableFloat.java|(1448,53,<43,1>,<45,2>),"MutableFloat",3,1>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(3858,59,<131,1>,<134,2>),"first",4,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(1646,108,<48,4>,<50,5>),"SSCallableStatement",3,1>,<|project://smallsql/src/smallsql/junit/BasicTestCase.java|(5293,238,<155,1>,<160,5>),"assertRowCount",6,1>,<|project://smallsql/src/smallsql/database/UnionAll.java|(2663,87,<88,1>,<90,2>),"getInt",3,1>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(21792,57,<649,4>,<651,5>),"getDataType",3,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(17677,244,<516,4>,<521,5>),"writeBytes",6,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionHour.java|(1546,168,<48,1>,<52,2>),"getInt",5,2>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(9631,295,<245,4>,<248,5>),"registerOutParameter",3,1>,<|project://smallsql/src/smallsql/database/SortedResult.java|(5990,533,<215,4>,<233,5>),"absolute",19,7>,<|project://smallsql/src/smallsql/database/Table.java|(8733,227,<254,4>,<257,5>),"getStoreInsert",4,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(5480,142,<210,4>,<213,5>),"setFetchDirection",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnString.java|(2464,70,<90,1>,<92,2>),"getObject",3,1>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(30144,119,<802,4>,<804,5>),"getBytes",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(34711,365,<950,4>,<954,5>),"getUDTs",5,1>,<|project://smallsql/src/smallsql/database/LongTreeListEnum.java|(1493,143,<45,1>,<51,2>),"reset",4,1>,<|project://smallsql/src/smallsql/junit/TestStatement.java|(2980,1296,<91,4>,<120,5>),"testMaxRows",26,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(4644,66,<135,4>,<137,5>),"getAutoCommit",3,1>,<|project://smallsql/src/smallsql/database/NoFromResult.java|(3041,227,<146,4>,<152,5>),"isExpressionsFromThisRowSource",3,1>,<|project://smallsql/src/smallsql/junit/AllTests.java|(2988,285,<89,4>,<96,5>),"printRS",8,3>,<|project://smallsql/src/smallsql/database/IndexNode.java|(4538,416,<163,1>,<177,2>),"addNode",11,3>,<|project://smallsql/src/smallsql/database/LongList.java|(1981,151,<80,1>,<84,2>),"resize",5,1>,<|project://smallsql/src/smallsql/database/UnionAll.java|(5705,67,<228,1>,<230,2>),"rowInserted",3,1>,<|project://smallsql/src/smallsql/junit/AllTests.java|(2210,766,<64,1>,<87,5>),"createConnection",10,3>,<|project://smallsql/src/smallsql/database/LongTreeList.java|(5541,216,<189,1>,<196,2>),"save",4,1>,<|project://smallsql/src/smallsql/database/IndexNode.java|(9604,300,<319,1>,<329,2>),"addRoot",7,2>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(12385,168,<333,4>,<338,5>),"writeByte",5,2>,<|project://smallsql/src/smallsql/database/SSStatement.java|(5324,146,<204,4>,<207,5>),"getMoreResults",4,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(20757,121,<535,1>,<539,2>),"setPoolable",3,1>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(6163,145,<191,1>,<194,2>),"testSumLong",4,1>,<|project://smallsql/src/smallsql/database/View.java|(2742,231,<87,1>,<95,2>),"View",6,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(9711,65,<470,4>,<472,5>),"supportsSubqueriesInIns",3,1>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(2746,937,<91,1>,<123,2>),"testTest",23,3>,<|project://smallsql/src/smallsql/database/CreateFile.java|(1966,697,<66,4>,<90,5>),"rollback",20,4>,<|project://smallsql/src/smallsql/database/TableResult.java|(7796,71,<267,1>,<271,2>),"afterLast",5,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(38886,141,<1261,1>,<1266,2>),"updateClob",4,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(2644,178,<78,4>,<81,5>),"setNull",4,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(9418,591,<273,4>,<292,5>),"isKeyword",20,15>,<|project://smallsql/src/smallsql/database/ExpressionFunctionRand.java|(1683,192,<51,4>,<56,5>),"getDouble",6,3>,<|project://smallsql/src/smallsql/database/Expressions.java|(2052,183,<78,1>,<84,2>),"add",7,2>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(10954,144,<314,4>,<316,5>),"getCharacterStream",3,1>,<|project://smallsql/src/smallsql/database/FileIndexNode.java|(1577,279,<48,1>,<56,2>),"FileIndexNode",5,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(9439,145,<261,4>,<263,5>),"getUnicodeStream",3,1>,<|project://smallsql/src/smallsql/database/Utils.java|(11150,303,<317,4>,<322,5>),"string2boolean",6,2>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(6787,342,<166,4>,<175,5>),"readPageHeader",10,2>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(25175,164,<725,1>,<730,2>),"setCharacterStream",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnInt.java|(2127,108,<81,1>,<84,2>),"getObject",4,2>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(18945,133,<570,4>,<572,5>),"updateShort",3,1>,<|project://smallsql/src/smallsql/database/language/Language.java|(12457,676,<308,1>,<332,2>),"setSqlStates",13,3>,<|project://smallsql/src/smallsql/database/Identity.java|(2260,373,<70,1>,<80,2>),"createStorePage",11,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(5969,66,<245,4>,<247,5>),"nullPlusNonNullIsNull",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(9590,143,<264,4>,<266,5>),"getBinaryStream",3,1>,<|project://smallsql/src/smallsql/database/MemoryStream.java|(1528,46,<47,1>,<49,2>),"MemoryStream",3,1>,<|project://smallsql/src/smallsql/database/Table.java|(8978,310,<260,4>,<266,2>),"getStoreTemp",4,1>,<|project://smallsql/src/smallsql/junit/BasicTestCase.java|(13485,328,<336,4>,<341,5>),"assertSQLException",6,1>,<|project://smallsql/src/smallsql/database/Expression.java|(5630,42,<218,1>,<220,2>),"isNullable",3,1>,<|project://smallsql/src/smallsql/database/Database.java|(14095,1775,<401,1>,<441,2>),"getReferenceKeys",39,10>,<|project://smallsql/src/smallsql/database/ExpressionName.java|(5748,56,<226,1>,<228,2>),"isNullable",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionDegrees.java|(1488,129,<40,4>,<43,5>),"getDouble",4,2>,<|project://smallsql/src/smallsql/database/SortedResult.java|(6987,58,<255,1>,<257,2>),"getRow",3,2>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(4721,318,<162,4>,<174,5>),"add",9,3>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(37018,61,<1031,4>,<1033,5>),"locatorsUpdateCopy",3,1>,<|project://smallsql/src/smallsql/database/ExpressionInSelect.java|(1626,186,<48,1>,<52,2>),"ExpressionInSelect",5,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(17578,169,<538,4>,<540,5>),"updateAsciiStream",3,1>,<|project://smallsql/src/smallsql/database/Scrollable.java|(1838,176,<53,1>,<59,2>),"Scrollable",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(11526,72,<590,4>,<592,5>),"doesMaxRowSizeIncludeBlobs",3,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(4507,117,<170,4>,<173,5>),"cancel",3,1>,<|project://smallsql/src/smallsql/database/Join.java|(3455,87,<131,1>,<136,2>),"noRow",6,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(14635,145,<444,1>,<449,2>),"setAsciiStream",4,1>,<|project://smallsql/src/smallsql/database/IndexNode.java|(3126,353,<92,4>,<99,5>),"createIndexNode",3,1>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(5357,494,<168,1>,<179,2>),"testComplex",12,2>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(13514,151,<395,1>,<400,2>),"setClob",4,1>,<|project://smallsql/src/smallsql/database/TableResult.java|(8847,81,<319,1>,<323,5>),"nullRow",5,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|(1645,109,<52,1>,<54,2>),"getBytes",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(12529,306,<370,4>,<378,5>),"first",9,3>,<|project://smallsql/src/smallsql/database/SQLParser.java|(19054,267,<573,4>,<577,5>),"createDatabase",5,2>,<|project://smallsql/src/smallsql/database/Identity.java|(1701,553,<52,1>,<68,2>),"Identity",17,1>,<|project://smallsql/src/smallsql/junit/TestStatement.java|(12431,614,<307,4>,<318,5>),"testResultSetType",9,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(9083,217,<299,4>,<301,5>),"prepareStatement",3,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(5287,203,<156,4>,<159,5>),"setTimestamp",4,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(8780,76,<415,4>,<417,5>),"supportsCatalogsInDataManipulation",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(20883,120,<541,1>,<545,2>),"isPoolable",4,1>,<|project://smallsql/src/smallsql/database/IndexDescription.java|(6663,134,<205,4>,<210,5>),"close",6,2>,<|project://smallsql/src/smallsql/database/TableView.java|(2540,92,<70,1>,<73,2>),"TableView",4,1>,<|project://smallsql/src/smallsql/database/StorePage.java|(1831,86,<57,1>,<60,2>),"setPageData",4,1>,<|project://smallsql/src/smallsql/database/ViewResult.java|(6240,49,<276,1>,<278,2>),"noRow",3,1>,<|project://smallsql/src/smallsql/database/UnionAll.java|(2954,96,<103,1>,<105,2>),"getDouble",3,1>,<|project://smallsql/src/smallsql/database/Index.java|(10972,611,<294,1>,<311,2>),"removeValue",18,5>,<|project://smallsql/src/smallsql/database/CommandCreateDatabase.java|(1696,411,<50,4>,<60,5>),"executeImpl",11,3>,<|project://smallsql/src/smallsql/database/CommandCreateView.java|(1595,178,<48,4>,<54,2>),"addColumn",3,1>,<|project://smallsql/src/smallsql/database/TableResult.java|(8936,74,<326,1>,<330,2>),"noRow",5,1>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(4617,470,<140,1>,<160,2>),"setParamAt",21,9>,<|project://smallsql/src/smallsql/database/Database.java|(10799,260,<309,1>,<313,2>),"createView",3,1>,<|project://smallsql/src/smallsql/database/IndexNode.java|(8845,262,<297,1>,<302,2>),"moveRemainderValueSub",6,1>,<|project://smallsql/src/smallsql/database/DateTime.java|(4245,138,<143,1>,<146,2>),"valueOf",4,2>,<|project://smallsql/src/smallsql/database/DataSources.java|(1510,147,<48,1>,<52,2>),"get",5,2>,<|project://smallsql/src/smallsql/database/TableResult.java|(8416,422,<304,1>,<316,2>),"rowDeleted",11,5>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(11892,139,<286,4>,<288,5>),"setDouble",3,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(15545,1496,<469,4>,<511,5>),"insert",40,9>,<|project://smallsql/src/smallsql/database/Database.java|(15879,1399,<444,1>,<477,2>),"getBestRowIdentifier",33,6>,<|project://smallsql/src/smallsql/database/ExpressionFunctionAscii.java|(1821,179,<60,1>,<64,2>),"getObject",5,3>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(32918,142,<998,1>,<1003,2>),"updateNString",4,1>,<|project://smallsql/src/smallsql/junit/BenchTest.java|(5466,817,<135,4>,<156,5>),"test_DeleteAll",17,2>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(6417,216,<187,4>,<191,5>),"setObject",4,1>,<|project://smallsql/src/smallsql/database/LongTreeList.java|(11389,847,<400,1>,<420,2>),"setPreviousOffset",14,4>,<|project://smallsql/src/smallsql/database/MutableDouble.java|(1806,68,<67,1>,<69,2>),"getImmutableObject",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionRepeat.java|(2286,106,<73,4>,<75,5>),"getPrecision",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|(2240,1348,<72,4>,<102,5>),"getObject",31,18>,<|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|(3765,82,<159,1>,<161,2>),"getObject",3,1>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(13986,1138,<423,1>,<452,5>),"getInt",30,20>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(4704,170,<175,1>,<179,2>),"relative",5,2>,<|project://smallsql/src/smallsql/database/SSDriver.java|(4190,56,<121,4>,<123,5>),"getMajorVersion",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionCos.java|(1477,123,<40,4>,<43,5>),"getDouble",4,2>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(9865,131,<315,1>,<318,2>),"testLast1",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionRTrim.java|(1560,72,<47,1>,<49,2>),"isNull",3,1>,<|project://smallsql/src/smallsql/database/ForeignKeys.java|(1929,163,<71,1>,<75,2>),"resize",5,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(3272,189,<96,4>,<99,5>),"setShort",4,1>,<|project://smallsql/src/smallsql/junit/TestTokenizer.java|(2480,261,<84,1>,<91,2>),"dropTable",7,2>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(24576,129,<699,1>,<703,2>),"setBlob",3,1>,<|project://smallsql/src/smallsql/database/TableResult.java|(2049,529,<60,1>,<79,2>),"init",13,3>,<|project://smallsql/src/smallsql/database/Money.java|(1726,78,<56,4>,<58,5>),"Money",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(16675,143,<520,4>,<522,5>),"updateBigDecimal",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnInt.java|(1916,72,<70,1>,<72,2>),"getMoney",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(10961,58,<550,4>,<552,5>),"getMaxColumnsInTable",3,1>,<|project://smallsql/src/smallsql/junit/TestOrderBy.java|(7940,576,<280,1>,<300,2>),"testOrderBy_varchar_Join",17,2>,<|project://smallsql/src/smallsql/database/Utils.java|(5217,110,<169,4>,<171,5>),"double2bytes",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(25074,120,<747,4>,<749,5>),"getBlob",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|(2483,61,<75,1>,<77,2>),"getFunction",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(10270,79,<505,4>,<507,5>),"supportsOpenStatementsAcrossCommit",3,1>,<|project://smallsql/src/smallsql/database/NoFromResult.java|(2846,48,<133,1>,<135,2>),"nullRow",3,1>,<|project://smallsql/src/smallsql/junit/TestDBMetaData.java|(9459,1191,<204,4>,<221,5>),"testGetTypeInfo",15,2>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(37366,153,<1192,1>,<1197,2>),"updateNCharacterStream",4,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(23901,209,<717,4>,<720,5>),"getRef",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|(1890,69,<61,1>,<63,2>),"getBoolean",3,1>,<|project://smallsql/src/smallsql/database/View.java|(2982,468,<98,1>,<111,2>),"createColumns",14,3>,<|project://smallsql/src/smallsql/junit/TestTransactions.java|(1470,1085,<43,1>,<74,2>),"testCreateTable",27,2>,<|project://smallsql/src/smallsql/junit/BasicTestCase.java|(5549,722,<163,4>,<185,2>),"assertRowCount",19,5>,<|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|(1548,82,<45,4>,<47,5>),"getInt",3,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(13296,313,<371,4>,<379,5>),"writeInt",8,2>,<|project://smallsql/src/smallsql/junit/TestDBMetaData.java|(1613,214,<54,4>,<58,5>),"testGetURL",5,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|(1479,58,<43,1>,<45,2>),"getFunction",3,1>,<|project://smallsql/src/smallsql/database/IndexNode.java|(10709,93,<361,1>,<363,2>),"findNodePos",3,1>,<|project://smallsql/src/smallsql/junit/TestDeleteUpdate.java|(1607,706,<58,1>,<77,2>),"testDelete",17,2>,<|project://smallsql/src/smallsql/database/DateTime.java|(21462,107,<700,1>,<702,2>),"getTimestamp",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(11960,104,<620,4>,<622,5>),"getDefaultTransactionIsolation",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionAscii.java|(1481,59,<43,1>,<45,2>),"getFunction",3,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(36420,1015,<1022,4>,<1051,5>),"expressionParenthesisList",22,6>,<|project://smallsql/src/smallsql/database/Column.java|(2577,63,<77,1>,<79,2>),"getDefaultDefinition",3,1>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(10002,126,<320,1>,<323,2>),"testLast2",4,1>,<|project://smallsql/src/smallsql/database/Expression.java|(4857,96,<176,1>,<178,2>),"getPrecision",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(37216,145,<1185,1>,<1190,2>),"updateNCharacterStream",4,1>,<|project://smallsql/src/smallsql/database/TableResult.java|(3264,902,<110,1>,<137,2>),"updateRow",18,3>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(7536,147,<239,1>,<242,2>),"testMaxFloat",4,1>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(17282,65,<585,1>,<587,2>),"getImmutableObject",3,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(7523,598,<290,4>,<306,5>),"getMoreResults",16,5>,<|project://smallsql/src/smallsql/junit/TestAlterTable2.java|(297,187,<20,4>,<26,5>),"tearDown",7,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionPower.java|(1422,53,<38,4>,<38,57>),"getFunction",1,1>,<|project://smallsql/src/smallsql/database/Distinct.java|(2921,58,<123,1>,<126,2>),"noRow",4,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(9387,65,<450,4>,<452,5>),"supportsSelectForUpdate",3,1>,<|project://smallsql/src/smallsql/junit/TestExceptionMethods.java|(8188,655,<234,4>,<250,5>),"testAmbiguousColumn",17,2>,<|project://smallsql/src/smallsql/database/CommandInsert.java|(2408,1707,<73,4>,<110,5>),"compile",32,9>,<|project://smallsql/src/smallsql/junit/TestOrderBy.java|(13928,633,<519,1>,<542,2>),"test_bigint",20,2>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(48523,2915,<1270,4>,<1333,5>),"getObject",61,34>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(16154,251,<744,4>,<748,5>),"getTableTypes",5,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(9318,212,<304,4>,<306,5>),"prepareCall",3,1>,<|project://smallsql/src/smallsql/junit/TestExceptionMethods.java|(6939,912,<199,4>,<219,5>),"testDuplicatedCreateTable",18,2>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(20205,358,<588,4>,<594,5>),"writeLongString",7,1>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(18002,826,<542,4>,<561,2>),"getMoney",20,13>,<|project://smallsql/src/smallsql/database/SSConnection.java|(11114,234,<366,4>,<369,5>),"createStatement",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|(3497,57,<101,1>,<103,2>),"getPrecision",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(8220,120,<234,4>,<236,5>),"getLong",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|(1498,61,<42,1>,<44,2>),"getFunction",3,1>,<|project://smallsql/src/smallsql/junit/TestAlterTable.java|(1333,187,<39,4>,<45,5>),"tearDown",7,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|(2439,597,<69,1>,<81,2>),"getString",13,3>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(4883,68,<182,1>,<184,2>),"getRow",3,2>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(8684,315,<263,4>,<267,5>),"setCharacterStream",4,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(12194,139,<292,4>,<294,5>),"setString",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|(1765,83,<54,1>,<56,5>),"getFloat",3,1>,<|project://smallsql/src/smallsql/database/TableViewResult.java|(2199,79,<71,1>,<73,2>),"getAlias",3,2>,<|project://smallsql/src/smallsql/database/Join.java|(3094,85,<111,1>,<113,2>),"rowInserted",3,1>,<|project://smallsql/src/smallsql/junit/TestResultSet.java|(9897,441,<250,4>,<259,5>),"testDelete",9,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(18809,130,<567,4>,<569,5>),"updateByte",3,1>,<|project://smallsql/src/smallsql/database/StorePageMap.java|(5744,174,<219,1>,<227,2>),"clear",6,2>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(11611,133,<280,4>,<282,5>),"setLong",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(14907,129,<343,4>,<345,5>),"getByte",3,1>,<|project://smallsql/src/smallsql/junit/TestResultSet.java|(3963,1903,<111,4>,<151,5>),"testScrollStatesGroupBy",35,1>,<|project://smallsql/src/smallsql/database/SSDriver.java|(3732,89,<107,4>,<109,5>),"acceptsURL",3,1>,<|project://smallsql/src/smallsql/junit/BenchTest.java|(25897,1379,<608,4>,<640,5>),"test_UpdateLargeBinary",28,3>,<|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|(1847,55,<54,1>,<56,2>),"getFunction",3,1>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(30281,274,<807,4>,<818,5>),"isInList",12,4>,<|project://smallsql/src/smallsql/database/TableResult.java|(7879,59,<274,1>,<277,5>),"getRow",4,1>,<|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|(3174,125,<103,1>,<105,2>),"isNumberDataType",3,1>,<|project://smallsql/src/smallsql/database/RowSource.java|(2984,167,<111,1>,<116,2>),"isAfterLast",3,1>,<|project://smallsql/src/smallsql/database/IndexDescription.java|(2848,80,<84,1>,<86,2>),"isPrimary",3,1>,<|project://smallsql/src/smallsql/database/Money.java|(2443,394,<86,4>,<96,5>),"toString",10,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(7930,61,<253,4>,<255,5>),"isReadOnly",3,1>,<|project://smallsql/src/smallsql/database/TableResult.java|(8323,84,<298,1>,<301,2>),"rowInserted",4,1>,<|project://smallsql/src/smallsql/junit/TestOther.java|(12699,751,<310,4>,<326,5>),"testCatalog",15,1>,<|project://smallsql/src/smallsql/database/Lobs.java|(1595,147,<49,1>,<55,2>),"getFile",4,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(20571,347,<596,4>,<601,5>),"readLongString",6,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(33820,93,<905,4>,<907,5>),"ownDeletesAreVisible",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(31791,163,<948,1>,<953,2>),"getObject",5,1>,<|project://smallsql/src/smallsql/junit/TestStatement.java|(6168,506,<168,4>,<180,5>),"testFetch",10,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(15189,76,<426,4>,<428,5>),"readFloat",3,1>,<|project://smallsql/src/smallsql/database/Table.java|(10488,1163,<311,4>,<338,5>),"requestLock",19,6>,<|project://smallsql/src/smallsql/database/SSConnection.java|(10380,417,<345,4>,<354,5>),"rollback",10,3>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(4686,106,<210,4>,<212,5>),"getSystemFunctions",3,1>,<|project://smallsql/src/smallsql/database/TableStorePage.java|(1550,201,<46,1>,<51,2>),"TableStorePage",6,1>,<|project://smallsql/src/smallsql/database/Where.java|(3838,58,<160,1>,<163,2>),"noRow",4,1>,<|project://smallsql/src/smallsql/junit/TestOrderBy.java|(8524,650,<303,1>,<326,2>),"testOrderBy_nvarchar",20,2>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(4333,291,<118,4>,<126,5>),"getLong",9,2>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(12406,121,<345,1>,<349,2>),"setPoolable",3,1>,<|project://smallsql/src/smallsql/database/MemoryStream.java|(4339,162,<157,1>,<162,2>),"readBytes",6,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(34773,145,<1081,1>,<1085,2>),"getNCharacterStream",4,1>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(13606,901,<489,4>,<510,5>),"floatValue",19,8>,<|project://smallsql/src/smallsql/database/Command.java|(1950,355,<68,4>,<76,5>),"addColumnExpression",3,1>,<|project://smallsql/src/smallsql/database/TableView.java|(5379,45,<157,1>,<159,2>),"getTimestamp",3,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(14115,125,<468,1>,<472,2>),"getClientInfo",4,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(12534,98,<643,4>,<645,5>),"supportsDataDefinitionAndDataManipulationTransactions",3,1>,<|project://smallsql/src/smallsql/database/Expression.java|(1986,88,<59,1>,<61,2>),"clone",3,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(19962,235,<580,4>,<586,5>),"readChars",7,2>,<|project://smallsql/src/smallsql/junit/TestStatement.java|(6692,2769,<183,4>,<240,5>),"testGeneratedKeys",50,2>,<|project://smallsql/src/smallsql/junit/TestFunctions.java|(22395,115,<368,4>,<371,5>),"TestFunctions",4,1>,<|project://smallsql/src/smallsql/junit/TestResultSet.java|(7201,2678,<185,4>,<247,5>),"testUpdateAndScroll",48,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(5368,251,<230,4>,<233,5>),"supportsAlterTableWithAddColumn",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(15042,132,<346,4>,<348,5>),"getShort",3,1>,<|project://smallsql/src/smallsql/database/SortedResult.java|(7565,172,<294,4>,<299,5>),"isExpressionsFromThisRowSource",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(36415,164,<1150,1>,<1155,2>),"updateBlob",4,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(10225,137,<340,4>,<342,5>),"setSavepoint",3,1>,<|project://smallsql/src/smallsql/database/DateTime.java|(22160,1037,<737,2>,<790,3>),"Details",49,11>,<|project://smallsql/src/smallsql/database/ExpressionFunctionLeft.java|(1655,282,<52,1>,<61,2>),"getBytes",9,3>,<|project://smallsql/src/smallsql/database/Table.java|(11663,4506,<340,4>,<451,2>),"requestLockImpl",99,35>,<|project://smallsql/src/smallsql/database/ExpressionFunctionYear.java|(1547,168,<48,1>,<52,2>),"getInt",5,2>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(5923,80,<242,1>,<244,2>),"getInt",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(20070,130,<594,4>,<596,5>),"updateDate",3,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(13547,128,<442,1>,<446,2>),"isValid",4,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(10676,60,<530,4>,<532,5>),"getMaxColumnsInGroupBy",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionTan.java|(1418,51,<38,4>,<38,55>),"getFunction",1,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionBitLen.java|(1796,166,<57,1>,<63,2>),"getInt",5,2>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(4487,177,<132,4>,<135,5>),"setString",4,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(15095,86,<422,4>,<424,5>),"writeFloat",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|(1910,66,<59,1>,<61,2>),"isNull",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java|(2128,123,<68,1>,<71,2>),"getDouble",4,2>,<|project://smallsql/src/smallsql/database/Column.java|(3468,73,<119,4>,<121,5>),"setDataType",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(4630,294,<127,4>,<135,5>),"getFloat",9,2>,<|project://smallsql/src/smallsql/database/SSStatement.java|(2783,646,<103,4>,<119,5>),"executeImpl",17,5>,<|project://smallsql/src/smallsql/database/Join.java|(3889,914,<150,4>,<174,5>),"isExpressionsFromThisRowSource",18,7>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(14936,149,<458,1>,<463,2>),"setCharacterStream",4,1>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(4655,55,<157,4>,<159,5>),"getInternalValue",3,1>,<|project://smallsql/src/smallsql/database/ExpressionName.java|(4679,107,<165,1>,<171,2>),"getTable",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionDayOfMonth.java|(1492,64,<43,1>,<45,2>),"getFunction",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(35086,166,<1094,1>,<1099,2>),"updateNCharacterStream",4,1>,<|project://smallsql/src/smallsql/database/Index.java|(16330,463,<499,1>,<516,2>),"numericToBinarySortOrder",18,4>,<|project://smallsql/src/smallsql/database/SQLParser.java|(15375,160,<461,1>,<466,2>),"truncate",6,1>,<|project://smallsql/src/smallsql/junit/TestExceptionMethods.java|(1501,2923,<44,4>,<126,5>),"testForwardOnly",71,11>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(3845,90,<103,4>,<105,5>),"getByte",3,1>,<|project://smallsql/src/smallsql/database/Index.java|(2975,1017,<85,1>,<109,5>),"findRows",14,4>,<|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|(1461,79,<41,1>,<43,5>),"getBoolean",3,1>,<|project://smallsql/src/smallsql/database/IndexScrollStatus.java|(1914,143,<49,1>,<53,2>),"IndexScrollStatus",5,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java|(1620,131,<44,1>,<47,2>),"getBoolean",4,2>,<|project://smallsql/src/smallsql/junit/BenchTest.java|(1836,2262,<52,4>,<99,5>),"main",47,10>,<|project://smallsql/src/smallsql/database/ViewResult.java|(4888,77,<194,1>,<196,2>),"isFirst",3,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(9718,92,<319,4>,<321,5>),"setHoldability",3,1>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(32326,1432,<875,4>,<901,5>),"getOperationFromToken",27,23>,<|project://smallsql/src/smallsql/database/IndexNode.java|(7601,437,<253,1>,<263,2>),"addRoot",5,2>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(12850,205,<381,1>,<388,2>),"previous",8,2>,<|project://smallsql/src/smallsql/database/IndexNode.java|(4198,261,<147,1>,<155,2>),"getChildNode",5,2>,<|project://smallsql/src/smallsql/database/StorePageMap.java|(6539,129,<253,2>,<260,3>),"Entry",5,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(19788,136,<588,4>,<590,5>),"updateString",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(34134,96,<920,4>,<922,5>),"othersDeletesAreVisible",3,1>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(5734,84,<233,1>,<235,2>),"isNull",3,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(12532,120,<351,1>,<355,2>),"isPoolable",4,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(20341,148,<516,1>,<521,2>),"setBlob",4,1>,<|project://smallsql/src/smallsql/junit/TestStatement.java|(1512,274,<48,4>,<55,5>),"setUp",8,2>,<|project://smallsql/src/smallsql/database/IndexDescription.java|(4285,251,<140,1>,<146,2>),"create",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|(1409,45,<38,4>,<38,49>),"getFunction",1,1>,<|project://smallsql/src/smallsql/database/SortedResult.java|(7755,211,<302,4>,<307,5>),"getRowCount",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|(1566,74,<43,4>,<45,5>),"isNull",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(3570,110,<107,4>,<109,5>),"getByte",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(15598,168,<499,4>,<501,5>),"updateBoolean",3,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(37295,136,<1046,1>,<1050,2>),"isWrapperFor",4,1>,<|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|(1750,92,<55,1>,<57,2>),"getBoolean",3,1>,<|project://smallsql/src/smallsql/database/Expression.java|(2259,63,<75,1>,<77,2>),"setAlias",3,1>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(34788,424,<938,4>,<947,5>),"getDataType",6,3>,<|project://smallsql/src/smallsql/database/Scrollable.java|(2081,85,<67,1>,<70,2>),"beforeFirst",4,1>,<|project://smallsql/src/smallsql/database/Column.java|(3321,77,<111,4>,<113,5>),"setNullable",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|(3596,148,<104,4>,<108,5>),"getString",5,2>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(24844,160,<711,1>,<716,2>),"setAsciiStream",4,1>,<|project://smallsql/src/smallsql/database/NoFromResult.java|(1993,56,<79,1>,<82,2>),"last",4,1>,<|project://smallsql/src/smallsql/junit/BasicTestCase.java|(2574,843,<82,1>,<99,2>),"assertRSMetaData",18,4>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(37825,144,<1213,1>,<1218,2>),"updateCharacterStream",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionPower.java|(1584,143,<44,4>,<47,5>),"getDouble",4,2>,<|project://smallsql/src/smallsql/database/TableResult.java|(9486,138,<349,1>,<352,5>),"getInt",4,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(10075,132,<335,4>,<337,5>),"setSavepoint",3,1>,<|project://smallsql/src/smallsql/junit/TestDataTypes.java|(2942,103,<63,4>,<66,5>),"TestDataTypes",4,1>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(8758,252,<279,1>,<283,2>),"testMaxUniqueidentifier",5,1>,<|project://smallsql/src/smallsql/database/JoinScrollIndex.java|(2010,239,<63,4>,<69,5>),"createIndex",7,2>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(21625,133,<573,1>,<577,2>),"getRowId",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionLog.java|(1418,51,<38,4>,<38,55>),"getFunction",1,1>,<|project://smallsql/src/smallsql/junit/TestOther.java|(2317,1135,<63,1>,<82,2>),"testDistinct",19,1>,<|project://smallsql/src/smallsql/database/Expressions.java|(3018,143,<124,1>,<128,2>),"toArray",5,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|(2533,760,<80,1>,<103,2>),"getString",24,5>,<|project://smallsql/src/smallsql/database/ExpressionName.java|(3192,88,<110,4>,<112,5>),"getString",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(8100,64,<375,4>,<377,5>),"getCatalogTerm",3,1>,<|project://smallsql/src/smallsql/junit/TestDBMetaData.java|(1543,56,<49,1>,<51,2>),"TestDBMetaData",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnInt.java|(1700,63,<55,1>,<57,2>),"getLong",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(7372,72,<330,4>,<332,5>),"supportsANSI92EntryLevelSQL",3,1>,<|project://smallsql/src/smallsql/database/LongTreeList.java|(5203,152,<171,1>,<178,2>),"LongTreeList",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionAscii.java|(1547,108,<48,1>,<50,2>),"isNull",3,1>,<|project://smallsql/src/smallsql/database/Expression.java|(5466,52,<206,1>,<208,2>),"isDefinitelyWritable",3,1>,<|project://smallsql/src/smallsql/junit/TestOrderBy.java|(18440,796,<698,1>,<726,2>),"testOrderBy_Scollable",23,4>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(9857,452,<269,4>,<280,5>),"executeImpl",9,4>,<|project://smallsql/src/smallsql/database/SQLParser.java|(74896,110,<1945,4>,<1947,5>),"where",3,1>,<|project://smallsql/src/smallsql/database/IndexDescription.java|(2937,120,<89,1>,<91,2>),"isUnique",3,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(12403,242,<394,4>,<398,5>),"prepareStatement",5,1>,<|project://smallsql/src/smallsql/database/Command.java|(4991,176,<174,4>,<177,82>),"setMaxRows",1,1>,<|project://smallsql/src/smallsql/junit/TestDBMetaData.java|(6534,546,<140,1>,<152,2>),"testGetCatalogs",13,3>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(3169,57,<80,4>,<82,5>),"wasNull",3,1>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(2163,229,<78,4>,<85,5>),"ExpressionValue",5,1>,<|project://smallsql/src/smallsql/database/IndexDescription.java|(7468,216,<234,1>,<241,2>),"writeFinish",2,1>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(16420,154,<517,1>,<522,2>),"setDistinct",3,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(13978,132,<462,1>,<466,2>),"getClientInfo",4,1>,<|project://smallsql/src/smallsql/database/Index.java|(13781,865,<400,1>,<433,2>),"add",30,10>,<|project://smallsql/src/smallsql/database/CommandDrop.java|(1628,1162,<47,4>,<75,5>),"executeImpl",29,11>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(6060,208,<175,4>,<178,5>),"setBinaryStream",4,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(3877,183,<114,4>,<117,5>),"setFloat",4,1>,<|project://smallsql/src/smallsql/database/IndexNode.java|(7362,230,<247,1>,<250,2>),"addRemainderKey",4,2>,<|project://smallsql/src/smallsql/database/Expression.java|(2418,281,<83,4>,<89,5>),"setParamAt",3,1>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(5826,92,<238,1>,<240,2>),"getBoolean",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(36806,57,<1016,4>,<1018,5>),"getJDBCMajorVersion",3,1>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(8548,204,<274,1>,<277,2>),"testMaxTimestamp",4,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(17280,148,<394,4>,<396,5>),"getDate",3,1>,<|project://smallsql/src/smallsql/junit/TestDBMetaData.java|(5097,1037,<109,4>,<126,5>),"testGetTables",14,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(7678,117,<229,1>,<232,2>),"clearBatch",4,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionSpace.java|(1666,315,<52,4>,<63,2>),"getString",12,4>,<|project://smallsql/src/smallsql/database/DateTime.java|(20246,209,<657,1>,<664,2>),"formatHour12",5,2>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(16579,287,<379,4>,<384,5>),"getRef",3,1>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(12130,137,<385,1>,<390,2>),"relative",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(19593,145,<482,1>,<487,2>),"setAsciiStream",4,1>,<|project://smallsql/src/smallsql/database/SortedResult.java|(3273,74,<115,1>,<118,2>),"first",4,1>,<|project://smallsql/src/smallsql/junit/TestDBMetaData.java|(1845,951,<61,4>,<72,5>),"testVersions",12,1>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(3544,108,<119,4>,<122,5>),"MutableNumeric",4,1>,<|project://smallsql/src/smallsql/database/StoreNull.java|(2857,42,<118,1>,<120,2>),"getUsedSize",3,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(11505,121,<436,1>,<440,2>),"setPoolable",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(10180,78,<500,4>,<502,5>),"supportsOpenCursorsAcrossRollback",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(3233,67,<135,4>,<137,5>),"usesLocalFilePerTable",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionSpace.java|(1552,96,<47,4>,<49,5>),"isNull",3,1>,<|project://smallsql/src/smallsql/junit/TestExceptionMethods.java|(5288,417,<153,4>,<162,5>),"testDuplicatedColumnCreate",10,2>,<|project://smallsql/src/smallsql/database/Utils.java|(14185,1167,<418,4>,<446,5>),"openRaFile",17,6>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(24128,213,<723,4>,<726,5>),"getBlob",3,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(14304,159,<430,1>,<435,2>),"setBinaryStream",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionAscii.java|(1662,152,<53,1>,<57,2>),"getInt",5,3>,<|project://smallsql/src/smallsql/database/NoFromResult.java|(2055,50,<84,1>,<86,2>),"isLast",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|(1520,202,<45,1>,<48,2>),"ExpressionFunctionTimestampAdd",4,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(11170,55,<565,4>,<567,5>),"getMaxIndexLength",3,1>,<|project://smallsql/src/smallsql/database/Utils.java|(15830,447,<461,4>,<474,5>),"getExpressionNameFromTree",11,4>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(10480,137,<292,1>,<297,2>),"isBeforeFirst",3,1>,<|project://smallsql/src/smallsql/junit/TestJoins.java|(10437,251,<204,4>,<210,5>),"a",7,1>,<|project://smallsql/src/smallsql/database/LongLongList.java|(2214,161,<81,1>,<85,2>),"resize",5,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(16420,734,<751,4>,<759,5>),"getColumns",9,2>,<|project://smallsql/src/smallsql/database/SSStatement.java|(3783,62,<140,4>,<142,5>),"getMaxRows",3,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(13209,162,<382,1>,<387,2>),"setNCharacterStream",4,1>,<|project://smallsql/src/smallsql/junit/BenchTest.java|(6307,1369,<160,4>,<190,5>),"test_InsertEmptyRows",26,4>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(8591,242,<229,4>,<232,5>),"getArray",3,1>,<|project://smallsql/src/smallsql/database/IndexDescription.java|(2796,43,<79,1>,<81,2>),"getName",3,1>,<|project://smallsql/src/smallsql/database/ViewResult.java|(6178,55,<270,1>,<273,2>),"nullRow",3,1>,<|project://smallsql/src/smallsql/database/Where.java|(2028,54,<68,1>,<70,2>),"isBeforeFirst",3,1>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(10137,128,<326,1>,<329,2>),"testAvg",4,1>,<|project://smallsql/src/smallsql/database/IndexNode.java|(3806,88,<121,1>,<125,2>),"clear",5,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionATan2.java|(1483,93,<40,4>,<42,5>),"isNull",3,1>,<|project://smallsql/src/smallsql/database/SortedResult.java|(3082,57,<103,4>,<105,5>),"isFirst",3,1>,<|project://smallsql/src/smallsql/database/ViewResult.java|(2160,308,<72,1>,<85,2>),"init",7,2>,<|project://smallsql/src/smallsql/database/MemoryStream.java|(3028,312,<102,1>,<111,2>),"verifyFreePufferSize",10,3>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(6799,69,<295,4>,<297,5>),"supportsLikeEscapeClause",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(19743,146,<489,1>,<494,2>),"setBinaryStream",4,1>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(5427,756,<193,4>,<214,5>),"add",14,5>,<|project://smallsql/src/smallsql/database/ExpressionFunctionLCase.java|(1768,120,<58,1>,<61,2>),"getString",4,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(9631,68,<465,4>,<467,5>),"supportsSubqueriesInExists",3,1>,<|project://smallsql/src/smallsql/database/DateTime.java|(3912,324,<129,1>,<140,2>),"valueOf",12,4>,<|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|(1763,157,<57,1>,<61,5>),"getString",5,2>,<|project://smallsql/src/smallsql/junit/TestOrderBy.java|(7278,654,<254,1>,<277,2>),"testOrderBy_varchar_GroupBy",20,2>,<|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|(2597,137,<80,4>,<82,5>),"isSigned",3,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(12782,136,<406,1>,<410,2>),"isWrapperFor",4,1>,<|project://smallsql/src/smallsql/database/GroupResult.java|(7798,560,<230,1>,<245,2>),"addGroupRow",10,3>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(2174,234,<61,4>,<64,5>),"findParameter",3,1>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(11725,113,<361,1>,<366,2>),"isLast",3,1>,<|project://smallsql/src/smallsql/database/RowSource.java|(2303,148,<78,1>,<83,2>),"isFirst",3,1>,<|project://smallsql/src/smallsql/database/IndexDescription.java|(6808,245,<213,1>,<219,2>),"writeMagic",7,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(18236,159,<552,4>,<555,5>),"updateObject",3,1>,<|project://smallsql/src/smallsql/database/RowSource.java|(2570,98,<92,1>,<94,2>),"previous",3,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(12239,51,<323,1>,<325,2>),"getCurrentOffsetInPage",3,1>,<|project://smallsql/src/smallsql/database/Utils.java|(2231,127,<63,1>,<65,2>),"createLobFileName",3,1>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(6761,151,<280,1>,<283,2>),"getDataType",3,1>,<|project://smallsql/src/smallsql/database/SmallSQLException.java|(2032,407,<62,1>,<75,2>),"SmallSQLException",5,1>,<|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|(6802,126,<230,4>,<232,5>),"getPrecision",3,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(6354,418,<152,4>,<163,2>),"recreateStore",9,1>,<|project://smallsql/src/smallsql/junit/BasicTestCase.java|(1638,48,<48,1>,<50,5>),"BasicTestCase",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|(1647,129,<49,1>,<51,2>),"isNull",3,1>,<|project://smallsql/src/smallsql/database/MutableInteger.java|(1666,46,<59,1>,<61,2>),"longValue",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(9932,170,<249,4>,<251,5>),"registerOutParameter",3,1>,<|project://smallsql/src/smallsql/junit/TestOther.java|(7719,619,<199,1>,<216,2>),"testManyColumns",17,3>,<|project://smallsql/src/smallsql/database/DateTime.java|(4696,224,<161,1>,<167,2>),"valueOf",4,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionSqrt.java|(1480,124,<40,4>,<43,5>),"getDouble",4,2>,<|project://smallsql/src/smallsql/database/Column.java|(2231,341,<67,4>,<75,5>),"getDefaultValue",5,2>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(11388,319,<367,1>,<376,2>),"testCountNoRow",8,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(6434,155,<253,4>,<258,5>),"clearBatch",6,2>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(5857,163,<181,1>,<184,2>),"testWithNullValue",4,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(8713,61,<284,4>,<286,5>),"getWarnings",3,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(2386,246,<70,1>,<76,2>),"executeImp",7,4>,<|project://smallsql/src/smallsql/database/StoreNull.java|(1712,54,<56,1>,<58,2>),"StoreNull",3,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(17430,239,<509,4>,<514,5>),"writeBytes",6,2>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(8661,882,<261,4>,<285,5>),"getDouble",25,16>,<|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|(2824,74,<112,1>,<115,2>),"getUsedSize",3,1>,<|project://smallsql/src/smallsql/database/IndexDescription.java|(2495,292,<71,4>,<76,5>),"createName",6,2>,<|project://smallsql/src/smallsql/database/ColumnExpression.java|(1738,64,<57,1>,<59,2>),"isAutoIncrement",3,1>,<|project://smallsql/src/smallsql/database/UnionAll.java|(3372,96,<123,1>,<125,2>),"getString",3,1>,<|project://smallsql/src/smallsql/database/UnionAll.java|(5855,62,<238,1>,<241,2>),"nullRow",4,1>,<|project://smallsql/src/smallsql/junit/TestExceptionMethods.java|(7869,309,<222,4>,<231,5>),"countFiles",10,3>,<|project://smallsql/src/smallsql/database/SortedResult.java|(7495,52,<288,1>,<291,2>),"noRow",4,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(22355,135,<605,1>,<609,2>),"setNClob",3,1>,<|project://smallsql/src/smallsql/junit/TestDataTypes.java|(12674,320,<315,1>,<324,2>),"checkValues",9,2>,<|project://smallsql/src/smallsql/database/NoFromResult.java|(2902,46,<138,1>,<140,2>),"noRow",3,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(10235,57,<303,4>,<305,5>),"previousToken",3,1>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(17262,78,<553,1>,<555,5>),"setHaving",3,1>,<|project://smallsql/src/smallsql/database/SSSavepoint.java|(1737,53,<60,1>,<62,2>),"getSavepointName",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(6501,357,<190,4>,<199,5>),"getTimestamp",10,3>,<|project://smallsql/src/smallsql/junit/TestOrderBy.java|(20060,882,<760,1>,<785,2>),"testOrderBy_Scollable2",23,5>,<|project://smallsql/src/smallsql/junit/TestScrollable.java|(10979,1022,<271,4>,<287,5>),"testUpdatable",16,2>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(9920,59,<279,4>,<281,5>),"getCursorName",3,1>,<|project://smallsql/src/smallsql/database/Database.java|(18311,1306,<511,1>,<545,2>),"getIndexInfo",29,5>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|(1648,93,<49,4>,<51,5>),"getLong",3,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(75014,112,<1949,4>,<1951,5>),"having",3,1>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(31293,398,<841,4>,<852,5>),"optimize",11,3>,<|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|(10099,127,<316,1>,<320,2>),"unwrap",4,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(21337,270,<619,4>,<626,5>),"insertRow",8,2>,<|project://smallsql/src/smallsql/database/JoinScroll.java|(6286,120,<178,4>,<180,5>),"getBoolean",3,1>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(16596,137,<565,4>,<568,5>),"compareTo",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|(4534,61,<138,1>,<140,2>),"getDouble",3,1>,<|project://smallsql/src/smallsql/database/Expressions.java|(1774,147,<64,1>,<68,2>),"get",5,2>,<|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|(6299,136,<218,4>,<220,5>),"getColumnDisplaySize",3,1>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(13900,80,<419,4>,<421,5>),"getInt",3,1>,<|project://smallsql/src/smallsql/database/ExpressionName.java|(2342,83,<74,4>,<76,5>),"isNull",3,1>,<|project://smallsql/src/smallsql/database/LongLongList.java|(1973,194,<67,1>,<75,2>),"add",9,2>,<|project://smallsql/src/smallsql/database/ExpressionInSelect.java|(2271,117,<71,1>,<74,2>),"isInList",4,1>,<|project://smallsql/src/smallsql/database/LongTreeList.java|(14114,526,<490,1>,<505,2>),"removeNode",7,1>,<|project://smallsql/src/smallsql/junit/TestIdentifer.java|(1561,577,<53,1>,<64,2>),"testQuoteIdentifer",11,2>,<|project://smallsql/src/smallsql/database/Scrollable.java|(3126,403,<123,1>,<132,2>),"isLast",8,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(9228,69,<440,4>,<442,5>),"supportsPositionedDelete",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(6880,71,<300,4>,<302,5>),"supportsMultipleResultSets",3,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(15005,82,<418,4>,<420,5>),"readDouble",3,1>,<|project://smallsql/src/smallsql/database/Money.java|(1527,98,<46,4>,<49,42>),"Money",1,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(37163,127,<1040,1>,<1044,2>),"unwrap",4,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(21281,166,<559,1>,<564,2>),"getObject",5,1>,<|project://smallsql/src/smallsql/junit/TestOperatoren.java|(5458,1343,<106,4>,<146,5>),"setUp",34,2>,<|project://smallsql/src/smallsql/database/DateTime.java|(2756,629,<85,1>,<101,2>),"calcMillis",17,6>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(12644,86,<648,4>,<650,5>),"supportsDataManipulationTransactionsOnly",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(5021,335,<225,4>,<227,5>),"getExtraNameCharacters",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(11747,61,<605,4>,<607,5>),"getMaxTableNameLength",3,1>,<|project://smallsql/src/smallsql/database/Column.java|(4649,159,<169,4>,<173,5>),"setFlag",5,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(8101,239,<221,4>,<224,5>),"getBlob",3,1>,<|project://smallsql/src/smallsql/junit/TestExceptions.java|(3360,111,<70,4>,<73,5>),"TestExceptions",4,1>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(11013,285,<324,1>,<335,5>),"next",7,3>,<|project://smallsql/src/smallsql/database/GroupResult.java|(5139,265,<143,1>,<149,2>),"patchExpressions",7,3>,<|project://smallsql/src/smallsql/database/Index.java|(15491,91,<467,1>,<469,2>),"intToBinarySortOrder",3,1>,<|project://smallsql/src/smallsql/database/View.java|(3849,456,<124,1>,<135,2>),"write",9,1>,<|project://smallsql/src/smallsql/database/Scrollable.java|(2173,75,<73,1>,<75,2>),"isBeforeFirst",3,1>,<|project://smallsql/src/smallsql/junit/BasicTestCase.java|(3819,429,<111,1>,<122,2>),"assertEqualsObject",11,5>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(8868,77,<420,4>,<422,5>),"supportsCatalogsInProcedureCalls",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionLog10.java|(1422,53,<38,4>,<38,57>),"getFunction",1,1>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(4260,149,<143,4>,<147,5>),"MutableNumeric",5,1>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(4442,253,<166,1>,<172,2>),"absolute",7,3>,<|project://smallsql/src/smallsql/database/LongTreeList.java|(7219,1623,<254,1>,<314,2>),"remove",54,13>,<|project://smallsql/src/smallsql/database/Where.java|(3494,75,<139,1>,<141,2>),"getRow",3,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|(1598,77,<46,1>,<48,5>),"getInt",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(4810,110,<215,4>,<217,5>),"getTimeDateFunctions",3,1>,<|project://smallsql/src/smallsql/database/CommandTable.java|(1687,255,<47,4>,<53,5>),"CommandTable",7,1>,<|project://smallsql/src/smallsql/database/ViewResult.java|(3344,107,<123,1>,<125,2>),"getBoolean",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(18085,545,<776,4>,<784,5>),"getBestRowIdentifier",9,2>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(13617,218,<381,4>,<386,5>),"readInt",6,1>,<|project://smallsql/src/smallsql/database/TableResult.java|(8116,198,<289,1>,<295,2>),"setRowPosition",7,3>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(34026,96,<915,4>,<917,5>),"othersUpdatesAreVisible",3,1>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(17433,53,<562,1>,<564,2>),"setMaxRows",3,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(12142,243,<387,4>,<391,5>),"prepareStatement",5,1>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(11136,563,<335,4>,<345,5>),"getFloatImpl",11,7>,<|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|(7290,156,<242,4>,<244,5>),"getColumnType",3,1>,<|project://smallsql/src/smallsql/database/MutableDouble.java|(1627,49,<55,1>,<57,2>),"intValue",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(7048,71,<310,4>,<312,5>),"supportsNonNullableColumns",3,1>,<|project://smallsql/src/smallsql/database/StoreNull.java|(2904,55,<122,1>,<124,2>),"getNextPagePos",3,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(5702,550,<175,1>,<190,2>),"rollbackFile",12,3>,<|project://smallsql/src/smallsql/database/SortedResult.java|(2427,117,<73,1>,<76,2>),"SortedResult",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|(7626,57,<259,1>,<261,2>),"getScale",3,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(4157,130,<116,4>,<118,5>),"prepareCall",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(7213,64,<320,4>,<322,5>),"supportsCoreSQLGrammar",3,1>,<|project://smallsql/src/smallsql/database/ViewResult.java|(6095,74,<265,1>,<267,2>),"rowDeleted",3,1>,<|project://smallsql/src/smallsql/database/ViewResult.java|(4790,89,<189,1>,<191,2>),"isBeforeFirst",3,1>,<|project://smallsql/src/smallsql/database/StorePageLink.java|(1594,279,<46,1>,<52,2>),"getStore",7,3>,<|project://smallsql/src/smallsql/database/Logger.java|(1454,72,<45,1>,<47,2>),"isLogging",3,1>,<|project://smallsql/src/smallsql/database/SortedResult.java|(7054,70,<260,1>,<262,2>),"getRowPosition",3,1>,<|project://smallsql/src/smallsql/database/Expression.java|(2130,72,<67,1>,<69,2>),"setName",3,1>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(18930,1441,<569,4>,<599,2>),"getNumeric",31,18>,<|project://smallsql/src/smallsql/database/TableViewMap.java|(1568,627,<49,4>,<61,5>),"getUniqueKey",3,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(17938,1105,<544,4>,<570,5>),"create",27,11>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(6963,73,<305,4>,<307,5>),"supportsMultipleTransactions",3,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(54567,2591,<1403,4>,<1464,5>),"getBytes",59,33>,<|project://smallsql/src/smallsql/database/language/Language_it.java|(1506,55,<43,1>,<45,2>),"getEntries",3,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(32291,683,<908,4>,<926,5>),"drop",17,7>,<|project://smallsql/src/smallsql/junit/TestScrollable.java|(1466,1036,<43,1>,<61,2>),"testLastWithWhere",17,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(29512,133,<874,4>,<876,5>),"updateArray",3,1>,<|project://smallsql/src/smallsql/database/Command.java|(3300,313,<112,4>,<121,5>),"setParamValue",6,2>,<|project://smallsql/src/smallsql/database/UnionAll.java|(4060,144,<155,1>,<160,2>),"beforeFirst",6,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(36584,151,<1157,1>,<1162,2>),"updateClob",4,1>,<|project://smallsql/src/smallsql/junit/TestOther.java|(3571,1524,<90,1>,<138,2>),"testNoFromResult",40,1>,<|project://smallsql/src/smallsql/database/Database.java|(8697,296,<255,1>,<263,2>),"dropView",8,3>,<|project://smallsql/src/smallsql/database/Distinct.java|(2027,472,<76,1>,<93,2>),"next",17,5>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(9048,76,<430,4>,<432,5>),"supportsCatalogsInIndexDefinitions",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionACos.java|(1480,124,<40,4>,<43,5>),"getDouble",4,2>,<|project://smallsql/src/smallsql/database/Table.java|(17465,2175,<491,1>,<565,2>),"freeLock",63,15>,<|project://smallsql/src/smallsql/database/ExpressionFunctionOctetLen.java|(1731,75,<52,4>,<54,5>),"isNull",3,1>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(10887,119,<316,1>,<321,2>),"previous",3,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(3439,163,<122,4>,<127,5>),"close",5,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|(1680,80,<50,1>,<52,5>),"getLong",3,1>,<|project://smallsql/src/smallsql/database/MutableLong.java|(1783,66,<67,1>,<69,2>),"getImmutableObject",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(13773,177,<322,4>,<324,5>),"setCharacterStream",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(24710,129,<705,1>,<709,2>),"setClob",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|(2718,1679,<90,1>,<125,2>),"getInt",35,11>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(5294,271,<161,4>,<167,5>),"isGroupResult",3,1>,<|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|(2717,100,<106,1>,<109,2>),"scanObjectOffsets",2,1>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(17180,77,<549,1>,<551,5>),"setGroup",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(15878,261,<737,4>,<741,5>),"getCatalogs",5,1>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(17013,162,<541,1>,<547,2>),"setWhere",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|(2551,85,<80,1>,<82,2>),"isNull",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|(1580,60,<44,1>,<46,2>),"getFunction",3,1>,<|project://smallsql/src/smallsql/database/Where.java|(2381,68,<87,1>,<89,2>),"isAfterLast",3,1>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(20381,110,<602,4>,<607,5>),"getObject",6,2>,<|project://smallsql/src/smallsql/database/TableResult.java|(9203,123,<339,1>,<342,5>),"isNull",4,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(23258,145,<644,1>,<649,2>),"setSQLXML",4,1>,<|project://smallsql/src/smallsql/database/IndexDescriptions.java|(1717,59,<52,1>,<54,2>),"IndexDescriptions",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(8839,253,<233,4>,<236,5>),"getDate",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(19084,127,<573,4>,<575,5>),"updateInt",3,1>,<|project://smallsql/src/smallsql/database/SQLToken.java|(1907,109,<61,1>,<64,2>),"getName",4,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionExp.java|(1418,51,<38,4>,<38,55>),"getFunction",1,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(6634,69,<285,4>,<287,5>),"supportsGroupByUnrelated",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(22186,164,<598,1>,<603,2>),"setNCharacterStream",4,1>,<|project://smallsql/src/smallsql/database/ViewResult.java|(3991,114,<153,1>,<155,2>),"getNumeric",3,1>,<|project://smallsql/src/smallsql/junit/TestTransactions.java|(13853,995,<375,1>,<402,2>),"testInsertRow_withRightWhere",21,2>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(5019,106,<192,1>,<195,2>),"setRowPosition",4,1>,<|project://smallsql/src/smallsql/junit/TestJoins.java|(5070,201,<97,1>,<102,2>),"clear",6,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(9737,568,<261,4>,<272,5>),"createWriteLock",6,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionExp.java|(1477,123,<40,4>,<43,5>),"getDouble",4,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(4431,112,<200,4>,<202,5>),"getNumericFunctions",3,1>,<|project://smallsql/src/smallsql/database/MemoryStream.java|(1978,230,<67,1>,<73,2>),"writeInt",7,1>,<|project://smallsql/src/smallsql/junit/TestScrollable.java|(8740,2225,<202,4>,<268,5>),"testAbsoluteRelativeAssert",56,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionUCase.java|(1768,120,<58,1>,<61,2>),"getString",4,2>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(15509,518,<486,1>,<500,2>),"deleteRow",15,5>,<|project://smallsql/src/smallsql/database/IndexNode.java|(10303,398,<347,1>,<358,2>),"findNodeInsertPos",12,5>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(29511,2758,<822,4>,<886,5>),"getBoolean",62,33>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(17888,129,<407,1>,<411,2>),"setRowId",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnInt.java|(1842,67,<65,1>,<67,2>),"getDouble",3,1>,<|project://smallsql/src/smallsql/database/Scrollable.java|(2408,250,<89,1>,<99,2>),"previous",11,4>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(8384,313,<296,4>,<303,5>),"div",7,1>,<|project://smallsql/src/smallsql/database/Utils.java|(11873,224,<339,4>,<345,5>),"indexOf",7,3>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(11988,135,<377,1>,<382,2>),"absolute",3,1>,<|project://smallsql/src/smallsql/database/Where.java|(2091,64,<73,1>,<75,2>),"isFirst",3,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(9787,173,<372,4>,<375,5>),"executeUpdate",4,1>,<|project://smallsql/src/smallsql/database/CommandTable.java|(2277,109,<68,1>,<70,2>),"addIndex",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|(2867,89,<118,1>,<120,2>),"getDataType",3,1>,<|project://smallsql/src/smallsql/database/ForeignKeys.java|(1791,129,<63,1>,<68,2>),"add",6,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|(2185,113,<71,1>,<74,5>),"getObject",4,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnString.java|(1697,115,<54,1>,<57,2>),"getInt",4,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(3161,60,<130,4>,<132,5>),"usesLocalFiles",3,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(13376,133,<389,1>,<393,2>),"setNClob",3,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(9281,261,<275,4>,<279,5>),"setBlob",4,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(42936,2650,<1149,4>,<1205,5>),"getMoney",56,33>,<|project://smallsql/src/smallsql/database/SSConnection.java|(3653,243,<101,4>,<108,5>),"getMonitor",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(1762,162,<52,4>,<54,5>),"SSCallableStatement",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(23831,138,<669,1>,<673,2>),"getNString",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnString.java|(1941,119,<66,1>,<69,2>),"getFloat",4,2>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(17753,172,<541,4>,<543,5>),"updateBinaryStream",3,1>,<|project://smallsql/src/smallsql/database/SmallSQLException.java|(7217,429,<212,1>,<226,2>),"stripMsg",11,4>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(4756,317,<140,4>,<148,5>),"getDouble",9,2>,<|project://smallsql/src/smallsql/database/Identity.java|(2934,63,<96,1>,<99,2>),"floatValue",4,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(13288,209,<401,4>,<408,5>),"last",8,2>,<|project://smallsql/src/smallsql/database/Column.java|(3983,224,<146,4>,<149,5>),"setPrecision",4,2>,<|project://smallsql/src/smallsql/database/IndexDescriptions.java|(1784,37,<57,1>,<59,2>),"size",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(15447,132,<355,4>,<357,5>),"getFloat",3,1>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(8520,1267,<264,4>,<305,2>),"initValue",36,16>,<|project://smallsql/src/smallsql/database/ExpressionFunctionLocate.java|(1545,85,<48,1>,<50,2>),"isNull",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionChar.java|(1769,42,<59,1>,<61,2>),"getPrecision",3,1>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(12992,61,<392,4>,<394,5>),"isNull",3,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(7875,123,<199,1>,<202,2>),"isValidPage",4,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(20048,149,<503,1>,<508,2>),"setNCharacterStream",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunction.java|(2115,112,<60,4>,<62,5>),"getBytes",3,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(14468,162,<437,1>,<442,2>),"setCharacterStream",4,1>,<|project://smallsql/src/smallsql/database/SSDriver.java|(2140,1582,<66,4>,<104,5>),"parse",30,8>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(12153,369,<630,4>,<640,5>),"supportsTransactionIsolationLevel",11,6>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(12274,183,<393,1>,<400,2>),"getRow",5,3>,<|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|(3243,73,<129,1>,<131,2>),"getInt",3,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(52535,15275,<1386,4>,<1761,5>),"function",360,83>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(35005,2639,<955,4>,<1017,5>),"getLong",60,33>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(29804,493,<884,4>,<896,5>),"getValue",9,4>,<|project://smallsql/src/smallsql/database/language/Language.java|(9905,372,<217,1>,<230,2>),"getDefaultLanguage",9,2>,<|project://smallsql/src/smallsql/database/Utils.java|(5896,193,<190,4>,<194,2>),"money2int",5,3>,<|project://smallsql/src/smallsql/database/ExpressionFunctionMonth.java|(1482,59,<43,1>,<45,2>),"getFunction",3,1>,<|project://smallsql/src/smallsql/database/Column.java|(4324,151,<155,4>,<159,5>),"getColumnSize",5,2>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(15244,134,<472,1>,<476,2>),"setClob",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(15469,123,<496,4>,<498,5>),"updateNull",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(36419,85,<996,4>,<998,5>),"supportsResultSetHoldability",3,1>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(5344,198,<218,1>,<225,2>),"move",8,3>,<|project://smallsql/src/smallsql/database/DateTime.java|(21782,226,<715,1>,<724,2>),"getImmutableObject",10,3>,<|project://smallsql/src/smallsql/junit/TestDeleteUpdate.java|(1447,61,<43,1>,<48,2>),"TestDeleteUpdate",3,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(2103,226,<77,4>,<82,5>),"SSStatement",6,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(15273,300,<430,4>,<437,5>),"writeNumeric",8,2>,<|project://smallsql/src/smallsql/junit/TestLanguage.java|(3805,1077,<134,1>,<172,2>),"testSyntaxErrors",34,5>,<|project://smallsql/src/smallsql/database/TableResult.java|(5306,942,<175,4>,<202,5>),"moveToRow",25,7>,<|project://smallsql/src/smallsql/database/CommandTable.java|(2398,74,<73,4>,<75,5>),"addForeingnKey",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(16426,147,<376,4>,<378,5>),"getBigDecimal",3,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(13299,118,<430,1>,<434,2>),"createNClob",4,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(21029,154,<612,4>,<614,5>),"updateObject",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|(3562,54,<106,1>,<108,2>),"getScale",3,1>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(2725,5781,<101,0>,<261,2>),"accumulate",153,69>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(12657,127,<357,1>,<361,2>),"unwrap",4,1>,<|project://smallsql/src/smallsql/database/ViewResult.java|(2814,110,<105,1>,<107,2>),"updateRow",3,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(10300,259,<307,4>,<313,5>),"nextToken",7,2>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(17907,85,<537,4>,<539,5>),"getMoney",3,1>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(7504,306,<312,2>,<320,2>),"get",4,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(38042,134,<1077,1>,<1081,2>),"getClientInfoProperties",4,1>,<|project://smallsql/src/smallsql/junit/TestExceptions.java|(4772,255,<114,4>,<120,5>),"suite",7,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|(3588,120,<122,1>,<125,2>),"getNumeric",4,2>,<|project://smallsql/src/smallsql/database/SmallSQLException.java|(4796,249,<150,4>,<154,5>),"create",5,1>,<|project://smallsql/src/smallsql/junit/TestLanguage.java|(5784,3074,<206,1>,<285,2>),"testEntries",60,15>,<|project://smallsql/src/smallsql/junit/TestTransactions.java|(2568,963,<79,1>,<104,2>),"testCommit",21,2>,<|project://smallsql/src/smallsql/junit/TestScrollable.java|(2520,393,<64,4>,<73,5>),"testLastWithWhereAssert",10,2>,<|project://smallsql/src/smallsql/database/Database.java|(10255,529,<296,4>,<306,5>),"createTable",8,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionSin.java|(1418,51,<38,4>,<38,55>),"getFunction",1,1>,<|project://smallsql/src/smallsql/database/TableResult.java|(7950,157,<280,1>,<286,2>),"getRowPosition",4,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(12625,71,<344,4>,<346,5>),"readUnsignedByte",3,1>,<|project://smallsql/src/smallsql/database/TableView.java|(4130,323,<117,1>,<125,2>),"getFile",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|(5030,51,<166,1>,<168,2>),"getDataType",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(6396,73,<270,4>,<272,5>),"supportsExpressionsInOrderBy",3,1>,<|project://smallsql/src/smallsql/database/Where.java|(1513,103,<44,1>,<47,2>),"Where",4,1>,<|project://smallsql/src/smallsql/database/JoinScrollIndex.java|(2518,818,<83,4>,<108,5>),"nextEquals",25,6>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(3481,72,<150,4>,<152,5>),"storesLowerCaseIdentifiers",3,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(36251,161,<1017,4>,<1020,5>),"execute",3,1>,<|project://smallsql/src/smallsql/database/IndexNode.java|(3539,48,<107,1>,<109,2>),"getUnique",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(14853,156,<471,4>,<473,5>),"getType",3,2>,<|project://smallsql/src/smallsql/tools/CommandLine.java|(273,1951,<21,4>,<63,5>),"main",41,9>,<|project://smallsql/src/smallsql/database/Database.java|(7316,278,<218,4>,<226,5>),"removeTableView",5,1>,<|project://smallsql/src/smallsql/database/TableViewResult.java|(2134,57,<66,1>,<68,2>),"setAlias",3,1>,<|project://smallsql/src/smallsql/database/SSDriver.java|(4339,61,<131,4>,<133,5>),"jdbcCompliant",3,1>,<|project://smallsql/src/smallsql/junit/TestStatement.java|(5936,214,<160,4>,<165,5>),"testGetConnection",5,1>,<|project://smallsql/src/smallsql/database/ExpressionName.java|(1687,242,<50,4>,<57,2>),"ExpressionName",3,1>,<|project://smallsql/src/smallsql/database/Distinct.java|(1684,95,<53,1>,<56,2>),"execute",4,1>,<|project://smallsql/src/smallsql/database/MutableFloat.java|(1726,62,<63,1>,<65,2>),"toString",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|(1651,1775,<48,4>,<93,5>),"getObject",46,30>,<|project://smallsql/src/smallsql/junit/TestThreads.java|(279,1561,<19,4>,<69,5>),"testConcurrentRead",33,6>,<|project://smallsql/src/smallsql/junit/TestJoins.java|(6219,902,<128,4>,<156,5>),"insertValues",23,1>,<|project://smallsql/src/smallsql/database/ExpressionName.java|(3096,88,<106,4>,<108,5>),"getObject",3,1>,<|project://smallsql/src/smallsql/database/RowSource.java|(4826,123,<184,4>,<186,5>),"setAlias",3,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(14141,158,<423,1>,<428,2>),"setAsciiStream",4,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(8788,612,<255,4>,<270,5>),"nextIdentiferPart",9,3>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(10408,102,<386,4>,<391,5>),"getSignum",3,1>,<|project://smallsql/src/smallsql/database/TableResult.java|(9629,141,<354,1>,<357,5>),"getLong",4,1>,<|project://smallsql/src/smallsql/database/Where.java|(3978,66,<171,1>,<173,2>),"rowDeleted",3,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(4066,158,<152,4>,<155,5>),"setEscapeProcessing",3,1>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(3926,80,<136,1>,<139,2>),"previous",4,2>,<|project://smallsql/src/smallsql/junit/BenchTest.java|(16527,2185,<403,4>,<448,5>),"test_UpdateRowsPrepare",42,4>,<|project://smallsql/src/smallsql/database/LongList.java|(1618,37,<55,1>,<57,2>),"size",3,1>,<|project://smallsql/src/smallsql/junit/TestOperatoren.java|(11745,251,<267,4>,<273,5>),"a",7,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(31518,127,<936,1>,<940,2>),"unwrap",4,1>,<|project://smallsql/src/smallsql/junit/TestDataTypes.java|(3053,301,<68,4>,<77,5>),"tearDown",9,2>,<|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|(9736,215,<305,1>,<309,2>),"getColumnIdx",5,3>,<|project://smallsql/src/smallsql/database/Column.java|(4215,101,<151,4>,<153,5>),"getPrecision",3,1>,<|project://smallsql/src/smallsql/database/Columns.java|(3788,259,<145,4>,<153,5>),"copy",9,2>,<|project://smallsql/src/smallsql/database/UnionAll.java|(3933,119,<150,1>,<152,2>),"isScrollable",3,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(8324,277,<271,4>,<276,5>),"setTransactionIsolation",6,2>,<|project://smallsql/src/smallsql/database/Utils.java|(11462,140,<325,1>,<329,2>),"doubleToMoney",5,2>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(13094,176,<310,4>,<312,5>),"setBinaryStream",3,1>,<|project://smallsql/src/smallsql/database/MutableDouble.java|(1681,52,<59,1>,<61,2>),"longValue",3,1>,<|project://smallsql/src/smallsql/database/NoFromResult.java|(2526,54,<109,1>,<111,2>),"getRow",3,2>,<|project://smallsql/src/smallsql/database/NoFromResult.java|(1853,65,<68,1>,<71,2>),"previous",4,1>,<|project://smallsql/src/smallsql/database/MutableLong.java|(1445,51,<43,1>,<45,2>),"MutableLong",3,1>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(1822,48,<51,4>,<53,5>),"CommandSelect",3,1>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(10125,50,<314,4>,<316,5>),"clear",3,1>,<|project://smallsql/src/smallsql/junit/BenchTest.java|(24160,1718,<562,4>,<605,5>),"test_Scroll_getXXX",39,3>,<|project://smallsql/src/smallsql/database/ExpressionFunctionBitLen.java|(1714,75,<52,4>,<54,5>),"isNull",3,1>,<|project://smallsql/src/smallsql/database/StorePage.java|(2564,59,<87,1>,<90,2>),"rollback",4,1>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(28170,129,<721,4>,<724,5>),"getString",4,2>,<|project://smallsql/src/smallsql/database/Money.java|(1639,79,<52,4>,<54,5>),"Money",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|(3002,58,<114,1>,<116,2>),"getFunction",3,1>,<|project://smallsql/src/smallsql/database/CommandTable.java|(2490,2433,<78,4>,<130,5>),"executeImpl",47,10>,<|project://smallsql/src/smallsql/database/Utils.java|(5335,104,<173,4>,<175,5>),"float2bytes",3,1>,<|project://smallsql/src/smallsql/database/FileIndexNode.java|(2308,164,<72,1>,<78,2>),"saveRef",7,2>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(25961,140,<760,1>,<765,2>),"setClob",4,1>,<|project://smallsql/src/smallsql/database/TableViewResult.java|(3359,50,<114,1>,<116,2>),"isScrollable",3,1>,<|project://smallsql/src/smallsql/tools/CommandLine.java|(2238,555,<66,4>,<81,5>),"printRS",16,4>,<|project://smallsql/src/smallsql/database/ExpressionFunctionHour.java|(1480,58,<43,1>,<45,2>),"getFunction",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(36944,62,<1026,4>,<1028,5>),"getSQLStateType",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|(1539,61,<44,1>,<46,2>),"getFunction",3,1>,<|project://smallsql/src/smallsql/junit/BenchTest.java|(28979,1287,<686,4>,<720,5>),"createTestTable",29,1>,<|project://smallsql/src/smallsql/junit/TestOther.java|(11536,1145,<280,4>,<307,5>),"testBinaryStore",24,1>,<|project://smallsql/src/smallsql/database/Identity.java|(2638,108,<82,1>,<85,2>),"createNextValue",4,1>,<|project://smallsql/src/smallsql/database/SQLTokenizer.java|(12166,1888,<292,1>,<354,2>),"getSQLDataType",62,33>,<|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|(3067,77,<119,1>,<121,2>),"isNull",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionATan2.java|(1422,53,<38,4>,<38,57>),"getFunction",1,1>,<|project://smallsql/src/smallsql/database/Expressions.java|(1930,117,<71,1>,<76,2>),"add",6,2>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(1569,138,<45,4>,<50,5>),"MutableNumeric",3,1>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(20851,921,<623,1>,<645,2>),"getBytes",23,13>,<|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|(1966,61,<66,1>,<68,2>),"getInt",3,1>,<|project://smallsql/src/smallsql/database/Distinct.java|(2737,108,<112,1>,<114,2>),"setRowPosition",3,1>,<|project://smallsql/src/smallsql/database/Utils.java|(4700,252,<151,4>,<158,5>),"bytes2long",8,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|(1607,110,<49,1>,<51,2>),"isNull",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionPower.java|(1483,93,<40,4>,<42,5>),"isNull",3,1>,<|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|(10233,136,<323,1>,<327,2>),"isWrapperFor",4,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(9357,268,<241,4>,<244,5>),"getTimestamp",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(13956,152,<325,4>,<327,5>),"setDate",3,1>,<|project://smallsql/src/smallsql/database/IndexDescriptions.java|(2957,340,<109,1>,<119,2>),"create",5,2>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(10054,63,<310,4>,<312,5>),"isEmpty",3,1>,<|project://smallsql/src/smallsql/junit/TestMoneyRounding.java|(2540,858,<76,4>,<98,5>),"verify",23,3>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|(1426,74,<38,4>,<40,5>),"isNull",3,1>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(9302,132,<295,1>,<298,2>),"testMinString",4,1>,<|project://smallsql/src/smallsql/database/Where.java|(1950,70,<63,1>,<65,2>),"isScrollable",3,1>,<|project://smallsql/src/smallsql/database/StorePageMap.java|(2860,492,<120,1>,<133,2>),"add",7,2>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(33633,133,<1031,1>,<1035,2>),"getNClob",4,1>,<|project://smallsql/src/smallsql/junit/TestExceptions.java|(3485,269,<76,4>,<83,5>),"init",8,2>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(11600,118,<353,1>,<358,2>),"afterLast",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(10022,58,<490,4>,<492,5>),"supportsUnionAll",3,1>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(1732,420,<53,1>,<75,2>),"ExpressionValue",19,8>,<|project://smallsql/src/smallsql/database/IndexNode.java|(9913,381,<332,1>,<344,2>),"saveNode",13,2>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(15354,97,<491,4>,<493,5>),"rowDeleted",3,1>,<|project://smallsql/src/smallsql/junit/BenchTest.java|(9824,2697,<246,4>,<302,5>),"test_InsertRows",51,5>,<|project://smallsql/src/smallsql/junit/TestMoneyRounding.java|(2096,426,<64,4>,<73,5>),"testMoney1",10,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(33921,93,<910,1>,<912,5>),"ownInsertsAreVisible",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(33908,135,<1043,1>,<1047,2>),"getSQLXML",4,1>,<|project://smallsql/src/smallsql/database/TableViewResult.java|(2346,411,<81,1>,<96,2>),"init",9,2>,<|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|(2321,87,<85,1>,<87,2>),"getMoney",3,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(13983,1031,<412,4>,<444,5>),"select",31,8>,<|project://smallsql/src/smallsql/database/SmallSQLException.java|(3378,101,<110,1>,<113,2>),"printStackTrace",4,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(8594,79,<405,4>,<407,5>),"supportsSchemasInIndexDefinitions",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(2138,53,<70,4>,<72,5>),"getUserName",3,1>,<|project://smallsql/src/smallsql/database/DateTime.java|(4392,138,<149,1>,<152,2>),"valueOf",4,2>,<|project://smallsql/src/smallsql/database/StoreNull.java|(2965,183,<126,1>,<132,2>),"deleteRow",6,2>,<|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|(1503,88,<44,4>,<46,5>),"getColumnCount",3,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(16271,62,<469,4>,<471,5>),"readDate",3,1>,<|project://smallsql/src/smallsql/database/DateTime.java|(20464,132,<667,1>,<669,2>),"addDateTimeOffset",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(17411,161,<535,4>,<537,5>),"updateTimestamp",3,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(22435,178,<649,4>,<652,5>),"copyValueFrom",4,1>,<|project://smallsql/src/smallsql/database/DateTime.java|(21197,256,<691,1>,<697,2>),"removeDateTimeOffset",7,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(3694,79,<135,4>,<137,5>),"setMaxFieldSize",3,1>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(3246,144,<98,4>,<104,5>),"getOperation",3,1>,<|project://smallsql/src/smallsql/junit/TestDBMetaData.java|(15161,206,<303,4>,<307,5>),"testGetConnection",5,1>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(4129,123,<138,4>,<141,5>),"MutableNumeric",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionRepeat.java|(1964,312,<61,1>,<70,2>),"getString",10,3>,<|project://smallsql/src/smallsql/database/SSConnection.java|(4016,135,<113,4>,<115,5>),"prepareStatement",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionLCase.java|(1639,120,<52,1>,<55,2>),"getBytes",4,2>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(6153,342,<180,4>,<189,5>),"getTime",10,3>,<|project://smallsql/src/smallsql/database/ExpressionName.java|(4970,152,<187,1>,<190,5>),"toString",4,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|(3377,60,<107,1>,<109,2>),"getFloat",3,1>,<|project://smallsql/src/smallsql/database/DateTime.java|(23213,176,<793,4>,<798,5>),"isLeapYear",3,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(11103,127,<415,1>,<419,2>),"unwrap",4,1>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(33773,265,<904,1>,<911,5>),"getDataType",5,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(12037,151,<289,4>,<291,5>),"setBigDecimal",3,1>,<|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|(1609,136,<49,4>,<51,5>),"isAutoIncrement",3,1>,<|project://smallsql/src/smallsql/database/StorePageMap.java|(1775,199,<63,1>,<70,2>),"StorePageMap",4,1>,<|project://smallsql/src/smallsql/database/SortedResult.java|(5155,260,<181,4>,<191,5>),"isLast",11,3>,<|project://smallsql/src/smallsql/junit/TestOther.java|(5103,1295,<141,1>,<161,2>),"testInSelect",19,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(8882,183,<294,4>,<296,5>),"createStatement",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(10361,81,<510,4>,<512,5>),"supportsOpenStatementsAcrossRollback",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(16285,135,<373,4>,<375,5>),"getObject",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(9292,141,<258,4>,<260,5>),"getAsciiStream",3,1>,<|project://smallsql/src/smallsql/database/ForeignKeys.java|(1527,48,<46,1>,<48,2>),"ForeignKeys",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|(1544,922,<48,1>,<84,2>),"getInt",37,15>,<|project://smallsql/src/smallsql/database/StoreNull.java|(2757,93,<115,1>,<115,94>),"scanObjectOffsets",1,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(4174,239,<190,4>,<197,5>),"getFunctions",8,3>,<|project://smallsql/src/smallsql/database/SmallSQLException.java|(3768,292,<124,4>,<130,5>),"create",6,1>,<|project://smallsql/src/smallsql/database/MemoryStream.java|(1727,97,<56,1>,<59,2>),"writeByte",4,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(32795,118,<992,1>,<996,2>),"isClosed",4,1>,<|project://smallsql/src/smallsql/junit/TestOrderBy.java|(9182,647,<329,1>,<352,2>),"testOrderBy_int",20,2>,<|project://smallsql/src/smallsql/database/SSStatement.java|(10508,164,<396,4>,<399,5>),"execute",4,1>,<|project://smallsql/src/smallsql/database/Expressions.java|(2665,251,<107,1>,<118,2>),"indexOf",12,6>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(25496,148,<739,1>,<744,2>),"setBinaryStream",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnString.java|(1486,66,<43,4>,<45,2>),"isNull",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(10760,130,<262,4>,<264,5>),"setURL",3,1>,<|project://smallsql/src/smallsql/database/Expression.java|(2767,362,<93,4>,<104,5>),"optimize",7,3>,<|project://smallsql/src/smallsql/database/LongTreeList.java|(16552,252,<578,1>,<585,2>),"writePointer",5,2>,<|project://smallsql/src/smallsql/database/Logger.java|(1532,206,<49,1>,<58,2>),"println",10,2>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(15865,129,<364,4>,<366,5>),"getDate",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionMod.java|(1582,120,<46,4>,<49,5>),"getInt",4,2>,<|project://smallsql/src/smallsql/junit/TestDBMetaData.java|(6152,367,<129,4>,<137,5>),"testGetSchemas",9,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(27944,117,<830,4>,<832,5>),"getURL",3,1>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(4158,89,<152,1>,<154,2>),"isLast",3,1>,<|project://smallsql/src/smallsql/database/ExpressionName.java|(5426,56,<206,1>,<208,2>),"getPrecision",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionRight.java|(1560,91,<47,1>,<49,2>),"isNull",3,1>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(6569,89,<270,1>,<272,2>),"getString",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|(4602,67,<143,1>,<145,2>),"getMoney",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(3244,320,<98,4>,<106,5>),"getBoolean",9,2>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(23699,60,<707,4>,<709,5>),"getStatement",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionASin.java|(1420,52,<38,4>,<38,56>),"getFunction",1,1>,<|project://smallsql/src/smallsql/database/Where.java|(3024,248,<118,1>,<125,2>),"next",8,5>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(37658,2631,<1020,4>,<1082,5>),"getFloat",60,33>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(37674,146,<1206,1>,<1211,2>),"updateBinaryStream",4,1>,<|project://smallsql/src/smallsql/junit/TestExceptionMethods.java|(9622,965,<278,4>,<307,5>),"testClosedPreparedStatement",30,5>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(37091,67,<1036,4>,<1038,5>),"supportsStatementPooling",3,1>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(6981,103,<291,1>,<293,2>),"deleteRow",3,1>,<|project://smallsql/src/smallsql/database/StorePageMap.java|(3359,798,<136,1>,<156,2>),"resize",6,1>,<|project://smallsql/src/smallsql/database/ViewResult.java|(3773,104,<143,1>,<145,2>),"getDouble",3,1>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(3660,185,<124,4>,<127,5>),"MutableNumeric",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(1827,67,<57,4>,<59,5>),"allTablesAreSelectable",3,1>,<|project://smallsql/src/smallsql/database/TableResult.java|(10690,145,<389,1>,<392,5>),"getBytes",4,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(22039,142,<591,1>,<596,2>),"setNString",4,1>,<|project://smallsql/src/smallsql/database/Command.java|(4679,57,<158,4>,<160,5>),"getUpdateCount",3,1>,<|project://smallsql/src/smallsql/database/TransactionStep.java|(1747,37,<57,4>,<57,41>),"freeLock",1,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(9751,61,<269,4>,<271,5>),"getWarnings",3,1>,<|project://smallsql/src/smallsql/database/StorePageMap.java|(4162,792,<158,1>,<185,2>),"transfer",23,6>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java|(1758,115,<50,1>,<53,2>),"getInt",4,2>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(7922,62,<331,1>,<333,2>),"execute",3,1>,<|project://smallsql/src/smallsql/database/DateTime.java|(4929,3732,<170,1>,<288,2>),"parse",109,29>,<|project://smallsql/src/smallsql/database/Index.java|(17298,308,<538,1>,<546,2>),"equals",9,5>,<|project://smallsql/src/smallsql/database/ExpressionName.java|(2532,79,<82,4>,<84,5>),"getInt",3,1>,<|project://smallsql/src/smallsql/database/MutableLong.java|(1664,46,<59,1>,<61,2>),"longValue",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|(1827,91,<57,4>,<59,5>),"getDouble",3,1>,<|project://smallsql/src/smallsql/database/Scrollable.java|(5324,60,<220,1>,<223,2>),"nullRow",4,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(16026,85,<457,4>,<459,5>),"writeTime",3,1>,<|project://smallsql/src/smallsql/junit/TestLanguage.java|(2270,683,<73,1>,<97,2>),"testBogusLocale",18,2>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(31703,609,<854,4>,<872,5>),"getKeywordFromOperation",14,6>,<|project://smallsql/src/smallsql/database/Expressions.java|(1445,48,<43,1>,<45,2>),"Expressions",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|(4032,253,<174,1>,<182,2>),"getDataType",9,3>,<|project://smallsql/src/smallsql/database/ExpressionFunctionRight.java|(1968,242,<64,1>,<70,2>),"getString",7,2>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(1879,95,<55,1>,<57,2>),"CommandSelect",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(36079,165,<1136,1>,<1141,2>),"updateCharacterStream",4,1>,<|project://smallsql/src/smallsql/database/Command.java|(3963,383,<134,4>,<144,5>),"execute",11,3>,<|project://smallsql/src/smallsql/junit/TestOrderBy.java|(6592,677,<226,1>,<251,2>),"testOrderBy_varchar_DescAsc",22,4>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(15536,135,<485,1>,<489,2>),"setNClob",3,1>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(12454,1138,<460,4>,<486,5>),"longValue",24,10>,<|project://smallsql/src/smallsql/database/ExpressionFunctionSubstring.java|(1735,661,<54,1>,<72,2>),"getBytes",19,6>,<|project://smallsql/src/smallsql/database/Expressions.java|(1619,147,<57,1>,<61,2>),"setSize",5,3>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(25998,139,<773,4>,<775,5>),"getDate",3,1>,<|project://smallsql/src/smallsql/database/JoinScrollIndex.java|(2259,249,<72,4>,<80,5>),"next",8,2>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(15132,85,<454,4>,<456,5>),"getLong",3,1>,<|project://smallsql/src/smallsql/junit/TestFunctions.java|(22833,448,<385,4>,<396,5>),"setUp",12,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(9464,70,<455,4>,<457,5>),"supportsStoredProcedures",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionLTrim.java|(1560,72,<47,1>,<49,2>),"isNull",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(6481,69,<275,4>,<277,5>),"supportsOrderByUnrelated",3,1>,<|project://smallsql/src/smallsql/database/Join.java|(2895,191,<105,1>,<108,2>),"setRowPosition",4,1>,<|project://smallsql/src/smallsql/junit/TestOperatoren.java|(5149,301,<95,4>,<104,5>),"tearDown",9,2>,<|project://smallsql/src/smallsql/database/SQLParser.java|(4599,1060,<134,4>,<163,5>),"createSyntaxError",18,5>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(36714,80,<1011,4>,<1013,5>),"getDatabaseMinorVersion",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java|(2002,119,<62,1>,<65,2>),"getFloat",4,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(1523,214,<44,4>,<50,2>),"SSDatabaseMetaData",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunction.java|(2525,290,<72,1>,<88,2>),"setParamAt",17,5>,<|project://smallsql/src/smallsql/database/MutableInteger.java|(1617,44,<55,1>,<57,2>),"intValue",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(3919,77,<175,4>,<177,5>),"storesMixedCaseQuotedIdentifiers",3,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(8048,392,<232,1>,<242,5>),"getIdentifier",5,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(22495,153,<611,1>,<616,2>),"setClob",4,1>,<|project://smallsql/src/smallsql/database/SmallSQLException.java|(3284,85,<105,1>,<108,2>),"printStackTrace",4,2>,<|project://smallsql/src/smallsql/database/IndexNode.java|(3903,45,<128,1>,<130,2>),"clearValue",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(2203,56,<75,4>,<77,5>),"isReadOnly",3,1>,<|project://smallsql/src/smallsql/database/SmallSQLException.java|(2445,142,<77,1>,<81,2>),"init",5,2>,<|project://smallsql/src/smallsql/database/Where.java|(2458,87,<92,1>,<95,2>),"beforeFirst",4,1>,<|project://smallsql/src/smallsql/database/TableResult.java|(3034,67,<96,1>,<99,2>),"getTableView",4,1>,<|project://smallsql/src/smallsql/junit/TestAlterTable2.java|(1717,741,<53,4>,<68,5>),"testAdd2PrimaryKeys",15,2>,<|project://smallsql/src/smallsql/database/StoreNull.java|(2661,87,<109,1>,<111,2>),"getString",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(5480,307,<159,4>,<167,5>),"getBytes",9,2>,<|project://smallsql/src/smallsql/junit/TestDBMetaData.java|(3861,521,<89,4>,<96,5>),"testGetProcedures",8,1>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(17211,686,<517,1>,<534,5>),"getDouble",18,12>,<|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|(7618,137,<248,4>,<250,5>),"isReadOnly",3,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(3245,200,<96,4>,<101,5>),"parseExpression",6,1>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(30569,270,<821,4>,<827,5>),"createUnspportedDataType",7,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(5632,123,<216,4>,<219,5>),"getFetchDirection",4,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(24359,213,<729,4>,<732,5>),"getClob",3,1>,<|project://smallsql/src/smallsql/database/Index.java|(15396,89,<463,1>,<465,2>),"shortToBinarySortOrder",3,1>,<|project://smallsql/src/smallsql/database/Money.java|(3049,58,<106,4>,<108,5>),"unscaledValue",3,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(2339,140,<85,4>,<88,5>),"executeQuery",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|(3367,45,<122,4>,<124,5>),"getPrecision",3,1>,<|project://smallsql/src/smallsql/database/Money.java|(2965,76,<102,4>,<104,5>),"hashCode",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(22653,163,<618,1>,<623,2>),"setBlob",4,1>,<|project://smallsql/src/smallsql/database/IndexDescription.java|(8012,772,<257,1>,<275,2>),"load",16,2>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(19634,148,<585,4>,<587,5>),"updateBigDecimal",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(2753,69,<110,4>,<112,5>),"getDriverName",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(23118,135,<638,1>,<642,2>),"getNClob",4,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(15581,302,<439,4>,<447,5>),"readNumeric",9,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|(1731,88,<53,4>,<55,5>),"getFloat",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionDayOfWeek.java|(1561,124,<48,1>,<51,2>),"getInt",4,2>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(10721,324,<407,4>,<416,5>),"negate",10,4>,<|project://smallsql/src/smallsql/database/ExpressionFunctionCot.java|(1418,51,<38,4>,<38,55>),"getFunction",1,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(8325,1394,<219,4>,<258,5>),"writeFinsh",31,8>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(11388,63,<580,4>,<582,5>),"getMaxCatalogNameLength",3,1>,<|project://smallsql/src/smallsql/junit/TestOrderBy.java|(16627,553,<628,1>,<646,2>),"testVarbinaryEmpty",14,1>,<|project://smallsql/src/smallsql/database/Scrollable.java|(3816,207,<145,1>,<151,2>),"afterLast",7,3>,<|project://smallsql/src/smallsql/database/SSConnection.java|(3229,416,<91,4>,<99,5>),"getDatabase",5,3>,<|project://smallsql/src/smallsql/database/Index.java|(16089,232,<489,1>,<496,2>),"bytesToBinarySortOrder",8,2>,<|project://smallsql/src/smallsql/database/ExpressionName.java|(5677,66,<222,1>,<224,2>),"isCaseSensitive",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(11993,86,<346,4>,<348,5>),"isFirst",3,1>,<|project://smallsql/src/smallsql/database/IndexNode.java|(12149,721,<422,1>,<448,2>),"load",25,7>,<|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|(1795,117,<62,1>,<66,2>),"getInt",5,2>,<|project://smallsql/src/smallsql/database/LongTreeList.java|(8850,1245,<317,1>,<353,2>),"getNext",30,7>,<|project://smallsql/src/smallsql/database/SSStatement.java|(3612,72,<130,4>,<132,5>),"getMaxFieldSize",3,1>,<|project://smallsql/src/smallsql/database/TableResult.java|(6266,426,<205,4>,<217,5>),"moveToValidRow",9,3>,<|project://smallsql/src/smallsql/database/FileIndexNode.java|(2481,458,<80,4>,<89,2>),"loadRef",10,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(51459,1062,<1348,4>,<1383,5>),"caseExpr",32,7>,<|project://smallsql/src/smallsql/database/SortedResult.java|(3358,680,<121,4>,<140,5>),"previous",20,5>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(3539,300,<94,4>,<102,5>),"getBoolean",9,2>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(14515,907,<512,4>,<533,5>),"doubleValue",19,8>,<|project://smallsql/src/smallsql/junit/TestIdentifer.java|(1495,55,<48,1>,<50,2>),"TestIdentifer",3,1>,<|project://smallsql/src/smallsql/database/ExpressionName.java|(3382,322,<118,4>,<133,5>),"getDataType",16,9>,<|project://smallsql/src/smallsql/junit/TestScrollable.java|(7154,502,<167,4>,<179,5>),"testPreviousWithWhereAssert",13,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|(3444,62,<112,1>,<114,2>),"getDouble",3,1>,<|project://smallsql/src/smallsql/database/Distinct.java|(2596,56,<102,1>,<104,2>),"getRow",3,1>,<|project://smallsql/src/smallsql/database/Database.java|(7612,921,<229,4>,<247,5>),"replaceTable",19,3>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(22681,104,<663,4>,<666,5>),"refreshRow",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|(2303,154,<76,1>,<80,5>),"getString",5,2>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(3558,49,<113,1>,<115,2>),"isScrollable",3,1>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(6096,86,<250,1>,<252,2>),"getFloat",3,1>,<|project://smallsql/src/smallsql/database/RowSource.java|(3214,105,<122,1>,<124,2>),"absolute",3,1>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(6666,87,<275,1>,<277,2>),"getBytes",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(6301,83,<265,4>,<267,5>),"supportsDifferentTableCorrelationNames",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionDifference.java|(1666,401,<53,1>,<64,2>),"getInt",12,4>,<|project://smallsql/src/smallsql/database/Expressions.java|(2594,66,<103,1>,<105,2>),"set",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(38127,149,<1227,1>,<1232,2>),"updateBinaryStream",4,1>,<|project://smallsql/src/smallsql/database/LongLongList.java|(2172,36,<77,1>,<79,2>),"clear",3,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(70508,2890,<1834,4>,<1899,5>),"rowSource",59,20>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(13512,310,<411,1>,<419,2>),"afterLast",9,3>,<|project://smallsql/src/smallsql/database/SmallSQLException.java|(6432,780,<192,1>,<210,2>),"translateMsg",5,1>,<|project://smallsql/src/smallsql/database/Database.java|(3547,189,<97,4>,<101,5>),"getDatabase",5,2>,<|project://smallsql/src/smallsql/database/Column.java|(3549,51,<123,4>,<125,5>),"getDataType",3,1>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(3850,392,<130,1>,<139,2>),"testCountWherePrepare",10,2>,<|project://smallsql/src/smallsql/database/ExpressionName.java|(2619,82,<86,4>,<88,5>),"getLong",3,1>,<|project://smallsql/src/smallsql/junit/TestOrderBy.java|(11940,681,<440,1>,<464,2>),"testOrderBy_int_desc",22,4>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(10529,61,<520,4>,<522,5>),"getMaxCharLiteralLength",3,1>,<|project://smallsql/src/smallsql/database/Table.java|(6221,1189,<187,4>,<217,5>),"write",24,3>,<|project://smallsql/src/smallsql/junit/TestOrderBy.java|(14569,713,<545,1>,<569,2>),"test_bigint_withDoublicateValues",21,2>,<|project://smallsql/src/smallsql/database/NoFromResult.java|(2367,153,<103,1>,<107,2>),"relative",5,2>,<|project://smallsql/src/smallsql/database/MutableFloat.java|(1794,67,<67,1>,<69,2>),"getImmutableObject",3,1>,<|project://smallsql/src/smallsql/database/TableView.java|(4461,794,<128,1>,<147,2>),"createFile",12,3>,<|project://smallsql/src/smallsql/database/SSStatement.java|(4800,240,<186,4>,<189,5>),"setCursorName",3,1>,<|project://smallsql/src/smallsql/database/Table.java|(16178,1278,<454,1>,<488,2>),"requestWriteLock",28,6>,<|project://smallsql/src/smallsql/database/ExpressionName.java|(4213,324,<147,1>,<155,2>),"setFrom",5,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnInt.java|(2361,57,<93,1>,<95,2>),"getDataType",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionOctetLen.java|(1659,62,<47,1>,<49,2>),"getFunction",3,1>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(16783,225,<533,1>,<539,5>),"setTables",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(12097,177,<351,4>,<357,5>),"isLast",7,2>,<|project://smallsql/src/smallsql/database/Distinct.java|(1845,87,<64,1>,<67,2>),"beforeFirst",4,1>,<|project://smallsql/src/smallsql/junit/BasicTestCase.java|(7072,6395,<210,4>,<333,5>),"assertEqualsRsValue",116,27>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(15226,1037,<458,1>,<486,5>),"getLong",29,18>,<|project://smallsql/src/smallsql/database/Distinct.java|(1555,121,<47,1>,<50,2>),"Distinct",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|(1919,121,<69,1>,<73,2>),"getLong",5,2>,<|project://smallsql/src/smallsql/database/SortedResult.java|(5571,401,<200,1>,<212,2>),"afterLast",12,3>,<|project://smallsql/src/smallsql/junit/TestScrollable.java|(5406,531,<129,4>,<141,5>),"testFirstWithWhereAssert",13,2>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(7024,114,<206,4>,<209,5>),"execute",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnInt.java|(1619,74,<50,1>,<52,2>),"getBoolean",3,1>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(12623,359,<382,4>,<389,80>),"set",5,1>,<|project://smallsql/src/smallsql/database/MutableDouble.java|(1451,55,<43,1>,<45,2>),"MutableDouble",3,1>,<|project://smallsql/src/smallsql/database/Expressions.java|(2922,90,<120,1>,<122,2>),"toArray",3,1>,<|project://smallsql/src/smallsql/junit/BasicTestCase.java|(1694,78,<52,4>,<54,5>),"BasicTestCase",3,1>,<|project://smallsql/src/smallsql/database/SortedResult.java|(7277,67,<271,1>,<273,2>),"rowInserted",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(7575,126,<219,4>,<221,5>),"getString",3,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(11237,136,<422,1>,<426,2>),"isWrapperFor",4,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(20700,11819,<830,4>,<867,5>),"getTypeInfo",37,1>,<|project://smallsql/src/smallsql/junit/TestAlterTable.java|(1534,406,<48,4>,<54,5>),"testAdd1Column",7,1>,<|project://smallsql/src/smallsql/database/CommandSet.java|(1494,389,<45,4>,<56,5>),"executeImpl",12,3>,<|project://smallsql/src/smallsql/database/UnionAll.java|(4889,56,<195,1>,<197,2>),"getRow",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(26155,513,<778,4>,<790,5>),"getTime",13,4>,<|project://smallsql/src/smallsql/database/ExpressionValue.java|(2403,315,<88,1>,<98,2>),"equals",8,5>,<|project://smallsql/src/smallsql/database/Database.java|(12404,1682,<360,4>,<398,5>),"getColumns",33,6>,<|project://smallsql/src/smallsql/database/Scrollable.java|(4030,681,<154,1>,<180,2>),"absolute",26,8>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(18334,133,<427,1>,<431,2>),"setNClob",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(38591,151,<1248,1>,<1253,2>),"updateBlob",4,1>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(4248,477,<141,1>,<152,2>),"testCountOrderBy",12,2>,<|project://smallsql/src/smallsql/database/Money.java|(3761,132,<130,1>,<133,2>),"toBigDecimal",4,2>,<|project://smallsql/src/smallsql/junit/TestDBMetaData.java|(14683,460,<292,4>,<300,5>),"testGetgetUDTs",9,1>,<|project://smallsql/src/smallsql/database/Identity.java|(3295,75,<121,4>,<123,5>),"getImmutableObject",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(33162,236,<881,4>,<889,5>),"supportsResultSetType",9,4>,<|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|(4802,108,<154,1>,<157,2>),"getObject",4,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|(1858,90,<59,4>,<61,5>),"getMoney",3,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(32054,229,<902,4>,<906,5>),"createProcedure",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|(2047,125,<76,1>,<80,2>),"getFloat",5,2>,<|project://smallsql/src/smallsql/database/Command.java|(1815,121,<62,1>,<65,2>),"Command",4,1>,<|project://smallsql/src/smallsql/database/MutableDouble.java|(1738,62,<63,1>,<65,2>),"toString",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionLeft.java|(1492,58,<42,1>,<44,2>),"getFunction",3,1>,<|project://smallsql/src/smallsql/database/Distinct.java|(2852,62,<117,1>,<120,2>),"nullRow",4,1>,<|project://smallsql/src/smallsql/database/TableResult.java|(6952,647,<236,1>,<256,2>),"setNextFilePos",14,5>,<|project://smallsql/src/smallsql/database/LongTreeList.java|(16986,233,<596,1>,<603,2>),"writeShort",4,1>,<|project://smallsql/src/smallsql/database/Scrollable.java|(4720,184,<183,1>,<191,2>),"relative",9,2>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(5905,322,<164,4>,<173,5>),"getDate",10,3>,<|project://smallsql/src/smallsql/database/ExpressionFunctionDayOfYear.java|(1490,63,<43,1>,<45,2>),"getFunction",3,1>,<|project://smallsql/src/smallsql/database/Expressions.java|(2241,209,<86,1>,<93,2>),"addAll",8,2>,<|project://smallsql/src/smallsql/database/Scrollable.java|(4913,105,<194,1>,<197,2>),"getRow",4,2>,<|project://smallsql/src/smallsql/database/ViewResult.java|(3458,95,<128,1>,<130,2>),"getInt",3,1>,<|project://smallsql/src/smallsql/database/ExpressionName.java|(3712,496,<135,4>,<145,5>),"setFrom",6,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(18022,140,<413,1>,<418,2>),"setNString",4,1>,<|project://smallsql/src/smallsql/database/LongLongList.java|(1620,37,<51,1>,<53,2>),"size",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(12621,133,<301,4>,<303,5>),"setTime",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(36249,161,<1143,1>,<1148,2>),"updateBlob",4,1>,<|project://smallsql/src/smallsql/database/MutableFloat.java|(1562,48,<51,1>,<53,2>),"floatValue",3,1>,<|project://smallsql/src/smallsql/database/Where.java|(1673,269,<53,1>,<60,2>),"isValidRow",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(25344,147,<732,1>,<737,2>),"setAsciiStream",4,1>,<|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|(2424,155,<75,4>,<77,5>),"isNullable",3,2>,<|project://smallsql/src/smallsql/junit/TestTransactions.java|(5584,1061,<166,1>,<194,2>),"testRollbackWithOneCommitRow",21,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionDifference.java|(1565,94,<48,4>,<50,5>),"isNull",3,1>,<|project://smallsql/src/smallsql/database/Money.java|(2362,73,<82,4>,<84,5>),"longValue",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(2271,61,<80,4>,<82,5>),"nullsAreSortedHigh",3,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(13670,161,<402,1>,<407,2>),"setBlob",4,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionSpace.java|(1483,59,<42,1>,<44,2>),"getFunction",3,1>,<|project://smallsql/src/smallsql/database/ExpressionName.java|(2050,284,<64,4>,<72,5>),"equals",6,4>,<|project://smallsql/src/smallsql/database/ColumnExpression.java|(1682,48,<52,1>,<54,2>),"getName",3,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(19031,310,<556,4>,<561,5>),"writeLongBinary",6,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(9001,81,<339,4>,<341,5>),"getGeneratedKeyIndexes",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(20634,118,<529,1>,<533,2>),"isClosed",4,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(24425,146,<693,1>,<697,2>),"getCharacterStream",4,1>,<|project://smallsql/src/smallsql/database/Table.java|(5263,599,<150,4>,<168,5>),"drop",14,5>,<|project://smallsql/src/smallsql/database/LongList.java|(1936,36,<75,1>,<77,2>),"clear",3,1>,<|project://smallsql/src/smallsql/database/CommandCreateDatabase.java|(1463,222,<41,4>,<47,5>),"CommandCreateDatabase",7,2>,<|project://smallsql/src/smallsql/database/SQLParser.java|(21908,2864,<643,4>,<706,5>),"addColumn",56,16>,<|project://smallsql/src/smallsql/database/ViewResult.java|(5542,86,<235,1>,<237,2>),"absolute",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionUCase.java|(1560,72,<47,1>,<49,2>),"isNull",3,1>,<|project://smallsql/src/smallsql/junit/TestJoins.java|(4951,111,<91,4>,<94,5>),"TestJoins",4,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(35394,66,<977,4>,<979,5>),"supportsGetGeneratedKeys",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(14311,164,<442,1>,<448,2>),"getRow",7,2>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(14362,535,<402,4>,<412,5>),"readLong",10,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(8899,120,<249,4>,<251,5>),"getDate",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(14622,135,<337,4>,<339,5>),"getString",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(3397,72,<145,4>,<147,5>),"storesUpperCaseIdentifiers",3,1>,<|project://smallsql/src/smallsql/database/UnionAll.java|(2459,91,<78,1>,<80,2>),"isNull",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(16000,129,<367,4>,<369,5>),"getTime",3,1>,<|project://smallsql/src/smallsql/database/IndexNode.java|(3596,201,<112,1>,<118,2>),"isEmpty",3,1>,<|project://smallsql/src/smallsql/database/Join.java|(2692,197,<99,1>,<103,2>),"getRowPosition",5,2>,<|project://smallsql/src/smallsql/database/Table.java|(8140,227,<240,1>,<243,2>),"getStore",3,1>,<|project://smallsql/src/smallsql/database/Where.java|(1622,45,<49,1>,<51,2>),"getFrom",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(8346,239,<225,4>,<228,5>),"getClob",3,1>,<|project://smallsql/src/smallsql/database/Database.java|(6767,153,<200,1>,<202,2>),"dropTable",3,1>,<|project://smallsql/src/smallsql/database/SortedResult.java|(2609,381,<84,1>,<95,2>),"execute",12,2>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(15237,99,<486,4>,<488,5>),"rowInserted",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(34534,91,<940,4>,<942,5>),"insertsAreDetected",3,1>,<|project://smallsql/src/smallsql/database/TableView.java|(6043,128,<187,1>,<190,79>),"close",1,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(11645,95,<332,4>,<334,5>),"isBeforeFirst",3,1>,<|project://smallsql/src/smallsql/database/Expressions.java|(2456,36,<95,1>,<97,2>),"clear",3,1>,<|project://smallsql/src/smallsql/database/Command.java|(1714,96,<57,4>,<60,5>),"Command",4,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(16341,92,<473,4>,<475,5>),"writeSmallDateTime",3,1>,<|project://smallsql/src/smallsql/database/Table.java|(3758,878,<108,4>,<129,5>),"Table",18,3>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(19426,162,<475,1>,<480,2>),"setCharacterStream",4,1>,<|project://smallsql/src/smallsql/database/SortedResult.java|(2552,49,<79,1>,<81,2>),"isScrollable",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(19978,710,<819,4>,<827,5>),"getCrossReference",9,2>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(17757,126,<403,4>,<405,5>),"getURL",3,1>,<|project://smallsql/src/smallsql/database/SSConnection.java|(8792,72,<289,4>,<291,5>),"clearWarnings",2,1>,<|project://smallsql/src/smallsql/database/Columns.java|(1578,40,<46,1>,<48,2>),"Columns",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(16965,136,<526,4>,<528,5>),"updateBytes",3,1>,<|project://smallsql/src/smallsql/database/IndexNode.java|(11207,768,<380,1>,<408,2>),"save",25,8>,<|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|(1849,89,<60,1>,<62,2>),"getBytes",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|(1508,85,<42,4>,<44,5>),"getBoolean",3,1>,<|project://smallsql/src/smallsql/database/Database.java|(4777,590,<137,1>,<157,2>),"closeConnection",18,4>,<|project://smallsql/src/smallsql/database/StoreNull.java|(1929,86,<69,1>,<71,2>),"getBytes",3,1>,<|project://smallsql/src/smallsql/database/SSPreparedStatement.java|(5508,205,<162,4>,<165,5>),"setAsciiStream",4,1>,<|project://smallsql/src/smallsql/database/SQLTokenizer.java|(12059,101,<288,1>,<290,2>),"getKeyWord",3,1>,<|project://smallsql/src/smallsql/database/MutableInteger.java|(1717,62,<63,1>,<65,2>),"toString",3,1>,<|project://smallsql/src/smallsql/junit/TestStatement.java|(1804,819,<58,4>,<81,5>),"testBatchUpate",23,4>,<|project://smallsql/src/smallsql/database/SSStatement.java|(10682,251,<402,4>,<405,5>),"getResultSetHoldability",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(2875,276,<74,4>,<77,5>),"registerOutParameter",3,1>,<|project://smallsql/src/smallsql/database/DateTime.java|(19938,299,<645,1>,<654,2>),"formatMillis",10,3>,<|project://smallsql/src/smallsql/database/RowSource.java|(2138,160,<71,1>,<76,2>),"isBeforeFirst",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionASin.java|(1480,124,<40,4>,<43,5>),"getDouble",4,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(11098,60,<560,4>,<562,5>),"getMaxCursorNameLength",3,1>,<|project://smallsql/src/smallsql/database/ViewResult.java|(4112,104,<158,1>,<160,2>),"getObject",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(28323,127,<841,4>,<843,5>),"updateRef",3,1>,<|project://smallsql/src/smallsql/database/TableViewMap.java|(2528,57,<79,4>,<81,5>),"values",3,1>,<|project://smallsql/src/smallsql/database/Index.java|(15588,103,<471,1>,<473,2>),"longToBinarySortOrder",3,1>,<|project://smallsql/src/smallsql/database/IndexDescriptions.java|(1829,195,<62,1>,<67,2>),"get",5,2>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(4039,288,<109,4>,<117,5>),"getInt",9,2>,<|project://smallsql/src/smallsql/database/Where.java|(3769,62,<154,1>,<157,2>),"nullRow",4,1>,<|project://smallsql/src/smallsql/database/MemoryResult.java|(5191,48,<203,1>,<205,2>),"rowDeleted",3,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(14905,92,<414,4>,<416,5>),"writeDouble",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnString.java|(2067,123,<72,1>,<75,2>),"getDouble",4,2>,<|project://smallsql/src/smallsql/database/RowSource.java|(2733,94,<99,1>,<101,2>),"last",3,1>,<|project://smallsql/src/smallsql/database/Index.java|(2847,122,<81,1>,<83,2>),"createScrollStatus",3,1>,<|project://smallsql/src/smallsql/database/Utils.java|(13065,596,<377,4>,<394,5>),"createMemoryCommandSelect",11,2>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(10405,126,<298,4>,<300,5>),"getObject",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|(2964,97,<123,1>,<125,2>),"getPrecision",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(10890,59,<545,4>,<547,5>),"getMaxColumnsInSelect",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionATan.java|(1420,52,<38,4>,<38,56>),"getFunction",1,1>,<|project://smallsql/src/smallsql/database/SmallSQLException.java|(4072,716,<132,4>,<148,5>),"create",5,1>,<|project://smallsql/src/smallsql/junit/AllTests.java|(4554,278,<125,4>,<132,5>),"main",7,2>,<|project://smallsql/src/smallsql/database/ForeignKeys.java|(1583,37,<51,1>,<53,2>),"size",3,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(8544,178,<322,4>,<325,5>),"setNeedGeneratedKeys",4,1>,<|project://smallsql/src/smallsql/database/Command.java|(4754,219,<163,4>,<171,5>),"getMoreResults",5,1>,<|project://smallsql/src/smallsql/junit/TestOrderBy.java|(20950,875,<788,1>,<818,2>),"testUnion",25,2>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(26686,139,<793,4>,<795,5>),"getTime",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|(4404,57,<128,1>,<130,2>),"getLong",3,1>,<|project://smallsql/src/smallsql/database/StorePageMap.java|(4963,774,<188,1>,<216,2>),"remove",19,4>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|(3303,106,<106,4>,<108,5>),"getPrecision",3,1>,<|project://smallsql/src/smallsql/database/IndexDescription.java|(7060,401,<222,1>,<231,2>),"writeExpression",5,2>,<|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|(6934,118,<233,4>,<235,5>),"getScale",3,1>,<|project://smallsql/src/smallsql/junit/TestOrderBy.java|(3892,676,<115,1>,<140,2>),"testOrderBy_char",22,2>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(15164,55,<481,4>,<483,5>),"rowUpdated",3,1>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(2189,363,<65,4>,<75,5>),"ExpressionArithmetic",8,1>,<|project://smallsql/src/smallsql/junit/BenchTest.java|(30783,709,<740,4>,<751,5>),"createTestDataWithClassicInsert",11,3>,<|project://smallsql/src/smallsql/database/MemoryStream.java|(2214,412,<75,1>,<85,2>),"writeLong",11,1>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(6157,218,<186,4>,<190,5>),"compileLinkExpression",5,2>,<|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|(4002,57,<140,1>,<142,2>),"getDataType",3,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(11485,2480,<338,4>,<409,5>),"singleSelect",60,17>,<|project://smallsql/src/smallsql/database/UnionAll.java|(3475,94,<128,1>,<130,2>),"getBytes",3,1>,<|project://smallsql/src/smallsql/database/CommandSelect.java|(10327,138,<283,4>,<289,5>),"beforeFirst",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(23690,136,<663,1>,<667,2>),"getNString",4,1>,<|project://smallsql/src/smallsql/junit/TestTokenizer.java|(1839,211,<55,1>,<63,2>),"setUp",9,2>,<|project://smallsql/src/smallsql/database/LongTreeList.java|(10103,1277,<356,1>,<397,2>),"getPrevious",35,7>,<|project://smallsql/src/smallsql/database/Index.java|(17000,290,<527,1>,<535,2>),"equals",9,5>,<|project://smallsql/src/smallsql/database/Money.java|(2287,69,<79,4>,<81,5>),"doubleValue",3,1>,<|project://smallsql/src/smallsql/database/SQLParser.java|(69501,999,<1806,4>,<1832,5>),"join",22,6>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(2396,93,<70,4>,<73,5>),"close",4,1>,<|project://smallsql/src/smallsql/database/Table.java|(9730,740,<287,4>,<308,5>),"getInserts",18,5>,<|project://smallsql/src/smallsql/database/ViewResult.java|(6297,75,<281,1>,<283,2>),"execute",3,1>,<|project://smallsql/src/smallsql/database/CommandInsert.java|(4131,3260,<114,4>,<189,5>),"executeImpl",70,23>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(21903,131,<585,1>,<589,2>),"setRowId",3,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(10333,165,<390,4>,<393,5>),"execute",4,1>,<|project://smallsql/src/smallsql/database/TableStorePage.java|(1769,43,<54,4>,<56,5>),"getData",3,1>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(6464,149,<201,1>,<204,2>),"testSumDouble",4,1>,<|project://smallsql/src/smallsql/database/Utils.java|(4081,184,<125,1>,<131,2>),"long2int",7,3>,<|project://smallsql/src/smallsql/junit/TestThreads.java|(1191,226,<46,16>,<52,17>),"run",7,2>,<|project://smallsql/src/smallsql/database/Join.java|(4817,1044,<177,4>,<201,5>),"createJoinScrollIndex",19,5>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(12706,510,<376,4>,<385,5>),"getMoneyImpl",10,6>,<|project://smallsql/src/smallsql/database/Utils.java|(6659,540,<214,4>,<225,5>),"hex2bytes",12,3>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(6931,289,<194,4>,<202,5>),"getObject",9,2>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(7867,70,<360,4>,<362,5>),"supportsLimitedOuterJoins",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionLength.java|(1550,215,<48,1>,<54,2>),"getInt",7,4>,<|project://smallsql/src/smallsql/database/Utils.java|(2077,149,<59,4>,<61,5>),"createTableViewFileName",3,1>,<|project://smallsql/src/smallsql/database/IndexNode.java|(8047,156,<266,1>,<269,2>),"addRootValue",4,1>,<|project://smallsql/src/smallsql/database/StorePage.java|(1924,632,<63,1>,<84,2>),"commit",18,5>,<|project://smallsql/src/smallsql/junit/TestExceptionMethods.java|(6322,607,<182,4>,<196,5>),"testDuplicatedColumnInsert",15,2>,<|project://smallsql/src/smallsql/database/FileIndexNode.java|(1871,142,<59,4>,<62,5>),"createIndexNode",4,1>,<|project://smallsql/src/smallsql/junit/TestTransactions.java|(14857,776,<405,1>,<424,2>),"testReadUncommited",18,1>,<|project://smallsql/src/smallsql/database/ExpressionName.java|(4915,47,<182,1>,<184,2>),"getColumn",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionMonth.java|(1549,171,<48,1>,<52,2>),"getInt",5,2>,<|project://smallsql/src/smallsql/database/Distinct.java|(2986,67,<129,1>,<131,2>),"rowInserted",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(7289,71,<325,4>,<327,5>),"supportsExtendedSQLGrammar",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|(3323,76,<134,1>,<136,2>),"getLong",3,1>,<|project://smallsql/src/smallsql/database/FileIndex.java|(2947,367,<91,4>,<98,5>),"load",8,1>,<|project://smallsql/src/smallsql/database/ExpressionName.java|(1538,137,<44,4>,<48,5>),"ExpressionName",4,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(7707,129,<222,4>,<224,5>),"getBoolean",3,1>,<|project://smallsql/src/smallsql/database/Columns.java|(1692,37,<54,1>,<56,2>),"size",3,1>,<|project://smallsql/src/smallsql/database/SSCallableStatement.java|(23974,145,<675,1>,<679,2>),"getNCharacterStream",4,1>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(8085,226,<209,4>,<216,5>),"getNextPagePos",8,3>,<|project://smallsql/src/smallsql/database/MutableNumeric.java|(6544,330,<230,4>,<242,5>),"sub",9,3>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(24590,210,<735,4>,<738,5>),"getArray",3,1>,<|project://smallsql/src/smallsql/junit/BasicTestCase.java|(6676,378,<198,1>,<207,5>),"assertEqualsRsValue",7,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(7456,74,<335,4>,<337,5>),"supportsANSI92IntermediateSQL",3,1>,<|project://smallsql/src/smallsql/database/MutableLong.java|(1610,49,<55,1>,<57,2>),"intValue",3,1>,<|project://smallsql/src/smallsql/database/ExpressionName.java|(5540,60,<214,1>,<216,2>),"getDisplaySize",3,1>,<|project://smallsql/src/smallsql/database/ExpressionName.java|(4630,44,<163,4>,<163,48>),"getTableAlias",1,1>,<|project://smallsql/src/smallsql/junit/BasicTestCase.java|(6282,388,<188,4>,<196,5>),"string2boolean",6,2>,<|project://smallsql/src/smallsql/database/StoreImpl.java|(10317,1645,<274,4>,<313,2>),"updateFinsh",31,7>,<|project://smallsql/src/smallsql/database/ExpressionFunctionPI.java|(1416,50,<38,4>,<38,54>),"getFunction",1,1>,<|project://smallsql/src/smallsql/database/Index.java|(11693,229,<319,1>,<325,2>),"addNull",7,2>,<|project://smallsql/src/smallsql/junit/TestLanguage.java|(5139,489,<182,1>,<198,2>),"assertMessage",11,4>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(16230,140,<511,4>,<513,5>),"updateLong",3,1>,<|project://smallsql/src/smallsql/junit/TestGroupBy.java|(7850,168,<251,1>,<254,2>),"testMaxMoney",4,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(6876,247,<202,4>,<205,5>),"getAsciiStream",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java|(2525,159,<86,1>,<90,2>),"getObject",5,2>,<|project://smallsql/src/smallsql/database/Scrollable.java|(5250,65,<215,1>,<217,2>),"rowDeleted",3,1>,<|project://smallsql/src/smallsql/database/ExpressionName.java|(3288,86,<114,4>,<116,5>),"getBytes",3,1>,<|project://smallsql/src/smallsql/junit/TestOther.java|(7337,373,<185,1>,<196,2>),"testCreateDropDatabases",11,2>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(38438,148,<1241,1>,<1246,2>),"updateBlob",4,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(18664,139,<564,4>,<566,5>),"updateBoolean",3,1>,<|project://smallsql/src/smallsql/database/CommandCreateView.java|(1782,135,<56,4>,<58,5>),"executeImpl",3,1>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(6562,60,<280,4>,<282,5>),"supportsGroupBy",3,1>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(13230,1090,<388,4>,<414,5>),"getNumeric",27,16>,<|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|(34242,96,<925,4>,<927,5>),"othersInsertsAreVisible",3,1>,<|project://smallsql/src/smallsql/database/SSResultSet.java|(24818,250,<741,4>,<746,5>),"getRef",3,1>,<|project://smallsql/src/smallsql/database/ExpressionFunctionCos.java|(1418,51,<38,4>,<38,55>),"getFunction",1,1>,<|project://smallsql/src/smallsql/database/SSStatement.java|(5188,126,<198,4>,<201,5>),"getUpdateCount",4,1>,<|project://smallsql/src/smallsql/database/TableStorePageInsert.java|(2203,101,<67,1>,<72,2>),"getLink",3,1>,<|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|(1926,255,<57,4>,<63,5>),"ExpressionArithmetic",7,1>,<|project://smallsql/src/smallsql/database/Index.java|(12331,909,<344,1>,<375,2>),"add",28,8>,<|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|(7058,129,<236,4>,<238,5>),"getTableName",3,1>,<|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|(8055,1532,<257,4>,<297,5>),"getColumnClassName",41,24>],124,360,21647>,<score("Very High","++",5),2.609400324>,<score("Very Low","--",1),971,25.41709578>,<score("Very High","++",5),(|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|:["package smallsql.database;","final class ExpressionFunctionIIF extends ExpressionFunction {","\tint getFunction() {","\t\treturn SQLTokenizer.IIF;","\t}","\tboolean isNull() throws Exception {","\t\tif(param1.getBoolean())","\t\t\treturn param2.isNull();","\t\treturn param3.isNull();","\t}","\tboolean getBoolean() throws Exception {","\t\tif(param1.getBoolean())","\t\t\treturn param2.getBoolean();","\t\treturn param3.getBoolean();","\t}","\tint getInt() throws Exception {","\t\tif(param1.getBoolean())","\t\t\treturn param2.getInt();","\t\treturn param3.getInt();","\t}","\tlong getLong() throws Exception {","\t\tif(param1.getBoolean())","\t\t\treturn param2.getLong();","\t\treturn param3.getLong();","\t}","\tfloat getFloat() throws Exception {","\t\tif(param1.getBoolean())","\t\t\treturn param2.getFloat();","\t\treturn param3.getFloat();","\t}","\tdouble getDouble() throws Exception {","\t\tif(param1.getBoolean())","\t\t\treturn param2.getDouble();","\t\treturn param3.getDouble();","\t}","\tlong getMoney() throws Exception {","\t\tif(param1.getBoolean())","\t\t\treturn param2.getMoney();","\t\treturn param3.getMoney();","\t}","\tMutableNumeric getNumeric() throws Exception {","\t\tif(param1.getBoolean())","\t\t\treturn param2.getNumeric();","\t\treturn param3.getNumeric();","\t}","\tObject getObject() throws Exception {","\t\tif(param1.getBoolean())","\t\t\treturn param2.getObject();","\t\treturn param3.getObject();","\t}","\tString getString() throws Exception {","\t\tif(param1.getBoolean())","\t\t\treturn param2.getString();","\t\treturn param3.getString();","\t}","\tfinal int getDataType() {","\t\treturn ExpressionArithmetic.getDataType(param2, param3);","\t}","\tfinal int getPrecision(){","\t\treturn Math.max( param2.getPrecision(), param3.getPrecision() );","\t}","\tfinal int getScale(){","\t\treturn Math.max( param2.getScale(), param3.getScale() );","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionSpace.java|:["package smallsql.database;","public class ExpressionFunctionSpace extends ExpressionFunctionReturnString {","\tfinal int getFunction() {","\t\treturn SQLTokenizer.SPACE;","\t}","    boolean isNull() throws Exception {","        return param1.isNull() || param1.getInt()\<0;","    }","    final String getString() throws Exception {","\t\tif(isNull()) return null;","        int size = param1.getInt();","        if(size \< 0){","            return null;","        }","\t\tchar[] buffer = new char[size];","        for(int i=0; i\<size; i++){","            buffer[i] = \' \';","        }","\t\treturn new String(buffer);","\t}","\tfinal int getDataType() {","\t\treturn SQLTokenizer.VARCHAR;","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|:["package smallsql.database;","abstract class ExpressionFunctionReturnP1Number extends ExpressionFunctionReturnP1 {","    final boolean getBoolean() throws Exception{","        return getDouble() != 0;","    }","\tfinal int getInt() throws Exception {","\t\treturn Utils.long2int(getLong());","\t}","    final long getLong() throws Exception{","        return Utils.double2long(getDouble());","    }","\tfinal float getFloat() throws Exception {","\t\treturn (float)getDouble();","\t}","    MutableNumeric getNumeric() throws Exception{","\t\tif(param1.isNull()) return null;","\t\tswitch(getDataType()){","\t\t\tcase SQLTokenizer.INT:","\t\t\t\treturn new MutableNumeric(getInt());","\t\t\tcase SQLTokenizer.BIGINT:","\t\t\t\treturn new MutableNumeric(getLong());","\t\t\tcase SQLTokenizer.MONEY:","\t\t\t\treturn new MutableNumeric(getMoney(), 4);","\t\t\tcase SQLTokenizer.DECIMAL:","\t\t\t\tMutableNumeric num = param1.getNumeric();","\t\t\t\tnum.floor();","\t\t\t\treturn num;","\t\t\tcase SQLTokenizer.DOUBLE:","\t\t\t\treturn new MutableNumeric(getDouble());","\t\t\tdefault:","\t\t\t\tthrow new Error();","\t\t}","    }","    long getMoney() throws Exception{","        return Utils.doubleToMoney(getDouble());","    }","\tString getString() throws Exception {","\t\tif(isNull()) return null;","\t\treturn getObject().toString();","\t}","\tfinal int getDataType() {","\t\treturn ExpressionArithmetic.getBestNumberDataType(param1.getDataType());","\t}","}"],|project://smallsql/src/smallsql/database/IndexDescription.java|:["package smallsql.database;","import java.io.File;","import java.nio.ByteBuffer;","import java.nio.channels.FileChannel;","import java.sql.DriverManager;","import java.sql.SQLException;","import smallsql.database.language.Language;","final class IndexDescription {","\tstatic final int MAGIC_INDEX = \'S\' \<\< 24 | \'Q\' \<\< 16 | \'L\' \<\< 8 | \'I\';","\tstatic final int INDEX_VERSION = 1;","\tprivate final String name;","\tfinal private int constraintType; ","\tfinal private Strings columns;","\tprivate int[] matrix;","\tfinal private Expressions expressions;","\tprivate Index index;","    private FileChannel raFile;","\tIndexDescription( String name, String tableName, int constraintType, Expressions expressions, Strings columns){","\t\tthis.constraintType = constraintType;","\t\tthis.expressions = expressions;","\t\tthis.columns = columns;","        this.name = createName(name, tableName);","\t}","    private static String createName( String defaultName, String tableName ){","        if(defaultName == null){","            defaultName = tableName + \"_\" + Long.toHexString(System.currentTimeMillis()) + Integer.toHexString(new Object().hashCode());","        }","        return defaultName;","    }","\tfinal String getName(){","\t\treturn name;","\t}","\tfinal boolean isPrimary(){","\t\treturn constraintType == SQLTokenizer.PRIMARY;","\t}","\tfinal boolean isUnique(){","\t\treturn constraintType == SQLTokenizer.PRIMARY || constraintType == SQLTokenizer.UNIQUE;","\t}","\tfinal Strings getColumns(){","\t\treturn columns;","\t}","\tfinal int matchFactor(Strings strings){","\t\tif(strings.size() \< columns.size())","\t\t\treturn Integer.MAX_VALUE; ","\t\tnextColumn:","\t\tfor(int c=0; c\<columns.size(); c++){","\t\t\tString colName = columns.get(c);","\t\t\tfor(int s=0; s\<strings.size(); s++){","\t\t\t\tif(colName.equalsIgnoreCase(strings.get(s)) )","\t\t\t\t\tcontinue nextColumn;","\t\t\t}","\t\t\treturn Integer.MAX_VALUE; ","\t\t}","\t\treturn strings.size() - columns.size();","\t}","\tfinal void init(Database database, TableView tableView){","\t\tint size = tableView.columns.size();","\t\tmatrix = new int[size];","\t\tfor(int i=0; i\<matrix.length; i++){","\t\t\tmatrix[i] = -1;","\t\t}","\t\tfor(int i=0; i\<columns.size(); i++){","\t\t\tmatrix[tableView.findColumnIdx(columns.get(i))] = i;","\t\t}","\t}","\tfinal void create(SSConnection con, Database database, TableView tableView) throws Exception{","\t\tinit( database, tableView );","\t\traFile = createFile( con, database );","\t}","\tstatic File getFile(Database database, String name) throws Exception{","\t\treturn new File( Utils.createIdxFileName( database, name ) );","\t}","\tprivate FileChannel createFile(SSConnection con, Database database) throws Exception{","\t    if( database.isReadOnly() ){","\t        throw SmallSQLException.create(Language.DB_READONLY);","\t    }","\t\tFile file = getFile( database, name );","\t\tboolean ok = file.createNewFile();","\t\tif(!ok) throw SmallSQLException.create(Language.INDEX_EXISTS, name);","\t\tFileChannel randomFile = Utils.openRaFile( file, database.isReadOnly() );","        con.add(new CreateFile(file, randomFile, con, database));","\t\twriteMagic(randomFile);","\t\treturn randomFile;","\t}","    private void load(Database database) throws SQLException{","        try{","            File file = getFile( database, name );","            if(!file.exists())","                throw SmallSQLException.create(Language.INDEX_MISSING, name);","            raFile = Utils.openRaFile( file, database.isReadOnly() );","            ByteBuffer buffer = ByteBuffer.allocate(8);","            raFile.read(buffer);","            buffer.position(0);","            int magic   = buffer.getInt();","            int version = buffer.getInt();","            if(magic != MAGIC_INDEX){","                throw SmallSQLException.create(Language.INDEX_FILE_INVALID, file.getName());","            }","            if(version \> INDEX_VERSION){","            \tObject[] params = { new Integer(version), file.getName() };","                throw SmallSQLException.create(Language.FILE_TOONEW, params);","            }","        }catch(Throwable e){","            if(raFile != null)","                try{","                    raFile.close();","                }catch(Exception e2){","                    DriverManager.println(e2.toString());","                }","            throw SmallSQLException.createFromException(e);","        }","    }","\tvoid drop(Database database) throws Exception {","        close();","\t\tboolean ok = getFile( database, name).delete();","\t\tif(!ok) throw SmallSQLException.create(Language.TABLE_CANT_DROP, name);","\t}","    void close() throws Exception{","        if(raFile != null){","            raFile.close();","            raFile = null;","        }","    }","\tprivate final void writeMagic(FileChannel raFile) throws Exception{","\t    ByteBuffer buffer = ByteBuffer.allocate(8);","\t    buffer.putInt(MAGIC_INDEX);","\t    buffer.putInt(INDEX_VERSION);","\t    buffer.position(0);","\t    raFile.write(buffer);","\t}","\tfinal void writeExpression( int columnIdx, Expression valueExpression) {","\t\tint idx = matrix[columnIdx];","\t\tif(idx \>= 0) ","\t\t\texpressions.set(idx, valueExpression);","\t}","\tfinal void writeFinish(SSConnection con) {","\t}","\tfinal void save(StoreImpl store) throws SQLException{","\t\tstore.writeInt(constraintType);","\t\tstore.writeInt(columns.size());","\t\tfor(int c=0; c\<columns.size(); c++){","\t\t\tstore.writeString( columns.get(c) );","\t\t}","\t\tstore.writeString(name);","\t}","\tfinal static IndexDescription load(Database database, TableView tableView, StoreImpl store) throws SQLException{","\t\tint constraintType = store.readInt();","\t\tint count = store.readInt();","\t\tStrings columns = new Strings();","\t\tExpressions expressions = new Expressions();","\t\tSQLParser sqlParser = new SQLParser();","\t\tfor(int c=0; c\<count; c++){","\t\t\tString column = store.readString();","\t\t\tcolumns.add( column );","\t\t\texpressions.add( sqlParser.parseExpression(column));","\t\t}","\t\tIndexDescription indexDesc = new IndexDescription( store.readString(), tableView.name, constraintType, expressions, columns);","        indexDesc.init( database, tableView );","        indexDesc.load(database);","\t\treturn indexDesc;","\t}","}"],|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|:["package smallsql.database;","import java.sql.*;","import java.util.ArrayList;","final class SSDatabaseMetaData implements DatabaseMetaData {","\tfinal private SSConnection con;","\tfinal private SSStatement st;","    SSDatabaseMetaData(SSConnection con) throws SQLException{","\t\tthis.con = con;","\t\tst = new SSStatement(con);","\t}","    public boolean allProceduresAreCallable() {","    \treturn true;","    }","    public boolean allTablesAreSelectable() {","    \treturn true;","    }","    public String getURL() throws SQLException {","    \tDatabase database = con.getDatabase(true);","    \tif(database == null)","\t\t\treturn SSDriver.URL_PREFIX;","    \treturn SSDriver.URL_PREFIX + \':\' + database.getName();","    }","    public String getUserName() {","    \treturn \"\";","    }","    public boolean isReadOnly() {","    \treturn false;","    }","    public boolean nullsAreSortedHigh() {","\t\treturn false;","    }","    public boolean nullsAreSortedLow() {","\t\treturn true;","    }","    public boolean nullsAreSortedAtStart() {","\t\treturn false;","    }","    public boolean nullsAreSortedAtEnd() {","\t\treturn false;","    }","    public String getDatabaseProductName() {","    \treturn \"SmallSQL Database\";","    }","    public String getDatabaseProductVersion() {","    \treturn getDriverVersion();","    }","    public String getDriverName(){","    \treturn \"SmallSQL Driver\";","    }","    public String getDriverVersion() {","    \treturn getDriverMajorVersion() + \".\" + SSDriver.drv.getMinorVersion();","    }","    public int getDriverMajorVersion() {","    \treturn SSDriver.drv.getMajorVersion();","    }","    public int getDriverMinorVersion() {","\t\treturn SSDriver.drv.getMinorVersion();","    }","    public boolean usesLocalFiles() {","    \treturn false;","    }","    public boolean usesLocalFilePerTable() {","    \treturn false;","    }","    public boolean supportsMixedCaseIdentifiers() {","    \treturn true;","    }","    public boolean storesUpperCaseIdentifiers() {","    \treturn false;","    }","    public boolean storesLowerCaseIdentifiers() {","    \treturn false;","    }","    public boolean storesMixedCaseIdentifiers() {","    \treturn true;","    }","    public boolean supportsMixedCaseQuotedIdentifiers() {","    \treturn true;","    }","    public boolean storesUpperCaseQuotedIdentifiers() {","    \treturn false;","    }","    public boolean storesLowerCaseQuotedIdentifiers() {","    \treturn false;","    }","    public boolean storesMixedCaseQuotedIdentifiers() {","    \treturn true;","    }","    public String getIdentifierQuoteString() {","    \treturn \"\\\"\";","    }","    public String getSQLKeywords() {","    \treturn \"database,use\";","    }","    private String getFunctions(int from, int to){","\t\tStringBuffer buf = new StringBuffer();","\t\tfor(int i=from; i\<=to; i++){","\t\t\tif(i != from) buf.append(\',\');","\t\t\tbuf.append( SQLTokenizer.getKeyWord(i) );","\t\t}","\t\treturn buf.toString();","    }","    public String getNumericFunctions() {","    \treturn getFunctions(SQLTokenizer.ABS, SQLTokenizer.TRUNCATE);","    }","    public String getStringFunctions() {","\t\treturn getFunctions(SQLTokenizer.ASCII, SQLTokenizer.UCASE);","    }","    public String getSystemFunctions() {","\t\treturn getFunctions(SQLTokenizer.IFNULL, SQLTokenizer.IIF);","    }","    public String getTimeDateFunctions() {","\t\treturn getFunctions(SQLTokenizer.CURDATE, SQLTokenizer.YEAR);","    }","    public String getSearchStringEscape() {","    \treturn \"\\\\\";","    }","    public String getExtraNameCharacters() {","    \treturn \"#$Ãƒâ‚¬Ãƒï¿½Ãƒâ€šÃƒÆ’Ãƒâ€žÃƒâ€¦Ãƒâ€\u00a0Ãƒâ€¡ÃƒË†Ãƒâ€°ÃƒÅ\u00a0Ãƒâ€¹ÃƒÅ’Ãƒï¿½ÃƒÅ½Ãƒï¿½Ãƒï¿½Ãƒâ€˜Ãƒâ€™Ãƒâ€œÃƒâ€\ufffdÃƒâ€¢Ãƒâ€“ÃƒËœÃƒâ„¢ÃƒÅ¡Ãƒâ€ºÃƒÅ“Ãƒï¿½ÃƒÅ¾ÃƒÅ¸ÃƒÂ\u00a0ÃƒÂ¡ÃƒÂ¢ÃƒÂ£ÃƒÂ¤ÃƒÂ¥ÃƒÂ¦ÃƒÂ§ÃƒÂ¨ÃƒÂ©ÃƒÂªÃƒÂ«ÃƒÂ¬ÃƒÂ­ÃƒÂ®ÃƒÂ¯ÃƒÂ°ÃƒÂ±ÃƒÂ²ÃƒÂ³ÃƒÂ´ÃƒÂµÃƒÂ¶ÃƒÂ¸ÃƒÂ¹ÃƒÂºÃƒÂ»ÃƒÂ¼ÃƒÂ½ÃƒÂ¾ÃƒÂ¿\";","    }","    public boolean supportsAlterTableWithAddColumn() {","        throw new java.lang.UnsupportedOperationException(\"Method supportsAlterTableWithAddColumn() not yet implemented.\");","    }","    public boolean supportsAlterTableWithDropColumn() {","        throw new java.lang.UnsupportedOperationException(\"Method supportsAlterTableWithDropColumn() not yet implemented.\");","    }","    public boolean supportsColumnAliasing() {","    \treturn true;","    }","    public boolean nullPlusNonNullIsNull() {","    \treturn true;","    }","    public boolean supportsConvert() {","    \treturn true;","    }","    public boolean supportsConvert(int fromType, int toType) {","    \treturn true;","    }","    public boolean supportsTableCorrelationNames() {","    \treturn true;","    }","    public boolean supportsDifferentTableCorrelationNames() {","    \treturn true;","    }","    public boolean supportsExpressionsInOrderBy() {","    \treturn true;","    }","    public boolean supportsOrderByUnrelated() {","    \treturn true;","    }","    public boolean supportsGroupBy() {","    \treturn true;","    }","    public boolean supportsGroupByUnrelated() {","    \treturn true;","    }","    public boolean supportsGroupByBeyondSelect() {","    \treturn true;","    }","    public boolean supportsLikeEscapeClause() {","    \treturn true;","    }","    public boolean supportsMultipleResultSets() {","    \treturn true;","    }","    public boolean supportsMultipleTransactions() {","    \treturn true;","    }","    public boolean supportsNonNullableColumns() {","    \treturn true;","    }","    public boolean supportsMinimumSQLGrammar() {","    \treturn true;","    }","    public boolean supportsCoreSQLGrammar() {","\t\treturn true;","    }","    public boolean supportsExtendedSQLGrammar() {","    \treturn true;","    }","    public boolean supportsANSI92EntryLevelSQL() {","    \treturn true;","    }","    public boolean supportsANSI92IntermediateSQL() {","    \treturn true;","    }","    public boolean supportsANSI92FullSQL() {","    \treturn true;","    }","    public boolean supportsIntegrityEnhancementFacility() {","    \treturn true;","    }","    public boolean supportsOuterJoins() {","    \treturn true;","    }","    public boolean supportsFullOuterJoins() {","    \treturn true;","    }","    public boolean supportsLimitedOuterJoins() {","    \treturn true;","    }","    public String getSchemaTerm() {","    \treturn \"owner\";","    }","    public String getProcedureTerm() {","    \treturn \"procedure\";","    }","    public String getCatalogTerm() {","    \treturn \"database\";","    }","    public boolean isCatalogAtStart() {","    \treturn true;","    }","    public String getCatalogSeparator() {","    \treturn \".\";","    }","    public boolean supportsSchemasInDataManipulation() {","    \treturn false;","    }","    public boolean supportsSchemasInProcedureCalls() {","    \treturn false;","    }","    public boolean supportsSchemasInTableDefinitions() {","    \treturn false;","    }","    public boolean supportsSchemasInIndexDefinitions() {","    \treturn false;","    }","    public boolean supportsSchemasInPrivilegeDefinitions() {","    \treturn false;","    }","    public boolean supportsCatalogsInDataManipulation() {","\t\treturn true;","    }","    public boolean supportsCatalogsInProcedureCalls() {","    \treturn true;","    }","    public boolean supportsCatalogsInTableDefinitions() {","    \treturn true;","    }","    public boolean supportsCatalogsInIndexDefinitions() {","\t\treturn true;","    }","    public boolean supportsCatalogsInPrivilegeDefinitions() {","\t\treturn true;","    }","    public boolean supportsPositionedDelete() {","    \treturn true;","    }","    public boolean supportsPositionedUpdate() {","\t\treturn true;","    }","    public boolean supportsSelectForUpdate() {","\t\treturn true;","    }","    public boolean supportsStoredProcedures() {","    \treturn false;","    }","    public boolean supportsSubqueriesInComparisons() {","\t\treturn true;","    }","    public boolean supportsSubqueriesInExists() {","\t\treturn true;","    }","    public boolean supportsSubqueriesInIns() {","\t\treturn true;","    }","    public boolean supportsSubqueriesInQuantifieds() {","\t\treturn true;","    }","    public boolean supportsCorrelatedSubqueries() {","\t\treturn true;","    }","    public boolean supportsUnion() {","\t\treturn true;","    }","    public boolean supportsUnionAll() {","\t\treturn true;","    }","    public boolean supportsOpenCursorsAcrossCommit() {","    \treturn true;","    }","    public boolean supportsOpenCursorsAcrossRollback() {","    \treturn true;","    }","    public boolean supportsOpenStatementsAcrossCommit() {","    \treturn true;","    }","    public boolean supportsOpenStatementsAcrossRollback() {","    \treturn true;","    }","    public int getMaxBinaryLiteralLength() {","    \treturn 0;","    }","    public int getMaxCharLiteralLength() {","    \treturn 0;","    }","    public int getMaxColumnNameLength() {","    \treturn 255;","    }","    public int getMaxColumnsInGroupBy() {","    \treturn 0;","    }","    public int getMaxColumnsInIndex() {","    \treturn 0;","    }","    public int getMaxColumnsInOrderBy() {","    \treturn 0;","    }","    public int getMaxColumnsInSelect() {","    \treturn 0;","    }","    public int getMaxColumnsInTable() {","    \treturn 0;","    }","    public int getMaxConnections() {","    \treturn 0;","    }","    public int getMaxCursorNameLength() {","    \treturn 0;","    }","    public int getMaxIndexLength() {","    \treturn 0;","    }","    public int getMaxSchemaNameLength() {","    \treturn 255;","    }","    public int getMaxProcedureNameLength() {","    \treturn 255;","    }","    public int getMaxCatalogNameLength() {","    \treturn 255;","    }","    public int getMaxRowSize() {","    \treturn 0;","    }","    public boolean doesMaxRowSizeIncludeBlobs() {","    \treturn false;","    }","    public int getMaxStatementLength() {","    \treturn 0;","    }","    public int getMaxStatements() {","    \treturn 0;","    }","    public int getMaxTableNameLength() {","    \treturn 255;","    }","    public int getMaxTablesInSelect() {","    \treturn 0;","    }","    public int getMaxUserNameLength() {","    \treturn 0;","    }","    public int getDefaultTransactionIsolation() {","    \treturn Connection.TRANSACTION_READ_COMMITTED;","    }","    public boolean supportsTransactions() {","    \treturn true;","    }","    public boolean supportsTransactionIsolationLevel(int level) {","    \tswitch(level){","\t\t\tcase Connection.TRANSACTION_NONE:","\t\t\tcase Connection.TRANSACTION_READ_UNCOMMITTED:","    \t\tcase Connection.TRANSACTION_READ_COMMITTED:","\t\t\tcase Connection.TRANSACTION_REPEATABLE_READ:","\t\t\tcase Connection.TRANSACTION_SERIALIZABLE:","\t\t\t\treturn true;","    \t}","    \treturn false;","    }","    public boolean supportsDataDefinitionAndDataManipulationTransactions() {","    \treturn true;","    }","    public boolean supportsDataManipulationTransactionsOnly() {","    \treturn false;","    }","    public boolean dataDefinitionCausesTransactionCommit() {","    \treturn false;","    }","    public boolean dataDefinitionIgnoredInTransactions() {","    \treturn false;","    }","    public ResultSet getProcedures(String catalog, String schemaPattern, String procedureNamePattern) throws SQLException {","\t\tString[] colNames = {\"PROCEDURE_CAT\", \"PROCEDURE_SCHEM\", \"PROCEDURE_NAME\", \"\", \"\", \"\", \"REMARKS\", \"PROCEDURE_TYPE\"};  ","\t\tObject[][] data   = new Object[0][];","\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));","    }","    public ResultSet getProcedureColumns(String catalog, String schemaPattern, String procedureNamePattern, String columnNamePattern) throws SQLException {","\t\tString[] colNames = {\"PROCEDURE_CAT\", \"PROCEDURE_SCHEM\", \"PROCEDURE_NAME\", \"COLUMN_NAME\", \"COLUMN_TYPE\", \"DATA_TYPE\", \"TYPE_NAME\", \"PRECISION\", \"LENGTH\", \"SCALE\", \"RADIX\", \"NULLABLE\", \"REMARKS\" };","\t\tObject[][] data   = new Object[0][];","\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));","    }","    public ResultSet getTables(String catalog, String schemaPattern, String tableNamePattern, String[] types) throws SQLException {","\t\tString[] colNames = {\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"TABLE_TYPE\",\"REMARKS\",\"TYPE_CAT\",\"TYPE_SCHEM\",\"TYPE_NAME\",\"SELF_REFERENCING_COL_NAME\",\"REF_GENERATION\"};","\t\tDatabase database;","\t\tif(catalog == null){ ","\t\t\tdatabase = con.getDatabase(true);","\t\t\tif(database != null)","\t\t\t\tcatalog = database.getName();","    \t}else{","\t\t\tdatabase = Database.getDatabase(catalog, con, false);","    \t}","\t\tArrayList rows = new ArrayList();","\t\tboolean isTypeTable = types == null;","\t\tboolean isTypeView = types == null;","\t\tfor(int i=0; types != null && i\<types.length; i++){","\t\t\tif(\"TABLE\".equalsIgnoreCase(types[i])) isTypeTable = true;","\t\t\tif(\"VIEW\" .equalsIgnoreCase(types[i])) isTypeView  = true;","\t\t}","\t\tif(database != null){","\t\t\tStrings tables = database.getTables(tableNamePattern);","\t\t\tfor(int i=0; i\<tables.size(); i++){","\t\t\t\tString table = tables.get(i);","\t\t\t\tObject[] row = new Object[10];","\t\t\t\trow[0] = catalog;","\t\t\t\trow[2] = table;","\t\t\t\ttry{","\t\t\t\t\tif(database.getTableView( con, table) instanceof View){","\t\t\t\t\t\tif(isTypeView){","\t\t\t\t\t\t\trow[3] = \"VIEW\";","\t\t\t\t\t\t\trows.add(row);","\t\t\t\t\t\t}","\t\t\t\t\t}else{","\t\t\t\t\t\tif(isTypeTable){","\t\t\t\t\t\t\trow[3] = \"TABLE\";\t\t\t\t\t","\t\t\t\t\t\t\trows.add(row);","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}catch(Exception e){","\t\t\t\t}","\t\t\t}","\t\t}","\t\tObject[][] data = new Object[rows.size()][];","\t\trows.toArray(data);","\t\tCommandSelect cmdSelect = Utils.createMemoryCommandSelect( con, colNames, data);","\t\tExpressions order = new Expressions();","\t\torder.add( new ExpressionName(\"TABLE_TYPE\") );","\t\torder.add( new ExpressionName(\"TABLE_NAME\") );","\t\tcmdSelect.setOrder( order );","\t\treturn new SSResultSet( st, cmdSelect);","    }","    public ResultSet getSchemas() throws SQLException {","\t\tString[] colNames = {\"TABLE_SCHEM\"};","\t\tObject[][] data   = new Object[0][];","\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));","    }","    public ResultSet getCatalogs() throws SQLException {","    \tString[] colNames = {\"TABLE_CAT\"};","    \tObject[][] data   = Database.getCatalogs(con.getDatabase(true));","    \treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));","    }","    public ResultSet getTableTypes() throws SQLException {","\t\tString[] colNames = {\"TABLE_TYPE\"};","\t\tObject[][] data   = {{\"SYSTEM TABLE\"}, {\"TABLE\"}, {\"VIEW\"}};","\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));","    }","    public ResultSet getColumns(String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern) throws SQLException {","\t\ttry {","\t\t\tString[] colNames = {\"TABLE_CAT\", \"TABLE_SCHEM\", \"TABLE_NAME\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\", \"COLUMN_SIZE\", \"BUFFER_LENGTH\", \"DECIMAL_DIGITS\", \"NUM_PREC_RADIX\", \"NULLABLE\", \"REMARKS\", \"COLUMN_DEF\", \"SQL_DATA_TYPE\", \"SQL_DATETIME_SUB\", \"CHAR_OCTET_LENGTH\", \"ORDINAL_POSITION\", \"IS_NULLABLE\"};","\t\t\tObject[][] data   = con.getDatabase(false).getColumns(con, tableNamePattern, columnNamePattern);","\t\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));","\t\t} catch (Exception e) {","\t\t\tthrow SmallSQLException.createFromException(e);","\t\t}","    }","    public ResultSet getColumnPrivileges(String catalog, String schema, String table, String columnNamePattern) throws SQLException {","        String[] colNames = {\"TABLE_CAT\", \"TABLE_SCHEM\", \"TABLE_NAME\", \"COLUMN_NAME\", \"GRANTOR\", \"GRANTEE\", \"PRIVILEGE\", \"IS_GRANTABLE\"};","        throw new java.lang.UnsupportedOperationException(\"Method getColumnPrivileges() not yet implemented.\");","    }","    public ResultSet getTablePrivileges(String catalog, String schemaPattern, String tableNamePattern) throws SQLException {","        String[] colNames = {\"TABLE_CAT\", \"TABLE_SCHEM\", \"TABLE_NAME\", \"GRANTOR\", \"GRANTEE\", \"PRIVILEGE\", \"IS_GRANTABLE\"};","        throw new java.lang.UnsupportedOperationException(\"Method getTablePrivileges() not yet implemented.\");","    }","    public ResultSet getBestRowIdentifier(String catalog, String schema, String table, int scope, boolean nullable) throws SQLException {","\t\ttry {","\t\t\tString[] colNames = {\"SCOPE\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\", \"COLUMN_SIZE\", \"BUFFER_LENGTH\", \"DECIMAL_DIGITS\", \"PSEUDO_COLUMN\"};","\t\t\tObject[][] data   = con.getDatabase(false).getBestRowIdentifier(con, table);","\t\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));","\t\t} catch (Exception e) {","\t\t\tthrow SmallSQLException.createFromException(e);","\t\t}","    }","    public ResultSet getVersionColumns(String catalog, String schema, String table) throws SQLException {","\t\ttry {","\t\t\tString[] colNames = {\"SCOPE\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\", \"COLUMN_SIZE\", \"BUFFER_LENGTH\", \"DECIMAL_DIGITS\", \"PSEUDO_COLUMN\"};","\t\t\tObject[][] data   = new Object[0][0];","\t\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));","\t\t} catch (Exception e) {","\t\t\tthrow SmallSQLException.createFromException(e);","\t\t}","    }","    public ResultSet getPrimaryKeys(String catalog, String schema, String table) throws SQLException {","\t\ttry {","\t\t\tString[] colNames = {\"TABLE_CAT\", \"TABLE_SCHEM\", \"TABLE_NAME\", \"COLUMN_NAME\", \"KEY_SEQ\", \"PK_NAME\"};","\t\t\tObject[][] data   = con.getDatabase(false).getPrimaryKeys(con, table);","\t\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));","\t\t} catch (Exception e) {","\t\t\tthrow SmallSQLException.createFromException(e);","\t\t}","    }","    public ResultSet getImportedKeys(String catalog, String schema, String table) throws SQLException {","\t\treturn getCrossReference( null, null, null, null, null, table );","    }","    public ResultSet getExportedKeys(String catalog, String schema, String table) throws SQLException {","\t\treturn getCrossReference( null, null, table, null, null, null );","    }","    public ResultSet getCrossReference(String primaryCatalog, String primarySchema, String primaryTable, String foreignCatalog, String foreignSchema, String foreignTable) throws SQLException {","\t\ttry {","\t\t\tString[] colNames = {\"PKTABLE_CAT\", \"PKTABLE_SCHEM\", \"PKTABLE_NAME\", \"PKCOLUMN_NAME\", \"FKTABLE_CAT\", \"FKTABLE_SCHEM\", \"FKTABLE_NAME\", \"FKCOLUMN_NAME\", \"KEY_SEQ\", \"UPDATE_RULE\", \"DELETE_RULE\", \"FK_NAME\", \"PK_NAME\", \"DEFERRABILITY\"};","\t\t\tObject[][] data   = con.getDatabase(false).getReferenceKeys(con, primaryTable, foreignTable);","\t\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));","\t\t} catch (Exception e) {","\t\t\tthrow SmallSQLException.createFromException(e);","\t\t}","    }","    public ResultSet getTypeInfo() throws SQLException {","\t\tString[] colNames = {\t\t\"TYPE_NAME\", \t\t\t\t\"DATA_TYPE\", \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"PRECISION\", \t\"LITERAL_PREFIX\", \"LITERAL_SUFFIX\", \t\t\"CREATE_PARAMS\", \"NULLABLE\", \t \"CASE_SENSITIVE\", \"SEARCHABLE\", \"UNSIGNED_ATTRIBUTE\", \"FIXED_PREC_SCALE\", \"AUTO_INCREMENT\", \"LOCAL_TYPE_NAME\", \"MINIMUM_SCALE\", \"MAXIMUM_SCALE\", \"SQL_DATA_TYPE\", \"SQL_DATETIME_SUB\", \"NUM_PREC_RADIX\"};","\t\tObject[][] data   = {","\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.UNIQUEIDENTIFIER),Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.UNIQUEIDENTIFIER)), Utils.getInteger(36),      \t\"\'\",  \"\'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, null,                null,                null, null, null},","\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.BIT),             Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BIT) ),             Utils.getInteger(1),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},","\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.TINYINT),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TINYINT) ),         Utils.getInteger(3),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.TRUE,  Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},","\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.BIGINT),          Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BIGINT) ),          Utils.getInteger(19),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},","\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARBINARY) ),   Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},","\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.VARBINARY),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARBINARY) ),   \t  Utils.getInteger(65535),\t    \"0x\", null, \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},","\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.BINARY),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BINARY) ),   \t  \t  Utils.getInteger(65535),\t    \"0x\", null, \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},","\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),     Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARCHAR) ),     Utils.getInteger(2147483647),\t\"\'\",  \"\'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},","\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.LONGNVARCHAR),    Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGNVARCHAR) ),    Utils.getInteger(2147483647),\t\"\'\",  \"\'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},","\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CHAR) ),         \t  Utils.getInteger(65535),   \t\"\'\",  \"\'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},","\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.NCHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCHAR) ),           Utils.getInteger(65535),   \t\"\'\",  \"\'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},","\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.NUMERIC),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NUMERIC) ),         Utils.getInteger(38),     \tnull, null, \"precision,scale\", \tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null},","\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.DECIMAL),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DECIMAL) ),         Utils.getInteger(38),     \tnull, null, \"precision,scale\", \tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null},","\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.MONEY),           Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.MONEY) ),           Utils.getInteger(19),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(4), Utils.getInteger(4), null, null, null},","\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.SMALLMONEY),      Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLMONEY) ),      Utils.getInteger(10),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(4), Utils.getInteger(4), null, null, null},","\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.INT),             Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.INT) ),             Utils.getInteger(10),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},","\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.SMALLINT),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLINT) ),        Utils.getInteger(5),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},","\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.FLOAT),        \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.FLOAT) ),           Utils.getInteger(15),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},","\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.REAL),        \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.REAL) ),        \t  Utils.getInteger(7),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},","\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.DOUBLE),          Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DOUBLE) ),          Utils.getInteger(15),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},","\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARCHAR) ),         Utils.getInteger(65535),   \t\"\'\",  \"\'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},","\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.NVARCHAR),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NVARCHAR) ),        Utils.getInteger(65535),   \t\"\'\",  \"\'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},","\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.BOOLEAN),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BOOLEAN) ),         Utils.getInteger(1),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},","\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.DATE),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DATE) ), \t  \t\t  Utils.getInteger(10),\t    \t\"\'\",  \"\'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},","\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.TIME),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TIME) ), \t  \t\t  Utils.getInteger(8),\t    \t\"\'\",  \"\'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},","\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.TIMESTAMP),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TIMESTAMP) ), \t  Utils.getInteger(23),\t    \t\"\'\",  \"\'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, Utils.getInteger(3), Utils.getInteger(3), null, null, null},","\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.SMALLDATETIME),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLDATETIME) ),   Utils.getInteger(16),\t    \t\"\'\",  \"\'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},","\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.JAVA_OBJECT),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.JAVA_OBJECT) ),     Utils.getInteger(65535),\t    null, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},","\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.BLOB),   \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BLOB) ),   \t\t  Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},","\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.CLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CLOB) ),     \t\t  Utils.getInteger(2147483647),\t\"\'\",  \"\'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},","\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.NCLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCLOB) ),     \t  Utils.getInteger(2147483647),\t\"\'\",  \"\'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},","\t\t};","\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));","    }","    public ResultSet getIndexInfo(String catalog, String schema, String table, boolean unique, boolean approximate) throws SQLException {","\t\ttry {","\t\t\tString[] colNames = {\"TABLE_CAT\", \"TABLE_SCHEM\", \"TABLE_NAME\", \"NON_UNIQUE\", \"INDEX_QUALIFIER\", \"INDEX_NAME\", \"TYPE\", \"ORDINAL_POSITION\", \"COLUMN_NAME\", \"ASC_OR_DESC\", \"CARDINALITY\", \"PAGES\", \"FILTER_CONDITION\"};","\t\t\tObject[][] data   = con.getDatabase(false).getIndexInfo(con, table, unique);","\t\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));","\t\t} catch (Exception e) {","\t\t\tthrow SmallSQLException.createFromException(e);","\t\t}","    }","    public boolean supportsResultSetType(int type) {","\t\tswitch(type){","\t\t\tcase ResultSet.TYPE_FORWARD_ONLY:","\t\t\tcase ResultSet.TYPE_SCROLL_INSENSITIVE:","\t\t\tcase ResultSet.TYPE_SCROLL_SENSITIVE:","\t\t\t\treturn true;","\t\t}","\t\treturn false;","    }","    public boolean supportsResultSetConcurrency(int type, int concurrency) {","\t\tif(type \>= ResultSet.TYPE_FORWARD_ONLY && type \<= ResultSet.TYPE_SCROLL_SENSITIVE &&","\t\t\tconcurrency \>= ResultSet.CONCUR_READ_ONLY && concurrency \<= ResultSet.CONCUR_UPDATABLE)","\t\t\treturn true;","\t\treturn false;","    }","    public boolean ownUpdatesAreVisible(int type) {","\t\treturn supportsResultSetType(type);","    }","    public boolean ownDeletesAreVisible(int type) {","\t\treturn supportsResultSetType(type);","    }","\tpublic boolean ownInsertsAreVisible(int type) {","\t\treturn supportsResultSetType(type);","    }","    public boolean othersUpdatesAreVisible(int type) {","\t\treturn supportsResultSetType(type);","    }","    public boolean othersDeletesAreVisible(int type) {","\t\treturn supportsResultSetType(type);","    }","    public boolean othersInsertsAreVisible(int type) {","\t\treturn supportsResultSetType(type);","    }","    public boolean updatesAreDetected(int type) {","\t\treturn false;","    }","    public boolean deletesAreDetected(int type) {","\t\treturn supportsResultSetType(type);","    }","    public boolean insertsAreDetected(int type) {","\t\treturn supportsResultSetType(type);","    }","    public boolean supportsBatchUpdates() {","\t\treturn true;","    }","    public ResultSet getUDTs(String catalog, String schemaPattern, String typeNamePattern, int[] types) throws SQLException {","\t\tString[] colNames = {\"TYPE_CAT\", \"TYPE_SCHEM\", \"TYPE_NAME\", \"CLASS_NAME\", \"DATA_TYPE\", \"REMARKS\"};        ","\t\tObject[][] data   = new Object[0][];","\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));","    }","    public Connection getConnection() {","    \treturn con;","    }","    public boolean supportsSavepoints() {","    \treturn false;","    }","    public boolean supportsNamedParameters() {","\t\treturn true;","    }","    public boolean supportsMultipleOpenResults() {","\t\treturn true;","    }","    public boolean supportsGetGeneratedKeys() {","\t\treturn true;","    }","    public ResultSet getSuperTypes(String catalog, String schemaPattern, String typeNamePattern) throws SQLException {","        throw new java.lang.UnsupportedOperationException(\"Method getSuperTypes() not yet implemented.\");","    }","    public ResultSet getSuperTables(String catalog, String schemaPattern, String tableNamePattern) throws SQLException {","        throw new java.lang.UnsupportedOperationException(\"Method getSuperTables() not yet implemented.\");","    }","    public ResultSet getAttributes(String catalog, String schemaPattern, String typeNamePattern, String attributeNamePattern) throws SQLException {","        throw new java.lang.UnsupportedOperationException(\"Method getAttributes() not yet implemented.\");","    }","    public boolean supportsResultSetHoldability(int holdability) {","\t\treturn true;","    }","    public int getResultSetHoldability() {","\t\treturn ResultSet.HOLD_CURSORS_OVER_COMMIT;","    }","    public int getDatabaseMajorVersion() {","    \treturn getDriverMajorVersion();","    }","    public int getDatabaseMinorVersion() {","\t\treturn getDriverMinorVersion();","    }","    public int getJDBCMajorVersion() {","    \treturn 3;","    }","    public int getJDBCMinorVersion() {","    \treturn 0;","    }","    public int getSQLStateType() {","\t\treturn sqlStateSQL99;","    }","    public boolean locatorsUpdateCopy() {","\t\treturn false;","    }","    public boolean supportsStatementPooling() {","\t\treturn false;","    }","\t@Override","\tpublic \<T\> T unwrap(Class\<T\> iface) throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic boolean isWrapperFor(Class\<?\> iface) throws SQLException {","\t\treturn false;","\t}","\t@Override","\tpublic RowIdLifetime getRowIdLifetime() throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic ResultSet getSchemas(String catalog, String schemaPattern)","\t\t\tthrows SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic boolean supportsStoredFunctionsUsingCallSyntax() throws SQLException {","\t\treturn false;","\t}","\t@Override","\tpublic boolean autoCommitFailureClosesAllResultSets() throws SQLException {","\t\treturn false;","\t}","\t@Override","\tpublic ResultSet getClientInfoProperties() throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic ResultSet getFunctions(String catalog, String schemaPattern,","\t\t\tString functionNamePattern) throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic ResultSet getFunctionColumns(String catalog, String schemaPattern,","\t\t\tString functionNamePattern, String columnNamePattern)","\t\t\tthrows SQLException {","\t\treturn null;","\t}","}"],|project://smallsql/src/smallsql/database/FileIndex.java|:["package smallsql.database;","import java.io.*;","import java.nio.ByteBuffer;","import java.nio.channels.FileChannel;","class FileIndex extends Index {","static void print(Index index, Expressions expressions){","    IndexScrollStatus scroll = index.createScrollStatus(expressions);","    long l;","    while((l= scroll.getRowOffset(true)) \>=0){","        System.out.println(l);","    }","    System.out.println(\"============================\");","}","    private final FileChannel raFile;","    FileIndex( boolean unique, FileChannel raFile ) {","        this(new FileIndexNode( unique, (char)-1, raFile), raFile);","    }","    FileIndex( FileIndexNode root, FileChannel raFile ) {","        super(root);","        this.raFile = raFile;","    }","    static FileIndex load( FileChannel raFile ) throws Exception{","        ByteBuffer buffer = ByteBuffer.allocate(1);","        raFile.read(buffer);","        buffer.position(0);","        boolean unique = buffer.get() != 0;","        FileIndexNode root = FileIndexNode.loadRootNode( unique, raFile, raFile.position() );","        return new FileIndex( root, raFile );","    }","    void save() throws Exception{","        ByteBuffer buffer = ByteBuffer.allocate(1);","        buffer.put(rootPage.getUnique() ? (byte)1 : (byte)0 );","        buffer.position(0);","        raFile.write( buffer );","        ((FileIndexNode)rootPage).save();","    }","    void close() throws IOException{","        raFile.close();","    }","}"],|project://smallsql/src/smallsql/database/Join.java|:["package smallsql.database;","final class Join extends RowSource{","    Expression condition; ","    private int type;","    RowSource left; ","    RowSource right;","\tprivate boolean isAfterLast;","    private LongLongList rowPositions; ","    private int row; ","    JoinScroll scroll;","    Join( int type, RowSource left, RowSource right, Expression condition ){","        this.type = type;","        this.condition = condition;","        this.left = left;","        this.right = right;","    }","\tfinal boolean isScrollable(){","\t\treturn false; ","\t}","    void beforeFirst() throws Exception{","        scroll.beforeFirst();","\t\tisAfterLast  = false;","\t\trow = 0;","    }","    boolean first() throws Exception{","        beforeFirst();","        return next();","    }","    boolean next() throws Exception{","        if(isAfterLast) return false;","        row++;","        boolean result = scroll.next();","        if(!result){","            noRow();","        }","        return result;","    }","\tvoid afterLast(){","\t\tisAfterLast = true;","\t\tnoRow();","\t}","\tint getRow(){","\t\treturn row;","\t}","\tfinal long getRowPosition(){","\t\tif(rowPositions == null) rowPositions = new LongLongList();","\t\trowPositions.add( left.getRowPosition(), right.getRowPosition());","\t\treturn rowPositions.size()-1;","\t}","\tfinal void setRowPosition(long rowPosition) throws Exception{","\t\tleft .setRowPosition( rowPositions.get1((int)rowPosition));","\t\tright.setRowPosition( rowPositions.get2((int)rowPosition));","\t}","\tfinal boolean rowInserted(){","\t\treturn left.rowInserted() || right.rowInserted();","\t}","\tfinal boolean rowDeleted(){","\t\treturn left.rowDeleted() || right.rowDeleted();","\t}","    void nullRow(){","    \tleft.nullRow();","    \tright.nullRow();","    \trow = 0;","    }","\tvoid noRow(){","\t\tisAfterLast = true;","\t\tleft.noRow();","\t\tright.noRow();","\t\trow = 0;","\t}","    void execute() throws Exception{","    \tleft.execute();","    \tright.execute();","        if(!createJoinScrollIndex()){","            scroll = new JoinScroll(type, left, right, condition);","        }","    }","    boolean isExpressionsFromThisRowSource(Expressions columns){","        if(left.isExpressionsFromThisRowSource(columns) || right.isExpressionsFromThisRowSource(columns)){","            return true;","        }","        if(columns.size() == 1){","            return false;","        }","        Expressions single = new Expressions();","        for(int i=0; i\<columns.size(); i++){","            single.clear();","            single.add(columns.get(i));","            if(left.isExpressionsFromThisRowSource(columns) || right.isExpressionsFromThisRowSource(columns)){","                continue;","            }","            return false;","        }","        return true;","    }","    private boolean createJoinScrollIndex() throws Exception{","        if(type == CROSS_JOIN){","            return false;","        }","        if(type != INNER_JOIN){","            return false;","        }","        if(condition instanceof ExpressionArithmetic){","            ExpressionArithmetic cond = (ExpressionArithmetic)condition;","            Expressions leftEx = new Expressions();","            Expressions rightEx = new Expressions();","            int operation = createJoinScrollIndex(cond, leftEx, rightEx, 0);","            if(operation != 0){","                scroll = new JoinScrollIndex( type, left, right, leftEx, rightEx, operation);","                return true;","            }","        }","        return false;","    }","    private int createJoinScrollIndex(ExpressionArithmetic cond, Expressions leftEx, Expressions rightEx, int operation) throws Exception{","        Expression[] params = cond.getParams();","        int op = cond.getOperation();","        if(op == ExpressionArithmetic.AND){","            Expression param0 = params[0];","            Expression param1 = params[1];","            if(param0 instanceof ExpressionArithmetic && param1 instanceof ExpressionArithmetic){","                op = createJoinScrollIndex((ExpressionArithmetic)param0, leftEx, rightEx, operation);","                if(op == 0){","                    return 0;","                }","                return createJoinScrollIndex((ExpressionArithmetic)param1, leftEx, rightEx, operation);","            }","            return 0;","        }","        if(operation == 0){","            operation = op;","        }","        if(operation != op){","            return 0;","        }","        if(operation == ExpressionArithmetic.EQUALS){","            Expression param0 = params[0];","            Expression param1 = params[1];","            Expressions columns0 = Utils.getExpressionNameFromTree(param0);","            Expressions columns1 = Utils.getExpressionNameFromTree(param1);","            if(left.isExpressionsFromThisRowSource(columns0) && right.isExpressionsFromThisRowSource(columns1)){","                leftEx.add( param0 );","                rightEx.add( param1 );","            }else{","                if(left.isExpressionsFromThisRowSource(columns1) && right.isExpressionsFromThisRowSource(columns0)){","                    leftEx.add( param1 );","                    rightEx.add( param0 );","                }else{","                    return 0;","                }","            }","            return operation;","        }","        return 0;","    }","    static final int CROSS_JOIN = 1;","    static final int INNER_JOIN = 2;","    static final int LEFT_JOIN  = 3;","    static final int FULL_JOIN  = 4;","\tstatic final int RIGHT_JOIN = 5;","}"],|project://smallsql/src/smallsql/database/CommandDelete.java|:["package smallsql.database;","class CommandDelete extends CommandSelect {","\tCommandDelete(Logger log){","\t\tsuper(log);","\t}","\tvoid executeImpl(SSConnection con, SSStatement st) throws Exception {","\t\tcompile(con);","\t\tTableViewResult result = TableViewResult.getTableViewResult(from);","\t\tupdateCount = 0;","\t\tfrom.execute();","\t\twhile(next()){","\t\t\tresult.deleteRow();","\t\t\tupdateCount++;","\t\t}","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionPower.java|:["package smallsql.database;","final class ExpressionFunctionPower extends ExpressionFunctionReturnFloat {","    final int getFunction(){ return SQLTokenizer.POWER; }","    boolean isNull() throws Exception{","        return param1.isNull() || param2.isNull();","    }","    final double getDouble() throws Exception{","\t\tif(isNull()) return 0;","        return Math.pow( param1.getDouble(), param2.getDouble() );","    }","}"],|project://smallsql/src/smallsql/database/RowSource.java|:["package smallsql.database;","import java.sql.*;","import smallsql.database.language.Language;","abstract class RowSource {","\tabstract boolean isScrollable();","\tabstract void beforeFirst() throws Exception;","\tboolean isBeforeFirst() throws SQLException{","\t\tthrow SmallSQLException.create(Language.RSET_FWDONLY);","\t}","\tboolean isFirst() throws SQLException{","\t\tthrow SmallSQLException.create(Language.RSET_FWDONLY);","\t}","    abstract boolean first() throws Exception;","\tboolean previous() throws Exception{","\t\tthrow SmallSQLException.create(Language.RSET_FWDONLY);","\t}","    abstract boolean next() throws Exception;","\tboolean last() throws Exception{","\t\tthrow SmallSQLException.create(Language.RSET_FWDONLY);","\t}","\tboolean isLast() throws Exception{","\t\tthrow SmallSQLException.create(Language.RSET_FWDONLY);","\t}","\tboolean isAfterLast() throws SQLException, Exception{","\t\tthrow SmallSQLException.create(Language.RSET_FWDONLY);","\t}","\tabstract void afterLast() throws Exception;","\tboolean absolute(int row) throws Exception{","\t\tthrow SmallSQLException.create(Language.RSET_FWDONLY);","\t}","\tboolean relative(int rows) throws Exception{","\t\tthrow SmallSQLException.create(Language.RSET_FWDONLY);","\t}","\tabstract int getRow() throws Exception;","\tabstract long getRowPosition();","\tabstract void setRowPosition(long rowPosition) throws Exception;","\tabstract void nullRow();","\tabstract void noRow();","\tabstract boolean rowInserted();","\tabstract boolean rowDeleted();","    boolean hasAlias(){","    \treturn true;","    }","    void setAlias(String name) throws SQLException{","        throw SmallSQLException.create(Language.ALIAS_UNSUPPORTED);","    }","    abstract void execute() throws Exception;","    abstract boolean isExpressionsFromThisRowSource(Expressions columns);","}"],|project://smallsql/src/smallsql/database/SQLTokenizer.java|:["package smallsql.database;","import java.util.*;","import java.sql.SQLException;","import java.sql.Types;","import smallsql.database.language.Language;","public class SQLTokenizer {","\tprivate static final int NOT_COMMENT = 0;","\tprivate static final int LINE_COMMENT = 1;","\tprivate static final int MULTI_COMMENT = 2;","    public static List parseSQL( char[] sql ) throws SQLException{","        SearchNode node = searchTree;","        ArrayList tokens = new ArrayList();","        int value = 0;","        int tokenStart = 0;","        boolean wasWhiteSpace = true;","        int comment = NOT_COMMENT;","        char quote = 0;","        StringBuffer quoteBuffer = new StringBuffer();","        for(int i=0; i\<sql.length; i++){","            char c = sql[i];","            switch(c){","                case \'\\\"\':","                case \'\\\'\':","                \t\t\tif (comment != NOT_COMMENT) {","                \t\t\t\tbreak;","                \t\t\t}else if(quote == 0){","                                quote = c;","                            }else if(quote == c){","                                if(i+1\<sql.length && sql[i+1] == quote){","                                    quoteBuffer.append(quote);","                                    i++;","                                }else{","                                    tokens.add( new SQLToken( quoteBuffer.toString(), (quote == \'\\\'\') ? STRING : IDENTIFIER,       tokenStart, i+1) );","                                    quoteBuffer.setLength(0);","                                    quote = 0;","                                    tokenStart = i+1;","                                    wasWhiteSpace = true;","                                }","                            }else quoteBuffer.append(c);","                            break;","                case \'.\':","\t\t        \t\t\tif (comment != NOT_COMMENT) {","\t\t        \t\t\t\tbreak;","\t\t        \t\t\t}else if(quote == 0){","                                int k=tokenStart;","                                if(k == i){ ","                                \tif(sql.length\> k+1){","\t\t\t\t\t\t\t\t\t\tchar cc = sql[k+1];","\t\t\t\t\t\t\t\t\t\tif((cc \>= \'0\') && cc \<= \'9\') break; ","                                \t}","                                }else{","\t                                for(; k\<i; k++){","\t                                    char cc = sql[k];","\t                                    if((cc != \'-\' && cc != \'$\' && cc \< \'0\') || cc \> \'9\') break; ","\t                                }","\t\t\t\t\t\t\t\t\tif(k\>=i) break; ","                                }","                            }","\t\t\t\tcase \'-\':","\t\t\t\t\t\t\tif (comment != NOT_COMMENT) {","\t\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\telse if (c == \'-\' && (i+1 \< sql.length) && (sql[i+1] == \'-\')) {","\t                            if(!wasWhiteSpace){","\t                                tokens.add( new SQLToken( value, tokenStart, i) );","\t                                value = 0;","\t                            }","\t\t\t\t\t\t\t\ti++;","\t\t\t\t\t\t\t\ttokenStart = i+1;","\t\t\t\t\t\t\t\tcomment = LINE_COMMENT;","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\telse if(quote == 0 && !wasWhiteSpace){","\t\t\t\t\t\t\t\tchar c1 = sql[tokenStart];","\t\t\t\t\t\t\t\tchar cx = sql[i-1];","\t\t\t\t\t\t\t\tif(((c1 \>= \'0\' && c1 \<= \'9\') || c1 == \'.\') && (cx == \'e\' || cx == \'E\'))","\t\t\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\t\t\tif(c1 == \'$\' && tokenStart+1 == i)","\t\t\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\t\t}","                case \' \':","\t\t\t\tcase \'\\t\':","\t\t\t\tcase \'\\n\':","\t\t\t\tcase \'\\r\':","                case \',\':","                case \'(\':","                case \')\':","                case \'{\':","                case \'}\':","                case \'*\':","                case \'+\':","                case \'/\':","                case \'%\':","                case \'&\':","                case \'|\':","                case \'=\':","                case \'\<\':","                case \'\>\':","                case \'?\':","                case \'^\':","                case \'~\':","                \t\t\tif (comment == LINE_COMMENT) {","                \t\t\t\tif (c == \'\\r\' || c == \'\\n\') {","                \t\t\t\t\tcomment = NOT_COMMENT;","                                    wasWhiteSpace = true;","                \t\t\t\t}","                                tokenStart = i+1;","                \t\t\t\tbreak;","                \t\t\t}","                \t\t\telse if (comment == MULTI_COMMENT) {","                \t\t\t\tif (c == \'*\' && (i+1 \< sql.length) && (sql[i+1] == \'/\')) {","                \t\t\t\t\tcomment = NOT_COMMENT;","                                    wasWhiteSpace = true;","                                    i++;","                \t\t\t\t}","                                tokenStart = i + 1;","                \t\t\t\tbreak;","                \t\t\t}","                \t\t\telse if(quote == 0){","                                if(!wasWhiteSpace){","                                   tokens.add( new SQLToken( value, tokenStart, i) );","                                   value = 0;","                                }","                                switch(c){","\t\t\t\t\t\t\t\t\tcase \' \':","                                \tcase \'\\t\':","                                \tcase \'\\n\':","                                \tcase \'\\r\':","                                    \tbreak;","                                    case \'\<\':","                                        if((i+1 \< sql.length) && (sql[i+1] == \'\>\')){","                                            tokens.add( new SQLToken( UNEQUALS, i, i+2) );","                                            i++;","                                            break;","                                        }","                                    case \'\>\':","                                        if((i+1 \< sql.length) && (sql[i+1] == \'=\')){","                                            tokens.add( new SQLToken( 100 + c, i, i+2) );","                                            i++;","                                            break;","                                        }","                                    case \'/\':","                                        if((i+1 \< sql.length) && (sql[i+1] == \'*\')){","            \t\t\t\t\t\t\t\ti++;","            \t\t\t\t\t\t\t\ttokenStart = i+1;","            \t\t\t\t\t\t\t\tcomment = MULTI_COMMENT;","                                            break;","                                        }","                                    default:","                                        tokens.add( new SQLToken( c, i, i+1) );","                                }","                                wasWhiteSpace = true;","                                tokenStart = i+1;","                            }else{","                                quoteBuffer.append(c);","                            }","                            break;","                default:","                \t\t\tif (comment != NOT_COMMENT) {","                \t\t\t\tbreak;","                \t\t\t}else if(quote == 0){","                                if(wasWhiteSpace){","                                     node = searchTree;","                                }else{","                                    if(node == null){","                                        value = 0;","                                        wasWhiteSpace = false;","                                        break;","                                    }","                                }","\t\t\t\t\t\t\t\tc |= 0x20; ","                                while(node != null && node.letter != c) node = node.nextEntry;","                                if(node != null){","                                    value = node.value;","                                    node = node.nextLetter;","                                }else{","                                    value = 0;","                                    node = null;","                                }","                            }else{","                                quoteBuffer.append(c);","                            }","                            wasWhiteSpace = false;","                            break;","            }","        }","        if (comment == MULTI_COMMENT) {","        \tthrow SmallSQLException.create(Language.STXADD_COMMENT_OPEN);","        }        ","        if(!wasWhiteSpace) {","           tokens.add( new SQLToken( value, tokenStart, sql.length) );","        }","        return tokens;","    }","    static private void addKeyWord( String keyword, int value){","        keywords.put( Utils.getInteger( value), keyword );","        char[] letters = keyword.toCharArray();","        if(searchTree == null){","            searchTree = new SearchNode();","            searchTree.letter = (char)(letters[0] | 0x20);","        }","        SearchNode prev = null;","        SearchNode node = searchTree;","        boolean wasNextEntry = true;","        for(int i=0; i\<letters.length; i++){","            char c = (char)(letters[i] | 0x20);","            while(node != null && node.letter != c) {","                prev = node;","                node = node.nextEntry;","                wasNextEntry = true;","            }","            if(node == null){","                node = new SearchNode();","                node.letter = c;","                if(wasNextEntry)","                     prev.nextEntry = node;","                else prev.nextLetter = node;","                wasNextEntry = false;","                prev = node;","                node = null;","            }else{","                prev = node;","                node = node.nextLetter;","                wasNextEntry = false;","            }","        }","        prev.value = value;","    }","\tstatic final String getKeyWord(int key){","\t\treturn (String)keywords.get( Utils.getInteger(key) );","\t}","\tstatic final int getSQLDataType(int type){","\t\tswitch(type){","\t\t\tcase SQLTokenizer.BIT:","\t\t\t\t\t\treturn Types.BIT;","\t\t\tcase SQLTokenizer.BOOLEAN:","\t\t\t\t\t\treturn Types.BOOLEAN;","\t\t\tcase SQLTokenizer.BINARY:","\t\t\t\t\t\treturn Types.BINARY;","\t\t\tcase SQLTokenizer.VARBINARY:","\t\t\t\t\t\treturn Types.VARBINARY;","\t\t\tcase SQLTokenizer.LONGVARBINARY:","\t\t\t\t\t\treturn Types.LONGVARBINARY;","\t\t\tcase SQLTokenizer.BLOB:","\t\t\t\t\t\treturn Types.BLOB;","\t\t\tcase SQLTokenizer.TINYINT:","\t\t\t\t\t\treturn Types.TINYINT;","\t\t\tcase SQLTokenizer.SMALLINT:","\t\t\t\t\t\treturn Types.SMALLINT;","\t\t\tcase SQLTokenizer.INT:","\t\t\t\t\t\treturn Types.INTEGER;","\t\t\tcase SQLTokenizer.BIGINT:","\t\t\t\t\t\treturn Types.BIGINT;","\t\t\tcase SQLTokenizer.SMALLMONEY:","\t\t\tcase SQLTokenizer.MONEY:","\t\t\tcase SQLTokenizer.DECIMAL:","\t\t\t\t\t\treturn Types.DECIMAL;","\t\t\tcase SQLTokenizer.NUMERIC:","\t\t\t\t\t\treturn Types.NUMERIC;","\t\t\tcase SQLTokenizer.REAL:","\t\t\t\t\t\treturn Types.REAL;","\t\t\tcase SQLTokenizer.FLOAT:","\t\t\t\t\t\treturn Types.FLOAT;","\t\t\tcase SQLTokenizer.DOUBLE:","\t\t\t\t\t\treturn Types.DOUBLE;","\t\t\tcase SQLTokenizer.DATE:","\t\t\t\t\t\treturn Types.DATE;","\t\t\tcase SQLTokenizer.TIME:","\t\t\t\t\t\treturn Types.TIME;","\t\t\tcase SQLTokenizer.TIMESTAMP:","\t\t\tcase SQLTokenizer.SMALLDATETIME:","\t\t\t\t\t\treturn Types.TIMESTAMP;","\t\t\tcase SQLTokenizer.CHAR:","\t\t\tcase SQLTokenizer.NCHAR:","\t\t\t\t\t\treturn Types.CHAR;","\t\t\tcase SQLTokenizer.VARCHAR:","\t\t\tcase SQLTokenizer.NVARCHAR:","\t\t\t\t\t\treturn Types.VARCHAR;","\t\t\tcase SQLTokenizer.LONGNVARCHAR:","\t\t\tcase SQLTokenizer.LONGVARCHAR:","\t\t\t\t\t\treturn Types.LONGVARCHAR;","\t\t\tcase SQLTokenizer.CLOB:","\t\t\tcase SQLTokenizer.NCLOB:","\t\t\t\t\t\treturn Types.CLOB;","\t\t\tcase SQLTokenizer.JAVA_OBJECT:","\t\t\t\t\t\treturn Types.JAVA_OBJECT;","\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:","\t\t\t\t\t\treturn -11;","\t\t\tcase SQLTokenizer.NULL:","\t\t\t\t\t\treturn Types.NULL;","\t\t\tdefault: throw new Error(\"DataType:\"+type);","\t\t}","\t}","    static SearchNode searchTree;","    static Hashtable keywords = new Hashtable(337);","    static final int VALUE      = 0;","    static final int STRING     = 3;","    static final int IDENTIFIER  = 4;","    static final int NUMBERVALUE= 5;","    static{","        keywords.put( new Integer(VALUE),       \"\<expression\>\" );","        keywords.put( new Integer(IDENTIFIER),   \"\<identifier\>\" );","        keywords.put( new Integer(NUMBERVALUE), \"\<number\>\" );","    }","    static final int PERCENT        = \'%\'; ","    static final int BIT_AND        = \'&\'; ","    static final int PARENTHESIS_L  = \'(\'; ","    static final int PARENTHESIS_R  = \')\'; ","    static final int ASTERISK       = \'*\'; ","    static final int PLUS           = \'+\'; ","    static final int COMMA          = \',\'; ","    static final int MINUS          = \'-\'; ","    static final int POINT          = \'.\'; ","    static final int SLACH          = \'/\'; ","    static final int LESSER         = \'\<\'; ","    static final int EQUALS         = \'=\'; ","    static final int GREATER        = \'\>\'; ","    static final int QUESTION       = \'?\'; ","    static final int BIT_XOR        = \'^\'; ","    static final int ESCAPE_L       = \'{\'; ","    static final int BIT_OR         = \'|\'; ","    static final int ESCAPE_R       = \'}\'; ","    static final int TILDE          = \'~\'; ","    static final int LESSER_EQU     = 100 + LESSER; ","    static final int UNEQUALS       = 100 + EQUALS;  ","    static final int GREATER_EQU    = 100 + GREATER; ","\tstatic{","\t\tkeywords.put( new Integer(LESSER_EQU),\t\"\<=\" );","\t\tkeywords.put( new Integer(UNEQUALS),   \t\"\<\>\" );","\t\tkeywords.put( new Integer(GREATER_EQU), \"\>=\" );","\t}","    static final int SELECT     = 200;","    static final int DELETE     = 201;","    static final int INTO       = 203;","    static final int UPDATE     = 204;","    static final int CREATE     = 205;","    static final int DROP       = 206;","    static final int ALTER      = 207;","    static final int SET        = 208;","    static final int EXECUTE    = 209;","    static final int FROM       = 210;","    static final int WHERE      = 211;","    static final int GROUP      = 212;","    static final int BY         = 213;","    static final int HAVING     = 214;","    static final int ORDER      = 215;","\tstatic final int ASC        = 216;","\tstatic final int DESC       = 217;","    static final int VALUES     = 218;","    static final int AS         = 219;","    static final int DEFAULT    = 220;","    static final int IDENTITY   = 221;","    static final int INNER      = 222;","    static final int JOIN       = 223;","    static final int ON         = 224;","    static final int OUTER      = 225;","    static final int FULL       = 226;","    static final int CROSS      = 227;","    static final int USE\t\t= 228;","\tstatic final int TOP\t\t= 229;","\tstatic final int ADD\t\t= 230;","\tstatic final int LIMIT      = 231;","    static final int DATABASE   = 235;","    static final int TABLE      = 236;","    static final int VIEW       = 237;","    static final int INDEX      = 238;","    static final int PROCEDURE  = 239;","    static final int TRANSACTION= 240;","    static final int ISOLATION  = 241;","    static final int LEVEL      = 242;","    static final int READ       = 243;","    static final int COMMITTED  = 244;","    static final int UNCOMMITTED= 245;","    static final int REPEATABLE = 246;","    static final int SERIALIZABLE= 247;","    static final int CONSTRAINT = 250;","\tstatic final int PRIMARY \t= 251;","\tstatic final int FOREIGN \t= 252;","\tstatic final int KEY \t\t= 253;","\tstatic final int UNIQUE \t= 254;","\tstatic final int CLUSTERED  = 255;","\tstatic final int NONCLUSTERED=256;","\tstatic final int REFERENCES = 257;","\tstatic final int UNION \t\t= 260;","\tstatic final int ALL \t\t= 261;","\tstatic final int DISTINCT   = 262;","\tstatic final int CASE \t\t= 263;","\tstatic final int WHEN \t\t= 264;","\tstatic final int THEN \t\t= 265;","\tstatic final int ELSE \t\t= 266;","\tstatic final int END \t\t= 267;","\tstatic final int SWITCH \t= 268;","\tstatic final String DESC_STR   = \"DESC\";","    static{","        addKeyWord( \"SELECT\",   SELECT);","        addKeyWord( \"DELETE\",   DELETE);","        addKeyWord( \"INTO\",     INTO);","        addKeyWord( \"UPDATE\",   UPDATE);","        addKeyWord( \"CREATE\",   CREATE);","        addKeyWord( \"DROP\",     DROP);","        addKeyWord( \"ALTER\",    ALTER);","        addKeyWord( \"SET\",      SET);","        addKeyWord( \"EXEC\",     EXECUTE); ","        addKeyWord( \"EXECUTE\",  EXECUTE);","        addKeyWord( \"FROM\",     FROM);","        addKeyWord( \"WHERE\",    WHERE);","        addKeyWord( \"GROUP\",    GROUP);","        addKeyWord( \"BY\",       BY);","        addKeyWord( \"HAVING\",   HAVING);","        addKeyWord( \"ORDER\",    ORDER);","\t\taddKeyWord( \"ASC\",      ASC);","\t\taddKeyWord( DESC_STR,   DESC);","        addKeyWord( \"VALUES\",   VALUES);","        addKeyWord( \"AS\",       AS);","        addKeyWord( \"DEFAULT\",  DEFAULT);","        addKeyWord( \"AUTO_INCREMENT\", IDENTITY); ","        addKeyWord( \"IDENTITY\", IDENTITY);","        addKeyWord( \"INNER\",    INNER);","        addKeyWord( \"JOIN\",     JOIN);","        addKeyWord( \"ON\",       ON);","        addKeyWord( \"OUTER\",    OUTER);","        addKeyWord( \"FULL\",     FULL);","        addKeyWord( \"CROSS\",    CROSS);","\t\taddKeyWord( \"USE\",      USE);","\t\taddKeyWord( \"TOP\",      TOP);","\t\taddKeyWord( \"ADD\",      ADD);","        addKeyWord( \"LIMIT\",    LIMIT);","        addKeyWord( \"DATABASE\", DATABASE);","        addKeyWord( \"TABLE\",    TABLE);","        addKeyWord( \"VIEW\",     VIEW);","        addKeyWord( \"INDEX\",    INDEX);","        addKeyWord( \"PROCEDURE\",PROCEDURE);","        addKeyWord( \"TRANSACTION\",  TRANSACTION);","        addKeyWord( \"ISOLATION\",    ISOLATION);","        addKeyWord( \"LEVEL\",        LEVEL);","        addKeyWord( \"READ\",         READ);","        addKeyWord( \"COMMITTED\",    COMMITTED);","        addKeyWord( \"UNCOMMITTED\",  UNCOMMITTED);","        addKeyWord( \"REPEATABLE\",   REPEATABLE);","        addKeyWord( \"SERIALIZABLE\", SERIALIZABLE);","\t\taddKeyWord( \"CONSTRAINT\", \tCONSTRAINT);","\t\taddKeyWord( \"PRIMARY\",    \tPRIMARY);","\t\taddKeyWord( \"FOREIGN\",     \tFOREIGN);","\t\taddKeyWord( \"KEY\",    \t\tKEY);","\t\taddKeyWord( \"UNIQUE\",\t\tUNIQUE);","\t\taddKeyWord( \"CLUSTERED\",  \tCLUSTERED);","\t\taddKeyWord( \"NONCLUSTERED\", NONCLUSTERED);","\t\taddKeyWord( \"REFERENCES\",   REFERENCES);","\t\taddKeyWord( \"UNION\", \t\tUNION);","\t\taddKeyWord( \"ALL\",   \t\tALL);","\t\taddKeyWord( \"DISTINCT\",   \tDISTINCT);","\t\taddKeyWord( \"CASE\",   \t\tCASE);","\t\taddKeyWord( \"WHEN\",   \t\tWHEN);","\t\taddKeyWord( \"THEN\",   \t\tTHEN);","\t\taddKeyWord( \"ELSE\",   \t\tELSE);","\t\taddKeyWord( \"END\",   \t\tEND);","\t\taddKeyWord( \"SWITCH\", \t\tSWITCH);","    }","    static final int BIT            = 300;","    static final int BOOLEAN        = 301;","    static final int BINARY         = 310;","    static final int VARBINARY      = 311;","\tstatic final int RAW      \t\t= 312;","    static final int LONGVARBINARY  = 313;","    static final int BLOB           = 316;","    static final int TINYINT        = 321;","    static final int SMALLINT       = 322;","    static final int INT            = 323;","    static final int COUNTER        = 324; ","    static final int BIGINT         = 325;","    static final int SMALLMONEY     = 330;","    static final int MONEY          = 331;","    static final int DECIMAL        = 332;","    static final int NUMERIC        = 333;","    static final int REAL           = 336;","    static final int FLOAT          = 337;","    static final int DOUBLE         = 338;","    static final int DATE           = 340;","    static final int TIME           = 341;","    static final int TIMESTAMP      = 342;","    static final int SMALLDATETIME  = 343;","    static final int CHAR           = 350;","    static final int NCHAR          = 352;","    static final int VARCHAR        = 353;","    static final int NVARCHAR       = 355;","\tstatic final int SYSNAME        = 357;","    static final int LONGVARCHAR    = 359;","    static final int LONGNVARCHAR   = 360;","    static final int LONG           = 361;","    static final int CLOB           = 362;","    static final int NCLOB          = 363;","    static final int UNIQUEIDENTIFIER= 370;","    static final int JAVA_OBJECT    = 371;","    static{","        addKeyWord( \"BIT\",          BIT);","        addKeyWord( \"BOOLEAN\",      BOOLEAN);","        addKeyWord( \"BINARY\",       BINARY);","        addKeyWord( \"VARBINARY\",    VARBINARY);","\t\taddKeyWord( \"RAW\",          RAW); ","\t\taddKeyWord( \"IMAGE\",        LONGVARBINARY); ","        addKeyWord( \"LONGVARBINARY\",LONGVARBINARY);","        addKeyWord( \"BLOB\",         BLOB);","        addKeyWord( \"BYTE\",         TINYINT);","        addKeyWord( \"TINYINT\",      TINYINT);","        addKeyWord( \"SMALLINT\",     SMALLINT);","\t\taddKeyWord( \"INTEGER\",      INT);","        addKeyWord( \"INT\",          INT);","        addKeyWord( \"SERIAL\",       COUNTER); ","        addKeyWord( \"COUNTER\",      COUNTER);","        addKeyWord( \"BIGINT\",       BIGINT);","        addKeyWord( \"SMALLMONEY\",   SMALLMONEY);","        addKeyWord( \"MONEY\",        MONEY);","\t\taddKeyWord( \"NUMBER\",       DECIMAL);","\t\taddKeyWord( \"VARNUM\",       DECIMAL);","\t\taddKeyWord( \"DECIMAL\",      DECIMAL);","        addKeyWord( \"NUMERIC\",      NUMERIC);","        addKeyWord( \"REAL\",         REAL);","        addKeyWord( \"FLOAT\",        FLOAT);","        addKeyWord( \"DOUBLE\",       DOUBLE);","        addKeyWord( \"DATE\",         DATE);","        addKeyWord( \"TIME\",         TIME);","        addKeyWord( \"DATETIME\",     TIMESTAMP); ","        addKeyWord( \"TIMESTAMP\",    TIMESTAMP);","        addKeyWord( \"SMALLDATETIME\",SMALLDATETIME);","        addKeyWord( \"CHARACTER\",    CHAR); ","        addKeyWord( \"CHAR\",         CHAR);","        addKeyWord( \"NCHAR\",        NCHAR);","        addKeyWord( \"VARCHAR2\",     VARCHAR); ","        addKeyWord( \"VARCHAR\",      VARCHAR);","        addKeyWord( \"NVARCHAR2\",    NVARCHAR); ","        addKeyWord( \"NVARCHAR\",     NVARCHAR);","\t\taddKeyWord( \"SYSNAME\",      SYSNAME);","        addKeyWord( \"TEXT\",         LONGVARCHAR);","        addKeyWord( \"LONGVARCHAR\",  LONGVARCHAR);","        addKeyWord( \"NTEXT\",        LONGNVARCHAR);","        addKeyWord( \"LONGNVARCHAR\", LONGNVARCHAR);","        addKeyWord( \"LONG\",         LONG); ","        addKeyWord( \"CLOB\",         CLOB);","        addKeyWord( \"NCLOB\",        NCLOB);","        addKeyWord( \"UNIQUEIDENTIFIER\",UNIQUEIDENTIFIER);","        addKeyWord( \"SQL_VARIANT\",  JAVA_OBJECT); ","        addKeyWord( \"JAVA_OBJECT\",  JAVA_OBJECT);","    }","    static final int D      = 400;","    static final int T      = 401;","    static final int TS     = 402;","    static final int FN     = 403;","    static final int CALL   = 404;","    static final int OJ     = 405;","    static{","        addKeyWord( \"D\",    D);","        addKeyWord( \"T\",    T);","        addKeyWord( \"TS\",   TS);","        addKeyWord( \"FN\",   FN);","        addKeyWord( \"CALL\", CALL);","        addKeyWord( \"OJ\", OJ);","    }","    static final int OR     = 500;","    static final int AND    = 501;","\tstatic final int IS     = 502;","    static final int NOT    = 503;","    static final int NULL   = 504;","    static final int TRUE   = 505;","    static final int FALSE  = 506;","    static final int BETWEEN= 507;","    static final int LIKE   = 508;","    static final int IN     = 509;","    static{","        addKeyWord( \"OR\",       OR);","        addKeyWord( \"AND\",      AND);","\t\taddKeyWord( \"IS\",       IS);","        addKeyWord( \"NOT\",      NOT);","        addKeyWord( \"NULL\",     NULL);","\t\taddKeyWord( \"YES\",      TRUE); ","        addKeyWord( \"TRUE\",     TRUE);","\t\taddKeyWord( \"NO\",    \tFALSE); ","        addKeyWord( \"FALSE\",    FALSE);","        addKeyWord( \"BETWEEN\",  BETWEEN);","        addKeyWord( \"LIKE\",     LIKE);","        addKeyWord( \"IN\",       IN);","    }","    static final int ABS        = 1000; ","    static final int ACOS       = 1001;","    static final int ASIN       = 1002;","    static final int ATAN       = 1003;","    static final int ATAN2      = 1004;","    static final int CEILING    = 1005;","    static final int COS        = 1006;","    static final int COT        = 1007;","    static final int DEGREES    = 1008;","    static final int EXP        = 1009;","    static final int FLOOR      = 1010;","    static final int LOG        = 1011;","    static final int LOG10      = 1012;","    static final int MOD        = 1013;","    static final int PI         = 1014;","    static final int POWER      = 1015;","    static final int RADIANS    = 1016;","    static final int RAND       = 1017;","    static final int ROUND      = 1018;","    static final int SIGN       = 1019;","    static final int SIN        = 1020;","    static final int SQRT       = 1021;","    static final int TAN        = 1022;","    static final int TRUNCATE   = 1023; ","    static{","        addKeyWord( \"ABS\",      ABS);","        addKeyWord( \"ACOS\",     ACOS);","        addKeyWord( \"ASIN\",     ASIN);","        addKeyWord( \"ATAN\",     ATAN);","        addKeyWord( \"ATN2\",    \tATAN2); ","        addKeyWord( \"ATAN2\",    ATAN2);","        addKeyWord( \"CEILING\",  CEILING);","        addKeyWord( \"COS\",      COS);","        addKeyWord( \"COT\",      COT);","        addKeyWord( \"DEGREES\",  DEGREES);","        addKeyWord( \"EXP\",      EXP);","        addKeyWord( \"FLOOR\",    FLOOR);","        addKeyWord( \"LOG\",      LOG);","        addKeyWord( \"LOG10\",    LOG10);","        addKeyWord( \"MOD\",      MOD);","        addKeyWord( \"PI\",       PI);","        addKeyWord( \"POWER\",    POWER);","        addKeyWord( \"RADIANS\",  RADIANS);","        addKeyWord( \"RAND\",     RAND);","        addKeyWord( \"ROUND\",    ROUND);","        addKeyWord( \"SIGN\",     SIGN);","        addKeyWord( \"SIN\",      SIN);","        addKeyWord( \"SQRT\",     SQRT);","        addKeyWord( \"TAN\",      TAN);","        addKeyWord( \"TRUNCATE\", TRUNCATE);","    }","    static final int ASCII      = 1100; ","    static final int BITLEN     = 1101;","    static final int CHARLEN    = 1102;","    static final int CHARACTLEN = 1103;","    static final int _CHAR      = 1104;","    static final int CONCAT     = 1105;","    static final int DIFFERENCE = 1106;","    static final int INSERT     = 1107;","    static final int LCASE      = 1108;","    static final int LEFT       = 1109;","    static final int LENGTH     = 1110;","    static final int LOCATE     = 1111;","    static final int LTRIM      = 1112;","    static final int OCTETLEN   = 1113;","    static final int REPEAT     = 1114;","    static final int REPLACE    = 1115;","    static final int RIGHT      = 1116;","    static final int RTRIM      = 1117;","    static final int SOUNDEX    = 1118;","    static final int SPACE      = 1119;","    static final int SUBSTRING  = 1120;","    static final int TRIM       = 1121;","    static final int UCASE      = 1122; ","    static{","        addKeyWord( \"ASCII\",    ASCII);","        addKeyWord( \"BIT_LENGTH\", BITLEN);","        addKeyWord( \"CHAR_LENGTH\", CHARLEN);","        addKeyWord( \"CHARACTER_LENGTH\", CHARACTLEN);","\t\tkeywords.put( new Integer(_CHAR), \"CHAR\" ); ","        addKeyWord( \"CONCAT\",   CONCAT);","        addKeyWord( \"DIFFERENCE\",DIFFERENCE);","\t\taddKeyWord( \"STUFF\",    INSERT); ","\t\taddKeyWord( \"INSERT\",   INSERT);","        addKeyWord( \"LCASE\",    LCASE);","\t\taddKeyWord( \"LEFT\",     LEFT);","\t\taddKeyWord( \"DATALENGTH\",LENGTH); ","\t\taddKeyWord( \"LEN\",\t\tLENGTH); ","        addKeyWord( \"LENGTH\",   LENGTH);","\t\taddKeyWord( \"CHARINDEX\",LOCATE); ","        addKeyWord( \"LOCATE\",   LOCATE);","        addKeyWord( \"LTRIM\",    LTRIM);","        addKeyWord( \"OCTET_LENGTH\", OCTETLEN);","        addKeyWord( \"REPEAT\",   REPEAT);","        addKeyWord( \"REPLACE\",  REPLACE);","\t\taddKeyWord( \"RIGHT\",    RIGHT);","        addKeyWord( \"RTRIM\",    RTRIM);","        addKeyWord( \"SOUNDEX\",  SOUNDEX);","        addKeyWord( \"SPACE\",    SPACE);","        addKeyWord( \"SUBSTRING\",SUBSTRING);","        addKeyWord( \"TRIM\",     TRIM);","        addKeyWord( \"UCASE\",    UCASE);","    }","    static final int CURDATE    = 1200; ","    static final int CURRENTDATE = 1201;","    static final int CURTIME    = 1202;","    static final int DAYNAME    = 1203;","    static final int DAYOFMONTH = 1204;","    static final int DAYOFWEEK  = 1205;","    static final int DAYOFYEAR  = 1206;","\tstatic final int DAY\t\t= 1207;","    static final int HOUR       = 1208;","\tstatic final int MILLISECOND= 1209;","    static final int MINUTE     = 1210;","    static final int MONTH      = 1211;","    static final int MONTHNAME  = 1212;","    static final int NOW        = 1213;","    static final int QUARTER    = 1214;","    static final int SECOND     = 1215;","    static final int TIMESTAMPADD=1216;","    static final int TIMESTAMPDIFF=1217;","    static final int WEEK       = 1218;","    static final int YEAR       = 1219; ","    static{","        addKeyWord( \"CURDATE\",      CURDATE);","        addKeyWord( \"CURTIME\",      CURTIME);","        addKeyWord( \"CURRENT_DATE\", CURRENTDATE);","        addKeyWord( \"DAYNAME\",      DAYNAME);","        addKeyWord( \"DAYOFMONTH\",   DAYOFMONTH);","        addKeyWord( \"DAYOFWEEK\",    DAYOFWEEK);","        addKeyWord( \"DAYOFYEAR\",    DAYOFYEAR);","\t\taddKeyWord( \"DAY\",    \t\tDAY);","        addKeyWord( \"HOUR\",         HOUR);","\t\taddKeyWord( \"MILLISECOND\",  MILLISECOND);","        addKeyWord( \"MINUTE\",       MINUTE);","        addKeyWord( \"MONTH\",        MONTH);","        addKeyWord( \"MONTHNAME\",    MONTHNAME);","\t\taddKeyWord( \"GETDATE\",      NOW); ","        addKeyWord( \"NOW\",          NOW);","        addKeyWord( \"QUARTER\",      QUARTER);","        addKeyWord( \"SECOND\",       SECOND);","\t\taddKeyWord( \"DATEADD\", \t\tTIMESTAMPADD); ","        addKeyWord( \"TIMESTAMPADD\", TIMESTAMPADD);","\t\taddKeyWord( \"DATEDIFF\",\t\tTIMESTAMPDIFF); ","        addKeyWord( \"TIMESTAMPDIFF\",TIMESTAMPDIFF);","        addKeyWord( \"WEEK\",         WEEK);","        addKeyWord( \"YEAR\",         YEAR);","    }","\tstatic final int SQL_TSI_FRAC_SECOND= 1250;","\tstatic final int SQL_TSI_SECOND\t\t= 1251;","\tstatic final int SQL_TSI_MINUTE\t\t= 1252;","\tstatic final int SQL_TSI_HOUR\t\t= 1253;","\tstatic final int SQL_TSI_DAY\t\t= 1254;","\tstatic final int SQL_TSI_WEEK\t\t= 1255;","\tstatic final int SQL_TSI_MONTH\t\t= 1256;","\tstatic final int SQL_TSI_QUARTER\t= 1257;","\tstatic final int SQL_TSI_YEAR\t\t= 1258;","\tstatic{","\t\taddKeyWord( \"MS\",\t\t\t\t\tSQL_TSI_FRAC_SECOND);","\t\taddKeyWord( \"SQL_TSI_FRAC_SECOND\",\tSQL_TSI_FRAC_SECOND);","\t\taddKeyWord( \"S\",\t\t\t\t\tSQL_TSI_SECOND);","\t\taddKeyWord( \"SS\",\t\t\t\t\tSQL_TSI_SECOND);","\t\taddKeyWord( \"SQL_TSI_SECOND\",\t\tSQL_TSI_SECOND);","\t\taddKeyWord( \"MI\",\t\t\t\t\tSQL_TSI_MINUTE);","\t\taddKeyWord( \"N\",\t\t\t\t\tSQL_TSI_MINUTE);","\t\taddKeyWord( \"SQL_TSI_MINUTE\",\t\tSQL_TSI_MINUTE);","\t\taddKeyWord( \"HH\",\t\t\t\t\tSQL_TSI_HOUR);","\t\taddKeyWord( \"SQL_TSI_HOUR\",\t\t\tSQL_TSI_HOUR);","\t\taddKeyWord( \"DD\",\t\t\t\t\tSQL_TSI_DAY);","\t\taddKeyWord( \"SQL_TSI_DAY\",\t\t\tSQL_TSI_DAY);","\t\taddKeyWord( \"WK\",\t\t\t\t\tSQL_TSI_WEEK);","\t\taddKeyWord( \"WW\",\t\t\t\t\tSQL_TSI_WEEK);","\t\taddKeyWord( \"SQL_TSI_WEEK\",\t\t\tSQL_TSI_WEEK);","\t\taddKeyWord( \"M\",\t\t\t\t\tSQL_TSI_MONTH);","\t\taddKeyWord( \"MM\",\t\t\t\t\tSQL_TSI_MONTH);","\t\taddKeyWord( \"SQL_TSI_MONTH\",\t\tSQL_TSI_MONTH);","\t\taddKeyWord( \"Q\",\t\t\t\t\tSQL_TSI_QUARTER);","\t\taddKeyWord( \"QQ\",\t\t\t\t\tSQL_TSI_QUARTER);","\t\taddKeyWord( \"SQL_TSI_QUARTER\",\t\tSQL_TSI_QUARTER);","\t\taddKeyWord( \"YY\",\t\t\t\t\tSQL_TSI_YEAR);","\t\taddKeyWord( \"YYYY\",\t\t\t\t\tSQL_TSI_YEAR);","\t\taddKeyWord( \"SQL_TSI_YEAR\",\t\t\tSQL_TSI_YEAR);","\t}","    static final int IFNULL     = 1301; ","    static final int USER       = 1302;","    static final int CONVERT    = 1303;","    static final int CAST    \t= 1304;","\tstatic final int IIF    \t= 1305; ","    static{","\t\taddKeyWord( \"ISNULL\",      \tIFNULL); ","        addKeyWord( \"IFNULL\",       IFNULL);","        addKeyWord( \"USER\",         USER);","        addKeyWord( \"CONVERT\",      CONVERT);","        addKeyWord( \"CAST\",      \tCAST);","\t\taddKeyWord( \"IIF\",      \tIIF);","    }","\tstatic final int SQL_BIGINT    \t\t= 1350;","\tstatic final int SQL_BINARY    \t\t= 1351;","\tstatic final int SQL_BIT    \t\t= 1352;","\tstatic final int SQL_CHAR    \t\t= 1353;","\tstatic final int SQL_DATE    \t\t= 1354;","\tstatic final int SQL_DECIMAL    \t= 1355;","\tstatic final int SQL_DOUBLE    \t\t= 1356;","\tstatic final int SQL_FLOAT    \t\t= 1357;","\tstatic final int SQL_INTEGER    \t= 1358;","\tstatic final int SQL_LONGVARBINARY \t= 1359;","\tstatic final int SQL_LONGVARCHAR \t= 1360;","\tstatic final int SQL_REAL    \t\t= 1361;","\tstatic final int SQL_SMALLINT    \t= 1362;","\tstatic final int SQL_TIME    \t\t= 1363;","\tstatic final int SQL_TIMESTAMP    \t= 1364;","\tstatic final int SQL_TINYINT    \t= 1365;","\tstatic final int SQL_VARBINARY    \t= 1366;","\tstatic final int SQL_VARCHAR    \t= 1367;","\tstatic{","\t\taddKeyWord( \"SQL_BIGINT\",\t\tSQL_BIGINT);","\t\taddKeyWord( \"SQL_BINARY\",\t\tSQL_BINARY);","\t\taddKeyWord( \"SQL_BIT\",\t\t\tSQL_BIT);","\t\taddKeyWord( \"SQL_CHAR\",\t\t\tSQL_CHAR);","\t\taddKeyWord( \"SQL_DATE\",\t\t\tSQL_DATE);","\t\taddKeyWord( \"SQL_DECIMAL\",\t\tSQL_DECIMAL);","\t\taddKeyWord( \"SQL_DOUBLE\",\t\tSQL_DOUBLE);","\t\taddKeyWord( \"SQL_FLOAT\",\t\tSQL_FLOAT);","\t\taddKeyWord( \"SQL_INTEGER\",\t\tSQL_INTEGER);","\t\taddKeyWord( \"SQL_LONGVARBINARY\",SQL_LONGVARBINARY);","\t\taddKeyWord( \"SQL_LONGVARCHAR\",\tSQL_LONGVARCHAR);","\t\taddKeyWord( \"SQL_REAL\",\t\t\tSQL_REAL);","\t\taddKeyWord( \"SQL_SMALLINT\",\t\tSQL_SMALLINT);","\t\taddKeyWord( \"SQL_TIME\",\t\t\tSQL_TIME);","\t\taddKeyWord( \"SQL_TIMESTAMP\",\tSQL_TIMESTAMP);","\t\taddKeyWord( \"SQL_TINYINT\",\t\tSQL_TINYINT);","\t\taddKeyWord( \"SQL_VARBINARY\",\tSQL_VARBINARY);","\t\taddKeyWord( \"SQL_VARCHAR\",\t\tSQL_VARCHAR);","\t}","    static final int COUNT\t\t= 1400;","\tstatic final int MIN\t\t= 1401;","\tstatic final int MAX\t\t= 1402;","    static final int SUM\t\t= 1403;","\tstatic final int FIRST\t\t= 1404;","\tstatic final int LAST\t\t= 1405;","\tstatic final int AVG\t\t= 1406;","\tstatic{","\t\taddKeyWord( \"COUNT\",       \tCOUNT);","\t\taddKeyWord( \"MIN\",      \tMIN);","\t\taddKeyWord( \"MAX\",      \tMAX);","\t\taddKeyWord( \"SUM\",         \tSUM);","\t\taddKeyWord( \"FIRST\",        FIRST);","\t\taddKeyWord( \"LAST\",         LAST);","\t\taddKeyWord( \"AVG\",          AVG);","\t}","}","class SearchNode{","    int value;","    char letter;","    SearchNode nextLetter; ","    SearchNode nextEntry;  ","}"],|project://smallsql/src/smallsql/database/TableViewMap.java|:["package smallsql.database;","import java.util.Collection;","import java.util.HashMap;","import java.util.Locale;","final class TableViewMap{","    private final HashMap map = new HashMap();","    private Object getUniqueKey(String name){","        return name.toUpperCase(Locale.US); ","    }","    TableView get(String name){","        return (TableView)map.get(getUniqueKey(name));","    }","    void put(String name, TableView tableView){","        map.put(getUniqueKey(name), tableView);","    }","    TableView remove(String name){","        return (TableView)map.remove(getUniqueKey(name));","    }","    Collection values(){","        return map.values();","    }","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|:["package smallsql.database;","import java.io.ByteArrayOutputStream;","import smallsql.database.language.Language;","public class ExpressionFunctionInsert extends ExpressionFunctionReturnP1StringAndBinary {","\tfinal int getFunction() {","\t\treturn SQLTokenizer.INSERT;","\t}","\tfinal boolean isNull() throws Exception {","\t\treturn param1.isNull() || param2.isNull() || param3.isNull() || param4.isNull();","\t}","\tfinal byte[] getBytes() throws Exception{","        if(isNull()) return null;","        byte[] bytes = param1.getBytes();","        int start  = Math.min(Math.max( 0, param2.getInt() - 1), bytes.length );","        int length = Math.min(param3.getInt(), bytes.length );","        ByteArrayOutputStream buffer = new ByteArrayOutputStream();","        buffer.write(bytes,0,start);","        buffer.write(param4.getBytes());","        if(length \< 0) ","            throw SmallSQLException.create(Language.INSERT_INVALID_LEN, new Integer(length));","        buffer.write(bytes, start+length, bytes.length-start-length);","        return buffer.toByteArray();","\t}","\tfinal String getString() throws Exception {","\t\tif(isNull()) return null;","\t\tString str = param1.getString();","        int start  = Math.min(Math.max( 0, param2.getInt() - 1), str.length() );","\t\tint length = Math.min(param3.getInt(), str.length() );","        StringBuffer buffer = new StringBuffer();","        buffer.append(str.substring(0,start));","        buffer.append(param4.getString());","        if(length \< 0) ","            throw SmallSQLException.create(Language.INSERT_INVALID_LEN, new Integer(length));","        buffer.append(str.substring(start+length));","\t\treturn buffer.toString();","\t}","    int getPrecision() {","        return param1.getPrecision()+param2.getPrecision();","    }","}"],|project://smallsql/src/smallsql/junit/TestOther.java|:["package smallsql.junit;","import java.sql.*;","public class TestOther extends BasicTestCase {","\tpublic void testInsertSelect() throws Exception{","\t\tConnection con = AllTests.getConnection();","\t\ttry{","\t\t\tcon.createStatement().execute(\"Create Table InsertSelect (i counter, v varchar(20))\");","\t\t\tassertEqualsRsValue( new Integer(0), \"Select count(*) from InsertSelect\");","\t\t\tcon.createStatement().execute(\"Insert Into InsertSelect(v) Values(\'qwert\')\");","\t\t\tassertEqualsRsValue( new Integer(1), \"Select count(*) from InsertSelect\");","\t\t\tcon.createStatement().execute(\"Insert Into InsertSelect(v) Select v From InsertSelect\");","\t\t\tassertEqualsRsValue( new Integer(2), \"Select count(*) from InsertSelect\");","\t\t\tcon.createStatement().execute(\"Insert Into InsertSelect(v) (Select v From InsertSelect)\");","\t\t\tassertEqualsRsValue( new Integer(4), \"Select count(*) from InsertSelect\");","\t\t}finally{","            dropTable( con, \"InsertSelect\" );","\t\t}","\t}","\tpublic void testDistinct() throws Exception{","\t\tConnection con = AllTests.getConnection();","\t\ttry{","\t\t\tcon.createStatement().execute(\"Create Table TestDistinct (i counter, v varchar(20), n bigint, b boolean)\");","\t\t\tassertRowCount( 0, \"Select * From TestDistinct\" );","\t\t\tcon.createStatement().execute(\"Insert Into TestDistinct(v,b) Values(\'qwert1\',true)\");","\t\t\tcon.createStatement().execute(\"Insert Into TestDistinct(v,b) Values(\'qwert2\',true)\");","\t\t\tcon.createStatement().execute(\"Insert Into TestDistinct(v,b) Values(\'qwert1\',true)\");","\t\t\tcon.createStatement().execute(\"Insert Into TestDistinct(v,b) Values(\'qwert2\',true)\");","\t\t\tcon.createStatement().execute(\"Insert Into TestDistinct(v,b) Values(\'qwert1\',false)\");","\t\t\tassertRowCount( 5, \"Select b,n,v From TestDistinct\" );","\t\t\tassertRowCount( 2, \"Select Distinct v From TestDistinct t1\" );","\t\t\tassertRowCount( 3, \"Select Distinct b,n,v From TestDistinct\" );","\t\t\tassertRowCount( 3, \"Select Distinct b,n,v,i+null,23+i-i,\'asdf\'+v From TestDistinct\" );","\t\t\tassertRowCount( 5, \"Select All b,n,v From TestDistinct\" );","\t\t}finally{","            dropTable( con, \"TestDistinct\" );","\t\t}","\t}","\tpublic void testConstantAndRowPos() throws Exception{","\t\tassertRowCount( 1, \"Select 12, \'qwert\'\" );","\t}","\tpublic void testNoFromResult() throws Exception{","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY );","\t\tResultSet rs = st.executeQuery(\"Select 12, \'qwert\' alias\");","\t\tassertRSMetaData( rs, new String[]{\"col1\", \"alias\"}, new int[]{Types.INTEGER, Types.VARCHAR });","\t\tassertTrue( rs.isBeforeFirst() );","\t\tassertFalse( rs.isFirst() );","\t\tassertFalse( rs.isLast() );","\t\tassertFalse( rs.isAfterLast() );","\t\tassertTrue( rs.next() );","\t\tassertFalse( rs.isBeforeFirst() );","\t\tassertTrue( rs.isFirst() );","\t\tassertTrue( rs.isLast() );","\t\tassertFalse( rs.isAfterLast() );","\t\tassertFalse( rs.next() );","\t\tassertFalse( rs.isBeforeFirst() );","\t\tassertFalse( rs.isFirst() );","\t\tassertFalse( rs.isLast() );","\t\tassertTrue( rs.isAfterLast() );","\t\tassertTrue( rs.previous() );","\t\tassertFalse( rs.isBeforeFirst() );","\t\tassertTrue( rs.isFirst() );","\t\tassertTrue( rs.isLast() );","\t\tassertFalse( rs.isAfterLast() );","\t\tassertFalse( rs.previous() );","\t\tassertTrue( rs.isBeforeFirst() );","\t\tassertFalse( rs.isFirst() );","\t\tassertFalse( rs.isLast() );","\t\tassertFalse( rs.isAfterLast() );","\t\tassertTrue( rs.first() );","\t\tassertFalse( rs.isBeforeFirst() );","\t\tassertTrue( rs.isFirst() );","\t\tassertTrue( rs.isLast() );","\t\tassertFalse( rs.isAfterLast() );","\t\tassertTrue( rs.last() );","\t\tassertFalse( rs.isBeforeFirst() );","\t\tassertTrue( rs.isFirst() );","\t\tassertTrue( rs.isLast() );","\t\tassertFalse( rs.isAfterLast() );","\t}","\tpublic void testInSelect() throws Exception{","\t\tConnection con = AllTests.getConnection();","\t\ttry{","\t\t\tcon.createStatement().execute(\"Create Table TestInSelect (i counter, v varchar(20), n bigint, b boolean)\");","\t\t\tassertRowCount( 0, \"Select * From TestInSelect WHere i In (Select i from TestInSelect)\" );","\t\t\tcon.createStatement().execute(\"Insert Into TestInSelect(v,b) Values(\'qwert1\',true)\");","\t\t\tassertRowCount( 1, \"Select * From TestInSelect WHere i In (Select i from TestInSelect)\" );","\t\t\tcon.createStatement().execute(\"Insert Into TestInSelect(v,b) Values(\'qwert1\',true)\");","\t\t\tassertRowCount( 2, \"Select * From TestInSelect WHere i In (Select i from TestInSelect)\" );","\t\t\tassertRowCount( 1, \"Select * From TestInSelect WHere i In (Select i from TestInSelect Where i\>1)\" );","\t\t\tassertRowCount( 1, \"Select * From TestInSelect Where i IN ( 1, 1, 12345, 987654321)\" );","\t\t\tassertRowCount( 2, \"Select * From TestInSelect Where v IN ( null, \'\', \'qwert1\', \'qwert1\')\" );","\t\t\tassertRowCount( 2, \"Select * From TestInSelect Where v IN ( \'qwert1\')\" );","\t\t\tassertRowCount( 0, \"Select * From TestInSelect Where \'\' IN ( \'qwert1\')\" );","\t\t\tassertRowCount( 2, \"Select * From TestInSelect Where \'qwert1\' IN ( \'qwert1\', \'qwert2\')\" );","\t\t}finally{","            dropTable( con, \"TestInSelect\" );","\t\t}","\t}","\tpublic void testSetTransaction() throws Exception{","\t\tConnection con = AllTests.getConnection();","\t\ttry{","\t\t\tcon.createStatement().execute(\"Set Transaction Isolation Level Read Uncommitted\");","\t\t\tassertEquals( Connection.TRANSACTION_READ_UNCOMMITTED, con.getTransactionIsolation() );","\t\t\tcon.createStatement().execute(\"Set Transaction Isolation Level Read Committed\");","\t\t\tassertEquals( Connection.TRANSACTION_READ_COMMITTED, con.getTransactionIsolation() );","\t\t\tcon.createStatement().execute(\"Set Transaction Isolation Level Repeatable Read\");","\t\t\tassertEquals( Connection.TRANSACTION_REPEATABLE_READ, con.getTransactionIsolation() );","\t\t\tcon.createStatement().execute(\"Set Transaction Isolation Level Serializable\");","\t\t\tassertEquals( Connection.TRANSACTION_SERIALIZABLE, con.getTransactionIsolation() );","\t\t}finally{","\t\t\tcon.setTransactionIsolation( Connection.TRANSACTION_READ_COMMITTED );","\t\t}","\t}","\tpublic void testCreateDropDatabases() throws Exception{","\t\tConnection con = DriverManager.getConnection(\"jdbc:smallsql\");","\t\tStatement st = con.createStatement();","\t\ttry{","\t\t\tst.execute(\"Create Database anyTestDatabase\");","\t\t}catch(SQLException ex){","\t\t\tst.execute(\"Drop Database anyTestDatabase\");","\t\t\tthrow ex;","\t\t}","\t\tst.execute(\"Drop Database anyTestDatabase\");","\t}","\tpublic void testManyColumns() throws Exception{","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","        dropTable( con, \"ManyCols\" );","\t\tStringBuffer buf = new StringBuffer(\"Create Table ManyCols(\");","\t\tfor(int i=1; i\<300; i++){","\t\t\tif(i!=1)buf.append(\',\');","\t\t\tbuf.append(\"column\").append(i).append(\" int\");","\t\t}","\t\tbuf.append(\')\');","\t\tst.execute(buf.toString());","\t\tcon.close();","\t\tcon = AllTests.getConnection();","\t\tst = con.createStatement();","\t\tassertEquals(1,st.executeUpdate(\"Insert Into ManyCols(column260) Values(123456)\"));","\t\tst.execute(\"Drop Table ManyCols\");","\t}","    public void testCharEqualsVarchar() throws Exception{","        Connection con = AllTests.getConnection();","        try{","            con.createStatement().execute(\"Create Table CharEqualsVarchar (c char(10))\");","            assertRowCount( 0, \"Select * From CharEqualsVarchar\" );","            con.createStatement().execute(\"Insert Into CharEqualsVarchar(c) Values(\'qwert1\')\");","            assertRowCount( 1, \"Select * From CharEqualsVarchar\" );","            assertRowCount( 1, \"Select * From CharEqualsVarchar Where c = \'qwert1\'\" );","            assertRowCount( 0, \"Select * From CharEqualsVarchar Where c = \'qwert1        xxxx\'\" );","            assertRowCount( 1, \"Select * From CharEqualsVarchar Where c = cast(\'qwert1\' as char(8))\" );","            assertRowCount( 1, \"Select * From CharEqualsVarchar Where c = cast(\'qwert1\' as char(12))\" );","            assertRowCount( 1, \"Select * From CharEqualsVarchar Where c In(\'qwert1\')\" );","            assertRowCount( 0, \"Select * From CharEqualsVarchar Where c In(\'qwert1        xxxx\')\" );","            PreparedStatement pr;","            pr = con.prepareStatement( \"Select * From CharEqualsVarchar Where c = ?\" );","            pr.setString( 1, \"qwert1\" );","            assertRowCount( 1, pr.executeQuery() );","            pr.setString( 1, \"qwert1        xxxx\" );","            assertRowCount( 0, pr.executeQuery() );","        }finally{","            dropTable( con, \"CharEqualsVarchar\" );","        }","    }","    public void testLike() throws Exception{","        Connection con = AllTests.getConnection();","        try{","            con.createStatement().execute(\"Create Table Like (c varchar(20))\");","            con.createStatement().execute(\"Insert Into Like(c) Values(\'qwert1\')\");","            con.createStatement().execute(\"Insert Into Like(c) Values(\'qwert2\')\");","            con.createStatement().execute(\"Insert Into Like(c) Values(\'qwert2.5\')\");","            con.createStatement().execute(\"Insert Into Like(c) Values(\'awert1\')\");","            con.createStatement().execute(\"Insert Into Like(c) Values(\'awert2\')\");","            con.createStatement().execute(\"Insert Into Like(c) Values(\'awert3\')\");","            con.createStatement().execute(\"Insert Into Like(c) Values(\'qweSGSGSrt1\')\");","            assertRowCount( 2, \"Select * From Like Where c like \'qwert_\'\" );","            assertRowCount( 3, \"Select * From Like Where c like \'qwert%\'\" );","            assertRowCount( 2, \"Select * From Like Where c like \'qwert2%\'\" );","            assertRowCount( 6, \"Select * From Like Where c like \'_wert%\'\" );","            assertRowCount( 2, \"Select * From Like Where c like \'qwe%rt1\'\" );","            assertRowCount( 3, \"Select * From Like Where c like \'qwe%rt_\'\" );","            assertRowCount( 7, \"Select * From Like Where c like \'%_\'\" );","        }finally{","            dropTable( con, \"Like\" );","        }","    }","    public void testBinaryStore() throws Exception{","        Connection con = AllTests.getConnection();","        try{","            Statement st = con.createStatement();","            st.execute(\"Create Table Binary (b varbinary(20))\");","            st.execute(\"Truncate Table Binary\");","            st.execute(\"Insert Into Binary(b) Values(12345)\");","            ResultSet rs = st.executeQuery(\"Select * From Binary\");","            rs.next();","            assertEquals(rs.getInt(1), 12345);","            st.execute(\"Truncate Table Binary\");","            st.execute(\"Insert Into Binary(b) Values(1.2345)\");","            rs = st.executeQuery(\"Select * From Binary\");","            rs.next();","            assertEquals( 1.2345, rs.getDouble(1), 0.0);","            st.execute(\"Truncate Table Binary\");","            st.execute(\"Insert Into Binary(b) Values(cast(1.2345 as real))\");","            rs = st.executeQuery(\"Select * From Binary\");","            rs.next();","            assertEquals( 1.2345F, rs.getFloat(1), 0.0);","        }finally{","            dropTable( con, \"Binary\" );","        }","    }","    public void testCatalog() throws Exception{","        Connection con = DriverManager.getConnection(\"jdbc:smallsql\");","        assertEquals( \"\", con.getCatalog() );","        con.setCatalog( AllTests.CATALOG );","        assertEquals( AllTests.CATALOG, con.getCatalog() ); ","        con.close();","        con = DriverManager.getConnection(\"jdbc:smallsql\");","        assertEquals( \"\", con.getCatalog() );","        con.createStatement().execute( \"Use \" + AllTests.CATALOG );","        assertEquals( AllTests.CATALOG, con.getCatalog() ); ","        con.close();","        con = DriverManager.getConnection(\"jdbc:smallsql?dbpath=\" + AllTests.CATALOG);","        assertEquals( AllTests.CATALOG, con.getCatalog() ); ","        con.close();","    }","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionUCase.java|:["package smallsql.database;","public class ExpressionFunctionUCase extends ExpressionFunctionReturnP1StringAndBinary {","\tfinal int getFunction() {","\t\treturn SQLTokenizer.UCASE;","\t}","\tfinal boolean isNull() throws Exception {","\t\treturn param1.isNull();","\t}","\tfinal byte[] getBytes() throws Exception{","        if(isNull()) return null;","        return getString().getBytes();","\t}","\tfinal String getString() throws Exception {","\t\tif(isNull()) return null;","\t\treturn param1.getString().toUpperCase();","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionPI.java|:["package smallsql.database;","final class ExpressionFunctionPI extends ExpressionFunctionReturnFloat {","    final int getFunction(){ return SQLTokenizer.PI; }","    boolean isNull() throws Exception{","        return false;","    }","    final double getDouble() throws Exception{","        return Math.PI;","    }","}"],|project://smallsql/src/smallsql/junit/AllTests.java|:["package smallsql.junit;","import junit.framework.*;","import java.sql.*;","import java.util.Properties;","public class AllTests extends TestCase{","    final static String CATALOG = \"AllTests\";","    final static String JDBC_URL = \"jdbc:smallsql:\" + CATALOG;","    private static Connection con;","    public static Connection getConnection() throws SQLException{","        if(con == null || con.isClosed()){","            con = createConnection();","        }","        return con;","    }","\tpublic static Connection createConnection() throws SQLException{","\t\tnew smallsql.database.SSDriver();","\t\tnew sun.jdbc.odbc.JdbcOdbcDriver();","\t\treturn DriverManager.getConnection(JDBC_URL + \"?create=true;locale=en\");","\t}","    public static Connection createConnection(String urlAddition, ","    \t\tProperties info) ","    throws SQLException {","\t\tnew smallsql.database.SSDriver();","\t\tnew sun.jdbc.odbc.JdbcOdbcDriver();","\t\tif (urlAddition == null) urlAddition = \"\";","\t\tif (info == null) info = new Properties();","\t\tString urlComplete = JDBC_URL + urlAddition;","\t\treturn DriverManager.getConnection(urlComplete, info);","    }","    public static void printRS( ResultSet rs ) throws SQLException{","        while(rs.next()){","            for(int i=1; i\<=rs.getMetaData().getColumnCount(); i++){","                System.out.print(rs.getObject(i)+\"\\t\");","            }","            System.out.println();","        }","    }","    public static Test suite() throws Exception{","        TestSuite theSuite = new TestSuite(\"SmallSQL all Tests\");","        theSuite.addTestSuite( TestAlterTable.class );","        theSuite.addTestSuite( TestAlterTable2.class );","        theSuite.addTest    ( TestDataTypes.suite() );","        theSuite.addTestSuite(TestDBMetaData.class);","\t\ttheSuite.addTestSuite(TestExceptionMethods.class);","\t\ttheSuite.addTest     (TestExceptions.suite());","\t\ttheSuite.addTestSuite(TestDeleteUpdate.class);","\t\ttheSuite.addTest     (TestFunctions.suite() );","\t\ttheSuite.addTestSuite(TestGroupBy.class);","\t\ttheSuite.addTestSuite(TestIdentifer.class);","\t\ttheSuite.addTest     (TestJoins.suite());","        theSuite.addTestSuite(TestLanguage.class);","\t\ttheSuite.addTestSuite(TestMoneyRounding.class );","\t\ttheSuite.addTest     (TestOperatoren.suite() );","\t\ttheSuite.addTestSuite(TestOrderBy.class);","\t\ttheSuite.addTestSuite(TestOther.class);","        theSuite.addTestSuite(TestResultSet.class);","\t\ttheSuite.addTestSuite(TestScrollable.class);","        theSuite.addTestSuite(TestStatement.class);","        theSuite.addTestSuite(TestThreads.class);","        theSuite.addTestSuite(TestTokenizer.class);","        theSuite.addTestSuite(TestTransactions.class);","        return theSuite;","    }","    public static void main(String[] argv) {","    \ttry{","    \t\tjunit.textui.TestRunner.main(new String[]{AllTests.class.getName()});","    \t}catch(Throwable e){","    \t\te.printStackTrace();","    \t}","    }","}"],|project://smallsql/src/smallsql/database/NoFromResult.java|:["package smallsql.database;","final  class NoFromResult extends RowSource {","\tprivate int rowPos; ","\tfinal boolean isScrollable(){","\t\treturn true;","\t}","\tfinal void beforeFirst(){","\t\trowPos = 0;","\t}","\tfinal boolean isBeforeFirst(){","\t\treturn rowPos \<= 0;","\t}","\tfinal boolean isFirst(){","\t\treturn rowPos == 1;","\t}","\tfinal boolean first(){","\t\trowPos = 1;","\t\treturn true;","\t}","\tfinal boolean previous(){","\t\trowPos--;","\t\treturn rowPos == 1;","\t}","\tfinal boolean next(){","\t\trowPos++;","\t\treturn rowPos == 1;","\t}","\tfinal boolean last(){","\t\trowPos = 1;","\t\treturn true;","\t}","\tfinal boolean isLast(){","\t\treturn rowPos == 1;","\t}","\tfinal boolean isAfterLast(){","\t\treturn rowPos \> 1;","\t}","\tfinal void afterLast(){","\t\trowPos = 2;","\t}","\tfinal boolean absolute(int row){","\t\trowPos = (row \> 0) ?","\t\t\tMath.min( row, 1 ) :","\t\t\tMath.min( row +1, -1 );","\t\treturn rowPos == 1;","\t}","\tfinal boolean relative(int rows){","\t\tif(rows == 0) return rowPos == 1;","\t\trowPos = Math.min( Math.max( rowPos + rows, -1), 1);","\t\treturn rowPos == 1;","\t}","\tfinal int getRow(){","\t\treturn rowPos == 1 ? 1 : 0;","\t}","\tfinal long getRowPosition() {","\t\treturn rowPos;","\t}","\tfinal void setRowPosition(long rowPosition){","\t\trowPos = (int)rowPosition;","\t}","\tfinal boolean rowInserted(){","\t\treturn false;","\t}","\tfinal boolean rowDeleted(){","\t\treturn false;","\t}","\tfinal void nullRow() {","\t\tthrow new Error();","\t}","\tfinal void noRow() {","\t\tthrow new Error();","\t}","\tfinal void execute() throws Exception{}","    boolean isExpressionsFromThisRowSource(Expressions columns){","        return columns.size() == 0;","    }","}"],|project://smallsql/src/smallsql/junit/TestOperatoren.java|:["package smallsql.junit;","import junit.framework.*;","import java.sql.*;","import java.math.*;","public class TestOperatoren extends BasicTestCase {","    private TestValue testValue;","    private static final String table = \"table_functions\";","    private static final TestValue[] TESTS = new TestValue[]{","        a(\"tinyint\"           , new Byte( (byte)3),     new Byte( (byte)4)),","        a(\"byte\"              , new Byte( (byte)3),     new Byte( (byte)4)),","        a(\"smallint\"          , new Short( (short)3),   new Short( (short)4)),","        a(\"int\"               , new Integer(3),         new Integer(4)),","        a(\"bigint\"            , new Long(3),            new Long(4)),","        a(\"real\"              , new Float(3.45),        new Float(4.56)),","        a(\"float\"             , new Float(3.45),        new Float(4.56)),","        a(\"double\"            , new Double(3.45),       new Double(4.56)),","        a(\"smallmoney\"        , new Float(3.45),        new Float(4.56)),","        a(\"money\"             , new Float(3.45),        new Float(4.56)),","        a(\"money\"             , new Double(3.45),       new Double(4.56)),","        a(\"numeric(19,2)\"     , new BigDecimal(\"3.45\"), new BigDecimal(\"4.56\")),","        a(\"decimal(19,2)\"     , new BigDecimal(\"3.45\"), new BigDecimal(\"4.56\")),","        a(\"varnum(28,2)\"      , new BigDecimal(\"2.34\"), new BigDecimal(\"3.45\")),","        a(\"number(28,2)\"      , new BigDecimal(\"2.34\"), new BigDecimal(\"3.45\")),","        a(\"varchar(100)\"      , new String(\"abc\"),      new String(\"qwert\")),","        a(\"varchar(60000)\"    , new String(new char[43210]),      new String(\"qwert\")),","        a(\"nvarchar(100)\"     , new String(\"abc\"),      new String(\"qwert\")),","        a(\"varchar2(100)\"     , new String(\"abc\"),      new String(\"qwert\")),","        a(\"nvarchar2(100)\"    , new String(\"abc\"),      new String(\"qwert\")),","        a(\"character(100)\"    , new String(\"abc\"),      new String(\"qwert\")),","        a(\"char(100)\"         , new String(\"abc\"),      new String(\"qwert\")),","        a(\"nchar(100)\"        , new String(\"abc\"),      new String(\"qwert\")),","        a(\"text\"              , new String(\"abc\"),      new String(\"qwert\")),","        a(\"ntext\"             , new String(\"abc\"),      new String(\"qwert\")),","        a(\"date\"              , new Date(99, 1,1),      new Date(99, 2,2)),","        a(\"time\"              , new Time(9, 1,1),       new Time(9, 2,2)),","        a(\"timestamp\"         , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),","        a(\"datetime\"          , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),","        a(\"smalldatetime\"     , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),","        a(\"binary(100)\"       , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),","        a(\"varbinary(100)\"    , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),","        a(\"varbinary(60000)\"  , new byte[54321],        new byte[]{12, 45, 2, 56, 89}),","        a(\"raw(100)\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),","        a(\"long raw\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),","        a(\"longvarbinary\"     , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),","        a(\"blob\"              , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),","        a(\"image\"             , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),","        a(\"boolean\"           , Boolean.FALSE,          Boolean.TRUE),","        a(\"bit\"               , Boolean.FALSE,          Boolean.TRUE),","        a(\"uniqueidentifier\"  , \"12345678-3445-3445-3445-1234567890ab\",      \"12345679-3445-3445-3445-1234567890ac\"),","    };","    TestOperatoren(TestValue testValue){","        super(testValue.dataType);","        this.testValue = testValue;","    }","    public void tearDown(){","        try{","            Connection con = AllTests.getConnection();","            Statement st = con.createStatement();","            st.execute(\"drop table \" + table);","            st.close();","        }catch(Throwable e){","        }","    }","    public void setUp(){","        tearDown();","        try{","            Connection con = AllTests.getConnection();","            Statement st = con.createStatement();","            st.execute(\"create table \" + table + \"(a \" + testValue.dataType +\", b \" + testValue.dataType + \")\");","            st.close();","            PreparedStatement pr = con.prepareStatement(\"INSERT into \" + table + \"(a,b) Values(?,?)\");","            pr.setObject( 1, testValue.small);","            pr.setObject( 2, testValue.large);","            pr.execute();","            pr.setObject( 1, testValue.small);","            pr.setObject( 2, testValue.small);","            pr.execute();","            pr.setObject( 1, testValue.large);","            pr.setObject( 2, testValue.large);","            pr.execute();","            pr.setObject( 1, testValue.large);","            pr.setObject( 2, testValue.small);","            pr.execute();","            pr.setObject( 1, null);","            pr.setObject( 2, testValue.small);","            pr.execute();","            pr.setObject( 1, testValue.small);","            pr.setObject( 2, null);","            pr.execute();","            pr.setObject( 1, null);","            pr.setObject( 2, null);","            pr.execute();","            pr.close();","        }catch(Throwable e){","            e.printStackTrace();","        }","    }","    public void runTest() throws Exception{","        Connection con = AllTests.getConnection();","        Statement st = con.createStatement();","        ResultSet rs;","        rs = st.executeQuery(\"Select * from \" + table + \" where 1 = 0\");","        assertFalse( \"To many rows\", rs.next() );","        rs = st.executeQuery(\"Select * from \" + table + \" where a = b\");","        assertTrue( \"To few rows\", rs.next() );","        assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);","        assertTrue( \"To few rows\", rs.next() );","        assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);","        assertFalse( \"To many rows\", rs.next() );","        rs = st.executeQuery(\"Select * from \" + table + \" where a \<= b and b \<= a\");","        assertTrue( \"To few rows\", rs.next() );","        assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);","        assertTrue( \"To few rows\", rs.next() );","        assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);","        assertFalse( \"To many rows\", rs.next() );","        rs = st.executeQuery(\"Select * from \" + table + \" where (a \> (b))\");","        assertTrue( \"To few rows\", rs.next() );","        assertFalse( \"To many rows\", rs.next() );","        rs = st.executeQuery(\"Select * from \" + table + \" where a \>= b\");","        assertTrue( \"To few rows\", rs.next() );","        assertTrue( \"To few rows\", rs.next() );","        assertTrue( \"To few rows\", rs.next() );","        assertFalse( \"To many rows\", rs.next() );","        rs = st.executeQuery(\"Select * from \" + table + \" where not (a \>= b)\");","        assertTrue( \"To few rows\", rs.next() );","        assertTrue( \"To few rows\", rs.next() );","        assertTrue( \"To few rows\", rs.next() );","        assertTrue( \"To few rows\", rs.next() );","        assertFalse( \"To many rows\", rs.next() );","        rs = st.executeQuery(\"Select * from \" + table + \" where a \< b\");","        assertTrue( \"To few rows\", rs.next() );","        assertFalse( \"To many rows\", rs.next() );","        rs = st.executeQuery(\"Select * from \" + table + \" where a \< b or a\>b\");","        assertTrue( \"To few rows\", rs.next() );","        assertTrue( \"To few rows\", rs.next() );","        assertFalse( \"To many rows\", rs.next() );","        rs = st.executeQuery(\"Select * from \" + table + \" where a \<= b\");","        assertTrue( \"To few rows\", rs.next() );","        assertTrue( \"To few rows\", rs.next() );","        assertTrue( \"To few rows\", rs.next() );","        assertFalse( \"To many rows\", rs.next() );","        rs = st.executeQuery(\"Select * from \" + table + \" where a \<\> b\");","        assertTrue( \"To few rows\", rs.next() );","        assertTrue( \"To few rows\", rs.next() );","        assertFalse( \"To many rows\", rs.next() );","        PreparedStatement pr = con.prepareStatement(\"Select * from \" + table + \" where a between ? and ?\");","        pr.setObject( 1, testValue.small);","        pr.setObject( 2, testValue.large);","        rs = pr.executeQuery();","        assertTrue( \"To few rows\", rs.next() );","        assertTrue( \"To few rows\", rs.next() );","        assertTrue( \"To few rows\", rs.next() );","        assertTrue( \"To few rows\", rs.next() );","        assertTrue( \"To few rows\", rs.next() );","        assertFalse( \"To many rows\", rs.next() );","\t\tpr.close();","\t\tpr = con.prepareStatement(\"Select * from \" + table + \" where a not between ? and ?\");","\t\tpr.setObject( 1, testValue.small);","\t\tpr.setObject( 2, testValue.large);","\t\trs = pr.executeQuery();","\t\tassertTrue( \"To few rows\", rs.next() );","\t\tassertTrue( \"To few rows\", rs.next() );","\t\tassertFalse( \"To many rows\", rs.next() );","\t\tpr.close();","\t\tpr = con.prepareStatement(\"Select * from \" + table + \" where a in(?,?)\");","\t\tpr.setObject( 1, testValue.small);","\t\tpr.setObject( 2, testValue.large);","\t\trs = pr.executeQuery();","\t\tassertTrue( \"To few rows\", rs.next() );","\t\tassertTrue( \"To few rows\", rs.next() );","\t\tassertTrue( \"To few rows\", rs.next() );","        assertTrue( \"To few rows\", rs.next() );","\t\tassertTrue( \"To few rows\", rs.next() );","\t\tassertFalse( \"To many rows\", rs.next() );","\t\tpr.close();","\t\tpr = con.prepareStatement(\"Select * from \" + table + \" where a not in(?,?)\");","\t\tpr.setObject( 1, testValue.small);","\t\tpr.setObject( 2, testValue.large);","\t\trs = pr.executeQuery();","\t\tassertTrue( \"To few rows\", rs.next());","\t\tassertTrue( \"To few rows\", rs.next());","\t\tassertFalse( \"To many rows\", rs.next() );","\t\tpr.close();","        st.close();","    }","    public static Test suite() throws Exception{","        TestSuite theSuite = new TestSuite(\"Operatoren\");","        for(int i=0; i\<TESTS.length; i++){","            theSuite.addTest(new TestOperatoren( TESTS[i] ) );","        }","        return theSuite;","    }","    public static void main(String[] argv) {","        junit.swingui.TestRunner.main(new String[]{TestOperatoren.class.getName()});","    }","    private static TestValue a(String dataType, Object small, Object large){","        TestValue value = new TestValue();","        value.dataType  = dataType;","        value.small     = small;","        value.large     = large;","        return value;","    }","    private static class TestValue{","        String dataType;","        Object small;","        Object large;","    }","}"],|project://smallsql/src/smallsql/database/IndexNode.java|:["package smallsql.database;","import java.sql.*;","import smallsql.database.language.Language;","class IndexNode {","\tfinal private boolean unique;","\tfinal private char digit; ","\tstatic final private IndexNode[] EMPTY_NODES = new IndexNode[0];","\tprivate IndexNode[] nodes = EMPTY_NODES;","\tprivate char[] remainderKey;","\tprivate Object value;","\tprotected IndexNode(boolean unique, char digit){","\t\tthis.unique = unique;","\t\tthis.digit  = digit;","\t}","    protected IndexNode createIndexNode(boolean unique, char digit){","        return new IndexNode(unique, digit);","    }","\tfinal char getDigit(){","\t\treturn digit;","\t}","\tfinal boolean getUnique(){","\t\treturn unique;","\t}","\tfinal boolean isEmpty(){","\t\treturn nodes == EMPTY_NODES && value == null;","\t}","\tfinal void clear(){","\t\tnodes = EMPTY_NODES;","\t\tvalue = null;","\t\tremainderKey = null;","\t}","\tfinal void clearValue(){","\t\tvalue = null;","\t}","\tfinal Object getValue(){","\t\treturn value;","\t}","\tfinal IndexNode[] getChildNodes(){","\t\treturn nodes;","\t}","\tfinal IndexNode getChildNode(char digit){","\t\tint pos = findNodePos(digit);","\t\tif(pos \>=0) return nodes[pos];","\t\treturn null;","\t}","\tfinal char[] getRemainderValue(){","\t\treturn remainderKey;","\t}","\tfinal IndexNode addNode(char digit) throws SQLException{","\t\tif(remainderKey != null) moveRemainderValue();","\t\tint pos = findNodePos( digit );","\t\tif(pos == -1){","\t\t\tIndexNode node = createIndexNode(unique, digit);","\t\t\tsaveNode( node );","\t\t\treturn node;","\t\t}else{","\t\t\treturn nodes[pos];","\t\t}","\t}","\tfinal void removeNode(char digit){","\t\tint pos = findNodePos( digit );","\t\tif(pos != -1){","\t\t\tint length = nodes.length-1;","\t\t\tIndexNode[] temp = new IndexNode[length];","\t\t\tSystem.arraycopy(nodes, 0, temp, 0, pos);","\t\t\tSystem.arraycopy(nodes, pos+1, temp, pos, length-pos);","\t\t\tnodes = temp;","\t\t}","\t}","\tfinal void addNode(char digit, long rowOffset) throws SQLException{","\t\tIndexNode node = addNode(digit);","\t\tif(node.remainderKey != null) node.moveRemainderValue();","\t\tnode.saveValue(rowOffset);","\t}","\tfinal void saveValue(long rowOffset) throws SQLException{","\t\tif(unique){","\t\t\tif(value != null) throw SmallSQLException.create(Language.KEY_DUPLICATE);","\t\t\tvalue = new Long(rowOffset);","\t\t}else{","\t\t\tLongTreeList list = (LongTreeList)value;","\t\t\tif(list == null){","\t\t\t\tvalue = list = new LongTreeList();","\t\t\t}","\t\t\tlist.add(rowOffset);","\t\t}","\t}","\tfinal void addRemainderKey(long rowOffset, long remainderValue, int charCount) throws SQLException{","\t\tsaveRemainderValue(remainderValue, charCount);","\t\tvalue = (unique) ? (Object)new Long(rowOffset) : new LongTreeList(rowOffset);","\t}","\tfinal void addRemainderKey(long rowOffset, char[] remainderValue, int offset) throws SQLException{","\t\tsaveRemainderValue(remainderValue, offset);","\t\tvalue = (unique) ? (Object)new Long(rowOffset) : new LongTreeList(rowOffset);","\t}","\tfinal IndexNode addRoot(char digit) throws SQLException{","\t\tIndexNode node = addNode(digit);","\t\tif(node.remainderKey != null) node.moveRemainderValue();","\t\treturn node.addRoot();","\t}","\tfinal IndexNode addRootValue(char[] remainderValue, int offset) throws SQLException{","\t\tsaveRemainderValue(remainderValue, offset);","\t\treturn addRoot();","\t}","\tfinal IndexNode addRootValue( long remainderValue, int digitCount) throws SQLException{","\t\tsaveRemainderValue(remainderValue, digitCount);","\t\treturn addRoot();","\t}","\tprivate final void moveRemainderValue() throws SQLException{","\t\tObject rowOffset = value;","\t\tchar[] puffer = remainderKey;","\t\tvalue = null;","\t\tremainderKey = null;","\t\tIndexNode newNode = addNode(puffer[0]);","\t\tif(puffer.length == 1){","\t\t\tnewNode.value  = rowOffset;","\t\t}else{","\t\t\tnewNode.moveRemainderValueSub( rowOffset, puffer);","\t\t}","\t}","\tprivate final void moveRemainderValueSub( Object rowOffset, char[] remainderValue){","\t\tint length = remainderValue.length-1;","\t\tthis.remainderKey = new char[length];","\t\tvalue = rowOffset;","\t\tSystem.arraycopy( remainderValue, 1, this.remainderKey, 0, length);","\t}","\tprivate final void saveRemainderValue(char[] remainderValue, int offset){","\t\tint length = remainderValue.length-offset;","\t\tthis.remainderKey = new char[length];","\t\tSystem.arraycopy( remainderValue, offset, this.remainderKey, 0, length);","\t}","\tprivate final void saveRemainderValue( long remainderValue, int charCount){","\t\tthis.remainderKey = new char[charCount];","\t\tfor(int i=charCount-1, d=0; i\>=0; i--){","\t\t\tthis.remainderKey[d++] = (char)(remainderValue \>\> (i\<\<4));","\t\t}","\t}","\tfinal IndexNode addRoot() throws SQLException{","\t\tIndexNode root = (IndexNode)value;","\t\tif(root == null){","\t\t\tvalue = root = createIndexNode(unique, (char)-1);","\t\t}","\t\treturn root;","\t}","\tprivate final void saveNode(IndexNode node){","\t\tint length = nodes.length;","\t\tIndexNode[] temp = new IndexNode[length+1];","\t\tif(length == 0){","\t\t\ttemp[0] = node;","\t\t}else{","\t\t\tint pos = findNodeInsertPos( node.digit, 0, length);","\t\t\tSystem.arraycopy(nodes, 0, temp, 0, pos);","\t\t\tSystem.arraycopy(nodes, pos, temp, pos+1, length-pos);","\t\t\ttemp[pos] = node;","\t\t}","\t\tnodes = temp;","\t}","\tprivate final int findNodeInsertPos(char digit, int start, int end){","\t\tif(start == end) return start;","\t\tint mid = start + (end - start)/2;","\t\tchar nodeDigit = nodes[mid].digit;","\t\tif(nodeDigit == digit) return mid;","\t\tif(nodeDigit \< digit){","\t\t\treturn findNodeInsertPos( digit, mid+1, end );","\t\t}else{","\t\t\tif(start == mid) return start;","\t\t\treturn findNodeInsertPos( digit, start, mid );","\t\t}","\t}","\tprivate final int findNodePos(char digit){","\t\treturn findNodePos(digit, 0, nodes.length);","\t}","\tprivate final int findNodePos(char digit, int start, int end){","\t\tif(start == nodes.length) return -1;","\t\tint mid = start + (end - start)/2;","\t\tchar nodeDigit = nodes[mid].digit;","\t\tif(nodeDigit == digit) return mid;","\t\tif(nodeDigit \< digit){","\t\t\treturn findNodePos( digit, mid+1, end );","\t\t}else{","\t\t\tif(start == mid) return -1;","\t\t\treturn findNodePos( digit, start, mid-1 );","\t\t}","\t}","\tvoid save(StoreImpl output) throws SQLException{","\t\toutput.writeShort(digit);","\t\tint length = remainderKey == null ? 0 : remainderKey.length;","\t\toutput.writeInt(length);","\t\tif(length\>0) output.writeChars(remainderKey);","\t\tif(value == null){","\t\t\toutput.writeByte(0);","\t\t}else","\t\tif(value instanceof Long){","\t\t\toutput.writeByte(1);","\t\t\toutput.writeLong( ((Long)value).longValue() );","\t\t}else","\t\tif(value instanceof LongTreeList){","\t\t\toutput.writeByte(2);","\t\t\t((LongTreeList)value).save(output);","\t\t}else","\t\tif(value instanceof IndexNode){","\t\t\toutput.writeByte(3);","\t\t\t((IndexNode)value).saveRef(output);","\t\t}","        output.writeShort(nodes.length);","        for(int i=0; i\<nodes.length; i++){","            nodes[i].saveRef( output );","        }","\t}","\tvoid saveRef(StoreImpl output) throws SQLException{","\t}","\tIndexNode loadRef( long offset ) throws SQLException{","\t\tthrow new Error();","\t}","\tvoid load(StoreImpl input) throws SQLException{","\t\tint length = input.readInt();","\t\tremainderKey = (length\>0) ? input.readChars(length) : null;","\t\tint valueType = input.readByte();","\t\tswitch(valueType){","\t\t\tcase 0:","\t\t\t\tvalue = null;","\t\t\t\tbreak;","\t\t\tcase 1:","\t\t\t\tvalue = new Long(input.readLong());","\t\t\t\tbreak;","\t\t\tcase 2:","\t\t\t\tvalue = new LongTreeList(input);","\t\t\t\tbreak;","\t\t\tcase 3:","\t\t\t\tvalue = loadRef( input.readLong());","\t\t\t\tbreak;","\t\t\tdefault: ","\t\t\t\tthrow SmallSQLException.create(Language.INDEX_CORRUPT, String.valueOf(valueType));","\t\t}","        nodes = new IndexNode[input.readShort()];","        for(int i=0; i\<nodes.length; i++){","            nodes[i] = loadRef( input.readLong() );","        }","\t}","}"],|project://smallsql/src/smallsql/junit/TestDataTypes.java|:["package smallsql.junit;","import junit.framework.*;","import java.sql.*;","import java.math.*;","public class TestDataTypes extends BasicTestCase{","    static final String[] DATATYPES = { \"varchar(100)\",","                                                \"varchar2(130)\", \"nvarchar(137)\", \"nvarchar2(137)\", \"sysname\",","                                                \"char(100)\", \"CHARACTER(99)\",","                                                \"nchar(80)\",","                                                \"int\", \"smallint\", \"tinyint\", \"bigint\", \"byte\",","                                                \"real\", \"float\", \"double\",","                                                \"bit\", \"Boolean\",","                                                \"binary( 125 )\", \"varbinary(57)\", \"raw(88)\",","                                                \"java_object\", \"sql_variant\",","                                                \"image\", \"LONGvarbinary\", \"long raw\",","                                                \"blob\", \"clob\",\"nclob\",","                                                \"text\", \"ntext\", \"LongVarchar\", \"long\",","                                                \"time\", \"date\", \"datetime\", \"timestamp\", \"SMALLDATETIME\",","                                                \"UNIQUEIDENTIFIER\",","                                                \"numeric(28,4)\", \"decimal(29,4)\",\"number(29,4)\", \"varnum(29,4)\",","                                                \"COUNTER\",","                                                \"money\", \"smallmoney\"};","    private static final String table = \"table_datatypes\";","    private String datatype;","    TestDataTypes( String datatype ){","        super( datatype );","        this.datatype = datatype;","    }","    public void tearDown(){","        try{","            Connection con = AllTests.getConnection();","            Statement st = con.createStatement();","            st.execute(\"drop table \" + table);","            st.close();","        }catch(Throwable e){","        }","    }","    public void setUp(){","        tearDown();","    }","    public void runTest() throws Throwable {","        Connection con = AllTests.getConnection();","        Statement st = con.createStatement();","        st.execute(\"Create Table \" + table +\"(abc \" + datatype + \")\");","        String name = \"abc\";","        Object[] values = null;","        String   quote = \"\";","        String escape1 = \"\";","        String escape2 = \"\";","        boolean needTrim = false;","        ResultSet rs = st.executeQuery(\"SELECT * From \" + table);","\t\tResultSetMetaData md = rs.getMetaData();","        switch(md.getColumnType(1)){","            case Types.CHAR:","                needTrim = true;","            case Types.VARCHAR:","            case Types.LONGVARCHAR:","            case Types.CLOB:","                values = new Object[]{null,\"qwert\", \"asdfg\", \"hjhjhj\", \"1234567890 qwertzuiop 1234567890 asdfghjklÃ¶ 1234567890 yxcvbnm,.- 1234567890 \"};","                quote  = \"\\\'\";","                break;","            case Types.BIGINT:","                values = new Object[]{null,new Long(123), new Long(-2123), new Long(392839283)};","                break;","            case Types.INTEGER:","                values = new Object[]{null,new Integer(123), new Integer(-2123), new Integer(392839283)};","                break;","            case Types.SMALLINT:","                values = new Object[]{null,new Integer(123), new Integer(-2123), new Integer(32000)};","                break;","            case Types.TINYINT:","                values = new Object[]{null,new Integer(0), new Integer(12), new Integer(228)};","                break;","            case Types.REAL:","                values = new Object[]{null,new Float(0.0), new Float(-12.123), new Float(22812345234.9)};","                break;","            case Types.FLOAT:","            case Types.DOUBLE:","                values = new Object[]{null,new Double(0.0), new Double(-12.123), new Double(22812345234.9)};","                break;","            case Types.NUMERIC:","            case Types.DECIMAL:","                needTrim = true;","            \tif(md.getPrecision(1)\<16){","\t\t\t\t\tvalues = new Object[]{null,new BigDecimal(\"0.0\"), new BigDecimal(\"-2\"), new BigDecimal(\"-12.123\")};","                }else{","                    values = new Object[]{null,new BigDecimal(\"0.0\"), new BigDecimal(\"-2\"), new BigDecimal(\"-12.123\"), new BigDecimal(\"22812345234.9\")};","                }","                break;","            case Types.BIT:","            case Types.BOOLEAN:","                values = new Object[]{null, Boolean.TRUE, Boolean.FALSE};","                break;","            case Types.TIME:","                values = new Object[]{null, new Time(10,17,56), new Time(0,0,0),new Time(23,59,59)};","                escape1 = \"{t \'\";","                escape2 = \"\'}\";","                break;","\t\t\tcase Types.DATE:","\t\t\t\tvalues = new Object[]{null, new java.sql.Date(10,10,1), new java.sql.Date(0,0,1),new java.sql.Date(70,0,1)};","\t\t\t\tescape1 = \"{d \'\";","\t\t\t\tescape2 = \"\'}\";","\t\t\t\tbreak;","\t\t\tcase Types.TIMESTAMP:","\t\t\t\tif(md.getPrecision(1) \>16)","\t\t\t\t\tvalues = new Object[]{null, new Timestamp(10,10,1, 10,17,56, 0), new Timestamp(0,0,1, 0,0,0, 0),new Timestamp( 120,1,1, 23,59,59, 500000000),new Timestamp(0),new Timestamp( -120,1,1, 23,59,59, 500000000)};","\t\t\t\telse","\t\t\t\t\tvalues = new Object[]{null, new Timestamp(10,10,1, 10,17,0, 0), new Timestamp(0,0,1, 0,0,0, 0),new Timestamp(0)};","\t\t\t\tescape1 = \"{ts \'\";","\t\t\t\tescape2 = \"\'}\";","\t\t\t\tbreak;","            case Types.BINARY:","                needTrim = true;","            case Types.VARBINARY:","            case Types.LONGVARBINARY:","            case Types.BLOB:","                values = new Object[]{null, new byte[]{1, 127, -23}};","                break;","            case Types.JAVA_OBJECT:","                values = new Object[]{null, new Integer(-123), new Double(1.2), new byte[]{1, 127, -23}};","                break;","            case -11: ","                values = new Object[]{null, \"342734E3-D9AC-408F-8724-B7A257C4529E\", \"342734E3-D9AC-408F-8724-B7A257C4529E\"};","                quote  = \"\\\'\";","                break;","            default: fail(\"Unknown column type: \" + rs.getMetaData().getColumnType(1));","        }","        rs.close();","\t\tcon.close();","\t\tcon = AllTests.getConnection();","\t\tst = con.createStatement();","        for(int i=0; i\<values.length; i++){","            Object val = values[i];","            String q = (val == null) ? \"\" : quote;","            String e1 = (val == null) ? \"\" : escape1;","            String e2 = (val == null) ? \"\" : escape2;","            if(val instanceof byte[]){","                StringBuffer buf = new StringBuffer( \"0x\" );","                for(int k=0; k\<((byte[])val).length; k++){","                    String digit = \"0\" + Integer.toHexString( ((byte[])val)[k] );","                    buf.append( digit.substring( digit.length()-2 ) );","                }","                val = buf.toString();","            }","            st.execute(\"Insert into \" + table + \"(abc) Values(\" + e1 + q + val + q + e2 + \")\");","        }","\t\tcheckValues( st, values, needTrim);","\t\tst.execute(\"Delete From \"+ table);","\t\tCallableStatement cal = con.prepareCall(\"Insert Into \" + table + \"(abc) Values(?)\");","        for(int i=0; i\<values.length; i++){","            Object val = values[i];","\t\t\tcal.setObject( 1, val);","\t\t\tcal.execute();","        }","\t\tcal.close();","\t\tcheckValues( st, values, needTrim);","\t\tst.execute(\"Delete From \"+ table);","\t\tcal = con.prepareCall(\"Insert Into \" + table + \"(abc) Values(?)\");","        for(int i=0; i\<values.length; i++){","            Object val = values[i];","\t\t\tif(val == null){","\t\t\t\tcal.setNull( 1, Types.NULL );","\t\t\t}else","\t\t\tif(val instanceof Time){","\t\t\t\tcal.setTime( 1, (Time)val );","\t\t\t}else","\t\t\tif(val instanceof Timestamp){","\t\t\t\tcal.setTimestamp( 1, (Timestamp)val );","\t\t\t}else","\t\t\tif(val instanceof Date){","\t\t\t\tcal.setDate( 1, (Date)val );","\t\t\t}else","\t\t\tif(val instanceof String){","\t\t\t\tcal.setString( 1, (String)val );","\t\t\t}else","\t\t\tif(val instanceof Boolean){","\t\t\t\tcal.setBoolean( 1, ((Boolean)val).booleanValue() );","\t\t\t}else","\t\t\tif(val instanceof Byte){","\t\t\t\tcal.setByte( 1, ((Byte)val).byteValue() );","\t\t\t}else","\t\t\tif(val instanceof Short){","\t\t\t\tcal.setShort( 1, ((Short)val).shortValue() );","\t\t\t}else","\t\t\tif(val instanceof Integer){","\t\t\t\tcal.setInt( 1, ((Integer)val).intValue() );","\t\t\t}else","\t\t\tif(val instanceof Long){","\t\t\t\tcal.setLong( 1, ((Long)val).longValue() );","\t\t\t}else","\t\t\tif(val instanceof Float){","\t\t\t\tcal.setFloat( 1, ((Float)val).floatValue() );","\t\t\t}else","\t\t\tif(val instanceof Double){","\t\t\t\tcal.setDouble( 1, ((Double)val).doubleValue() );","\t\t\t}else","\t\t\tif(val instanceof BigDecimal){","\t\t\t\tcal.setBigDecimal( 1, (BigDecimal)val );","\t\t\t}else","\t\t\tif(val instanceof byte[]){","\t\t\t\tcal.setBytes( 1, (byte[])val );","\t\t\t}","\t\t\tcal.execute();","        }","\t\tcal.close();","\t\tcheckValues( st, values, needTrim);","        st.execute(\"Delete From \"+ table);","        Statement st2 = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);","        ResultSet rs2 = st2.executeQuery(\"SELECT * From \" + table);","        for(int i=0; i\<values.length; i++){","            rs2.moveToInsertRow();","            Object val = values[i];","            if(val == null){","                rs2.updateNull( name );","            }else","            if(val instanceof Time){","                rs2.updateTime( name, (Time)val );","            }else","            if(val instanceof Timestamp){","                rs2.updateTimestamp( name, (Timestamp)val );","            }else","            if(val instanceof Date){","                rs2.updateDate( name, (Date)val );","            }else","            if(val instanceof String){","                rs2.updateString( name, (String)val );","            }else","            if(val instanceof Boolean){","                rs2.updateBoolean( name, ((Boolean)val).booleanValue() );","            }else","            if(val instanceof Byte){","                rs2.updateByte( name, ((Byte)val).byteValue() );","            }else","            if(val instanceof Short){","                rs2.updateShort( name, ((Short)val).shortValue() );","            }else","            if(val instanceof Integer){","                rs2.updateInt( name, ((Integer)val).intValue() );","            }else","            if(val instanceof Long){","                rs2.updateLong( name, ((Long)val).longValue() );","            }else","            if(val instanceof Float){","                rs2.updateFloat( name, ((Float)val).floatValue() );","            }else","            if(val instanceof Double){","                rs2.updateDouble( name, ((Double)val).doubleValue() );","            }else","            if(val instanceof BigDecimal){","                rs2.updateBigDecimal( name, (BigDecimal)val );","            }else","            if(val instanceof byte[]){","                rs2.updateBytes( name, (byte[])val );","            }","            rs2.insertRow();","        }","        st2.close();","        checkValues( st, values, needTrim);","    }","\tprivate void checkValues(Statement st, Object[] values, boolean needTrim) throws Exception{","        ResultSet rs = st.executeQuery(\"SELECT * From \" + table);","        int i = 0;","        while(rs.next()){","            assertEqualsRsValue(values[i], rs, needTrim);","            i++;","        }","        rs.close();","\t}","    public static Test suite() throws Exception{","        TestSuite theSuite = new TestSuite(\"Data Types\");","        for(int i=0; i\<DATATYPES.length; i++){","            theSuite.addTest(new TestDataTypes( DATATYPES[i] ) );","        }","        return theSuite;","    }","    public static void main(String[] argv) {","        junit.swingui.TestRunner.main(new String[]{TestDataTypes.class.getName()});","    }","}"],|project://smallsql/src/smallsql/junit/TestStatement.java|:["package smallsql.junit;","import java.sql.*;","public class TestStatement extends BasicTestCase {","\tprivate static boolean init;","    protected void setUp() throws Exception{","    \tif(init) return;","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\tdropTable( con, \"statement\");","\t\tst.execute(\"Create Table statement (c varchar(30), i counter)\");","\t\tinit = true;","    }","    public void testBatchUpate() throws Exception{","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\tassertEquals(\"Result Length wrong\", 0, st.executeBatch().length );","\t\tst.clearBatch();","\t\tst.addBatch(\"Bla Bla\");","        try {","            st.executeBatch();","        } catch (BatchUpdateException ex) {","            assertEquals(\"Result Length wrong\",1,ex.getUpdateCounts().length);","        }","\t\tst.clearBatch();","\t\tint count = 10;","\t\tfor(int i=1; i\<=count; i++){","\t\t\tst.addBatch(\"Insert Into statement(c) Values(\'batch\"+i+\"\')\");","\t\t}","\t\tint[] result = st.executeBatch();","\t\tassertEquals(\"Result Length wrong\", count, result.length);","\t\tfor(int i=0; i\<count; i++){","\t\t\tassertEquals(\"Update Count\", 1, result[i]);","\t\t}","\t\tassertRowCount(10, \"Select * From statement\");","    }","    public void testMultiValues() throws Exception{","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","    \tassertEquals(\"Update Count:\", 10, st.executeUpdate(\"Insert Into statement(c) Values(\'abc1\'),(\'abc2\'),(\'abc3\'),(\'abc4\'),(\'abc5\'),(\'abc6\'),(\'abc7\'),(\'abc8\'),(\'abc9\'),(\'abc10\')\"));","    }","    public void testMaxRows() throws Exception{","        Connection con = AllTests.getConnection();","        Statement st = con.createStatement();","        st.setMaxRows(5);","        ResultSet rs = st.executeQuery(\"Select * From statement\");","        assertEquals(\"Statement.getResultSet\", rs, st.getResultSet());","        assertRowCount(5,rs);","        assertRowCount(4,\"Select top 4 * From statement\");","        assertRowCount(3,\"Select * From statement Limit 3\");","        assertRowCount(2,\"Select * From statement Order By c ASC Limit 2\");","        assertRowCount(0,\"Select top 0 * From statement\");","        st = con.createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE );","        rs = st.executeQuery(\"Select Top 0 * From statement\");","        assertFalse( \"last()\", rs.last() );","        PreparedStatement pr = con.prepareStatement(\"Select * From statement\");","        pr.setMaxRows(6);","        rs = pr.executeQuery();","        assertEquals(\"PreparedStatement.getResultSet\", rs, pr.getResultSet());","        assertRowCount(6,rs);","        pr.setMaxRows(3);","        rs = pr.executeQuery();","        assertRowCount(3,rs);","        pr.setMaxRows(4);","        rs = pr.executeQuery();","        assertRowCount(4,rs);","    }","    public void testMoreResults() throws Exception{","        Connection con = AllTests.getConnection();","        Statement st = con.createStatement();","        ResultSet rs = st.executeQuery(\"Select * From statement\");","        assertEquals( \"getResultSet()\", rs, st.getResultSet() );","        assertEquals( \"getUpdateCount()\", -1, st.getUpdateCount() );","        assertFalse( st.getMoreResults() );","        try{","            rs.next();","            fail(\"ResultSet should be closed\");","        }catch(SQLException ex){","            assertSQLException(\"01000\", 0, ex);","        }","        assertNull( \"getResultSet()\", st.getResultSet() );","        assertEquals( \"getUpdateCount()\", -1, st.getUpdateCount() );","        rs = st.executeQuery(\"Select * From statement\");","        assertEquals( \"getResultSet()\", rs, st.getResultSet() );","        assertEquals( \"getUpdateCount()\", -1, st.getUpdateCount() );","        assertFalse( st.getMoreResults(Statement.KEEP_CURRENT_RESULT) );","        assertTrue(rs.next());","        assertNull( \"getResultSet()\", st.getResultSet() );","        assertEquals( \"getUpdateCount()\", -1, st.getUpdateCount() );","        int count = st.executeUpdate(\"Update statement set c = c\");","        assertTrue( \"Update Erfolgreich\", count\>0 );","        assertNull( \"getResultSet()\", st.getResultSet() );","        assertEquals( \"getUpdateCount()\", count, st.getUpdateCount() );","        assertFalse( st.getMoreResults() );","        assertNull( \"getResultSet()\", st.getResultSet() );","        assertEquals( \"getUpdateCount()\", -1, st.getUpdateCount() );","    }","    public void testGetConnection() throws Exception{","        Connection con = AllTests.getConnection();","        Statement st = con.createStatement();","        assertEquals(con, st.getConnection() );","    }","    public void testFetch() throws Exception{","        Connection con = AllTests.getConnection();","        Statement st = con.createStatement();","        st.setFetchDirection(ResultSet.FETCH_FORWARD);","        assertEquals( st.getFetchDirection(), ResultSet.FETCH_FORWARD);","        st.setFetchDirection(ResultSet.FETCH_REVERSE);","        assertEquals( st.getFetchDirection(), ResultSet.FETCH_REVERSE);","        st.setFetchSize(123);","        assertEquals( st.getFetchSize(), 123);","    }","    public void testGeneratedKeys() throws Exception{","        Connection con = AllTests.getConnection();","        Statement st = con.createStatement();","        ResultSet rs;","        st.execute(\"Insert Into statement(c) Values(\'key1\')\", Statement.NO_GENERATED_KEYS);","        try{","            st.getGeneratedKeys();","            fail(\"NO_GENERATED_KEYS\");","        }catch(SQLException ex){","            assertSQLException(\"01000\", 0, ex);","        }","        assertEquals(\"UpdateCount\", 1, st.getUpdateCount());","        assertNull(\"getResultSet\", st.getResultSet());","        st.execute(\"Insert Into statement(c) Values(\'key2\')\", Statement.RETURN_GENERATED_KEYS);","        rs = st.getGeneratedKeys();","        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);","        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());","        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));","        assertTrue(rs.next());","        assertEqualsRsValue( new Long(rs.getLong(1)), rs, false );","        assertFalse(rs.next());","        assertEquals(1,st.executeUpdate(\"Insert Into statement(c) Values(\'key3\')\", Statement.RETURN_GENERATED_KEYS));","        rs = st.getGeneratedKeys();","        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);","        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());","        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));","        assertRowCount(1,rs);","        st.execute(\"Insert Into statement(c) Values(\'key4\')\", new int[]{2,1});","        rs = st.getGeneratedKeys();","        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);","        assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());","        assertRowCount(1,rs);","        assertEquals(1,st.executeUpdate(\"Insert Into statement(c) Values(\'key5\')\", new int[]{2}));","        rs = st.getGeneratedKeys();","        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);","        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());","        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));","        assertRowCount(1,rs);","        st.execute(\"Insert Into statement(c) Values(\'key6\')\", new String[]{\"c\",\"i\"});","        rs = st.getGeneratedKeys();","        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);","        assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());","        assertRowCount(1,rs);","        assertEquals(1,st.executeUpdate(\"Insert Into statement(c) Values(\'key7\')\", new String[]{\"i\"}));","        rs = st.getGeneratedKeys();","        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);","        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());","        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));","        assertRowCount(1,rs);","    }","    public void testGeneratedKeysWithPrepare() throws Exception{","        Connection con = AllTests.getConnection();","        ResultSet rs;","        PreparedStatement pr = con.prepareStatement(\"Insert Into statement(c) Values(\'key1\')\", Statement.NO_GENERATED_KEYS);","        pr.execute();","        try{","            pr.getGeneratedKeys();","            fail(\"NO_GENERATED_KEYS\");","        }catch(SQLException ex){","            assertSQLException(\"01000\", 0, ex);","        }","        assertEquals(\"UpdateCount\", 1, pr.getUpdateCount());","        assertNull(\"getResultSet\", pr.getResultSet());","        pr.close();","        pr = con.prepareStatement(\"Insert Into statement(c) Values(\'key2\')\", Statement.RETURN_GENERATED_KEYS);","        pr.execute();","        rs = pr.getGeneratedKeys();","        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);","        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());","        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));","        assertRowCount(1,rs);","        pr = con.prepareStatement(\"Insert Into statement(c) Values(\'key3\')\", Statement.RETURN_GENERATED_KEYS);","        assertEquals(1,pr.executeUpdate());","        rs = pr.getGeneratedKeys();","        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);","        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());","        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));","        assertRowCount(1,rs);","        pr = con.prepareStatement(\"Insert Into statement(c) Values(\'key4\')\", new int[]{2,1});","        pr.execute();","        rs = pr.getGeneratedKeys();","        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);","        assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());","        assertRowCount(1,rs);","        pr = con.prepareStatement(\"Insert Into statement(c) Values(\'key5\')\", new int[]{2});","        assertEquals(1,pr.executeUpdate());","        rs = pr.getGeneratedKeys();","        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);","        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());","        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));","        assertRowCount(1,rs);","        pr = con.prepareStatement(\"Insert Into statement(c) Values(\'key6\')\", new String[]{\"c\",\"i\"});","        pr.execute();","        rs = pr.getGeneratedKeys();","        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);","        assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());","        assertRowCount(1,rs);","        pr = con.prepareStatement(\"Insert Into statement(c) Values(\'key7\')\", new String[]{\"i\"});","        assertEquals(1,pr.executeUpdate());","        rs = pr.getGeneratedKeys();","        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);","        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());","        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));","        assertRowCount(1,rs);","    }","    public void testResultSetType() throws Exception{","        Connection con = AllTests.getConnection();","        Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);","        assertEquals(ResultSet.TYPE_SCROLL_SENSITIVE, st.getResultSetType());","        assertEquals(ResultSet.CONCUR_UPDATABLE, st.getResultSetConcurrency());","        ResultSet rs = st.executeQuery(\"Select * From statement\");","        assertEquals(ResultSet.TYPE_SCROLL_SENSITIVE, rs.getType());","        assertEquals(ResultSet.CONCUR_UPDATABLE, rs.getConcurrency());","    }","    public void testOther() throws Exception{","        Connection con = AllTests.getConnection();","        Statement st = con.createStatement();","        st.clearWarnings();","        assertNull(st.getWarnings());","        st.setQueryTimeout(5);","        assertEquals(\"QueryTimeout\", 5, st.getQueryTimeout() );","        st.setMaxFieldSize(100);","        assertEquals(\"MaxFieldSize\", 100, st.getMaxFieldSize() );","    }","    public void testTruncate() throws Exception{","        Connection con = AllTests.getConnection();","        Statement st = con.createStatement();","        st.execute(\"Truncate table statement\");","        assertRowCount(0, \"Select * From statement\");","    }","}"],|project://smallsql/src/smallsql/database/CommandUpdate.java|:["package smallsql.database;","class CommandUpdate extends CommandSelect {","\tprivate Expressions sources = new Expressions();","\tprivate Expression[] newRowSources;","\tCommandUpdate( Logger log ){","\t\tsuper(log);","\t}","\tvoid addSetting(Expression dest, Expression source){","\t\tcolumnExpressions.add(dest);","\t\tsources.add(source);","\t}","\tvoid executeImpl(SSConnection con, SSStatement st) throws Exception {","\t\tint count = columnExpressions.size();","\t\tcolumnExpressions.addAll(sources);","\t\tcompile(con);","\t\tcolumnExpressions.setSize(count);","\t\tnewRowSources = sources.toArray();","\t\tupdateCount = 0;","\t\tfrom.execute();","\t\tfor(int i=0; i\<columnExpressions.size(); i++){","\t\t    ExpressionName expr = (ExpressionName)columnExpressions.get(i);","\t\t    DataSource ds = expr.getDataSource();","\t\t    TableResult tableResult = (TableResult)ds;","\t\t    tableResult.lock = SQLTokenizer.UPDATE;","\t\t}","\t\twhile(true){","            synchronized(con.getMonitor()){","                if(!next()){","                    return;","                }","                updateRow(con, newRowSources);","            }","\t\t\tupdateCount++;","\t\t}","\t}","}"],|project://smallsql/src/smallsql/database/SSDriver.java|:["package smallsql.database;","import java.sql.*;","import java.util.Properties;","import java.util.StringTokenizer;","import smallsql.database.language.Language;","public class SSDriver implements Driver {","\tstatic final String URL_PREFIX = \"jdbc:smallsql\";","\tstatic SSDriver drv;","    static {","        try{","        \tdrv = new SSDriver();","            java.sql.DriverManager.registerDriver(drv);","        }catch(Throwable e){","            e.printStackTrace();","        }","\t}","    public Connection connect(String url, Properties info) throws SQLException{","        if(!acceptsURL(url)){","            return null;","        }","        return new SSConnection(parse(url, info));","    }","    private Properties parse(String url, Properties info) throws SQLException {","        Properties props = (Properties)info.clone();","        if(!acceptsURL(url)){","            return props;","        }","        int idx1 = url.indexOf(\':\', 5); ","        int idx2 = url.indexOf(\'?\');","        if(idx1 \> 0){","            String dbPath = (idx2 \> 0) ? url.substring(idx1 + 1, idx2) : url.substring(idx1 + 1);","            props.setProperty(\"dbpath\", dbPath);","        }","        if(idx2 \> 0){","            String propsString = url.substring(idx2 + 1).replace(\'&\', \';\');","            StringTokenizer tok = new StringTokenizer(propsString, \";\");","            while(tok.hasMoreTokens()){","                String keyValue = tok.nextToken().trim();","                if(keyValue.length() \> 0){","                    idx1 = keyValue.indexOf(\'=\');","                    if(idx1 \> 0){","                        String key = keyValue.substring(0, idx1).toLowerCase().trim();","                        String value = keyValue.substring(idx1 + 1).trim();","                        props.put(key, value);","                    }else{","                    \tthrow SmallSQLException.create(Language.CUSTOM_MESSAGE, \"Missing equal in property:\" + keyValue);","                    }","                }","            }","        }","        return props;","    }","    public boolean acceptsURL(String url){","        return url.startsWith(URL_PREFIX);","    }","    public DriverPropertyInfo[] getPropertyInfo(String url, Properties info)","    throws SQLException {","        Properties props = parse(url, info);","        DriverPropertyInfo[] driverInfos = new DriverPropertyInfo[1];","        driverInfos[0] = new DriverPropertyInfo(\"dbpath\", props.getProperty(\"dbpath\"));","        return driverInfos;","    }","    public int getMajorVersion() {","        return 0;","    }","    public int getMinorVersion() {","        return 21;","    }","    public boolean jdbcCompliant() {","        return true;","    }","}"],|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|:["package smallsql.database;","import java.sql.*;","import smallsql.database.language.Language;","public class SSResultSetMetaData implements ResultSetMetaData {","    Expressions columns;","    public int getColumnCount() throws SQLException {","        return columns.size();","    }","    public boolean isAutoIncrement(int column) throws SQLException {","        return getColumnExpression( column ).isAutoIncrement();","    }","    public boolean isCaseSensitive(int column) throws SQLException {","        return getColumnExpression( column ).isCaseSensitive();","    }","    public boolean isSearchable(int column) throws SQLException {","    \tint type = getColumnExpression( column ).getType();","        return type == Expression.NAME || type == Expression.FUNCTION;","    }","    public boolean isCurrency(int column) throws SQLException {","        switch(getColumnExpression( column ).getDataType()){","            case SQLTokenizer.MONEY:","            case SQLTokenizer.SMALLMONEY:","                return true;","        }","        return false;","    }","    public int isNullable(int column) throws SQLException {","        return getColumnExpression( column ).isNullable() ? columnNullable : columnNoNulls;","    }","    public boolean isSigned(int column) throws SQLException {","\t\treturn isSignedDataType(getColumnExpression( column ).getDataType());","    }","\tstatic boolean isSignedDataType(int dataType) {","\t\tswitch(dataType){","\t\t\tcase SQLTokenizer.SMALLINT:","\t\t\tcase SQLTokenizer.INT:","\t\t\tcase SQLTokenizer.BIGINT:","\t\t\tcase SQLTokenizer.SMALLMONEY:","\t\t\tcase SQLTokenizer.MONEY:","\t\t\tcase SQLTokenizer.DECIMAL:","\t\t\tcase SQLTokenizer.NUMERIC:","\t\t\tcase SQLTokenizer.REAL:","\t\t\tcase SQLTokenizer.FLOAT:","\t\t\tcase SQLTokenizer.DOUBLE:","\t\t\t\treturn true;","\t\t}","\t\treturn false;","\t}","\tstatic boolean isNumberDataType(int dataType) {","\t\treturn isSignedDataType(dataType) || dataType == SQLTokenizer.TINYINT;","\t}","\tstatic boolean isBinaryDataType(int dataType) {","\t\tswitch(dataType){","\t\t\tcase SQLTokenizer.BINARY:","\t\t\tcase SQLTokenizer.VARBINARY:","\t\t\tcase SQLTokenizer.LONGVARBINARY:","\t\t\tcase SQLTokenizer.BLOB:","\t\t\t\treturn true;","\t\t}","\t\treturn false;","\t}","\tstatic int getDisplaySize(int dataType, int precision, int scale){","\t\tswitch(dataType){","\t\t\tcase SQLTokenizer.BIT:","\t\t\t\treturn 1; ","\t\t\tcase SQLTokenizer.BOOLEAN:","\t\t\t\treturn 5; ","\t\t\tcase SQLTokenizer.TINYINT:","\t\t\t\treturn 3;","\t\t\tcase SQLTokenizer.SMALLINT:","\t\t\t\treturn 6;","\t\t\tcase SQLTokenizer.INT:","\t\t\t\treturn 10;","\t\t\tcase SQLTokenizer.BIGINT:","            case SQLTokenizer.MONEY:","\t\t\t\treturn 19;","            case SQLTokenizer.REAL:","                return 13;","\t\t\tcase SQLTokenizer.FLOAT:","\t\t\tcase SQLTokenizer.DOUBLE:","\t\t\t\treturn 17;","\t\t\tcase SQLTokenizer.LONGVARCHAR:","            case SQLTokenizer.LONGNVARCHAR:","\t\t\tcase SQLTokenizer.LONGVARBINARY:","            case SQLTokenizer.JAVA_OBJECT:","            case SQLTokenizer.BLOB:","            case SQLTokenizer.CLOB:","            case SQLTokenizer.NCLOB:","\t\t\t\treturn Integer.MAX_VALUE;","\t\t\tcase SQLTokenizer.NUMERIC:","\t\t\t\treturn precision + (scale\>0 ? 2 : 1);","\t\t\tcase SQLTokenizer.VARBINARY:","\t\t\tcase SQLTokenizer.BINARY:","\t\t\t\treturn 2 + precision*2;","            case SQLTokenizer.SMALLDATETIME:","                return 21;","\t\t\tdefault:","\t\t\t\treturn precision;","\t\t}","\t}","\tstatic int getDataTypePrecision(int dataType, int defaultValue){","\t\tswitch(dataType){","\t\t\tcase SQLTokenizer.NULL:","\t\t\t\treturn 0;","\t\t\tcase SQLTokenizer.BIT:","\t\t\tcase SQLTokenizer.BOOLEAN:","\t\t\t\treturn 1;","\t\t\tcase SQLTokenizer.TINYINT:","\t\t\t\treturn 3;","\t\t\tcase SQLTokenizer.SMALLINT:","\t\t\t\treturn 5;","\t\t\tcase SQLTokenizer.INT:","\t\t\tcase SQLTokenizer.SMALLMONEY:","\t\t\t\treturn 10;","\t\t\tcase SQLTokenizer.BIGINT:","\t\t\tcase SQLTokenizer.MONEY:","\t\t\t\treturn 19;","\t\t\tcase SQLTokenizer.REAL:","\t\t\t\treturn 7;","\t\t\tcase SQLTokenizer.FLOAT:","\t\t\tcase SQLTokenizer.DOUBLE:","\t\t\t\treturn 15;","            case SQLTokenizer.CHAR:","            case SQLTokenizer.NCHAR:","\t\t\tcase SQLTokenizer.VARCHAR:","            case SQLTokenizer.NVARCHAR:","            case SQLTokenizer.BINARY:","\t\t\tcase SQLTokenizer.VARBINARY:","\t\t\t\tif(defaultValue == -1)","\t\t\t\t\treturn 0xFFFF;","                return defaultValue;","\t\t\tcase SQLTokenizer.NUMERIC:","\t\t\tcase SQLTokenizer.DECIMAL:","                if(defaultValue == -1)","                    return 38;","                return defaultValue;","\t\t\tcase SQLTokenizer.TIMESTAMP:","\t\t\t\treturn 23;","\t\t\tcase SQLTokenizer.TIME:","\t\t\t\treturn 8;","\t\t\tcase SQLTokenizer.DATE:","\t\t\t\treturn 10;","\t\t\tcase SQLTokenizer.SMALLDATETIME:","\t\t\t\treturn 16;","\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:","\t\t\t\treturn 36;","\t\t\tcase SQLTokenizer.LONGVARCHAR:","            case SQLTokenizer.LONGNVARCHAR:","\t\t\tcase SQLTokenizer.LONGVARBINARY:","\t\t\t\treturn Integer.MAX_VALUE;","\t\t}","\t\tif(defaultValue == -1)","\t\t\tthrow new Error(\"Precision:\"+SQLTokenizer.getKeyWord(dataType));","\t\treturn defaultValue;","\t}","    public int getColumnDisplaySize(int column) throws SQLException {","        return getColumnExpression( column ).getDisplaySize();","    }","    public String getColumnLabel(int column) throws SQLException {","        return getColumnExpression( column ).getAlias();","    }","    public String getColumnName(int column) throws SQLException {","        return getColumnExpression( column ).getAlias();","    }","    public String getSchemaName(int column) throws SQLException {","        return null;","    }","    public int getPrecision(int column) throws SQLException {","        return getColumnExpression( column ).getPrecision();","    }","    public int getScale(int column) throws SQLException {","        return getColumnExpression( column ).getScale();","    }","    public String getTableName(int column) throws SQLException {","        return getColumnExpression( column ).getTableName();","    }","    public String getCatalogName(int column) throws SQLException {","        return null;","    }","    public int getColumnType(int column) throws SQLException {","        return SQLTokenizer.getSQLDataType(getColumnExpression( column ).getDataType() );","    }","    public String getColumnTypeName(int column) throws SQLException {","        return SQLTokenizer.getKeyWord( getColumnExpression( column ).getDataType() );","    }","    public boolean isReadOnly(int column) throws SQLException {","        return !getColumnExpression( column ).isDefinitelyWritable();","    }","    public boolean isWritable(int column) throws SQLException {","        return getColumnExpression( column ).isDefinitelyWritable();","    }","    public boolean isDefinitelyWritable(int column) throws SQLException {","        return getColumnExpression( column ).isDefinitelyWritable();","    }","    public String getColumnClassName(int column) throws SQLException {","        switch(getColumnType(column)){","            case Types.TINYINT:","            case Types.SMALLINT:","            case Types.INTEGER:","                    return \"java.lang.Integer\";","            case Types.BIT:","            case Types.BOOLEAN:","                    return \"java.lang.Boolean\";","            case Types.BINARY:","            case Types.VARBINARY:","            case Types.LONGVARBINARY:","                    return \"[B\";","            case Types.BLOB:","                    return \"java.sql.Blob\";","            case Types.BIGINT:","                    return \"java.lang.Long\";","            case Types.DECIMAL:","            case Types.NUMERIC:","                    return \"java.math.BigDecimal\";","            case Types.REAL:","                    return \"java.lang.Float\";","            case Types.FLOAT:","            case Types.DOUBLE:","                    return \"java.lang.Double\";","            case Types.DATE:","                    return \"java.sql.Date\";","            case Types.TIME:","                    return \"java.sql.Time\";","            case Types.TIMESTAMP:","                    return \"java.sql.Timestamp\";","            case Types.CHAR:","            case Types.VARCHAR:","            case Types.LONGVARCHAR:","            case -11: ","                    return \"java.lang.String\";","            case Types.CLOB:","                    return \"java.sql.Clob\";","            default: return \"java.lang.Object\";","        }","    }","\tfinal int getColumnIdx( int column ) throws SQLException{","\t\tif(column \< 1 || column \> columns.size())","\t\t\tthrow SmallSQLException.create( Language.COL_IDX_OUT_RANGE, String.valueOf(column));","\t\treturn column-1;","\t}","    final Expression getColumnExpression( int column ) throws SQLException{","        return columns.get( getColumnIdx( column ) );","    }","\t@Override","\tpublic \<T\> T unwrap(Class\<T\> iface) throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic boolean isWrapperFor(Class\<?\> iface) throws SQLException {","\t\treturn false;","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionLog.java|:["package smallsql.database;","final class ExpressionFunctionLog extends ExpressionFunctionReturnFloat {","    final int getFunction(){ return SQLTokenizer.LOG; }","    final double getDouble() throws Exception{","\t\tif(isNull()) return 0;","        return Math.log( param1.getDouble() );","    }","}"],|project://smallsql/src/smallsql/junit/TestDBMetaData.java|:["package smallsql.junit;","import java.sql.*;","import java.text.*;","import java.util.Locale;","public class TestDBMetaData extends BasicTestCase {","\tpublic TestDBMetaData(){","\t\tsuper();","\t}","\tpublic TestDBMetaData(String arg0) {","\t\tsuper(arg0);","\t}","    public void testGetURL() throws Exception{","        Connection con = AllTests.getConnection();","        DatabaseMetaData md = con.getMetaData();","        assertEquals( \"URL\", AllTests.JDBC_URL, md.getURL());","    }","    public void testVersions() throws Exception{","        Connection con = AllTests.getConnection();","        DatabaseMetaData md = con.getMetaData();","        assertEquals( \"DriverVersion\", md.getDriverVersion(), md.getDatabaseProductVersion());","        Driver driver = DriverManager.getDriver(AllTests.JDBC_URL);","        assertEquals( \"MajorVersion\", driver.getMajorVersion(), md.getDatabaseMajorVersion());","        assertEquals( \"MajorVersion\", driver.getMajorVersion(), md.getDriverMajorVersion());","        assertEquals( \"MinorVersion\", driver.getMinorVersion(), md.getDatabaseMinorVersion());","        assertEquals( \"MinorVersion\", driver.getMinorVersion(), md.getDriverMinorVersion());","        assertEquals( \"Version\", new DecimalFormat(\"###0.00\", new DecimalFormatSymbols(Locale.US)).format(driver.getMajorVersion()+driver.getMinorVersion()/100.0), md.getDriverVersion());","        assertTrue( \"jdbcCompliant\", driver.jdbcCompliant() );","    }","    public void testFunctions() throws Exception{","        Connection con = AllTests.getConnection();","        DatabaseMetaData md = con.getMetaData();","        assertEquals( \"getNumericFunctions\", \"ABS,ACOS,ASIN,ATAN,ATAN2,CEILING,COS,COT,DEGREES,EXP,FLOOR,LOG,LOG10,MOD,PI,POWER,RADIANS,RAND,ROUND,SIGN,SIN,SQRT,TAN,TRUNCATE\",","                md.getNumericFunctions());","        assertEquals( \"getStringFunctions\", \"ASCII,BIT_LENGTH,CHAR_LENGTH,CHARACTER_LENGTH,CHAR,CONCAT,DIFFERENCE,INSERT,LCASE,LEFT,LENGTH,LOCATE,LTRIM,OCTET_LENGTH,REPEAT,REPLACE,RIGHT,RTRIM,SOUNDEX,SPACE,SUBSTRING,TRIM,UCASE\",","                md.getStringFunctions());","        assertEquals( \"getStringFunctions\", \"IFNULL,USER,CONVERT,CAST,IIF\",","                md.getSystemFunctions());","        assertEquals( \"getStringFunctions\", \"CURDATE,CURRENT_DATE,CURTIME,DAYNAME,DAYOFMONTH,DAYOFWEEK,DAYOFYEAR,DAY,HOUR,MILLISECOND,MINUTE,MONTH,MONTHNAME,NOW,QUARTER,SECOND,TIMESTAMPADD,TIMESTAMPDIFF,WEEK,YEAR\",","                md.getTimeDateFunctions());","    }","    public void testGetProcedures() throws Exception{","        Connection con = AllTests.getConnection();","        DatabaseMetaData md = con.getMetaData();","        ResultSet rs = md.getProcedures( null, null, \"*\");","        String[] colNames = {\"PROCEDURE_CAT\", \"PROCEDURE_SCHEM\", \"PROCEDURE_NAME\", \"\", \"\", \"\", \"REMARKS\", \"PROCEDURE_TYPE\"};","        int[] colTypes = {Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL };","        assertRSMetaData( rs, colNames, colTypes);","    }","    public void testGetProcedureColumns() throws Exception{","        Connection con = AllTests.getConnection();","        DatabaseMetaData md = con.getMetaData();","        ResultSet rs = md.getProcedureColumns( null, null, \"*\", null);","        String[] colNames = {\"PROCEDURE_CAT\", \"PROCEDURE_SCHEM\", \"PROCEDURE_NAME\", \"COLUMN_NAME\", \"COLUMN_TYPE\", \"DATA_TYPE\", \"TYPE_NAME\", \"PRECISION\", \"LENGTH\", \"SCALE\", \"RADIX\", \"NULLABLE\", \"REMARKS\" };","        int[] colTypes = {Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL };","        assertRSMetaData( rs, colNames, colTypes);","    }","    public void testGetTables() throws Exception{","        String[] colNames = {\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"TABLE_TYPE\",\"REMARKS\",\"TYPE_CAT\",\"TYPE_SCHEM\",\"TYPE_NAME\",\"SELF_REFERENCING_COL_NAME\",\"REF_GENERATION\"};","        int[] types = {Types.VARCHAR, Types.NULL, Types.VARCHAR, Types.VARCHAR, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL};","        Connection con = DriverManager.getConnection(\"jdbc:smallsql?\");","        DatabaseMetaData md = con.getMetaData();","        ResultSet rs = md.getTables(null, null, null, null);","        super.assertRSMetaData(rs, colNames, new int[colNames.length]); ","        assertFalse(rs.next());","        con.close();","        con = AllTests.getConnection();","        md = con.getMetaData();","        rs = md.getTables(null, null, null, null);","        super.assertRSMetaData(rs, colNames, types);","    }","    public void testGetSchemas() throws Exception{","        Connection con = AllTests.getConnection();","        DatabaseMetaData md = con.getMetaData();","        ResultSet rs = md.getSchemas();","        String[] colNames = {\"TABLE_SCHEM\"};","        int[] colTypes = {Types.NULL};","        assertRSMetaData( rs, colNames, colTypes);","        assertFalse(rs.next());","    }","\tpublic void testGetCatalogs() throws Exception{","\t\tConnection con = AllTests.getConnection();","\t\ttry{","\t\t\tcon.createStatement().execute(\"drop database test2\\n\\r\\t\");","\t\t}catch(SQLException e){}","\t\tcon.createStatement().execute(\"create database test2\");","\t\tDatabaseMetaData md = con.getMetaData();","\t\tResultSet rs = md.getCatalogs();","\t\tassertRSMetaData( rs, new String[]{\"TABLE_CAT\"}, new int[]{Types.VARCHAR});","\t\twhile(rs.next()){","\t\t\tSystem.out.println( \"testCatalogs:\"+rs.getObject(1) );","\t\t}","\t}","    public void testGetTableTypes() throws Exception{","        Connection con = AllTests.getConnection();","        DatabaseMetaData md = con.getMetaData();","        ResultSet rs = md.getTableTypes();","        String[] colNames = {\"TABLE_TYPE\"};","        int[] colTypes = {Types.VARCHAR};","        assertRSMetaData( rs, colNames, colTypes);","        String type = \"\";","        int count = 0;","        while(rs.next()){","            String type2 = rs.getString(\"TABLE_TYPE\");","            assertTrue( type+\"-\"+type2, type.compareTo(type2)\<0);","            type = type2;","            count++;","        }","        assertEquals(\"Table Type Count\", 3, count);","    }","\tpublic void testGetColumn() throws Exception{","\t\tConnection con = AllTests.getConnection();","\t\tdropTable(con,\"tableColumns\");","\t\tdropView( con, \"viewColumns\");","\t\tcon.createStatement().execute(\"create table tableColumns(a int default 5)\");","\t\tDatabaseMetaData md = con.getMetaData();","\t\tResultSet rs = md.getColumns(null, null, \"tableColumns\", null);","        String[] colNames = {\"TABLE_CAT\", \"TABLE_SCHEM\", \"TABLE_NAME\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\", \"COLUMN_SIZE\", \"BUFFER_LENGTH\", \"DECIMAL_DIGITS\", \"NUM_PREC_RADIX\", \"NULLABLE\", \"REMARKS\", \"COLUMN_DEF\", \"SQL_DATA_TYPE\", \"SQL_DATETIME_SUB\", \"CHAR_OCTET_LENGTH\", \"ORDINAL_POSITION\", \"IS_NULLABLE\"};","        int[] colTypes = {Types.VARCHAR, Types.NULL, Types.VARCHAR, Types.VARCHAR, Types.SMALLINT, Types.VARCHAR, Types.INTEGER, Types.NULL, Types.INTEGER, Types.INTEGER, Types.INTEGER, Types.NULL, Types.VARCHAR, Types.NULL, Types.NULL, Types.INTEGER, Types.INTEGER, Types.VARCHAR};","\t\tassertRSMetaData( rs, colNames, colTypes);\t\t","\t\tassertTrue( \"No row\", rs.next() );","\t\tassertEquals( \"a\", rs.getObject(\"COLUMN_NAME\") ); ","\t\tassertEquals( \"INT\", rs.getObject(\"TYPE_NAME\") ); ","\t\tassertEquals( \"5\", rs.getObject(\"COLUMN_Def\") ); ","\t\tcon.createStatement().execute(\"create view viewColumns as Select * from tableColumns\");","\t\trs = md.getColumns(null, null, \"viewColumns\", null);","\t\tassertRSMetaData( rs, colNames, colTypes);\t\t","\t\tassertTrue( \"No row\", rs.next() );","\t\tassertEquals( \"a\", rs.getObject(\"COLUMN_NAME\") ); ","\t\tassertEquals( \"INT\", rs.getObject(\"TYPE_NAME\") ); ","\t\tassertEquals( \"5\", rs.getObject(\"COLUMN_Def\") ); ","\t\tdropView( con, \"viewColumns\");","\t\tdropTable( con, \"tableColumns\");","\t}","    public void testGetTypeInfo() throws Exception{","        Connection con = AllTests.getConnection();","        DatabaseMetaData md = con.getMetaData();","        ResultSet rs = md.getTypeInfo();  ","        String[] colNames = {\"TYPE_NAME\", \"DATA_TYPE\", \"PRECISION\", \"LITERAL_PREFIX\", \"LITERAL_SUFFIX\", \"CREATE_PARAMS\", \"NULLABLE\", \"CASE_SENSITIVE\", \"SEARCHABLE\", \"UNSIGNED_ATTRIBUTE\", \"FIXED_PREC_SCALE\", \"AUTO_INCREMENT\", \"LOCAL_TYPE_NAME\", \"MINIMUM_SCALE\", \"MAXIMUM_SCALE\", \"SQL_DATA_TYPE\", \"SQL_DATETIME_SUB\", \"NUM_PREC_RADIX\"};","        int[] colTypes = {Types.VARCHAR, Types.SMALLINT, Types.INTEGER, Types.VARCHAR, Types.VARCHAR, Types.VARCHAR, Types.SMALLINT, Types.BOOLEAN, Types.SMALLINT, Types.BOOLEAN, Types.BOOLEAN, Types.BOOLEAN, Types.NULL, Types.INTEGER, Types.INTEGER, Types.NULL, Types.NULL, Types.NULL };","        assertRSMetaData(rs, colNames, colTypes);","        assertTrue(rs.next());","        int lastDataType = rs.getInt(\"data_type\");","        while(rs.next()){","            int dataType = rs.getInt(\"data_type\");","            assertTrue(\"Wrong sorting order\", dataType\>=lastDataType );","            lastDataType = dataType;","        }","    }","    public void testGetCrossReference() throws Exception{","        Connection con = AllTests.getConnection();","        dropTable(con,\"tblCross1\");","        dropTable(con,\"tblCross2\");","        DatabaseMetaData md = con.getMetaData();","        Statement st = con.createStatement();","        st.execute(\"Create Table tblCross1(id1 counter primary key, v nvarchar(100))\");","        st.execute(\"Create Table tblCross2(id2 int , v nvarchar(100), foreign key (id2) REFERENCES tblCross1(id1))\");","        String[] colNames = {\"PKTABLE_CAT\", \"PKTABLE_SCHEM\", \"PKTABLE_NAME\", \"PKCOLUMN_NAME\", \"FKTABLE_CAT\", \"FKTABLE_SCHEM\", \"FKTABLE_NAME\", \"FKCOLUMN_NAME\", \"KEY_SEQ\", \"UPDATE_RULE\", \"DELETE_RULE\", \"FK_NAME\", \"PK_NAME\", \"DEFERRABILITY\"};","        int[] colTypes = {Types.VARCHAR, Types.NULL, Types.VARCHAR, Types.VARCHAR, Types.VARCHAR, Types.NULL, Types.VARCHAR, Types.VARCHAR, Types.SMALLINT, Types.SMALLINT, Types.SMALLINT, Types.VARCHAR, Types.VARCHAR, Types.SMALLINT };","        ResultSet rs = md.getCrossReference(null,null,\"tblCross1\",null,null,\"tblCross2\");","        assertRSMetaData(rs, colNames, colTypes);","        assertTrue(rs.next());","        assertFalse(rs.next());","        rs = md.getImportedKeys(null,null,\"tblCross2\");","        assertRSMetaData(rs, colNames, colTypes);","        assertTrue(rs.next());","        assertFalse(rs.next());","        rs = md.getExportedKeys(null,null,\"tblCross1\");","        assertRSMetaData(rs, colNames, colTypes);","        assertTrue(rs.next());","        assertFalse(rs.next());","        dropTable(con,\"tblCross1\");","        dropTable(con,\"tblCross2\");","    }","    public void testGetBestRowIdentifier() throws Exception{","        Connection con = AllTests.getConnection();","        dropTable(con,\"tblBestRow1\");","        DatabaseMetaData md = con.getMetaData();","        Statement st = con.createStatement();","        st.execute(\"Create Table tblBestRow1(id1 counter primary key, v nvarchar(100))\");","        String[] colNames = {\"SCOPE\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\", \"COLUMN_SIZE\", \"BUFFER_LENGTH\", \"DECIMAL_DIGITS\", \"PSEUDO_COLUMN\"};","        int[] colTypes = {Types.SMALLINT, Types.VARCHAR, Types.INTEGER, Types.VARCHAR, Types.INTEGER, Types.NULL, Types.SMALLINT, Types.SMALLINT};","        ResultSet rs = md.getBestRowIdentifier(null, null, \"tblBestRow1\", DatabaseMetaData.bestRowSession, true);        ","        assertRSMetaData(rs, colNames, colTypes);","        assertTrue(rs.next());","        assertEquals(\"Columnname:\", \"id1\", rs.getString(\"COLUMN_NAME\"));","        assertFalse(rs.next());","        String[] colNames2 = {\"TABLE_CAT\", \"TABLE_SCHEM\", \"TABLE_NAME\", \"COLUMN_NAME\", \"KEY_SEQ\", \"PK_NAME\"};","        int[] colTypes2 = {Types.VARCHAR, Types.NULL, Types.VARCHAR, Types.VARCHAR, Types.SMALLINT, Types.VARCHAR};","        rs = md.getPrimaryKeys(null, null, \"tblBestRow1\");        ","        assertRSMetaData(rs, colNames2, colTypes2);","        assertTrue(rs.next());","        assertEquals(\"Columnname:\", \"id1\", rs.getString(\"COLUMN_NAME\"));","        assertFalse(rs.next());","        String[] colNames3 = {\"TABLE_CAT\", \"TABLE_SCHEM\", \"TABLE_NAME\", \"NON_UNIQUE\", \"INDEX_QUALIFIER\", \"INDEX_NAME\", \"TYPE\", \"ORDINAL_POSITION\", \"COLUMN_NAME\", \"ASC_OR_DESC\", \"CARDINALITY\", \"PAGES\", \"FILTER_CONDITION\"};","        int[] colTypes3 = {Types.VARCHAR, Types.NULL, Types.VARCHAR, Types.BOOLEAN, Types.NULL, Types.VARCHAR, Types.SMALLINT, Types.SMALLINT, Types.VARCHAR, Types.NULL, Types.NULL, Types.NULL, Types.NULL};","        rs = md.getIndexInfo(null, null, \"tblBestRow1\", true, true);        ","        assertRSMetaData(rs, colNames3, colTypes3);","        assertTrue(rs.next());","        assertEquals(\"Columnname:\", \"id1\", rs.getString(\"COLUMN_NAME\"));","        assertFalse(rs.next());","        dropTable(con,\"tblBestRow1\");","    }","    public void testGetgetUDTs() throws Exception{","        Connection con = AllTests.getConnection();","        DatabaseMetaData md = con.getMetaData();","        ResultSet rs = md.getUDTs(null, null, null, null);","        String[] colNames = {\"TYPE_CAT\", \"TYPE_SCHEM\", \"TYPE_NAME\", \"CLASS_NAME\", \"DATA_TYPE\", \"REMARKS\"};","        int[] colTypes = new int[colNames.length];","        assertRSMetaData( rs, colNames, colTypes);","        assertFalse(rs.next());","    }","    public void testGetConnection() throws Exception{","        Connection con = AllTests.getConnection();","        DatabaseMetaData md = con.getMetaData();","        assertEquals(con, md.getConnection());","    }","}"],|project://smallsql/src/smallsql/database/SSSavepoint.java|:["package smallsql.database;","import java.sql.*;","class SSSavepoint implements Savepoint {","\tprivate final int id;","\tprivate final String name;","\tlong transactionTime;","\tSSSavepoint(int id, String name, long transactionTime){","\t\tthis.id = id;","\t\tthis.name = name;","\t\tthis.transactionTime = transactionTime;","\t}","\tpublic int getSavepointId(){","\t\treturn id;","\t}","\tpublic String getSavepointName(){","\t\treturn name;","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionASin.java|:["package smallsql.database;","final class ExpressionFunctionASin extends ExpressionFunctionReturnFloat {","    final int getFunction(){ return SQLTokenizer.ASIN; }","    final double getDouble() throws Exception{","\t\tif(isNull()) return 0;","        return Math.asin( param1.getDouble() );","    }","}"],|project://smallsql/src/smallsql/database/MutableNumeric.java|:["package smallsql.database;","import java.math.*;","class MutableNumeric extends Number implements Mutable{","    private static final long serialVersionUID = -750525164208565056L;","    private int[] value;","    private int scale;","    private int signum;","    MutableNumeric(byte[] complement){","\t\tsetValue(complement);","    }","    private void setValue(byte[] complement){","        int length = complement.length;","        if(length == 0){","            value   = EMPTY_INTS;","            signum  = 0;","            return;","        }","        value = new int[ (length + 3) / 4 ];","        if(complement[0] \< 0){","            negate( complement );","            signum = -1;","        }else{","\t\t\tsignum = 0;","        \tfor(int i=0; i\<complement.length; i++)","        \t\tif(complement[i] != 0){","        \t\t\tsignum = 1;","        \t\t\tbreak;","        \t\t}","        }","        for(int v=value.length-1; v\>=0; v--){","            int temp = 0;","            for(int i=0; i\<4 && 0\<length; i++){","                temp |= (complement[ --length ] & 0xFF) \<\< (i*8);","            }","            value[v] = temp;","        }","    }","    MutableNumeric(int complement){","        if(complement == 0){","            signum = 0;","            value = EMPTY_INTS;","        }else{","            value = new int[1];","            if(complement \< 0){","                value[0] = -complement;","                signum = -1;","            }else{","                value[0] = complement;","                signum = 1;","            }","        }","    }","    MutableNumeric(int complement, int scale){","        this( complement );","        this.scale = scale;","    }","    MutableNumeric(long complement){","        if(complement == 0){","            signum = 0;","            value = EMPTY_INTS;","        }else{","            value = new int[2];","            if(complement \< 0){","                value[0] = (int)(~(complement \>\> 32));","                value[1] = (int)(-complement);","                signum = -1;","            }else{","                value[0] = (int)(complement \>\> 32);","                value[1] = (int)complement;","                signum = 1;","            }","        }","    }","    MutableNumeric(long complement, int scale){","        this( complement );","        this.scale = scale;","    }","    MutableNumeric(double val){","        this( new BigDecimal( String.valueOf(val) ) );","    }","    MutableNumeric(float val){","        this( new BigDecimal( String.valueOf(val) ) );","    }","    MutableNumeric(String val){","        this( new BigDecimal( val ) );","    }","    MutableNumeric( BigDecimal big ){","        this(big.unscaledValue().toByteArray() );","        scale   = big.scale();","    }","    MutableNumeric(int signum, int[] value, int scale){","        this.signum = signum;","        this.value  = value;","        this.scale  = scale;","    }","\tMutableNumeric(MutableNumeric numeric){","\t\tthis.signum = numeric.signum;","\t\tthis.value  = new int[numeric.value.length];","\t\tSystem.arraycopy(numeric.value, 0, value, 0, value.length);","\t\tthis.scale  = numeric.scale;","\t}","    int[] getInternalValue(){","        return value;","    }","    void add(MutableNumeric num){","\t\tif(num.scale \< scale){","\t\t\tnum.setScale(scale);","\t\t}else","\t\tif(num.scale \> scale){","\t\t\tsetScale(num.scale);","\t\t}","        add( num.signum, num.value );","    }","    private void add( int sig2, int[] val2){","        if(val2.length \> value.length){","            int[] temp = val2;","            val2 = value;","            value = temp;","            int tempi = signum;","            signum = sig2;","            sig2 = tempi;","        }","        if(signum != sig2)","            sub(val2);","        else","            add(val2);","    }","    private void add( int[] val2){","        long temp = 0;","        int v1 = value.length;","        for(int v2 = val2.length; v2\>0; ){","            temp = (value[--v1] & 0xFFFFFFFFL) + (val2 [--v2] & 0xFFFFFFFFL) + (temp \>\>\> 32);","            value[v1] = (int)temp;","        }","        boolean uebertrag = (temp \>\>\> 32) != 0;","        while(v1 \> 0 && uebertrag)","            uebertrag = (value[--v1] = value[v1] + 1) == 0;","        if(uebertrag){","\t\t\tresizeValue(1);","        }","    }","\tprivate void resizeValue(int highBits){","\t\tint val[] = new int[value.length+1];","\t\tval[0] = highBits;","\t\tSystem.arraycopy(value, 0, val, 1, value.length);","\t\tvalue = val;","    }","    void sub(MutableNumeric num){","\t\tif(num.scale \< scale){","\t\t\tnum.setScale(scale);","\t\t}else","\t\tif(num.scale \> scale){","\t\t\tsetScale(num.scale);","\t\t}","        add( -num.signum, num.value );","    }","    private void sub(int[] val2){","        long temp = 0;","        int v1 = value.length;","        for(int v2 = val2.length; v2\>0; ){","            temp = (value[--v1] & 0xFFFFFFFFL) - (val2 [--v2] & 0xFFFFFFFFL) + (temp \>\>\>= 32);","            value[v1] = (int)temp;","        }","        boolean uebertrag = (temp \>\>\> 32) != 0;","        while(v1 \> 0 && uebertrag)","            uebertrag = (value[--v1] = value[v1] - 1) == -1;","        if(uebertrag){","            signum = -signum;","            int last = value.length-1;","            for(int i=0; i\<=last; i++){","                value[i] = (i == last) ? -value[i] : ~value[i];","            }","        }","    }","    void mul(MutableNumeric num){","\t\tBigDecimal big = toBigDecimal().multiply(num.toBigDecimal() );","\t\tsetValue( big.unscaledValue().toByteArray() );","\t\tscale = big.scale();","\t\tsignum = big.signum();","    }","\tfinal void mul(int factor){","\t\tif(factor \< 0){","\t\t\tfactor = - factor;","\t\t\tsignum = -signum;","\t\t}","\t\tlong carryover = 0;","\t\tfor(int i = value.length-1; i\>=0; i--){","\t\t\tlong v = (value[i] & 0xFFFFFFFFL) * factor + carryover;","\t\t\tvalue[i] = (int)v;","\t\t\tcarryover = v \>\> 32;","\t\t}","\t\tif(carryover \> 0){","\t\t\tresizeValue( (int)carryover );","\t\t}","\t}","    void div(MutableNumeric num){","\t\tint newScale = Math.max(scale+5, num.scale +4);","\t\tBigDecimal big = toBigDecimal().divide(num.toBigDecimal(), newScale, BigDecimal.ROUND_HALF_EVEN);","\t\tsetValue( big.unscaledValue().toByteArray() );","\t\tscale = big.scale();","\t\tsignum = big.signum();","    }","\tfinal void div(int quotient){","\t\tmul(100000);","\t\tscale += 5;","\t\tdivImpl(quotient);","\t}","\tfinal private void divImpl(int quotient){\t","\t\tif(quotient == 1) return;","\t\tif(quotient \< 0){","\t\t\tquotient = - quotient;","\t\t\tsignum = -signum;","\t\t}","\t\tint valueLength = value.length;","\t\tlong carryover = 0;","\t\tfor(int i = 0; i\<valueLength; i++){","\t\t\tlong v = (value[i] & 0xFFFFFFFFL) + carryover;","\t\t\tvalue[i] = (int)(v / quotient);","\t\t\tcarryover = ((v % quotient) \<\< 32);","\t\t}","\t\tcarryover /= quotient;","\t\tif(carryover \> 2147483648L || ","\t\t  (carryover == 2147483648L && (value[valueLength-1] % 2 == 1))){","\t\t\tint i = valueLength-1;","\t\t\tboolean isCarryOver = true;","\t\t\twhile(i \>= 0 && isCarryOver)","\t\t\t\tisCarryOver = (value[i--] += 1) == 0;","\t\t}","\t\tif(valueLength\>1 && value[0] == 0){","\t\t\tint[] temp = new int[valueLength-1];","\t\t\tSystem.arraycopy(value, 1, temp, 0, valueLength-1);","\t\t\tvalue = temp;","\t\t}","\t}","    void mod(MutableNumeric num){","\t\tnum = new MutableNumeric( doubleValue() % num.doubleValue() );","\t\tvalue = num.value;","\t\tscale = num.scale;","\t\tsignum = num.signum;","    }","\tint getScale(){","\t    return scale;","    }","\tvoid setScale(int newScale){","\t\tif(newScale == scale) return;","\t\tint factor = 1;","\t\tif(newScale \> scale){","\t\t\tfor(;newScale\>scale; scale++){","\t\t\t\tfactor *=10;","\t\t\t\tif(factor == 1000000000){","\t\t\t\t\tmul(factor);","\t\t\t\t\tfactor = 1;","\t\t\t\t}","\t\t\t}","\t\t\tmul(factor);","\t\t}else{","\t\t\tfor(;newScale\<scale; scale--){","\t\t\t\tfactor *=10;","\t\t\t\tif(factor == 1000000000){","\t\t\t\t\tdivImpl(factor);","\t\t\t\t\tfactor = 1;","\t\t\t\t}","\t\t\t}","\t\t\tdivImpl(factor);\t\t","\t\t}","\t}","    int getSignum() {","        return signum;","    }","    void setSignum(int signum){","        this.signum = signum;","    }","    void floor(){","\t\tint oldScale = scale;","\t\tsetScale(0);","\t\tsetScale(oldScale);","\t}","    private void negate(byte[] complement){","        int last = complement.length-1;","        for(int i=0; i\<=last; i++){","            complement[i] = (byte)( (i == last) ? -complement[i] : ~complement[i]);","        }","        while(complement[last] == 0){","            last--;","            complement[last]++;","        }","    }","    byte[] toByteArray(){","        if(signum == 0) return EMPTY_BYTES;","        byte[] complement;","        int offset;","        int v = 0;","        while(v \< value.length && value[v] == 0) v++;","        if (v == value.length) return EMPTY_BYTES;","        if(value[v] \< 0){","            complement = new byte[(value.length-v)*4 + 4];","            if(signum \< 0)","                complement[0] = complement[1] = complement[2] = complement[3] = -1;","            offset = 4;","        }else{","            complement = new byte[(value.length-v)*4];","            offset = 0;","        }","        int last = value.length-1;","        for(; v \<= last; v++){","            int val = (signum\>0) ? value[v] : (v == last) ? -value[v] : ~value[v];","            complement[offset++] = (byte)(val \>\> 24);","            complement[offset++] = (byte)(val \>\> 16);","            complement[offset++] = (byte)(val \>\> 8);","            complement[offset++] = (byte)(val);","        }","        return complement;","    }","    public int intValue(){","        return Utils.long2int(longValue());","    }","    public long longValue(){","        if(value.length == 0 || signum == 0){","            return 0;","        }else{","            if (value.length == 1 && (value[0] \> 0)){","                return Utils.double2long(value[0] / scaleDoubleFactor[scale] * signum);","            }else","            if (value.length == 1){","                long temp = value[0] & 0xFFFFFFFFL;","                return Utils.double2long(temp / scaleDoubleFactor[scale] * signum);","            }else","            if (value.length == 2 && (value[0] \> 0)){","                long temp = (((long)value[0]) \<\< 32) | (value[1] & 0xFFFFFFFFL);","                return Utils.double2long(temp / scaleDoubleFactor[scale] * signum);","            }else{","           \t\tif(scale != 0){","           \t\t\tMutableNumeric numeric = new MutableNumeric(this);","           \t\t\tnumeric.setScale(0);","           \t\t\treturn numeric.longValue();","           \t\t}           \t\t\t","            \treturn (signum \> 0) ? Long.MAX_VALUE : Long.MIN_VALUE;","            }","        }","    }","    public float floatValue(){","        if(value.length == 0 || signum == 0){","            return 0;","        }else{","            if (value.length == 1 && (value[0] \> 0)){","                return value[0] / scaleFloatFactor[scale] * signum;","            }else","            if (value.length == 1){","                long temp = value[0] & 0xFFFFFFFFL;","                return temp / scaleFloatFactor[scale] * signum;","            }else","            if (value.length == 2 && (value[0] \> 0)){","                long temp = (((long)value[0]) \<\< 32) | (value[1] & 0xFFFFFFFFL);","                return temp / scaleFloatFactor[scale] * signum;","            }else{","                return new BigDecimal( new BigInteger( toByteArray() ), scale ).floatValue();","            }","        }","    }","    public double doubleValue(){","        if(value.length == 0 || signum == 0){","            return 0;","        }else{","            if (value.length == 1 && (value[0] \> 0)){","                return value[0] / scaleDoubleFactor[scale] * signum;","            }else","            if (value.length == 1){","                long temp = value[0] & 0xFFFFFFFFL;","                return temp / scaleDoubleFactor[scale] * signum;","            }else","            if (value.length == 2 && (value[0] \> 0)){","                long temp = (((long)value[0]) \<\< 32) | (value[1] & 0xFFFFFFFFL);","                return temp / scaleDoubleFactor[scale] * signum;","            }else{","                return new BigDecimal( new BigInteger( toByteArray() ), scale ).doubleValue();","            }","        }","    }","    public String toString(){","        StringBuffer buf = new StringBuffer();","        if(value.length == 0 || signum == 0){","            buf.append( \'0\' );","        }else{","            if (value.length == 1 && (value[0] \> 0)){","                buf.append( Integer.toString(value[0]) );","            }else","            if (value.length == 1){","                long temp = value[0] & 0xFFFFFFFFL;","                buf.append( Long.toString( temp ) );","            }else","            if (value.length == 2 && (value[0] \> 0)){","                long temp = (((long)value[0]) \<\< 32) | (value[1] & 0xFFFFFFFFL);","                buf.append( Long.toString( temp ) );","            }else{","                return new BigDecimal( new BigInteger( toByteArray() ), scale ).toString();","            }","        }","        if(scale \> 0){","            while(buf.length() \<= scale) buf.insert( 0, \'0\' );","            buf.insert( buf.length() - scale, \'.\' );","        }","        if (signum \< 0) buf.insert( 0, \'-\');","        return buf.toString();","    }","    public int compareTo(MutableNumeric numeric){","\t\treturn toBigDecimal().compareTo(numeric.toBigDecimal());","    }           ","\tpublic boolean equals(Object obj){","\t\tif(!(obj instanceof MutableNumeric)) return false;","\t\treturn compareTo((MutableNumeric)obj) == 0;","\t}","    public BigDecimal toBigDecimal(){","\t\tif(signum == 0) return new BigDecimal( BigInteger.ZERO, scale);","        return new BigDecimal( new BigInteger( toByteArray() ), scale );","    }","    public BigDecimal toBigDecimal(int newScale){","        if(newScale == this.scale) return toBigDecimal();","        return toBigDecimal().setScale( newScale, BigDecimal.ROUND_HALF_EVEN);","    }","\tpublic Object getImmutableObject(){","\t\treturn toBigDecimal();","\t}","    private static final byte[] EMPTY_BYTES = new byte[0];","    private static final int [] EMPTY_INTS  = new int [0];","    private static final double[] scaleDoubleFactor = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000 };","    private static final float[]  scaleFloatFactor =  { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000 };","}"],|project://smallsql/src/smallsql/database/Scrollable.java|:["package smallsql.database;","import smallsql.database.language.Language;","class Scrollable extends RowSource {","\tprivate final RowSource rowSource;","\tprivate int rowIdx;","\tprivate final LongList rowList = new LongList();","\tScrollable(RowSource rowSource){","\t\tthis.rowSource = rowSource;","\t}","\tfinal boolean isScrollable(){","\t\treturn true;","\t}","\tvoid beforeFirst() throws Exception {","\t\trowIdx = -1;","\t\trowSource.beforeFirst();","\t}","\tboolean isBeforeFirst(){","\t\treturn rowIdx == -1 || rowList.size() == 0;","\t}","\tboolean isFirst(){","\t\treturn rowIdx == 0 && rowList.size()\>0;","\t}","\tboolean first() throws Exception {","\t\trowIdx = -1;","\t\treturn next();","\t}","\tboolean previous() throws Exception{","\t\tif(rowIdx \> -1){","\t\t\trowIdx--;","\t\t\tif(rowIdx \> -1 && rowIdx \< rowList.size()){","\t\t\t\trowSource.setRowPosition( rowList.get(rowIdx) );","\t\t\t\treturn true;","\t\t\t}","\t\t}","\t\trowSource.beforeFirst();","\t\treturn false;","\t}","\tboolean next() throws Exception {","\t\tif(++rowIdx \< rowList.size()){","\t\t\trowSource.setRowPosition( rowList.get(rowIdx) );","\t\t\treturn true;","\t\t}","\t\tfinal boolean result = rowSource.next();","\t\tif(result){","\t\t\trowList.add( rowSource.getRowPosition());","\t\t\treturn true;","\t\t}","        rowIdx = rowList.size(); ","\t\treturn false;","\t}","\tboolean last() throws Exception{","\t\tafterLast();","\t\treturn previous();","\t}","\tboolean isLast() throws Exception{","        if(rowIdx+1 != rowList.size()){","            return false; ","        }","\t\tboolean isNext = next();","        previous();","        return !isNext && (rowIdx+1 == rowList.size() && rowList.size()\>0);","\t}","\tboolean isAfterLast() throws Exception{","\t\tif(rowIdx \>= rowList.size()) return true;","        if(isBeforeFirst() && rowList.size() == 0){","            next();","            previous();","            if(rowList.size() == 0) return true;","        }","        return false;","\t}","\tvoid afterLast() throws Exception {","\t\tif(rowIdx+1 \< rowList.size()){","\t\t\trowIdx = rowList.size()-1;","\t\t\trowSource.setRowPosition( rowList.get(rowIdx) );","\t\t}","\t\twhile(next()){}","\t}","\tboolean absolute(int row) throws Exception{","\t\tif(row == 0)","\t\t\tthrow SmallSQLException.create(Language.ROW_0_ABSOLUTE);","\t\tif(row \< 0){","\t\t\tafterLast();","\t\t\trowIdx = rowList.size() + row;","\t\t\tif(rowIdx \< 0){","\t\t\t\tbeforeFirst();","\t\t\t\treturn false;","\t\t\t}else{","\t\t\t\trowSource.setRowPosition( rowList.get(rowIdx) );","\t\t\t\treturn true;","\t\t\t}","\t\t}","\t\tif(row \<= rowList.size()){","\t\t\trowIdx = row-1;","\t\t\trowSource.setRowPosition( rowList.get(rowIdx) );","\t\t\treturn true;","\t\t}","\t\trowIdx = rowList.size()-1;","\t\tif(rowIdx \>= 0)","\t\t\trowSource.setRowPosition( rowList.get(rowIdx) );","\t\tboolean result;","\t\twhile((result = next()) && row-1 \> rowIdx){}","\t\treturn result;","\t}","\tboolean relative(int rows) throws Exception{","\t\tint newRow = rows + rowIdx + 1;","\t\tif(newRow \<= 0){","\t\t\tbeforeFirst();","\t\t\treturn false;","\t\t}else{","\t\t\treturn absolute(newRow);","\t\t}","\t}","\tint getRow() throws Exception {","        if(rowIdx \>= rowList.size()) return 0;","\t\treturn rowIdx + 1;","\t}","\tlong getRowPosition() {","\t\treturn rowIdx;","\t}","\tvoid setRowPosition(long rowPosition) throws Exception {","\t\trowIdx = (int)rowPosition;","\t}","\tfinal boolean rowInserted(){","\t\treturn rowSource.rowInserted();","\t}","\tfinal boolean rowDeleted(){","\t\treturn rowSource.rowDeleted();","\t}","\tvoid nullRow() {","\t\trowSource.nullRow();","\t\trowIdx = -1;","\t}","\tvoid noRow() {","\t\trowSource.noRow();","\t\trowIdx = -1;","\t}","\tvoid execute() throws Exception{","\t\trowSource.execute();","\t\trowList.clear();","\t\trowIdx = -1;","\t}","    boolean isExpressionsFromThisRowSource(Expressions columns){","        return rowSource.isExpressionsFromThisRowSource(columns);","    }","}"],|project://smallsql/src/smallsql/database/TableView.java|:["package smallsql.database;","import java.io.*;","import java.nio.ByteBuffer;","import java.nio.channels.FileChannel;","import java.sql.*;","import smallsql.database.language.Language;","abstract class TableView {","\tstatic final int MAGIC_TABLE = \'S\' \<\< 24 | \'Q\' \<\< 16 | \'L\' \<\< 8 | \'T\';","\tstatic final int MAGIC_VIEW  = \'S\' \<\< 24 | \'Q\' \<\< 16 | \'L\' \<\< 8 | \'V\';","\tstatic final int TABLE_VIEW_VERSION = 2;","\tstatic final int TABLE_VIEW_OLD_VERSION = 1;","\tfinal String name;","\tfinal Columns columns;","\tprivate long timestamp = System.currentTimeMillis();","\tstatic final int LOCK_NONE   = 0; ","\tstatic final int LOCK_INSERT = 1; ","\tstatic final int LOCK_READ   = 2; ","\tstatic final int LOCK_WRITE  = 3; ","\tstatic final int LOCK_TAB    = 4; ","\tTableView(String name, Columns columns){","\t\tthis.name = name;","\t\tthis.columns = columns;","\t}","\tstatic TableView load(SSConnection con, Database database, String name) throws SQLException{","\t    FileChannel raFile = null;","\t\ttry{","\t\t\tString fileName = Utils.createTableViewFileName( database, name );","\t\t\tFile file = new File( fileName );","\t\t\tif(!file.exists())","\t\t\t\tthrow SmallSQLException.create(Language.TABLE_OR_VIEW_MISSING, name);","\t\t\traFile = Utils.openRaFile( file, database.isReadOnly() );","\t\t\tByteBuffer buffer = ByteBuffer.allocate(8);","\t\t\traFile.read(buffer);","\t\t\tbuffer.position(0);","\t\t\tint magic   = buffer.getInt();","\t\t\tint version = buffer.getInt();","\t\t\tswitch(magic){","\t\t\t\tcase MAGIC_TABLE:","\t\t\t\tcase MAGIC_VIEW:","\t\t\t\t\t\tbreak;","\t\t\t\tdefault:","\t\t\t\t\tthrow SmallSQLException.create(Language.TABLE_OR_VIEW_FILE_INVALID, fileName);","\t\t\t}","\t\t\tif(version \> TABLE_VIEW_VERSION)","\t\t\t\tthrow SmallSQLException.create(Language.FILE_TOONEW, new Object[] { new Integer(version), fileName });","\t\t\tif(version \< TABLE_VIEW_OLD_VERSION)","\t\t\t\tthrow SmallSQLException.create(Language.FILE_TOOOLD, new Object[] { new Integer(version), fileName });","\t\t\tif(magic == MAGIC_TABLE)","\t\t\t\treturn new Table( database, con, name, raFile, raFile.position(), version);","\t\t\t\treturn new View ( con, name, raFile, raFile.position());","\t\t}catch(Throwable e){","\t\t\tif(raFile != null)","\t\t\t\ttry{","\t\t\t\t\traFile.close();","\t\t\t\t}catch(Exception e2){","\t\t\t\t\tDriverManager.println(e2.toString());","\t\t\t\t}","\t\t\tthrow SmallSQLException.createFromException(e);","\t\t}","\t}","\tFile getFile(Database database){","\t\treturn new File( Utils.createTableViewFileName( database, name ) );","\t}","\tFileChannel createFile(SSConnection con, Database database) throws Exception{","\t    if( database.isReadOnly() ){","\t        throw SmallSQLException.create(Language.DB_READONLY);","\t    }","\t\tFile file = getFile( database );","\t\tboolean ok = file.createNewFile();","\t\tif(!ok) throw SmallSQLException.create(Language.TABLE_EXISTENT, name);","\t\tFileChannel raFile = Utils.openRaFile( file, database.isReadOnly() );","\t\tcon.add(new CreateFile(file, raFile, con, database));","\t\twriteMagic(raFile);","\t\treturn raFile;","\t}","\tabstract void writeMagic(FileChannel raFile) throws Exception;","\tString getName(){","\t\treturn name;","\t}","\tlong getTimestamp(){","\t\treturn timestamp;","\t}","\tfinal int findColumnIdx(String columnName){","\t\tfor(int i=0; i\<columns.size(); i++){","\t\t\tif( columns.get(i).getName().equalsIgnoreCase(columnName) ) return i;","\t\t}","\t\treturn -1;","\t}","\tfinal Column findColumn(String columnName){","\t\tfor(int i=0; i\<columns.size(); i++){","\t\t\tColumn column = columns.get(i);","\t\t\tif( column.getName().equalsIgnoreCase(columnName) ) return column;","\t\t}","\t\treturn null;","\t}","\tvoid close() throws Exception{}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionLog10.java|:["package smallsql.database;","final class ExpressionFunctionLog10 extends ExpressionFunctionReturnFloat {","    final int getFunction(){ return SQLTokenizer.LOG10; }","    final double getDouble() throws Exception{","\t\tif(isNull()) return 0;","        return Math.log( param1.getDouble() ) / divisor;","    }","\tprivate static final double divisor = Math.log(10);","}"],|project://smallsql/src/smallsql/database/IndexNodeScrollStatus.java|:["package smallsql.database;","final class IndexNodeScrollStatus {","\tfinal boolean asc;","\tfinal IndexNode[] nodes;","\tint idx;","\tfinal Object nodeValue;","\tfinal int level;","\tIndexNodeScrollStatus(IndexNode node, boolean asc, boolean scroll, int level){","\t\tthis.nodes = node.getChildNodes();","\t\tnodeValue = node.getValue();","\t\tthis.asc = asc;","\t\tthis.idx = (asc ^ scroll) ? nodes.length : -2;","\t\tthis.level = level;","\t}","\tvoid afterLast(){","\t\tidx = (asc) ? nodes.length : -2;\t\t\t","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionChar.java|:["package smallsql.database;","public class ExpressionFunctionChar extends ExpressionFunctionReturnString {","\tfinal int getFunction() {","\t\treturn SQLTokenizer.CHAR;","\t}","    final String getString() throws Exception {","\t\tif(isNull()) return null;","\t\tchar chr = (char)param1.getInt();","\t\treturn String.valueOf(chr);","\t}","\tfinal int getDataType() {","\t\treturn SQLTokenizer.CHAR;","\t}","\tfinal int getPrecision(){","\t\treturn 1;","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionMod.java|:["package smallsql.database;","final class ExpressionFunctionMod extends ExpressionFunctionReturnInt {","    final int getFunction(){ return SQLTokenizer.MOD; }","    boolean isNull() throws Exception{","        return param1.isNull() || param2.isNull();","    }","    final int getInt() throws Exception{","\t\tif(isNull()) return 0;","        return param1.getInt() % param2.getInt();","    }","}"],|project://smallsql/src/smallsql/database/SSPreparedStatement.java|:["package smallsql.database;","import java.sql.*;","import java.math.*;","import java.io.*;","import java.util.ArrayList;","import java.util.Calendar;","import java.net.URL;","class SSPreparedStatement extends SSStatement implements PreparedStatement {","\tprivate ArrayList batches;","    private final int top; ","    SSPreparedStatement( SSConnection con, String sql ) throws SQLException {","        this( con, sql, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY );","    }","    SSPreparedStatement( SSConnection con, String sql, int rsType, int rsConcurrency ) throws SQLException {","        super( con, rsType, rsConcurrency );","        con.log.println(sql);","        SQLParser parser = new SQLParser();","        cmd = parser.parse( con, sql );","        top = cmd.getMaxRows();","    }","    public ResultSet executeQuery() throws SQLException {","\t\texecuteImp();","        return cmd.getQueryResult();","    }","    public int executeUpdate() throws SQLException {","\t\texecuteImp();","\t\treturn cmd.getUpdateCount();","    }","\tfinal private void executeImp() throws SQLException {","        checkStatement();","\t\tcmd.verifyParams();","        if(getMaxRows() != 0 && (top == -1 || top \> getMaxRows()))","            cmd.setMaxRows(getMaxRows());","\t\tcmd.execute( con, this);","\t}","    public void setNull(int parameterIndex, int sqlType) throws SQLException {","        checkStatement();","        cmd.setParamValue( parameterIndex, null, SQLTokenizer.NULL);","    }","    public void setBoolean(int parameterIndex, boolean x) throws SQLException {","        checkStatement();","        cmd.setParamValue( parameterIndex, x ? Boolean.TRUE : Boolean.FALSE, SQLTokenizer.BOOLEAN);","    }","    public void setByte(int parameterIndex, byte x) throws SQLException {","        checkStatement();","        cmd.setParamValue( parameterIndex, new Integer(x), SQLTokenizer.TINYINT);","    }","    public void setShort(int parameterIndex, short x) throws SQLException {","        checkStatement();","        cmd.setParamValue( parameterIndex, new Integer(x), SQLTokenizer.SMALLINT);","    }","    public void setInt(int parameterIndex, int x) throws SQLException {","        checkStatement();","        cmd.setParamValue( parameterIndex, new Integer(x), SQLTokenizer.INT);","    }","    public void setLong(int parameterIndex, long x) throws SQLException {","        checkStatement();","        cmd.setParamValue( parameterIndex, new Long(x), SQLTokenizer.BIGINT);","    }","    public void setFloat(int parameterIndex, float x) throws SQLException {","        checkStatement();","        cmd.setParamValue( parameterIndex, new Float(x), SQLTokenizer.REAL);","    }","    public void setDouble(int parameterIndex, double x) throws SQLException {","        checkStatement();","        cmd.setParamValue( parameterIndex, new Double(x), SQLTokenizer.DOUBLE);","    }","    public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {","        checkStatement();","        cmd.setParamValue( parameterIndex, x, SQLTokenizer.DECIMAL);","    }","    public void setString(int parameterIndex, String x) throws SQLException {","        checkStatement();","        cmd.setParamValue( parameterIndex, x, SQLTokenizer.VARCHAR);","    }","    public void setBytes(int parameterIndex, byte[] x) throws SQLException {","        checkStatement();","        cmd.setParamValue( parameterIndex, x, SQLTokenizer.BINARY);","    }","    public void setDate(int parameterIndex, Date x) throws SQLException {","        checkStatement();","        cmd.setParamValue( parameterIndex, DateTime.valueOf(x), SQLTokenizer.DATE);","    }","    public void setTime(int parameterIndex, Time x) throws SQLException {","        checkStatement();","        cmd.setParamValue( parameterIndex, DateTime.valueOf(x), SQLTokenizer.TIME);","    }","    public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {","        checkStatement();","        cmd.setParamValue( parameterIndex, DateTime.valueOf(x), SQLTokenizer.TIMESTAMP);","    }","    public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {","        checkStatement();","\t\tcmd.setParamValue( parameterIndex, x, SQLTokenizer.LONGVARCHAR, length);","    }","    public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {","        checkStatement();","        throw new java.lang.UnsupportedOperationException(\"Method setUnicodeStream() not yet implemented.\");","    }","    public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {","        checkStatement();","\t\tcmd.setParamValue( parameterIndex, x, SQLTokenizer.LONGVARBINARY, length);","    }","    public void clearParameters() throws SQLException {","        checkStatement();","        cmd.clearParams();","    }","    public void setObject(int parameterIndex, Object x, int targetSqlType, int scale) throws SQLException {","        checkStatement();","\t\tcmd.setParamValue( parameterIndex, x, -1);","    }","    public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {","        checkStatement();","        cmd.setParamValue( parameterIndex, x, -1);","    }","    public void setObject(int parameterIndex, Object x) throws SQLException {","        checkStatement();","        cmd.setParamValue( parameterIndex, x, -1);","    }","    public boolean execute() throws SQLException {","\t\texecuteImp();","        return cmd.getResultSet() != null;","    }","    public void addBatch() throws SQLException {","        checkStatement();","    \ttry{","\t    \tfinal Expressions params = cmd.params;","\t    \tfinal int size = params.size();","\t\t\tExpressionValue[] values = new ExpressionValue[size];","\t    \tfor(int i=0; i\<size; i++){","\t    \t\tvalues[i] = (ExpressionValue)params.get(i).clone();","\t    \t}","\t    \tif(batches == null) batches = new ArrayList();","\t    \tbatches.add(values);","    \t}catch(Exception e){","    \t\tthrow SmallSQLException.createFromException(e);","    \t}","    }","\tpublic void clearBatch() throws SQLException {","        checkStatement();","\t\tif(batches != null) batches.clear();","\t}","    public int[] executeBatch() throws BatchUpdateException {","\t\tif(batches == null || batches.size() == 0) return new int[0];","\t\tint[] result = new int[batches.size()];","\t\tBatchUpdateException failed = null;","\t\tfor(int b=0; b\<batches.size(); b++){","\t\t\ttry{","                checkStatement();","\t\t\t\tExpressionValue[] values = (ExpressionValue[])batches.get(b);","\t\t\t\tfor(int i=0; i\<values.length; i++){","\t\t\t\t\t((ExpressionValue)cmd.params.get(i)).set( values[i] );","\t\t\t\t}","\t\t\t\tresult[b] = executeUpdate();","\t\t\t} catch (SQLException ex) {","\t\t\t\tresult[b] = EXECUTE_FAILED;","\t\t\t\tif(failed == null){","\t\t\t\t\tfailed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);","\t\t\t\t\tfailed.initCause(ex);","\t\t\t\t}","\t\t\t\tfailed.setNextException(ex);","\t\t\t}","\t\t}","    \tbatches.clear();","    \tif(failed != null)","    \t\tthrow failed;","    \treturn result;","\t}","    public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {","        checkStatement();","        throw new java.lang.UnsupportedOperationException(\"Method setCharacterStream() not yet implemented.\");","    }","    public void setRef(int i, Ref x) throws SQLException {","        checkStatement();","        throw new java.lang.UnsupportedOperationException(\"Method setRef() not yet implemented.\");","    }","    public void setBlob(int i, Blob x) throws SQLException {","        checkStatement();","        throw new java.lang.UnsupportedOperationException(\"Method setBlob() not yet implemented.\");","    }","    public void setClob(int i, Clob x) throws SQLException {","        checkStatement();","        throw new java.lang.UnsupportedOperationException(\"Method setClob() not yet implemented.\");","    }","    public void setArray(int i, Array x) throws SQLException {","        checkStatement();","        throw new java.lang.UnsupportedOperationException(\"Method setArray() not yet implemented.\");","    }","    public ResultSetMetaData getMetaData() throws SQLException {","        checkStatement();","\t\tif(cmd instanceof CommandSelect){","\t\t\ttry{","\t\t\t\t((CommandSelect)cmd).compile(con);","\t\t\t\tSSResultSetMetaData metaData = new SSResultSetMetaData();","\t\t\t\tmetaData.columns = cmd.columnExpressions;","\t\t\t\treturn metaData;","\t\t\t}catch(Exception e){","\t\t\t\tthrow SmallSQLException.createFromException(e);","\t\t\t}","\t\t}","\t\treturn null;","    }","    public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {","        checkStatement();","        throw new java.lang.UnsupportedOperationException(\"Method setDate() not yet implemented.\");","    }","    public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {","        checkStatement();","        throw new java.lang.UnsupportedOperationException(\"Method setTime() not yet implemented.\");","    }","    public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {","        checkStatement();","        throw new java.lang.UnsupportedOperationException(\"Method setTimestamp() not yet implemented.\");","    }","    public void setNull(int paramIndex, int sqlType, String typeName) throws SQLException {","        checkStatement();","        throw new java.lang.UnsupportedOperationException(\"Method setNull() not yet implemented.\");","    }","    public void setURL(int parameterIndex, URL x) throws SQLException {","        checkStatement();","        throw new java.lang.UnsupportedOperationException(\"Method setURL() not yet implemented.\");","    }","    public ParameterMetaData getParameterMetaData() throws SQLException {","        checkStatement();","        throw new java.lang.UnsupportedOperationException(\"Method getParameterMetaData() not yet implemented.\");","    }","\t@Override","\tpublic boolean isClosed() throws SQLException {","\t\treturn false;","\t}","\t@Override","\tpublic void setPoolable(boolean poolable) throws SQLException {","\t}","\t@Override","\tpublic boolean isPoolable() throws SQLException {","\t\treturn false;","\t}","\t@Override","\tpublic \<T\> T unwrap(Class\<T\> iface) throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic boolean isWrapperFor(Class\<?\> iface) throws SQLException {","\t\treturn false;","\t}","\t@Override","\tpublic void setRowId(int parameterIndex, RowId x) throws SQLException {","\t}","\t@Override","\tpublic void setNString(int parameterIndex, String value)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void setNCharacterStream(int parameterIndex, Reader value,","\t\t\tlong length) throws SQLException {","\t}","\t@Override","\tpublic void setNClob(int parameterIndex, NClob value) throws SQLException {","\t}","\t@Override","\tpublic void setClob(int parameterIndex, Reader reader, long length)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void setBlob(int parameterIndex, InputStream inputStream, long length)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void setNClob(int parameterIndex, Reader reader, long length)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void setSQLXML(int parameterIndex, SQLXML xmlObject)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void setAsciiStream(int parameterIndex, InputStream x, long length)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void setBinaryStream(int parameterIndex, InputStream x, long length)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void setCharacterStream(int parameterIndex, Reader reader,","\t\t\tlong length) throws SQLException {","\t}","\t@Override","\tpublic void setAsciiStream(int parameterIndex, InputStream x)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void setBinaryStream(int parameterIndex, InputStream x)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void setCharacterStream(int parameterIndex, Reader reader)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void setNCharacterStream(int parameterIndex, Reader value)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void setClob(int parameterIndex, Reader reader) throws SQLException {","\t}","\t@Override","\tpublic void setBlob(int parameterIndex, InputStream inputStream)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void setNClob(int parameterIndex, Reader reader) throws SQLException {","\t}","}"],|project://smallsql/src/smallsql/database/Index.java|:["package smallsql.database;","import java.sql.SQLException;","import java.util.ArrayList;","class Index{","\tfinal IndexNode rootPage;","\tIndex(boolean unique){","\t\trootPage = new IndexNode(unique, (char)-1);","\t}","    Index(IndexNode rootPage){","        this.rootPage = rootPage;","    }","\tIndexScrollStatus createScrollStatus(Expressions expressions){","\t\treturn new IndexScrollStatus(rootPage, expressions);","\t}","\tfinal Object findRows(Expressions expressions, boolean searchNullValues, ArrayList nodeList) throws Exception{","        IndexNode page = rootPage;","        int count = expressions.size();","        for(int i = 0; i \< count; i++){","            page = findRows(page, expressions.get(i), searchNullValues, nodeList);","            if(page == null)","                return null;","            if(i + 1 == count)","                return page.getValue();","            else","                page = (IndexNode)page.getValue();","        }","        throw new Error();","    }","    final Object findRows(Expression[] expressions, boolean searchNullValues, ArrayList nodeList) throws Exception{","        IndexNode page = rootPage;","        int count = expressions.length;","        for(int i = 0; i \< count; i++){","            page = findRows(page, expressions[i], searchNullValues, nodeList);","            if(page == null)","                return null;","            if(i + 1 == count)","                return page.getValue();","            else","                page = (IndexNode)page.getValue();","        }","        throw new Error();","    }","\tfinal private IndexNode findRows(IndexNode page, Expression expr, boolean searchNullValues, ArrayList nodeList) throws Exception{","\t\t\tif(expr.isNull()){","                if(!searchNullValues){","                    return null;","                }","\t\t\t\tpage = findNull(page);","\t\t\t}else{","\t\t\t\tswitch(expr.getDataType()){","\t\t\t\t\tcase SQLTokenizer.REAL:","\t\t\t\t\t\tpage = find( page, floatToBinarySortOrder( expr.getFloat()), 2, nodeList );","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase SQLTokenizer.DOUBLE:","\t\t\t\t\tcase SQLTokenizer.FLOAT:","\t\t\t\t\t\tpage = find( page, doubleToBinarySortOrder( expr.getDouble()), 4, nodeList );","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase SQLTokenizer.TINYINT:","\t\t\t\t\t\tpage = find( page, expr.getInt(), 1, nodeList );","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase SQLTokenizer.SMALLINT:","\t\t\t\t\t\tpage = find( page, shortToBinarySortOrder( expr.getInt()), 1, nodeList );","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase SQLTokenizer.INT:","\t\t\t\t\t\tpage = find( page, intToBinarySortOrder( expr.getInt()), 2, nodeList );","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase SQLTokenizer.BIGINT:","\t\t\t\t\tcase SQLTokenizer.DATE:","\t\t\t\t\tcase SQLTokenizer.TIME:","\t\t\t\t\tcase SQLTokenizer.TIMESTAMP:","\t\t\t\t\tcase SQLTokenizer.SMALLDATETIME:","\t\t\t\t\tcase SQLTokenizer.MONEY:","\t\t\t\t\tcase SQLTokenizer.SMALLMONEY:","\t\t\t\t\t\tpage = find( page, longToBinarySortOrder( expr.getLong()), 4, nodeList );","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase SQLTokenizer.VARCHAR:","\t\t\t\t\tcase SQLTokenizer.NVARCHAR:","\t\t\t\t\tcase SQLTokenizer.LONGVARCHAR:","\t\t\t\t\tcase SQLTokenizer.LONGNVARCHAR:","\t\t\t\t\tcase SQLTokenizer.CLOB:","\t\t\t\t\t\tpage = find( page, stringToBinarySortOrder( expr.getString(), false ), nodeList );","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase SQLTokenizer.NCHAR:","\t\t\t\t\tcase SQLTokenizer.CHAR:","\t\t\t\t\t\tpage = find( page, stringToBinarySortOrder( expr.getString(), true ), nodeList );","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase SQLTokenizer.VARBINARY:","\t\t\t\t\tcase SQLTokenizer.BINARY:","\t\t\t\t\tcase SQLTokenizer.LONGVARBINARY:","\t\t\t\t\tcase SQLTokenizer.BLOB:","\t\t\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:","\t\t\t\t\t\tpage = find( page, bytesToBinarySortOrder( expr.getBytes()), nodeList );","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase SQLTokenizer.BIT:","\t\t\t\t\tcase SQLTokenizer.BOOLEAN:","\t\t\t\t\t\tpage = find( page, expr.getBoolean() ? 2 : 1, 1, nodeList );","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase SQLTokenizer.NUMERIC:","\t\t\t\t\tcase SQLTokenizer.DECIMAL:\t\t\t\t\t\t","\t\t\t\t\t\tpage = find( page, numericToBinarySortOrder( expr.getNumeric() ), nodeList );","\t\t\t\t\t\tbreak;","\t\t\t\t\tdefault: ","\t\t\t\t\t\tthrow new Error(String.valueOf(expr.getDataType()));","\t\t\t\t}","\t\t\t}","\t\t\treturn page;","\t}","\tfinal void addValues( long rowOffset, Expressions expressions ) throws Exception{","\t\tIndexNode page = this.rootPage;","\t\tint count = expressions.size();","\t\tfor(int i=0; i\<count; i++){","\t\t\tExpression expr = expressions.get(i);","\t\t\tboolean isLastValues = (i == count-1);","\t\t\tif(expr.isNull()){","\t\t\t\tpage = addNull(page, rowOffset, isLastValues);","\t\t\t}else{","\t\t\t\tswitch(expr.getDataType()){","\t\t\t\t\tcase SQLTokenizer.REAL:","\t\t\t\t\t\tpage = add( page, rowOffset, floatToBinarySortOrder( expr.getFloat()), isLastValues, 2 );","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase SQLTokenizer.DOUBLE:","\t\t\t\t\tcase SQLTokenizer.FLOAT:","\t\t\t\t\t\tpage = add( page, rowOffset, doubleToBinarySortOrder( expr.getDouble()), isLastValues, 4 );","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase SQLTokenizer.TINYINT:","\t\t\t\t\t\tpage = add( page, rowOffset, expr.getInt(), isLastValues, 1 );","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase SQLTokenizer.SMALLINT:","\t\t\t\t\t\tpage = add( page, rowOffset, shortToBinarySortOrder( expr.getInt()), isLastValues, 1 );","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase SQLTokenizer.INT:","\t\t\t\t\t\tpage = add( page, rowOffset, intToBinarySortOrder( expr.getInt()), isLastValues, 2 );","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase SQLTokenizer.BIGINT:","\t\t\t\t\tcase SQLTokenizer.DATE:","\t\t\t\t\tcase SQLTokenizer.TIME:","\t\t\t\t\tcase SQLTokenizer.TIMESTAMP:","\t\t\t\t\tcase SQLTokenizer.SMALLDATETIME:","\t\t\t\t\tcase SQLTokenizer.MONEY:","\t\t\t\t\tcase SQLTokenizer.SMALLMONEY:","\t\t\t\t\t\tpage = add( page, rowOffset, longToBinarySortOrder( expr.getLong()), isLastValues, 4 );","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase SQLTokenizer.VARCHAR:","\t\t\t\t\tcase SQLTokenizer.NVARCHAR:","\t\t\t\t\tcase SQLTokenizer.LONGVARCHAR:","\t\t\t\t\tcase SQLTokenizer.LONGNVARCHAR:","\t\t\t\t\t\tpage = add( page, rowOffset, stringToBinarySortOrder( expr.getString(), false ), isLastValues );","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase SQLTokenizer.NCHAR:","\t\t\t\t\tcase SQLTokenizer.CHAR:","\t\t\t\t\t\tpage = add( page, rowOffset, stringToBinarySortOrder( expr.getString(), true ), isLastValues );","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase SQLTokenizer.VARBINARY:","\t\t\t\t\tcase SQLTokenizer.BINARY:","\t\t\t\t\tcase SQLTokenizer.LONGVARBINARY:","\t\t\t\t\tcase SQLTokenizer.BLOB:","\t\t\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:","\t\t\t\t\t\tpage = add( page, rowOffset, bytesToBinarySortOrder( expr.getBytes()), isLastValues );","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase SQLTokenizer.BIT:","\t\t\t\t\tcase SQLTokenizer.BOOLEAN:","\t\t\t\t\t\tpage = add( page, rowOffset, expr.getBoolean() ? 2 : 1, isLastValues, 1 );","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase SQLTokenizer.NUMERIC:","\t\t\t\t\tcase SQLTokenizer.DECIMAL:","\t\t\t\t\t\tpage = add( page, rowOffset, numericToBinarySortOrder( expr.getNumeric()), isLastValues );","\t\t\t\t\t\tbreak;","\t\t\t\t\tdefault: ","\t\t\t\t\t\tthrow new Error(String.valueOf(expr.getDataType()));","\t\t\t\t}","\t\t\t}","\t\t}\t\t","\t}","\tfinal void removeValue( long rowOffset, Expressions expressions ) throws Exception{","\t\tArrayList nodeList = new ArrayList();","\t\tObject obj = findRows(expressions, true, nodeList);","\t\tif(!rootPage.getUnique()){","\t\t\tLongTreeList list = (LongTreeList)obj;","\t\t\tlist.remove(rowOffset);","\t\t\tif(list.getSize() \> 0) return;","\t\t}","\t\tIndexNode node = (IndexNode)nodeList.get(nodeList.size()-1);","\t\tnode.clearValue();","\t\tfor(int i = nodeList.size()-2; i \>= 0; i--){","\t\t\tif(!node.isEmpty())","\t\t\t\tbreak;","\t\t\tIndexNode parent = (IndexNode)nodeList.get(i);","\t\t\tparent.removeNode( node.getDigit() );","\t\t\tnode = parent;","\t\t}","\t}","\tfinal private IndexNode findNull(IndexNode page){","\t\treturn page.getChildNode( (char)0 );","\t}","\tfinal private IndexNode addNull(IndexNode page, long rowOffset, boolean isLastValue) throws SQLException{","\t\tif(isLastValue){","\t\t\tpage.addNode( (char)0, rowOffset );","\t\t\treturn null;","\t\t}else","\t\t\treturn page.addRoot((char)0);","\t}","\tfinal private IndexNode find(IndexNode node, long key, int digitCount, ArrayList nodeList){","\t\tfor(int i=digitCount-1; i\>=0; i--){","\t\t\tchar digit = (char)(key \>\> (i\<\<4));","\t\t\tnode = node.getChildNode(digit);","\t\t\tif(node == null) return null;","\t\t\tif(nodeList != null) nodeList.add(node);","\t\t\tif(equals(node.getRemainderValue(), key, i)){","\t\t\t\treturn node;","\t\t\t}","\t\t}","\t\treturn node;","\t}","\tfinal private IndexNode add(IndexNode node, long rowOffset, long key, boolean isLastValue, int digitCount) throws SQLException{","\t\tfor(int i=digitCount-1; i\>=0; i--){","\t\t\tchar digit = (char)(key \>\> (i\<\<4));","\t\t\tif(i == 0){","\t\t\t\tif(isLastValue){","\t\t\t\t\tnode.addNode( digit, rowOffset );","\t\t\t\t\treturn null;","\t\t\t\t}","\t\t\t\treturn node.addRoot(digit);","\t\t\t}","\t\t\tnode = node.addNode(digit);","\t\t\tif(node.isEmpty()){","\t\t\t\tif(isLastValue){","\t\t\t\t\tnode.addRemainderKey( rowOffset, key, i );","\t\t\t\t\treturn null;","\t\t\t\t}","\t\t\t\treturn node.addRootValue( key, i);","\t\t\t}else","\t\t\tif(equals(node.getRemainderValue(), key, i)){","\t\t\t\tif(isLastValue){","\t\t\t\t\tnode.saveValue( rowOffset);","\t\t\t\t\treturn null;","\t\t\t\t}","\t\t\t\treturn node.addRoot();","\t\t\t}\t\t","\t\t}","\t\tthrow new Error();","\t}","\tfinal private IndexNode find(IndexNode node, char[] key, ArrayList nodeList){","\t\tint length = key.length;","\t\tint i=-1;","\t\twhile(true){","\t\t\tchar digit = (i\<0) ? (length == 0 ? (char)1 : 2)","\t\t\t\t\t\t\t  : (key[i]);","\t\t\tnode = node.getChildNode(digit);","\t\t\tif(node == null) return null;","\t\t\tif(nodeList != null) nodeList.add(node);","\t\t\tif(++i == length){","\t\t\t\treturn node;","\t\t\t}","\t\t\tif(equals(node.getRemainderValue(), key, i)){","\t\t\t\treturn node;","\t\t\t}","\t\t}","\t}","\tfinal private IndexNode add(IndexNode node, long rowOffset, char[] key, boolean isLast) throws SQLException{","\t\tint length = key.length;","\t\tint i=-1;","\t\twhile(true){","\t\t\tchar digit = (i\<0) ? (length == 0 ? (char)1 : 2)","\t\t\t\t\t\t\t  : (key[i]);","\t\t\tif(++i == length){","\t\t\t\tif(isLast){","\t\t\t\t\tnode.addNode( digit, rowOffset );","\t\t\t\t\treturn null;","\t\t\t\t}","\t\t\t\treturn node.addRoot(digit);","\t\t\t}","\t\t\tnode = node.addNode(digit);","\t\t\tif(node.isEmpty()){","\t\t\t\tif(isLast){","\t\t\t\t\tnode.addRemainderKey( rowOffset, key, i );","\t\t\t\t\treturn null;","\t\t\t\t}","\t\t\t\treturn node.addRootValue( key, i );","\t\t\t}else","\t\t\tif(equals(node.getRemainderValue(), key, i)){","\t\t\t\tif(isLast){","\t\t\t\t\tnode.saveValue(rowOffset);","\t\t\t\t\treturn null;","\t\t\t\t}","\t\t\t\treturn node.addRoot();","\t\t\t}","\t\t}","\t}","\tfinal void clear(){","\t\trootPage.clear();","\t}","\tfinal static private int floatToBinarySortOrder(float value){","\t\tint intValue = Float.floatToIntBits(value);","\t\treturn (intValue\<0) ?","\t\t\t~intValue :","\t\t\tintValue ^ 0x80000000;\t\t\t","\t}","\tfinal static private long doubleToBinarySortOrder(double value){","\t\tlong intValue = Double.doubleToLongBits(value);","\t\treturn (intValue\<0) ?","\t\t\t~intValue :","\t\t\tintValue ^ 0x8000000000000000L;\t\t\t","\t}","\tfinal static private int shortToBinarySortOrder(int value){","\t\treturn value ^ 0x8000;","\t}","\tfinal static private int intToBinarySortOrder(int value){","\t\treturn value ^ 0x80000000;","\t}","\tfinal static private long longToBinarySortOrder(long value){","\t\treturn value ^ 0x8000000000000000L;","\t}","\tfinal static private char[] stringToBinarySortOrder(String value, boolean needTrim){","\t\tint length = value.length();","\t\tif(needTrim){","\t\t\twhile(length \> 0 && value.charAt(length-1) == \' \') length--;","\t\t}","\t\tchar[] puffer = new char[length];","\t\tfor(int i=0; i\<length; i++){","\t\t\tpuffer[i] = Character.toLowerCase(Character.toUpperCase( value.charAt(i) ));","\t\t}","\t\treturn puffer;","\t}","\tfinal static private char[] bytesToBinarySortOrder(byte[] value){","\t\tint length = value.length;","\t\tchar[] puffer = new char[length];","\t\tfor(int i=0; i\<length; i++){","\t\t\tpuffer[i] = (char)(value[i] & 0xFF);","\t\t}","\t\treturn puffer;","\t}","\tfinal static private char[] numericToBinarySortOrder(MutableNumeric numeric){","\t\tint[] value = numeric.getInternalValue();","\t\tint count = 1;","\t\tint i;","\t\tfor(i=0; i\<value.length; i++){","\t\t\tif(value[i] != 0){","\t\t\t\tcount = 2*(value.length - i)+1;","\t\t\t\tbreak;","\t\t\t}","\t\t}","\t\tchar[] puffer = new char[count];","\t\tpuffer[0] = (char)count;","\t\tfor(int c=1; c\<count;){","\t\t\tpuffer[c++] = (char)(value[i] \>\> 16);","\t\t\tpuffer[c++] = (char)value[i++];","\t\t}","\t\treturn puffer;","\t}","\tprivate final boolean equals(char[] src1, char[] src2, int offset2){","\t\tif(src1 == null) return false;","\t\tint length = src1.length;","\t\tif(length != src2.length - offset2) return false;","\t\tfor(int i=0; i\<length; i++){","\t\t\tif(src1[i] != src2[i+offset2]) return false;","\t\t}","\t\treturn true;","\t}","\tprivate final boolean equals(char[] src1, long src2, int charCount){","\t\tif(src1 == null) return false;","\t\tint length = src1.length;","\t\tif(length != charCount) return false;","\t\tfor(int i=0, d = charCount-1; i\<length; i++){","\t\t\tif(src1[i] != (char)((src2 \>\> (d-- \<\< 4)))) return false;","\t\t}","\t\treturn true;","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|:["package smallsql.database;","public class ExpressionFunctionSoundex extends ExpressionFunctionReturnP1StringAndBinary {","\tfinal int getFunction() {","\t\treturn SQLTokenizer.SOUNDEX;","\t}","\tfinal boolean isNull() throws Exception {","\t\treturn param1.isNull();","\t}","\tfinal byte[] getBytes() throws Exception{","        throw createUnspportedConversion(SQLTokenizer.BINARY);","\t}","\tfinal String getString() throws Exception {","\t\tif(isNull()) return null;","        String input = param1.getString();","        return getString(input);","    }","    static String getString(String input){","        char[] output = new char[4];","        int idx = 0;","        input = input.toUpperCase();","        if(input.length()\>0){","            output[idx++] = input.charAt(0);","        }","        char last = \'0\';","        for(int i=1; idx\<4 && i\<input.length(); i++){","            char c = input.charAt(i);","            switch(c){","            case \'B\':","            case \'F\':","            case \'P\':","            case \'V\':","                c = \'1\';","                break;","            case \'C\':","            case \'G\':","            case \'J\':","            case \'K\':","            case \'Q\':","            case \'S\':","            case \'X\':","            case \'Z\':","                c = \'2\';","                break;","            case \'D\':","            case \'T\':","                c = \'3\';","                break;","            case \'L\':","                c = \'4\';","                break;","            case \'M\':","            case \'N\':","                c = \'5\';","                break;","            case \'R\':","                c = \'6\';","                break;","            default:","                c = \'0\';","                break;","            }","            if(c \> \'0\' && last != c){","                output[idx++] = c;","            }","            last = c;","        }","        for(; idx\<4;){","            output[idx++] = \'0\';","        }","\t\treturn new String(output);","\t}","    int getPrecision(){","        return 4;","    }","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionTan.java|:["package smallsql.database;","final class ExpressionFunctionTan extends ExpressionFunctionReturnFloat {","    final int getFunction(){ return SQLTokenizer.TAN; }","    final double getDouble() throws Exception{","\t\tif(isNull()) return 0;","        return Math.tan( param1.getDouble() );","    }","}"],|project://smallsql/src/smallsql/database/DataSource.java|:["package smallsql.database;","abstract class DataSource extends RowSource{","\tabstract boolean isNull( int colIdx ) throws Exception;","\tabstract boolean getBoolean( int colIdx ) throws Exception;","\tabstract int getInt( int colIdx ) throws Exception;","\tabstract long getLong( int colIdx ) throws Exception;","\tabstract float getFloat( int colIdx ) throws Exception;","\tabstract double getDouble( int colIdx ) throws Exception;","\tabstract long getMoney( int colIdx ) throws Exception;","\tabstract MutableNumeric getNumeric( int colIdx ) throws Exception;","\tabstract Object getObject( int colIdx ) throws Exception;","\tabstract String getString( int colIdx ) throws Exception;","\tabstract byte[] getBytes( int colIdx ) throws Exception;","\tabstract int getDataType( int colIdx );","\tboolean init( SSConnection con ) throws Exception{return false;}","\tString getAlias(){return null;}","\tabstract TableView getTableView();","\tboolean isExpressionsFromThisRowSource(Expressions columns){","        for(int i=0; i\<columns.size(); i++){","            ExpressionName expr = (ExpressionName)columns.get(i);","            if(this != expr.getDataSource()){","                return false;","            }","        }","        return true;","    }","}"],|project://smallsql/src/smallsql/database/View.java|:["package smallsql.database;","import java.io.*;","import java.nio.ByteBuffer;","import java.nio.channels.FileChannel;","import smallsql.database.language.Language;","class View extends TableView{","\tfinal String sql;","\tfinal CommandSelect commandSelect;","\tView(SSConnection con, String name, FileChannel raFile, long offset) throws Exception{","\t\tsuper( name, new Columns() );","\t\tStorePage storePage = new StorePage( null, -1, raFile, offset);","\t\tStoreImpl store = StoreImpl.createStore( null, storePage, SQLTokenizer.SELECT, offset);","\t\tsql = store.readString();","\t\tint type;","\t\twhile((type = store.readInt()) != 0){","\t\t\tint offsetInPage = store.getCurrentOffsetInPage();","\t\t\tint size = store.readInt();","\t\t\tswitch(type){","\t\t\t}","\t\t\tstore.setCurrentOffsetInPage(offsetInPage + size);","\t\t}","\t\traFile.close();","\t\tcommandSelect = (CommandSelect)new SQLParser().parse(con, sql);","\t\tcreateColumns(con);","\t}","\tView(Database database, SSConnection con, String name, String sql) throws Exception{","\t\tsuper( name, new Columns() );","\t\tthis.sql  = sql;","\t\tthis.commandSelect = null;","\t\twrite(database, con);","\t}","\tView(SSConnection con, CommandSelect commandSelect) throws Exception{","\t\tsuper(\"UNION\", new Columns());","\t\tthis.sql = null;","\t\tthis.commandSelect = commandSelect;","\t\tcreateColumns(con);","\t}","\tprivate void createColumns(SSConnection con) throws Exception{","\t\tcommandSelect.compile(con);","\t\tExpressions exprs = commandSelect.columnExpressions;","\t\tfor(int c=0; c\<exprs.size(); c++){","\t\t\tExpression expr = exprs.get(c);","\t\t\tif(expr instanceof ExpressionName){","\t\t\t\tColumn column = ((ExpressionName)expr).getColumn().copy();","\t\t\t\tcolumn.setName( expr.getAlias() );","\t\t\t\tcolumns.add( column );","\t\t\t}else{","\t\t\t\tcolumns.add( new ColumnExpression(expr));","\t\t\t}","\t\t}","\t}","\tstatic void drop(Database database, String name) throws Exception{","\t\tFile file = new File( Utils.createTableViewFileName( database, name ) );","\t\tboolean ok = file.delete();","\t\tif(!ok) throw SmallSQLException.create(Language.VIEW_CANTDROP, name);","\t}","\tprivate void write(Database database, SSConnection con) throws Exception{","\t    FileChannel raFile = createFile( con, database );","\t\tStorePage storePage = new StorePage( null, -1, raFile, 8);","\t\tStoreImpl store = StoreImpl.createStore( null, storePage, SQLTokenizer.CREATE, 8);","\t\tstore.writeString(sql);\t\t","\t\tstore.writeInt( 0 ); ","\t\tstore.writeFinsh(null);","\t\traFile.close();","\t}","\t@Override","    void writeMagic(FileChannel raFile) throws Exception{","        ByteBuffer buffer = ByteBuffer.allocate(8);","        buffer.putInt(MAGIC_VIEW);","        buffer.putInt(TABLE_VIEW_VERSION);","        buffer.position(0);","        raFile.write(buffer);","\t}","}"],|project://smallsql/src/smallsql/database/Utils.java|:["package smallsql.database;","import java.io.File;","import java.io.FileNotFoundException;","import java.io.RandomAccessFile;","import java.nio.channels.FileChannel;","import java.nio.channels.FileLock;","import java.sql.SQLException;","import smallsql.database.language.Language;","class Utils {","\tstatic final String MASTER_FILENAME = \"smallsql.master\";","\tstatic final String TABLE_VIEW_EXTENTION = \".sdb\";","\tprivate static final String LOB_EXTENTION = \".lob\";","\tstatic final String IDX_EXTENTION = \".idx\";","\tprivate static final Integer[] integerCache = new Integer[260];","\tprivate static final Short[]   shortCache   = new Short[260];","\tstatic{","\t\tfor(int i=-4; i\<256; i++){","\t\t\tintegerCache[ i+4 ] = new Integer(i);","\t\t\tshortCache  [ i+4 ] = new Short((short)i);","\t\t}","\t}","    static String createTableViewFileName(Database database, String name){","        return database.getName() + \'/\' + name + TABLE_VIEW_EXTENTION;","    }","\tstatic String createLobFileName(Database database, String name){","\t\treturn database.getName() + \'/\' + name + LOB_EXTENTION;","\t}","\tstatic String createIdxFileName(Database database, String name){","\t\treturn database.getName() + \'/\' + name + IDX_EXTENTION;","\t}","\tstatic boolean like(String value, String pattern){","\t\tif(value == null || pattern == null) return false;","\t\tif(pattern.length() == 0) return true;","\t\tint mIdx = 0;","\t\tint sIdx = 0;","\t\tboolean range = false;","\t\tweiter:","\t\twhile(pattern.length() \> mIdx && value.length() \> sIdx) {","\t\t\tchar m = Character.toUpperCase(pattern.charAt(mIdx++));","\t\t\tswitch(m) {","\t\t\t\tcase \'%\':","\t\t\t\t\trange = true;","\t\t\t\t\tbreak;","\t\t\t\tcase \'_\':","\t\t\t\t\tsIdx++;","\t\t\t\t\tbreak;","\t\t\t\tdefault:","\t\t\t\t\tif(range) {","\t\t\t\t\t\tfor(; sIdx \< value.length(); sIdx++) {","\t\t\t\t\t\t\tif(Character.toUpperCase(value.charAt(sIdx)) == m) break;","\t\t\t\t\t\t}","\t\t\t\t\t\tif(sIdx \>= value.length()) return false;","\t\t\t\t\t\tint lastmIdx = mIdx - 1;","\t\t\t\t\t\tsIdx++;","\t\t\t\t\t\twhile(pattern.length() \> mIdx && value.length() \> sIdx) {","\t\t\t\t\t\t\tm = Character.toUpperCase(pattern.charAt(mIdx++));","\t\t\t\t\t\t\tif(Character.toUpperCase(value.charAt(sIdx)) != m) {","\t\t\t\t\t\t\t\tif(m == \'%\' || m == \'_\') {","\t\t\t\t\t\t\t\t\tmIdx--;","\t\t\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t\tmIdx = lastmIdx;","\t\t\t\t\t\t\t\tcontinue weiter;","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tsIdx++;","\t\t\t\t\t\t}","\t\t\t\t\t\trange = false;","\t\t\t\t\t}else{","\t\t\t\t\t\tif(Character.toUpperCase(value.charAt(sIdx)) != m) return false;","\t\t\t\t\t\tsIdx++;","\t\t\t\t\t}","\t\t\t\t\tbreak;","\t\t\t}","\t\t}","\t\twhile(pattern.length() \> mIdx) {","\t\t\tif(Character.toUpperCase(pattern.charAt(mIdx++)) != \'%\') return false;","\t\t}","\t\twhile(value.length() \> sIdx && !range) return false;","\t\treturn true;","\t}","\tstatic int long2int(long value){","\t\tif(value \> Integer.MAX_VALUE)","\t\t\treturn Integer.MAX_VALUE;","\t\tif(value \< Integer.MIN_VALUE)","\t\t\treturn Integer.MIN_VALUE;","\t\treturn (int)value;","\t}","\tstatic long double2long(double value){","\t\tif(value \> Long.MAX_VALUE)","\t\t\treturn Long.MAX_VALUE;","\t\tif(value \< Long.MIN_VALUE)","\t\t\treturn Long.MIN_VALUE;","\t\treturn (long)value;","\t}","    static float bytes2float( byte[] bytes ){","        return Float.intBitsToFloat( bytes2int( bytes ) );","    }","    static double bytes2double( byte[] bytes ){","        return Double.longBitsToDouble( bytes2long( bytes ) );","    }","    static long bytes2long( byte[] bytes ){","        long result = 0;","        int length = Math.min( 8, bytes.length);","        for(int i=0; i\<length; i++){","            result = (result \<\< 8) | (bytes[i] & 0xFF);","        }","        return result;","    }","    static int bytes2int( byte[] bytes ){","        int result = 0;","        int length = Math.min( 4, bytes.length);","        for(int i=0; i\<length; i++){","            result = (result \<\< 8) | (bytes[i] & 0xFF);","        }","        return result;","    }","    static byte[] double2bytes( double value ){","        return long2bytes(Double.doubleToLongBits(value));","    }","    static byte[] float2bytes( float value ){","        return int2bytes(Float.floatToIntBits(value));","    }","    static byte[] long2bytes( long value ){","        byte[] result = new byte[8];","        result[0] = (byte)(value \>\> 56);","        result[1] = (byte)(value \>\> 48);","        result[2] = (byte)(value \>\> 40);","        result[3] = (byte)(value \>\> 32);","        result[4] = (byte)(value \>\> 24);","        result[5] = (byte)(value \>\> 16);","        result[6] = (byte)(value \>\> 8);","        result[7] = (byte)(value);","        return result;","    }","    static int money2int( long value ) {","\t\tif (value \< Integer.MIN_VALUE) return Integer.MIN_VALUE;","\t\telse if (value \> Integer.MAX_VALUE) return Integer.MAX_VALUE;","\t\telse return (int) value;","\t}","\tstatic byte[] int2bytes( int value ){","\t\tbyte[] result = new byte[4];","\t\tresult[0] = (byte)(value \>\> 24);","\t\tresult[1] = (byte)(value \>\> 16);","\t\tresult[2] = (byte)(value \>\> 8);","\t\tresult[3] = (byte)(value);","\t\treturn result;","\t}","    static String bytes2hex( byte[] bytes ){","        StringBuffer buf = new StringBuffer(bytes.length \<\< 1);","        for(int i=0; i\<bytes.length; i++){","            buf.append( digits[ (bytes[i] \>\> 4) & 0x0F ] );","            buf.append( digits[ (bytes[i]     ) & 0x0F ] );","        }","        return buf.toString();","    }","    static byte[] hex2bytes( char[] hex, int offset, int length) throws SQLException{","        try{","            byte[] bytes = new byte[length / 2];","            for(int i=0; i\<bytes.length; i++){","                bytes[i] = (byte)((hexDigit2int( hex[ offset++ ] ) \<\< 4)","                                | hexDigit2int( hex[ offset++ ] ));","            }","            return bytes;","        }catch(Exception e){","             throw SmallSQLException.create(Language.SEQUENCE_HEX_INVALID, String.valueOf(offset)); ","        }","    }","    private static int hexDigit2int(char digit){","        if(digit \>= \'0\' && digit \<= \'9\') return digit - \'0\';","        digit |= 0x20;","        if(digit \>= \'a\' && digit \<= \'f\') return digit - \'W\'; ","        throw new RuntimeException();","    }","    static byte[] unique2bytes( String unique ) throws SQLException{","        char[] chars = unique.toCharArray();","        byte[] daten = new byte[16];","        daten[3] = hex2byte( chars, 0 );","        daten[2] = hex2byte( chars, 2 );","        daten[1] = hex2byte( chars, 4 );","        daten[0] = hex2byte( chars, 6 );","        daten[5] = hex2byte( chars, 9 );","        daten[4] = hex2byte( chars, 11 );","        daten[7] = hex2byte( chars, 14 );","        daten[6] = hex2byte( chars, 16 );","        daten[8] = hex2byte( chars, 19 );","        daten[9] = hex2byte( chars, 21 );","        daten[10] = hex2byte( chars, 24 );","        daten[11] = hex2byte( chars, 26 );","        daten[12] = hex2byte( chars, 28 );","        daten[13] = hex2byte( chars, 30 );","        daten[14] = hex2byte( chars, 32 );","        daten[15] = hex2byte( chars, 34 );","        return daten;","    }","    private static byte hex2byte( char[] hex, int offset) throws SQLException{","        try{","                return (byte)((hexDigit2int( hex[ offset++ ] ) \<\< 4)","                                | hexDigit2int( hex[ offset++ ] ));","        }catch(Exception e){","             throw SmallSQLException.create(Language.SEQUENCE_HEX_INVALID_STR, new Object[] { new Integer(offset), new String(hex) });","        }","    }","    static String bytes2unique( byte[] daten, int offset ){","    \tif(daten.length-offset \< 16){","    \t\tbyte[] temp = new byte[16];","    \t\tSystem.arraycopy(daten, offset, temp, 0, daten.length-offset);","    \t\tdaten = temp;","    \t}","        char[] chars = new char[36];","        chars[8] = chars[13] = chars[18] = chars[23] = \'-\';","        chars[0] = digits[ (daten[offset+3] \>\> 4) & 0x0F ];","        chars[1] = digits[ (daten[offset+3]     ) & 0x0F ];","        chars[2] = digits[ (daten[offset+2] \>\> 4) & 0x0F ];","        chars[3] = digits[ (daten[offset+2]     ) & 0x0F ];","        chars[4] = digits[ (daten[offset+1] \>\> 4) & 0x0F ];","        chars[5] = digits[ (daten[offset+1]     ) & 0x0F ];","        chars[6] = digits[ (daten[offset+0] \>\> 4) & 0x0F ];","        chars[7] = digits[ (daten[offset+0]     ) & 0x0F ];","        chars[ 9] = digits[ (daten[offset+5] \>\> 4) & 0x0F ];","        chars[10] = digits[ (daten[offset+5]     ) & 0x0F ];","        chars[11] = digits[ (daten[offset+4] \>\> 4) & 0x0F ];","        chars[12] = digits[ (daten[offset+4]     ) & 0x0F ];","        chars[14] = digits[ (daten[offset+7] \>\> 4) & 0x0F ];","        chars[15] = digits[ (daten[offset+7]     ) & 0x0F ];","        chars[16] = digits[ (daten[offset+6] \>\> 4) & 0x0F ];","        chars[17] = digits[ (daten[offset+6]     ) & 0x0F ];","        chars[19] = digits[ (daten[offset+8] \>\> 4) & 0x0F ];","        chars[20] = digits[ (daten[offset+8]     ) & 0x0F ];","        chars[21] = digits[ (daten[offset+9] \>\> 4) & 0x0F ];","        chars[22] = digits[ (daten[offset+9]     ) & 0x0F ];","        chars[24] = digits[ (daten[offset+10] \>\> 4) & 0x0F ];","        chars[25] = digits[ (daten[offset+10]     ) & 0x0F ];","        chars[26] = digits[ (daten[offset+11] \>\> 4) & 0x0F ];","        chars[27] = digits[ (daten[offset+11]     ) & 0x0F ];","        chars[28] = digits[ (daten[offset+12] \>\> 4) & 0x0F ];","        chars[29] = digits[ (daten[offset+12]     ) & 0x0F ];","        chars[30] = digits[ (daten[offset+13] \>\> 4) & 0x0F ];","        chars[31] = digits[ (daten[offset+13]     ) & 0x0F ];","        chars[32] = digits[ (daten[offset+14] \>\> 4) & 0x0F ];","        chars[33] = digits[ (daten[offset+14]     ) & 0x0F ];","        chars[34] = digits[ (daten[offset+15] \>\> 4) & 0x0F ];","        chars[35] = digits[ (daten[offset+15]     ) & 0x0F ];","        return new String(chars);","    }","    static boolean string2boolean( String val){","        try{","            return Double.parseDouble( val ) != 0;","        }catch(NumberFormatException e){}","        return \"true\".equalsIgnoreCase( val ) || \"yes\".equalsIgnoreCase( val ) || \"t\".equalsIgnoreCase( val );","    }","\tstatic long doubleToMoney(double value){","\t\tif(value \< 0)","\t\t\treturn (long)(value * 10000 - 0.5);","\t\treturn (long)(value * 10000 + 0.5);","\t}","    static int indexOf( char value, char[] str, int offset, int length ){","        value |= 0x20;","        for(int end = offset+length;offset \< end; offset++){","            if((str[offset] | 0x20) == value) return offset;","        }","        return -1;","    }","    static int indexOf( int value, int[] list ){","        int offset = 0;","        for(int end = list.length; offset \< end; offset++){","            if((list[offset]) == value) return offset;","        }","        return -1;","    }","    static int indexOf( byte[] value, byte[] list, int offset ){","        int length = value.length;","        loop1:","        for(int end = list.length-length; offset \<= end; offset++){","            for(int i=0; i\<length; i++ ){","                if(list[offset+i] != value[i]){","                    continue loop1;","                }","            }","            return offset;","        }","        return -1;","    }","    static int compareBytes( byte[] leftBytes, byte[] rightBytes){","        int length = Math.min( leftBytes.length, rightBytes.length );","        int comp = 0;","        for(int i=0; i\<length; i++){","            if(leftBytes[i] != rightBytes[i]){","                comp = leftBytes[i] \< rightBytes[i] ? -1 : 1;","                break;","            }","        }","        if(comp == 0 && leftBytes.length != rightBytes.length){","            comp = leftBytes.length \< rightBytes.length ? -1 : 1;","        }","        return comp;","    }","    static CommandSelect createMemoryCommandSelect( SSConnection con, String[] colNames, Object[][] data) throws SQLException{","\t\tMemoryResult source = new MemoryResult(data, colNames.length);","\t\tCommandSelect cmd = new CommandSelect(con.log);","\t\tfor(int i=0; i\<colNames.length; i++){","\t\t\tExpressionName expr = new ExpressionName(colNames[i]);","\t\t\tcmd.addColumnExpression( expr );","\t\t\texpr.setFrom( source, i, source.getColumn(i));","\t\t}","\t\tcmd.setSource(source);","\t\treturn cmd;","    }","\tstatic final Integer getInteger(int value){","\t\tif(value \>= -4 && value \< 256){","\t\t\treturn integerCache[ value+4 ];\t\t","\t\t}else","\t\t\treturn new Integer(value);","\t}","\tstatic final Short getShort(int value){","\t\tif(value \>= -4 && value \< 256){","\t\t\treturn shortCache[ value+4 ];\t\t","\t\t}else","\t\t\treturn new Short((short)value);","\t}","    static final FileChannel openRaFile( File file, boolean readonly ) throws FileNotFoundException, SQLException{","        RandomAccessFile raFile = new RandomAccessFile(file, readonly ? \"r\" : \"rw\" );","        FileChannel channel = raFile.getChannel();","        if( !readonly ){","            try{","                FileLock lock = channel.tryLock();","                if(lock == null){","                    throw SmallSQLException.create(Language.CANT_LOCK_FILE, file);","                }","            }catch(SQLException sqlex){","                throw sqlex;","            }catch(Throwable th){","                throw SmallSQLException.createFromException(Language.CANT_LOCK_FILE, file, th);","            }","        }","        return channel;","    }","    static final Expressions getExpressionNameFromTree(Expression tree){","        Expressions list = new Expressions();","        getExpressionNameFromTree( list, tree );","        return list;","    }","    private static final void getExpressionNameFromTree(Expressions list, Expression tree){","        if(tree.getType() == Expression.NAME ){","            list.add(tree);","        }","        Expression[] params = tree.getParams();","        if(params != null){","            for(int i=0; i\<params.length; i++){","                getExpressionNameFromTree( list, tree );","            }","        }","    }","    final static char[] digits = {\'0\', \'1\', \'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'A\', \'B\', \'C\', \'D\', \'E\', \'F\'};","}"],|project://smallsql/src/smallsql/database/IndexScrollStatus.java|:["package smallsql.database;","class IndexScrollStatus {","\tprivate final IndexNode rootPage;","\tprivate final Expressions expressions; ","\tprivate final java.util.Stack nodeStack = new java.util.Stack(); ","\tprivate LongTreeList longList;","\tprivate LongTreeListEnum longListEnum = new LongTreeListEnum();","\tIndexScrollStatus(IndexNode rootPage, Expressions expressions){\t","\t\tthis.rootPage\t= rootPage;","\t\tthis.expressions= expressions;","\t\treset();","\t}","\tfinal void reset(){","\t\tnodeStack.clear();","\t\tboolean asc = (expressions.get(0).getAlias() != SQLTokenizer.DESC_STR);","\t\tnodeStack.push( new IndexNodeScrollStatus(rootPage, asc, true, 0) );","\t}","\tfinal long getRowOffset( boolean scroll){","\t\tif(longList != null){","\t\t\tlong rowOffset = scroll ? ","\t\t\t\t\t\t\t\tlongList.getNext(longListEnum) : ","\t\t\t\t\t\t\t\tlongList.getPrevious(longListEnum);","\t\t\tif(rowOffset \< 0){","\t\t\t\tlongList = null;","\t\t\t}else{","\t\t\t\treturn rowOffset;","\t\t\t}","\t\t}","\t\twhile(true){","\t\t\tIndexNodeScrollStatus status = (IndexNodeScrollStatus)nodeStack.peek();","\t\t\tint level = status.level;","\t\t\tif(!status.asc ^ scroll){","\t\t\t\tint idx = ++status.idx;","\t\t\t\tif(idx == -1){","\t\t\t\t\tif(status.nodeValue != null){","\t\t\t\t\t\tif(status.nodeValue instanceof IndexNode){","\t\t\t\t\t\t\tlevel++;","\t\t\t\t\t\t\tnodeStack.push(","\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, ","\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), ","\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));","\t\t\t\t\t\t\tcontinue;","\t\t\t\t\t\t}else","\t\t\t\t\t\t\treturn getReturnValue(status.nodeValue);","\t\t\t\t\t}","\t\t\t\t\tidx = ++status.idx;","\t\t\t\t}","\t\t\t\tif(idx \>= status.nodes.length){","\t\t\t\t\tif(nodeStack.size() \> 1){","\t\t\t\t\t\tnodeStack.pop();","\t\t\t\t\t\tcontinue;","\t\t\t\t\t}else{","                        status.idx = status.nodes.length; ","\t\t\t\t\t\treturn -1;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\tIndexNode node = status.nodes[idx];","\t\t\t\tnodeStack.push( new IndexNodeScrollStatus(node, status.asc, scroll, level) );","\t\t\t}else{","\t\t\t\tint idx = --status.idx;","\t\t\t\tif(idx == -1){","\t\t\t\t\tif(status.nodeValue != null){","\t\t\t\t\t\tif(status.nodeValue instanceof IndexNode){","\t\t\t\t\t\t\tlevel++;","\t\t\t\t\t\t\tnodeStack.push(","\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, ","\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), ","\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));","\t\t\t\t\t\t\tcontinue;","\t\t\t\t\t\t}else","\t\t\t\t\t\t\treturn getReturnValue(status.nodeValue);","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\tif(idx \< 0){","\t\t\t\t\tif(nodeStack.size() \> 1){","\t\t\t\t\t\tnodeStack.pop();","\t\t\t\t\t\tcontinue;","\t\t\t\t\t}else{","\t\t\t\t\t\treturn -1;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\tIndexNode node = status.nodes[idx];","\t\t\t\tnodeStack.push( new IndexNodeScrollStatus(node, status.asc, scroll, level) );","\t\t\t}","\t\t}","\t}","\tfinal void afterLast(){","\t\tlongList = null;","\t\tnodeStack.setSize(1);","\t\t((IndexNodeScrollStatus)nodeStack.peek()).afterLast();","\t}","\tprivate final long getReturnValue( Object value){","\t\tif(rootPage.getUnique()){","\t\t\treturn ((Long)value).longValue();","\t\t}else{","\t\t\tlongList = (LongTreeList)value;","\t\t\tlongListEnum.reset();","\t\t\treturn longList.getNext(longListEnum); ","\t\t}","\t}","}"],|project://smallsql/src/smallsql/database/StorePage.java|:["package smallsql.database;","import java.io.*;","import java.nio.ByteBuffer;","import java.nio.channels.FileChannel;","import java.sql.SQLException;","class StorePage extends TransactionStep{","\tbyte[] page; ","\tint pageSize;","\tlong fileOffset; ","\tStorePage(byte[] page, int pageSize, FileChannel raFile, long fileOffset){","\t    super(raFile);","\t\tthis.page = page;","\t\tthis.pageSize = pageSize;","\t\tthis.fileOffset = fileOffset;","\t}","\tfinal void setPageData(byte[] data, int size){","\t\tpage = data;","\t\tpageSize = size;","\t}","\t@Override","    long commit() throws SQLException{","\t\ttry{","\t\t\tif(raFile != null && page != null){","\t\t\t    ByteBuffer buffer = ByteBuffer.wrap( page, 0, pageSize );","\t\t\t    synchronized(raFile){","    \t\t\t\tif(fileOffset \< 0){","    \t\t\t\t\tfileOffset = raFile.size();","    \t\t\t\t}","\t\t\t\t    raFile.position(fileOffset);","\t\t\t\t    raFile.write(buffer);","\t\t\t\t}","\t\t\t}","\t\t\treturn fileOffset;","\t\t}catch(Exception e){","\t\t\tthrow SmallSQLException.createFromException(e);","\t\t}","\t}","\t@Override","    final void rollback(){","\t\traFile = null;","\t}","}"],|project://smallsql/src/smallsql/database/TableViewResult.java|:["package smallsql.database;","import java.sql.SQLException;","import smallsql.database.language.Language;","abstract class TableViewResult extends DataSource {","\tSSConnection con;","\tprivate String alias;","\tprivate long tableTimestamp;","\tint lock = SQLTokenizer.SELECT;","\tstatic TableViewResult createResult(TableView tableView){","\t\tif(tableView instanceof Table)","\t\t\treturn new TableResult((Table)tableView);","\t\treturn new ViewResult( (View)tableView );","\t}","\tstatic TableViewResult getTableViewResult(RowSource from) throws SQLException{","\t\tif(from instanceof Where){","\t\t\tfrom = ((Where)from).getFrom();","\t\t}","\t\tif(from instanceof TableViewResult){","\t\t\treturn (TableViewResult)from;","\t\t}","\t\tthrow SmallSQLException.create(Language.ROWSOURCE_READONLY);","\t}","\tvoid setAlias( String alias ){","\t\tthis.alias = alias;","\t}","\tString getAlias(){","\t\treturn (alias != null) ? alias : getTableView().name;","\t}","\tboolean hasAlias(){","\t\treturn alias != null;","\t}","\tboolean init( SSConnection con ) throws Exception{","\t\tTableView tableView = getTableView();","\t\tif(tableTimestamp != tableView.getTimestamp()){","\t\t\tthis.con = con;","\t\t\ttableTimestamp = tableView.getTimestamp();","\t\t\treturn true;","\t\t}","\t\treturn false;","\t}","\tabstract void deleteRow() throws SQLException;","\tabstract void updateRow(Expression[] updateValues) throws Exception;","\tabstract void insertRow(Expression[] updateValues) throws Exception;","\tfinal boolean isScrollable(){","\t\treturn false;","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionMinute.java|:["package smallsql.database;","final class ExpressionFunctionMinute extends ExpressionFunctionReturnInt {","\tfinal int getFunction() {","\t\treturn SQLTokenizer.MINUTE;","\t}","\tfinal int getInt() throws Exception {","\t\tif(param1.isNull()) return 0;","\t\tDateTime.Details details = new DateTime.Details(param1.getLong());","\t\treturn details.minute;","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionMonth.java|:["package smallsql.database;","final class ExpressionFunctionMonth extends ExpressionFunctionReturnInt {","\tfinal int getFunction() {","\t\treturn SQLTokenizer.MONTH;","\t}","\tfinal int getInt() throws Exception {","\t\tif(param1.isNull()) return 0;","\t\tDateTime.Details details = new DateTime.Details(param1.getLong());","\t\treturn details.month+1;","\t}","}"],|project://smallsql/src/smallsql/database/language/Language.java|:["package smallsql.database.language;","import java.util.HashMap;","import java.util.HashSet;","import java.util.Locale;","import java.util.Map;","import java.util.Set;","public class Language {","\tpublic static final String CUSTOM_MESSAGE\t\t\t= \"SS-0000\";","\tpublic static final String UNSUPPORTED_OPERATION \t= \"SS-0001\";","    public static final String CANT_LOCK_FILE           = \"SS-0003\";","\tpublic static final String DB_EXISTENT \t\t\t\t= \"SS-0030\";","\tpublic static final String DB_NONEXISTENT \t\t\t= \"SS-0031\";","\tpublic static final String DB_NOT_DIRECTORY \t\t= \"SS-0032\";","\tpublic static final String DB_NOTCONNECTED \t\t\t= \"SS-0033\";","\tpublic static final String DB_READONLY              = \"SS-0034\";","\tpublic static final String CONNECTION_CLOSED \t\t= \"SS-0070\";","\tpublic static final String VIEW_INSERT \t\t\t\t= \"SS-0100\";","\tpublic static final String VIEWDROP_NOT_VIEW \t\t= \"SS-0101\";","\tpublic static final String VIEW_CANTDROP \t\t\t= \"SS-0102\";","\tpublic static final String RSET_NOT_PRODUCED \t\t= \"SS-0130\";","\tpublic static final String RSET_READONLY \t\t\t= \"SS-0131\";","\tpublic static final String RSET_FWDONLY\t\t\t\t= \"SS-0132\";","\tpublic static final String RSET_CLOSED\t\t\t\t= \"SS-0133\";","\tpublic static final String RSET_NOT_INSERT_ROW\t\t= \"SS-0134\";","\tpublic static final String RSET_ON_INSERT_ROW\t\t= \"SS-0135\";","\tpublic static final String ROWSOURCE_READONLY\t\t= \"SS-0136\";","    public static final String STMT_IS_CLOSED           = \"SS-0140\";","\tpublic static final String SUBQUERY_COL_COUNT\t\t= \"SS-0160\";","\tpublic static final String JOIN_DELETE\t\t\t\t= \"SS-0161\";","\tpublic static final String JOIN_INSERT\t\t\t\t= \"SS-0162\";","\tpublic static final String DELETE_WO_FROM\t\t\t= \"SS-0163\";","\tpublic static final String INSERT_WO_FROM\t\t\t= \"SS-0164\";","\tpublic static final String TABLE_CANT_RENAME\t\t= \"SS-0190\";","\tpublic static final String TABLE_CANT_DROP\t\t\t= \"SS-0191\";","\tpublic static final String TABLE_CANT_DROP_LOCKED\t= \"SS-0192\";","\tpublic static final String TABLE_CORRUPT_PAGE\t\t= \"SS-0193\";","\tpublic static final String TABLE_MODIFIED\t\t\t= \"SS-0194\";","\tpublic static final String TABLE_DEADLOCK\t\t\t= \"SS-0195\";","\tpublic static final String TABLE_OR_VIEW_MISSING\t= \"SS-0196\";","\tpublic static final String TABLE_FILE_INVALID\t\t= \"SS-0197\";","\tpublic static final String TABLE_OR_VIEW_FILE_INVALID = \"SS-0198\";","\tpublic static final String TABLE_EXISTENT\t\t\t= \"SS-0199\";","\tpublic static final String FK_NOT_TABLE\t\t\t\t= \"SS-0220\";","\tpublic static final String PK_ONLYONE\t\t\t\t= \"SS-0221\";","\tpublic static final String KEY_DUPLICATE\t\t\t= \"SS-0222\";","\tpublic static final String MONTH_TOOLARGE \t\t\t= \"SS-0251\";","\tpublic static final String DAYS_TOOLARGE \t\t\t= \"SS-0252\";","\tpublic static final String HOURS_TOOLARGE \t\t\t= \"SS-0253\";","\tpublic static final String MINUTES_TOOLARGE \t\t= \"SS-0254\";","\tpublic static final String SECS_TOOLARGE \t\t\t= \"SS-0255\";","\tpublic static final String MILLIS_TOOLARGE \t\t\t= \"SS-0256\";","\tpublic static final String DATETIME_INVALID \t\t= \"SS-0257\";","\tpublic static final String UNSUPPORTED_CONVERSION_OPER = \"SS-0280\";","\tpublic static final String UNSUPPORTED_DATATYPE_OPER = \"SS-0281\";","\tpublic static final String UNSUPPORTED_DATATYPE_FUNC = \"SS-0282\";","\tpublic static final String UNSUPPORTED_CONVERSION_FUNC = \"SS-0283\";","\tpublic static final String UNSUPPORTED_TYPE_CONV \t= \"SS-0284\";","\tpublic static final String UNSUPPORTED_TYPE_SUM \t= \"SS-0285\";","\tpublic static final String UNSUPPORTED_TYPE_MAX \t= \"SS-0286\";","\tpublic static final String UNSUPPORTED_CONVERSION \t= \"SS-0287\";","\tpublic static final String INSERT_INVALID_LEN \t\t= \"SS-0288\";","\tpublic static final String SUBSTR_INVALID_LEN \t\t= \"SS-0289\";","\tpublic static final String VALUE_STR_TOOLARGE \t\t= \"SS-0310\";","\tpublic static final String VALUE_BIN_TOOLARGE \t\t= \"SS-0311\";","\tpublic static final String VALUE_NULL_INVALID \t\t= \"SS-0312\";","\tpublic static final String VALUE_CANT_CONVERT \t\t= \"SS-0313\";","\tpublic static final String BYTEARR_INVALID_SIZE \t= \"SS-0340\";","\tpublic static final String LOB_DELETED \t\t\t\t= \"SS-0341\";","\tpublic static final String PARAM_CLASS_UNKNOWN \t\t= \"SS-0370\";","\tpublic static final String PARAM_EMPTY \t\t\t\t= \"SS-0371\";","\tpublic static final String PARAM_IDX_OUT_RANGE \t\t= \"SS-0372\";","\tpublic static final String COL_DUPLICATE \t\t\t= \"SS-0400\";","\tpublic static final String COL_MISSING \t\t\t\t= \"SS-0401\";","\tpublic static final String COL_VAL_UNMATCH \t\t\t= \"SS-0402\";","\tpublic static final String COL_INVALID_SIZE \t\t= \"SS-0403\";","\tpublic static final String COL_WRONG_PREFIX \t\t= \"SS-0404\";","\tpublic static final String COL_READONLY \t\t\t= \"SS-0405\";","\tpublic static final String COL_INVALID_NAME \t\t= \"SS-0406\";","\tpublic static final String COL_IDX_OUT_RANGE \t\t= \"SS-0407\";","\tpublic static final String COL_AMBIGUOUS \t\t\t= \"SS-0408\";","\tpublic static final String GROUP_AGGR_INVALID \t\t= \"SS-0430\";","\tpublic static final String GROUP_AGGR_NOTPART \t\t= \"SS-0431\";","\tpublic static final String ORDERBY_INTERNAL \t\t= \"SS-0432\";","\tpublic static final String UNION_DIFFERENT_COLS \t= \"SS-0433\";","\tpublic static final String INDEX_EXISTS \t\t\t= \"SS-0460\";","\tpublic static final String INDEX_MISSING \t\t\t= \"SS-0461\";","\tpublic static final String INDEX_FILE_INVALID \t\t= \"SS-0462\";","\tpublic static final String INDEX_CORRUPT \t\t\t= \"SS-0463\";","\tpublic static final String INDEX_TOOMANY_EQUALS \t= \"SS-0464\";","\tpublic static final String FILE_TOONEW \t\t\t\t= \"SS-0490\";","\tpublic static final String FILE_TOOOLD \t\t\t\t= \"SS-0491\";","    public static final String FILE_CANT_DELETE         = \"SS-0492\";","\tpublic static final String ROW_0_ABSOLUTE \t\t\t= \"SS-0520\";","\tpublic static final String ROW_NOCURRENT \t\t\t= \"SS-0521\";","\tpublic static final String ROWS_WRONG_MAX \t\t\t= \"SS-0522\";","\tpublic static final String ROW_LOCKED \t\t\t\t= \"SS-0523\";","\tpublic static final String ROW_DELETED \t\t\t\t= \"SS-0524\";","\tpublic static final String SAVEPT_INVALID_TRANS \t= \"SS-0550\";","\tpublic static final String SAVEPT_INVALID_DRIVER \t= \"SS-0551\";","\tpublic static final String ALIAS_UNSUPPORTED \t\t= \"SS-0580\";","\tpublic static final String ISOLATION_UNKNOWN \t\t= \"SS-0581\";","\tpublic static final String FLAGVALUE_INVALID \t\t= \"SS-0582\";","\tpublic static final String ARGUMENT_INVALID \t\t= \"SS-0583\";","\tpublic static final String GENER_KEYS_UNREQUIRED \t= \"SS-0584\";","\tpublic static final String SEQUENCE_HEX_INVALID \t= \"SS-0585\";","\tpublic static final String SEQUENCE_HEX_INVALID_STR = \"SS-0586\";","\tpublic static final String SYNTAX_BASE_OFS\t\t\t= \"SS-0610\";","\tpublic static final String SYNTAX_BASE_END\t\t\t= \"SS-0611\";","\tpublic static final String STXADD_ADDITIONAL_TOK\t= \"SS-0612\";","\tpublic static final String STXADD_IDENT_EXPECT\t\t= \"SS-0613\";","\tpublic static final String STXADD_IDENT_EMPTY\t\t= \"SS-0614\";","\tpublic static final String STXADD_IDENT_WRONG\t\t= \"SS-0615\";","\tpublic static final String STXADD_OPER_MINUS\t\t= \"SS-0616\";\t","\tpublic static final String STXADD_FUNC_UNKNOWN\t\t= \"SS-0617\";\t","\tpublic static final String STXADD_PARAM_INVALID_COUNT\t= \"SS-0618\";","\tpublic static final String STXADD_JOIN_INVALID\t\t= \"SS-0619\";","\tpublic static final String STXADD_FROM_PAR_CLOSE\t= \"SS-0620\";","\tpublic static final String STXADD_KEYS_REQUIRED\t\t= \"SS-0621\";","\tpublic static final String STXADD_NOT_NUMBER\t\t= \"SS-0622\";","\tpublic static final String STXADD_COMMENT_OPEN\t\t= \"SS-0623\";","\tprivate Map messages;","\tprivate Map sqlStates;","\tpublic static Language getLanguage(String localeStr) {","\t\ttry {","\t\t\treturn getFromLocaleTree(localeStr);","\t\t}","\t\tcatch (IllegalArgumentException e) {","\t\t\treturn getDefaultLanguage();","\t\t}","\t}","\tpublic static Language getDefaultLanguage() {\t\t","\t\tString dfltLocaleStr = Locale.getDefault().toString();","\t\ttry {","\t\t\treturn getFromLocaleTree(dfltLocaleStr);","\t\t}","\t\tcatch (IllegalArgumentException e) {","\t\t\treturn new Language(); ","\t\t}","\t}","\tprivate static Language getFromLocaleTree(String localeStr) ","\tthrows IllegalArgumentException {","\t\tString part = localeStr;","\t\twhile (true) {","\t\t\tString langClassName = Language.class.getName() + \'_\' + part;","\t\t\ttry {","\t\t\t\treturn (Language) Class.forName(langClassName).newInstance();","\t\t\t}","\t\t\tcatch (IllegalAccessException e) {","\t\t\t\t assert(false): \"Internal error: must never happen.\";","\t\t\t}","\t\t\tcatch (ClassNotFoundException e) { ","\t\t\t}","\t\t\tcatch (InstantiationException e) { ","\t\t\t\tassert(false): \"Error during Language instantiation: \" + e.getMessage();","\t\t\t}","\t\t\tint lastUndsc = part.lastIndexOf(\"_\");","\t\t\tif (lastUndsc \> -1) part = part.substring(0, lastUndsc);","\t\t\telse break;\t\t\t","\t\t}","\t\tthrow new IllegalArgumentException(\"Locale not found in the tree: \" + localeStr);","\t}","\tprotected Language() {","\t\tmessages = new HashMap((int)(MESSAGES.length / 0.7)); ","\t\tsqlStates = new HashMap((int)(MESSAGES.length / 0.7)); ","\t\taddMessages(MESSAGES);","\t\tsetSqlStates();","\t}","\tprotected final void addMessages(String[][] entries) ","\tthrows IllegalArgumentException {","\t\tSet inserted = new HashSet(); ","\t\tfor (int i = 0; i \< entries.length; i++) {","\t\t\tString key = entries[i][0];","\t\t\tif (! inserted.add(key)) {","\t\t\t\tthrow new IllegalArgumentException(\"Duplicate key: \" + key);","\t\t\t}","\t\t\telse {","\t\t\t\tString value = entries[i][1];","\t\t\t\tmessages.put(key, value);","\t\t\t}","\t\t}","\t}","\tprivate final void setSqlStates() {","\t\tSet inserted = new HashSet(); ","\t\tfor (int i = 0; i \< SQL_STATES.length; i++) {","\t\t\tString key = SQL_STATES[i][0];","\t\t\tif (! inserted.add(key)) {","\t\t\t\tthrow new IllegalArgumentException(\"Duplicate key: \" + key);","\t\t\t}","\t\t\telse {","\t\t\t\tString value = SQL_STATES[i][1];","\t\t\t\tsqlStates.put(key, value);","\t\t\t}","\t\t}","\t}","\tpublic String getMessage(String key) {","\t\tString message = (String) messages.get(key);","\t\tassert(message != null): \"Message code not found: \" + key;","\t\treturn message;","\t}","\tpublic String getSqlState(String key) {","\t\tString sqlState = (String) sqlStates.get(key);","\t\tassert(sqlState != null): \"SQL State code not found: \" + key;","\t\treturn sqlState;","\t}","\tpublic String[][] getEntries() {","\t\treturn MESSAGES;","\t}","\tprivate final String[][] MESSAGES = {","{ CUSTOM_MESSAGE           \t\t  , \"{0}\" },","{ UNSUPPORTED_OPERATION           , \"Unsupported Operation {0}.\" },","{ CANT_LOCK_FILE                  , \"Can\'\'t lock file \'\'{0}\'\'. A single SmallSQL Database can only be opened from a single process.\" },","{ DB_EXISTENT                     , \"Database \'\'{0}\'\' already exists.\" },","{ DB_NONEXISTENT                  , \"Database \'\'{0}\'\' does not exist.\" },","{ DB_NOT_DIRECTORY                , \"Directory \'\'{0}\'\' is not a SmallSQL database.\" },","{ DB_NOTCONNECTED                 , \"You are not connected with a Database.\" },","{ CONNECTION_CLOSED               , \"Connection is already closed.\" },","{ VIEW_INSERT                     , \"INSERT is not supported for a view.\" },","{ VIEWDROP_NOT_VIEW               , \"Cannot use DROP VIEW with \'\'{0}\'\' because it does not is a view.\" },","{ VIEW_CANTDROP                   , \"View \'\'{0}\'\' can\'\'t be dropped.\" },","{ RSET_NOT_PRODUCED               , \"No ResultSet was produced.\" },","{ RSET_READONLY                   , \"ResultSet is read only.\" },","{ RSET_FWDONLY                    , \"ResultSet is forward only.\" },","{ RSET_CLOSED                     , \"ResultSet is closed.\" },","{ RSET_NOT_INSERT_ROW             , \"Cursor is currently not on the insert row.\" },","{ RSET_ON_INSERT_ROW              , \"Cursor is currently on the insert row.\" },","{ ROWSOURCE_READONLY              , \"Rowsource is read only.\" },","{ STMT_IS_CLOSED                  , \"Statement is already closed.\" },","{ SUBQUERY_COL_COUNT              , \"Count of columns in subquery must be 1 and not {0}.\" },","{ JOIN_DELETE                     , \"The method deleteRow not supported on joins.\" },","{ JOIN_INSERT                     , \"The method insertRow not supported on joins.\" },","{ DELETE_WO_FROM                  , \"The method deleteRow need a FROM expression.\" },","{ INSERT_WO_FROM                  , \"The method insertRow need a FROM expression.\" },","{ TABLE_CANT_RENAME               , \"Table \'\'{0}\'\' can\'\'t be renamed.\" },","{ TABLE_CANT_DROP                 , \"Table \'\'{0}\'\' can\'\'t be dropped.\" },","{ TABLE_CANT_DROP_LOCKED          , \"Table \'\'{0}\'\' can\'\'t drop because is locked.\" },","{ TABLE_CORRUPT_PAGE              , \"Corrupt table page at position: {0}.\" },","{ TABLE_MODIFIED                  , \"Table \'\'{0}\'\' was modified.\" },","{ TABLE_DEADLOCK                  , \"Deadlock, can not create a lock on table \'\'{0}\'\'.\" },","{ TABLE_OR_VIEW_MISSING           , \"Table or View \'\'{0}\'\' does not exist.\" },","{ TABLE_FILE_INVALID              , \"File \'\'{0}\'\' does not include a valid SmallSQL Table.\" },","{ TABLE_OR_VIEW_FILE_INVALID      , \"File \'\'{0}\'\' is not a valid Table or View store.\" },","{ TABLE_EXISTENT                  , \"Table or View \'\'{0}\'\' already exists.\" },","{ FK_NOT_TABLE                    , \"\'\'{0}\'\' is not a table.\" },","{ PK_ONLYONE                      , \"A table can have only one primary key.\" },","{ KEY_DUPLICATE                   , \"Duplicate Key.\" },","{ MONTH_TOOLARGE                  , \"Months are too large in DATE or TIMESTAMP value \'\'{0}\'\'.\" },","{ DAYS_TOOLARGE                   , \"Days are too large in DATE or TIMESTAMP value \'\'{0}\'\'.\" },","{ HOURS_TOOLARGE                  , \"Hours are too large in TIME or TIMESTAMP value \'\'{0}\'\'.\" },","{ MINUTES_TOOLARGE                , \"Minutes are too large in TIME or TIMESTAMP value \'\'{0}\'\'.\" },","{ SECS_TOOLARGE                   , \"Seconds are too large in TIME or TIMESTAMP value \'\'{0}\'\'.\" },","{ MILLIS_TOOLARGE                 , \"Milliseconds are too large in TIMESTAMP value \'\'{0}\'\'.\" },","{ DATETIME_INVALID                , \"\'\'{0}\'\' is an invalid DATE, TIME or TIMESTAMP.\" },","{ UNSUPPORTED_CONVERSION_OPER     , \"Unsupported conversion to data type \'\'{0}\'\' from data type \'\'{1}\'\' for operation \'\'{2}\'\'.\" },","{ UNSUPPORTED_DATATYPE_OPER       , \"Unsupported data type \'\'{0}\'\' for operation \'\'{1}\'\'.\" },","{ UNSUPPORTED_DATATYPE_FUNC       , \"Unsupported data type \'\'{0}\'\' for function \'\'{1}\'\'.\" },","{ UNSUPPORTED_CONVERSION_FUNC     , \"Unsupported conversion to data type \'\'{0}\'\' for function \'\'{1}\'\'.\" },","{ UNSUPPORTED_TYPE_CONV           , \"Unsupported type for CONVERT function: {0}.\" },","{ UNSUPPORTED_TYPE_SUM            , \"Unsupported data type \'\'{0}\'\' for SUM function.\" },","{ UNSUPPORTED_TYPE_MAX            , \"Unsupported data type \'\'{0}\'\' for MAX function.\" },","{ UNSUPPORTED_CONVERSION          , \"Can\'\'t convert \'\'{0}\'\' [{1}] to \'\'{2}\'\'.\" },","{ INSERT_INVALID_LEN              , \"Invalid length \'\'{0}\'\' in function INSERT.\" },","{ SUBSTR_INVALID_LEN              , \"Invalid length \'\'{0}\'\' in function SUBSTRING.\" },","{ VALUE_STR_TOOLARGE              , \"String value too large for column.\" },","{ VALUE_BIN_TOOLARGE              , \"Binary value with length {0} to large for column with size {1}.\" },","{ VALUE_NULL_INVALID              , \"Null values are not valid for column \'\'{0}\'\'.\" },","{ VALUE_CANT_CONVERT              , \"Cannot convert a {0} value to a {1} value.\" },","{ BYTEARR_INVALID_SIZE            , \"Invalid byte array size {0} for UNIQUEIDENFIER.\" },","{ LOB_DELETED                     , \"Lob Object was deleted.\" },","{ PARAM_CLASS_UNKNOWN             , \"Unknown parameter class: \'\'{0}\'\'.\" },","{ PARAM_EMPTY                     , \"Parameter {0} is empty.\" },","{ PARAM_IDX_OUT_RANGE             , \"Parameter index {0} out of range. The value must be between 1 and {1}.\" },","{ COL_DUPLICATE                \t  , \"There is a duplicated column name: \'\'{0}\'\'.\" },","{ COL_MISSING                     , \"Column \'\'{0}\'\' not found.\" },","{ COL_VAL_UNMATCH                 , \"Columns and Values count is not identical.\" },","{ COL_INVALID_SIZE                , \"Invalid column size {0} for column \'\'{1}\'\'.\" },","{ COL_WRONG_PREFIX                , \"The column prefix \'\'{0}\'\' does not match with a table name or alias name used in this query.\" },","{ COL_READONLY                    , \"Column {0} is read only.\" },","{ COL_INVALID_NAME                , \"Invalid column name \'\'{0}\'\'.\" },","{ COL_IDX_OUT_RANGE               , \"Column index out of range: {0}.\" },","{ COL_AMBIGUOUS                   , \"Column \'\'{0}\'\' is ambiguous.\" },","{ GROUP_AGGR_INVALID              , \"Aggregate function are not valid in the GROUP BY clause ({0}).\" },","{ GROUP_AGGR_NOTPART              , \"Expression \'\'{0}\'\' is not part of a aggregate function or GROUP BY clause.\" },","{ ORDERBY_INTERNAL                , \"Internal Error with ORDER BY.\" },","{ UNION_DIFFERENT_COLS            , \"Different SELECT of the UNION have different column count: {0} and {1}.\" },","{ INDEX_EXISTS                    , \"Index \'\'{0}\'\' already exists.\" },","{ INDEX_MISSING                   , \"Index \'\'{0}\'\' does not exist.\" },","{ INDEX_FILE_INVALID              , \"File \'\'{0}\'\' is not a valid Index store.\" },","{ INDEX_CORRUPT                   , \"Error in loading Index. Index file is corrupt. ({0}).\" },","{ INDEX_TOOMANY_EQUALS            , \"Too many equals entry in Index.\" },","{ FILE_TOONEW                     , \"File version ({0}) of file \'\'{1}\'\' is too new for this runtime.\" },","{ FILE_TOOOLD                     , \"File version ({0}) of file \'\'{1}\'\' is too old for this runtime.\" },","{ FILE_CANT_DELETE                , \"File \'\'{0}\'\' can\'t be deleted.\" },","{ ROW_0_ABSOLUTE                  , \"Row 0 is invalid for method absolute().\" },","{ ROW_NOCURRENT                   , \"No current row.\" },","{ ROWS_WRONG_MAX                  , \"Wrong max rows value: {0}.\" },","{ ROW_LOCKED                      , \"Row is locked from another Connection.\" },","{ ROW_DELETED                     , \"Row already deleted.\" },","{ SAVEPT_INVALID_TRANS            , \"Savepoint is not valid for this transaction.\" },","{ SAVEPT_INVALID_DRIVER           , \"Savepoint is not valid for this driver {0}.\" },","{ ALIAS_UNSUPPORTED               , \"Alias not supported for this type of row source.\" },","{ ISOLATION_UNKNOWN               , \"Unknown Transaction Isolation Level: {0}.\" },","{ FLAGVALUE_INVALID               , \"Invalid flag value in method getMoreResults: {0}.\" },","{ ARGUMENT_INVALID                , \"Invalid argument in method setNeedGenratedKeys: {0}.\" },","{ GENER_KEYS_UNREQUIRED           , \"GeneratedKeys not requested.\" },","{ SEQUENCE_HEX_INVALID            , \"Invalid hex sequence at {0}.\" },","{ SEQUENCE_HEX_INVALID_STR        , \"Invalid hex sequence at position {0} in \'\'{1}\'\'.\" },","{ SYNTAX_BASE_OFS            \t  , \"Syntax error at offset {0} on \'\'{1}\'\'. \" },","{ SYNTAX_BASE_END        \t\t  , \"Syntax error, unexpected end of SQL string. \" },","{ STXADD_ADDITIONAL_TOK\t\t\t  , \"Additional token after end of SQL statement.\" },","{ STXADD_IDENT_EXPECT\t\t\t  , \"Identifier expected.\" },","{ STXADD_IDENT_EMPTY \t\t\t  , \"Empty Identifier.\" },","{ STXADD_IDENT_WRONG \t\t\t  , \"Wrong Identifier \'\'{0}\'\'.\" },","{ STXADD_OPER_MINUS \t\t\t  , \"Invalid operator minus for data type VARBINARY.\" },","{ STXADD_FUNC_UNKNOWN \t\t\t  , \"Unknown function.\" },","{ STXADD_PARAM_INVALID_COUNT\t  , \"Invalid parameter count.\" },","{ STXADD_JOIN_INVALID\t  \t\t  , \"Invalid Join Syntax.\" },","{ STXADD_FROM_PAR_CLOSE\t  \t\t  , \"Unexpected closing parenthesis in FROM clause.\" },","{ STXADD_KEYS_REQUIRED\t  \t\t  , \"Required keywords are: \" },","{ STXADD_NOT_NUMBER\t  \t\t      , \"Number value required (passed = \'\'{0}\'\').\" },","{ STXADD_COMMENT_OPEN\t\t\t  , \"Missing end comment mark (\'\'*/\'\').\" },","\t};","\tprivate final String[][] SQL_STATES = {","{ CUSTOM_MESSAGE           \t\t  , \"01000\" },","{ UNSUPPORTED_OPERATION           , \"01000\" },","{ CANT_LOCK_FILE                  , \"01000\" },","{ DB_EXISTENT                     , \"01000\" },","{ DB_NONEXISTENT                  , \"01000\" },","{ DB_NOT_DIRECTORY                , \"01000\" },","{ DB_NOTCONNECTED                 , \"01000\" },","{ CONNECTION_CLOSED               , \"01000\" },","{ VIEW_INSERT                     , \"01000\" },","{ VIEWDROP_NOT_VIEW               , \"01000\" },","{ VIEW_CANTDROP                   , \"01000\" },","{ RSET_NOT_PRODUCED               , \"01000\" },","{ RSET_READONLY                   , \"01000\" },","{ RSET_FWDONLY                    , \"01000\" },","{ RSET_CLOSED                     , \"01000\" },","{ RSET_NOT_INSERT_ROW             , \"01000\" },","{ RSET_ON_INSERT_ROW              , \"01000\" },","{ ROWSOURCE_READONLY              , \"01000\" },","{ STMT_IS_CLOSED                  , \"HY010\" },","{ SUBQUERY_COL_COUNT              , \"01000\" },","{ JOIN_DELETE                     , \"01000\" },","{ JOIN_INSERT                     , \"01000\" },","{ DELETE_WO_FROM                  , \"01000\" },","{ INSERT_WO_FROM                  , \"01000\" },","{ TABLE_CANT_RENAME               , \"01000\" },","{ TABLE_CANT_DROP                 , \"01000\" },","{ TABLE_CANT_DROP_LOCKED          , \"01000\" },","{ TABLE_CORRUPT_PAGE              , \"01000\" },","{ TABLE_MODIFIED                  , \"01000\" },","{ TABLE_DEADLOCK                  , \"01000\" },","{ TABLE_OR_VIEW_MISSING           , \"01000\" },","{ TABLE_FILE_INVALID              , \"01000\" },","{ TABLE_OR_VIEW_FILE_INVALID      , \"01000\" },","{ TABLE_EXISTENT                  , \"01000\" },","{ FK_NOT_TABLE                    , \"01000\" },","{ PK_ONLYONE                      , \"01000\" },","{ KEY_DUPLICATE                   , \"01000\" },","{ MONTH_TOOLARGE                  , \"01000\" },","{ DAYS_TOOLARGE                   , \"01000\" },","{ HOURS_TOOLARGE                  , \"01000\" },","{ MINUTES_TOOLARGE                , \"01000\" },","{ SECS_TOOLARGE                   , \"01000\" },","{ MILLIS_TOOLARGE                 , \"01000\" },","{ DATETIME_INVALID                , \"01000\" },","{ UNSUPPORTED_CONVERSION_OPER     , \"01000\" },","{ UNSUPPORTED_DATATYPE_OPER       , \"01000\" },","{ UNSUPPORTED_DATATYPE_FUNC       , \"01000\" },","{ UNSUPPORTED_CONVERSION_FUNC     , \"01000\" },","{ UNSUPPORTED_TYPE_CONV           , \"01000\" },","{ UNSUPPORTED_TYPE_SUM            , \"01000\" },","{ UNSUPPORTED_TYPE_MAX            , \"01000\" },","{ UNSUPPORTED_CONVERSION          , \"01000\" },","{ INSERT_INVALID_LEN              , \"01000\" },","{ SUBSTR_INVALID_LEN              , \"01000\" },","{ VALUE_STR_TOOLARGE              , \"01000\" },","{ VALUE_BIN_TOOLARGE              , \"01000\" },","{ VALUE_NULL_INVALID              , \"01000\" },","{ VALUE_CANT_CONVERT              , \"01000\" },","{ BYTEARR_INVALID_SIZE            , \"01000\" },","{ LOB_DELETED                     , \"01000\" },","{ PARAM_CLASS_UNKNOWN             , \"01000\" },","{ PARAM_EMPTY                     , \"01000\" },","{ PARAM_IDX_OUT_RANGE             , \"01000\" },","{ COL_DUPLICATE                \t  , \"01000\" },","{ COL_MISSING                     , \"01000\" },","{ COL_VAL_UNMATCH                 , \"01000\" },","{ COL_INVALID_SIZE                , \"01000\" },","{ COL_WRONG_PREFIX                , \"01000\" },","{ COL_READONLY                    , \"01000\" },","{ COL_INVALID_NAME                , \"01000\" },","{ COL_IDX_OUT_RANGE               , \"01000\" },","{ COL_AMBIGUOUS                   , \"01000\" },","{ GROUP_AGGR_INVALID              , \"01000\" },","{ GROUP_AGGR_NOTPART              , \"01000\" },","{ ORDERBY_INTERNAL                , \"01000\" },","{ UNION_DIFFERENT_COLS            , \"01000\" },","{ INDEX_EXISTS                    , \"01000\" },","{ INDEX_MISSING                   , \"01000\" },","{ INDEX_FILE_INVALID              , \"01000\" },","{ INDEX_CORRUPT                   , \"01000\" },","{ INDEX_TOOMANY_EQUALS            , \"01000\" },","{ FILE_TOONEW                     , \"01000\" },","{ FILE_TOOOLD                     , \"01000\" },","{ FILE_CANT_DELETE                , \"01000\" },","{ ROW_0_ABSOLUTE                  , \"01000\" },","{ ROW_NOCURRENT                   , \"01000\" },","{ ROWS_WRONG_MAX                  , \"01000\" },","{ ROW_LOCKED                      , \"01000\" },","{ ROW_DELETED                     , \"01000\" },","{ SAVEPT_INVALID_TRANS            , \"01000\" },","{ SAVEPT_INVALID_DRIVER           , \"01000\" },","{ ALIAS_UNSUPPORTED               , \"01000\" },","{ ISOLATION_UNKNOWN               , \"01000\" },","{ FLAGVALUE_INVALID               , \"01000\" },","{ ARGUMENT_INVALID                , \"01000\" },","{ GENER_KEYS_UNREQUIRED           , \"01000\" },","{ SEQUENCE_HEX_INVALID            , \"01000\" },","{ SEQUENCE_HEX_INVALID_STR        , \"01000\" },","{ SYNTAX_BASE_OFS            \t  , \"01000\" },","{ SYNTAX_BASE_END        \t\t  , \"01000\" },","{ STXADD_ADDITIONAL_TOK\t\t\t  , \"01000\" },","{ STXADD_IDENT_EXPECT\t\t\t  , \"01000\" },","{ STXADD_IDENT_EMPTY \t\t\t  , \"01000\" },","{ STXADD_IDENT_WRONG \t\t\t  , \"01000\" },","{ STXADD_OPER_MINUS \t\t\t  , \"01000\" },","{ STXADD_FUNC_UNKNOWN \t\t\t  , \"01000\" },","{ STXADD_PARAM_INVALID_COUNT\t  , \"01000\" },","{ STXADD_JOIN_INVALID\t  \t\t  , \"01000\" },","{ STXADD_FROM_PAR_CLOSE\t  \t\t  , \"01000\" },","{ STXADD_KEYS_REQUIRED\t  \t\t  , \"01000\" },","{ STXADD_NOT_NUMBER\t  \t\t      , \"01000\" },","{ STXADD_COMMENT_OPEN\t\t\t  , \"01000\" },","\t};","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionCharLen.java|:["package smallsql.database;","final class ExpressionFunctionCharLen extends ExpressionFunctionReturnInt {","\tfinal int getFunction() {","\t\treturn SQLTokenizer.CHARLEN;","\t}","    boolean isNull() throws Exception {","        return param1.isNull();","    }","\tfinal int getInt() throws Exception {","        if(isNull()) return 0;","        String str = param1.getString();","\t\treturn str.length();","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionReturnInt.java|:["package smallsql.database;","abstract class ExpressionFunctionReturnInt extends ExpressionFunction {","\tboolean isNull() throws Exception {","\t\treturn param1.isNull();","\t}","\tfinal boolean getBoolean() throws Exception {","\t\treturn getInt() != 0;","\t}","\tfinal long getLong() throws Exception {","\t\treturn getInt();","\t}","\tfinal float getFloat() throws Exception {","\t\treturn getInt();","\t}","\tfinal double getDouble() throws Exception {","\t\treturn getInt();","\t}","\tfinal long getMoney() throws Exception {","\t\treturn getInt() * 10000;","\t}","\tfinal MutableNumeric getNumeric() throws Exception {","\t\tif(isNull()) return null;","\t\treturn new MutableNumeric(getInt());","\t}","\tObject getObject() throws Exception {","\t\tif(isNull()) return null;","\t\treturn Utils.getInteger(getInt());","\t}","\tfinal String getString() throws Exception {","\t\tif(isNull()) return null;","\t\treturn String.valueOf(getInt());","\t}","\tfinal int getDataType() {","\t\treturn SQLTokenizer.INT;","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionName.java|:["package smallsql.database;","public class ExpressionName extends Expression {","    private String tableAlias;","    private DataSource fromEntry;","    private int colIdx;","    private TableView table;","    private Column column;","    ExpressionName(String name){","\t\tsuper(NAME);","        setName( name );","    }","\tExpressionName(int type){","\t\tsuper(type);","\t}","    void setNameAfterTableAlias(String name){","        tableAlias = getName();","\t\tsetName( name );","    }","    public boolean equals(Object expr){","    \tif(!super.equals(expr)) return false;","    \tif(!(expr instanceof ExpressionName)) return false;","    \tif( ((ExpressionName)expr).fromEntry != fromEntry) return false;","    \treturn true;","    }","    boolean isNull() throws Exception{","        return fromEntry.isNull(colIdx);","    }","    boolean getBoolean() throws Exception{","        return fromEntry.getBoolean(colIdx);","    }","    int getInt() throws Exception{","        return fromEntry.getInt(colIdx);","    }","    long getLong() throws Exception{","        return fromEntry.getLong(colIdx);","    }","    float getFloat() throws Exception{","        return fromEntry.getFloat(colIdx);","    }","    double getDouble() throws Exception{","        return fromEntry.getDouble(colIdx);","    }","    long getMoney() throws Exception{","        return fromEntry.getMoney(colIdx);","    }","    MutableNumeric getNumeric() throws Exception{","        return fromEntry.getNumeric(colIdx);","    }","    Object getObject() throws Exception{","        return fromEntry.getObject(colIdx);","    }","    String getString() throws Exception{","        return fromEntry.getString(colIdx);","    }","    byte[] getBytes() throws Exception{","        return fromEntry.getBytes(colIdx);","    }","    int getDataType(){","\t\tswitch(getType()){","\t\t\tcase NAME:","\t\t\tcase GROUP_BY:","\t\t\t\treturn fromEntry.getDataType(colIdx);","\t\t\tcase FIRST:","\t\t\tcase LAST:","\t\t\tcase MAX:","\t\t\tcase MIN:","\t\t\tcase SUM:","\t\t\t\treturn getParams()[0].getDataType();","\t\t\tcase COUNT:","\t\t\t\treturn SQLTokenizer.INT;","\t\t\tdefault: throw new Error();","\t\t}","    }","    void setFrom( DataSource fromEntry, int colIdx, TableView table ){","        this.fromEntry  = fromEntry;","        this.colIdx     = colIdx;","        this.table      = table;","        this.column\t\t= table.columns.get(colIdx);","    }","\tvoid setFrom( DataSource fromEntry, int colIdx, Column column ){","\t\tthis.fromEntry  = fromEntry;","\t\tthis.colIdx     = colIdx;","\t\tthis.column\t\t= column;","\t}","    DataSource getDataSource(){","        return fromEntry;","    }","    String getTableAlias(){ return tableAlias; }","\tfinal TableView getTable(){","\t\treturn table;","\t}","\tfinal int getColumnIndex(){","\t\treturn colIdx;","\t}","\tfinal Column getColumn(){","\t\treturn column;","\t}","\tfinal public String toString(){","        if(tableAlias == null) return String.valueOf(getAlias());","        return tableAlias + \".\" + getAlias();","    }","\tString getTableName(){","\t\tif(table != null){","\t\t\treturn table.getName();","\t\t}","\t\treturn null;","\t}","\tint getPrecision(){","\t\treturn column.getPrecision();","\t}","\tint getScale(){","\t\treturn column.getScale();","\t}","\tint getDisplaySize(){","\t\treturn column.getDisplaySize();","\t}","\tboolean isAutoIncrement(){","\t\treturn column.isAutoIncrement();","\t}","\tboolean isCaseSensitive(){","\t\treturn column.isCaseSensitive();","\t}","\tboolean isNullable(){","\t\treturn column.isNullable();","\t}","\tboolean isDefinitelyWritable(){","\t\treturn true;","\t}","}"],|project://smallsql/src/smallsql/database/SSStatement.java|:["package smallsql.database;","import java.sql.*;","import java.util.ArrayList;","import smallsql.database.language.Language;","class SSStatement implements Statement{","    final SSConnection con;","    Command cmd;","    private boolean isClosed;","    int rsType;","    int rsConcurrency;","    private int fetchDirection;","    private int fetchSize;","    private int queryTimeout;","    private int maxRows;","    private int maxFieldSize;","    private ArrayList batches;","    private boolean needGeneratedKeys;","    private ResultSet generatedKeys;","    private int[] generatedKeyIndexes;","    private String[] generatedKeyNames;","    SSStatement(SSConnection con) throws SQLException{","        this(con, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);","    }","    SSStatement(SSConnection con, int rsType, int rsConcurrency) throws SQLException{","        this.con = con;","        this.rsType = rsType;","        this.rsConcurrency = rsConcurrency;","        con.testClosedConnection();","    }","    final public ResultSet executeQuery(String sql) throws SQLException{","        executeImpl(sql);","        return cmd.getQueryResult();","    }","    final public int executeUpdate(String sql) throws SQLException{","        executeImpl(sql);","        return cmd.getUpdateCount();","    }","    final public boolean execute(String sql) throws SQLException{","        executeImpl(sql);","        return cmd.getResultSet() != null;","    }","    final private void executeImpl(String sql) throws SQLException{","        checkStatement();","        generatedKeys = null;","        try{","            con.log.println(sql);","            SQLParser parser = new SQLParser();","            cmd = parser.parse(con, sql);","            if(maxRows != 0 && (cmd.getMaxRows() == -1 || cmd.getMaxRows() \> maxRows))","                cmd.setMaxRows(maxRows);","            cmd.execute(con, this);","        }catch(Exception e){","            throw SmallSQLException.createFromException(e);","        }","        needGeneratedKeys = false;","        generatedKeyIndexes = null;","        generatedKeyNames = null;","    }","    final public void close(){","        con.log.println(\"Statement.close\");","        isClosed = true;","        cmd = null;","    }","    final public int getMaxFieldSize(){","        return maxFieldSize;","    }","    final public void setMaxFieldSize(int max){","        maxFieldSize = max;","    }","    final public int getMaxRows(){","        return maxRows;","    }","    final public void setMaxRows(int max) throws SQLException{","        if(max \< 0)","            throw SmallSQLException.create(Language.ROWS_WRONG_MAX, String.valueOf(max));","        maxRows = max;","    }","    final public void setEscapeProcessing(boolean enable) throws SQLException{","        checkStatement();","    }","    final public int getQueryTimeout() throws SQLException{","        checkStatement();","        return queryTimeout;","    }","    final public void setQueryTimeout(int seconds) throws SQLException{","        checkStatement();","        queryTimeout = seconds;","    }","    final public void cancel() throws SQLException{","        checkStatement();","    }","    final public SQLWarning getWarnings(){","        return null;","    }","    final public void clearWarnings(){","    }","    final public void setCursorName(String name) throws SQLException{","        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"setCursorName\");","    }","    final public ResultSet getResultSet() throws SQLException{","        checkStatement();","        return cmd.getResultSet();","    }","    final public int getUpdateCount() throws SQLException{","        checkStatement();","        return cmd.getUpdateCount();","    }","    final public boolean getMoreResults() throws SQLException{","        checkStatement();","        return getMoreResults(CLOSE_CURRENT_RESULT);","    }","    final public void setFetchDirection(int direction) throws SQLException{","        checkStatement();","        fetchDirection = direction;","    }","    final public int getFetchDirection() throws SQLException{","        checkStatement();","        return fetchDirection;","    }","    final public void setFetchSize(int rows) throws SQLException{","        checkStatement();","        fetchSize = rows;","    }","    final public int getFetchSize() throws SQLException{","        checkStatement();","        return fetchSize;","    }","    final public int getResultSetConcurrency() throws SQLException{","        checkStatement();","        return rsConcurrency;","    }","    final public int getResultSetType() throws SQLException{","        checkStatement();","        return rsType;","    }","    final public void addBatch(String sql){","        if(batches == null)","            batches = new ArrayList();","        batches.add(sql);","    }","    public void clearBatch() throws SQLException{","        checkStatement();","        if(batches == null)","            return;","        batches.clear();","    }","    public int[] executeBatch() throws BatchUpdateException{","        if(batches == null)","            return new int[0];","        final int[] result = new int[batches.size()];","        BatchUpdateException failed = null;","        for(int i = 0; i \< result.length; i++){","            try{","                result[i] = executeUpdate((String)batches.get(i));","            }catch(SQLException ex){","                result[i] = EXECUTE_FAILED;","                if(failed == null){","                    failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);","                    failed.initCause(ex);","                }","                failed.setNextException(ex);","            }","        }","        batches.clear();","        if(failed != null)","            throw failed;","        return result;","    }","    final public Connection getConnection(){","        return con;","    }","    final public boolean getMoreResults(int current) throws SQLException{","        switch(current){","        case CLOSE_ALL_RESULTS:","        case CLOSE_CURRENT_RESULT:","            ResultSet rs = cmd.getResultSet();","            cmd.rs = null;","            if(rs != null)","                rs.close();","            break;","        case KEEP_CURRENT_RESULT:","            break;","        default:","            throw SmallSQLException.create(Language.FLAGVALUE_INVALID, String.valueOf(current));","        }","        return cmd.getMoreResults();","    }","    final void setNeedGeneratedKeys(int autoGeneratedKeys) throws SQLException{","        switch(autoGeneratedKeys){","        case NO_GENERATED_KEYS:","            break;","        case RETURN_GENERATED_KEYS:","            needGeneratedKeys = true;","            break;","        default:","            throw SmallSQLException.create(Language.ARGUMENT_INVALID, String.valueOf(autoGeneratedKeys));","        }","    }","    final void setNeedGeneratedKeys(int[] columnIndexes) throws SQLException{","        needGeneratedKeys = columnIndexes != null;","        generatedKeyIndexes = columnIndexes;","    }","    final void setNeedGeneratedKeys(String[] columnNames) throws SQLException{","        needGeneratedKeys = columnNames != null;","        generatedKeyNames = columnNames;","    }","    final boolean needGeneratedKeys(){","        return needGeneratedKeys;","    }","    final int[] getGeneratedKeyIndexes(){","        return generatedKeyIndexes;","    }","    final String[] getGeneratedKeyNames(){","        return generatedKeyNames;","    }","    final void setGeneratedKeys(ResultSet rs){","        generatedKeys = rs;","    }","    final public ResultSet getGeneratedKeys() throws SQLException{","        if(generatedKeys == null)","            throw SmallSQLException.create(Language.GENER_KEYS_UNREQUIRED);","        return generatedKeys;","    }","    final public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException{","        setNeedGeneratedKeys(autoGeneratedKeys);","        return executeUpdate(sql);","    }","    final public int executeUpdate(String sql, int[] columnIndexes) throws SQLException{","        setNeedGeneratedKeys(columnIndexes);","        return executeUpdate(sql);","    }","    final public int executeUpdate(String sql, String[] columnNames) throws SQLException{","        setNeedGeneratedKeys(columnNames);","        return executeUpdate(sql);","    }","    final public boolean execute(String sql, int autoGeneratedKeys) throws SQLException{","        setNeedGeneratedKeys(autoGeneratedKeys);","        return execute(sql);","    }","    final public boolean execute(String sql, int[] columnIndexes) throws SQLException{","        setNeedGeneratedKeys(columnIndexes);","        return execute(sql);","    }","    final public boolean execute(String sql, String[] columnNames) throws SQLException{","        setNeedGeneratedKeys(columnNames);","        return execute(sql);","    }","    final public int getResultSetHoldability() throws SQLException{","        throw new java.lang.UnsupportedOperationException(\"Method getResultSetHoldability() not yet implemented.\");","    }","    void checkStatement() throws SQLException{","        if(isClosed){","            throw SmallSQLException.create(Language.STMT_IS_CLOSED);","        }","    }","\t@Override","\tpublic \<T\> T unwrap(Class\<T\> iface) throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic boolean isWrapperFor(Class\<?\> iface) throws SQLException {","\t\treturn false;","\t}","\t@Override","\tpublic boolean isClosed() throws SQLException {","\t\treturn false;","\t}","\t@Override","\tpublic void setPoolable(boolean poolable) throws SQLException {","\t}","\t@Override","\tpublic boolean isPoolable() throws SQLException {","\t\treturn false;","\t}","}"],|project://smallsql/src/smallsql/database/CommandTable.java|:["package smallsql.database;","import java.sql.SQLException;","import smallsql.database.language.Language;","final class CommandTable extends Command{","\tfinal private Columns columns = new Columns();","\tfinal private IndexDescriptions indexes = new IndexDescriptions();","    final private ForeignKeys foreignKeys = new ForeignKeys();","    final private int tableCommandType;","    CommandTable( Logger log, String catalog, String name, int tableCommandType ){","    \tsuper(log);","        this.type = SQLTokenizer.TABLE;","        this.catalog = catalog;","        this.name = name;","        this.tableCommandType = tableCommandType;","    }","    void addColumn(Column column) throws SQLException{","        addColumn(columns, column);","    }","\tvoid addIndex( IndexDescription indexDescription ) throws SQLException{","\t\tindexes.add(indexDescription);","\t}","    void addForeingnKey(ForeignKey key){","        foreignKeys.add(key);","    }","    void executeImpl(SSConnection con, SSStatement st) throws Exception{","        Database database = catalog == null ? ","                con.getDatabase(false) : ","                Database.getDatabase( catalog, con, false );","        switch(tableCommandType){","        case SQLTokenizer.CREATE:","            database.createTable( con, name, columns, indexes, foreignKeys );","            break;","        case SQLTokenizer.ADD:","            con = new SSConnection(con);","            Table oldTable = (Table)database.getTableView( con, name);","            TableStorePage tableLock = oldTable.requestLock( con, SQLTokenizer.ALTER, -1);","            String newName = \"#\" + System.currentTimeMillis() + this.hashCode();","            try{","                Columns oldColumns = oldTable.columns;","                Columns newColumns = oldColumns.copy();","                for(int i = 0; i \< columns.size(); i++){","                    addColumn(newColumns, columns.get(i));","                }","                Table newTable = database.createTable( con, newName, newColumns, oldTable.indexes, indexes, foreignKeys );","                StringBuffer buffer = new StringBuffer(256);","                buffer.append(\"INSERT INTO \").append( newName ).append( \'(\' );","                for(int c=0; c\<oldColumns.size(); c++){","                    if(c != 0){","                        buffer.append( \',\' );","                    }","                    buffer.append( oldColumns.get(c).getName() );","                }","                buffer.append( \")  SELECT * FROM \" ).append( name );","                con.createStatement().execute( buffer.toString() );","                database.replaceTable( oldTable, newTable );","            }catch(Exception ex){","                try {","                    database.dropTable(con, newName);","                } catch (Exception ex1) {}","                try{","                    indexes.drop(database);","                } catch (Exception ex1) {}","                throw ex;","            }finally{","                tableLock.freeLock();","            }","            break;","        default:","            throw new Error();","        }","    }","    private void addColumn(Columns cols, Column column) throws SQLException{","        if(cols.get(column.getName()) != null){","            throw SmallSQLException.create(Language.COL_DUPLICATE, column.getName());","        }","        cols.add(column);","    }","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionLocate.java|:["package smallsql.database;","public class ExpressionFunctionLocate extends ExpressionFunctionReturnInt {","\tint getFunction() {","\t\treturn SQLTokenizer.LOCATE;","\t}","\tboolean isNull() throws Exception {","\t\treturn param1.isNull() || param2.isNull();","\t}","\tint getInt() throws Exception {","\t\tString suchstr = param1.getString();","\t\tString value   = param2.getString();","\t\tif(suchstr == null || value == null || suchstr.length() == 0 || value.length() == 0) return 0;","\t\tint start = 0;","\t\tif(param3 != null){","\t\t\tstart = param3.getInt()-1;","\t\t}","\t\treturn value.toUpperCase().indexOf( suchstr.toUpperCase(), start ) +1;","\t}","}"],|project://smallsql/src/smallsql/database/DataSources.java|:["package smallsql.database;","final class DataSources {","\tprivate int size;","\tprivate DataSource[] data = new DataSource[4];","\tfinal int size(){","\t\treturn size;","\t}","\tfinal DataSource get(int idx){","\t\tif (idx \>= size)","\t\t\tthrow new IndexOutOfBoundsException(\"Index: \"+idx+\", Size: \"+size);","\t\treturn data[idx];","\t}","\tfinal void add(DataSource table){","\t\tif(size \>= data.length ){","\t\t\tDataSource[] dataNew = new DataSource[size \<\< 1];","\t\t\tSystem.arraycopy(data, 0, dataNew, 0, size);","\t\t\tdata = dataNew;","\t\t}","\t\tdata[size++] = table;","\t}","}"],|project://smallsql/src/smallsql/database/ViewResult.java|:["package smallsql.database;","import java.sql.*;","class ViewResult extends TableViewResult {","\tfinal private View view;","\tfinal private Expressions columnExpressions;","\tfinal private CommandSelect commandSelect;","\tViewResult(View view){","\t\tthis.view = view;","\t\tthis.columnExpressions = view.commandSelect.columnExpressions;","\t\tthis.commandSelect     = view.commandSelect;","\t}","\tViewResult(SSConnection con, CommandSelect commandSelect) throws SQLException{","\t\ttry{","\t\t\tthis.view = new View( con, commandSelect);","\t\t\tthis.columnExpressions = commandSelect.columnExpressions;","\t\t\tthis.commandSelect     = commandSelect;","\t\t}catch(Exception e){","\t\t\tthrow SmallSQLException.createFromException(e);","\t\t}","\t}","\tboolean init( SSConnection con ) throws Exception{","\t\tif(super.init(con)){","\t\t\tcommandSelect.compile(con);","\t\t\treturn true;","\t\t}","\t\treturn false;","\t}","\tTableView getTableView(){","\t\treturn view;","\t}","\tvoid deleteRow() throws SQLException{","\t\tcommandSelect.deleteRow(con);","\t}","\tvoid updateRow(Expression[] updateValues) throws Exception{","\t\tcommandSelect.updateRow(con, updateValues);","\t}","\tvoid insertRow(Expression[] updateValues) throws Exception{","\t\tcommandSelect.insertRow(con, updateValues);","\t}","\tboolean isNull(int colIdx) throws Exception {","\t\treturn columnExpressions.get(colIdx).isNull();","\t}","\tboolean getBoolean(int colIdx) throws Exception {","\t\treturn columnExpressions.get(colIdx).getBoolean();","\t}","\tint getInt(int colIdx) throws Exception {","\t\treturn columnExpressions.get(colIdx).getInt();","\t}","\tlong getLong(int colIdx) throws Exception {","\t\treturn columnExpressions.get(colIdx).getLong();","\t}","\tfloat getFloat(int colIdx) throws Exception {","\t\treturn columnExpressions.get(colIdx).getFloat();","\t}","\tdouble getDouble(int colIdx) throws Exception {","\t\treturn columnExpressions.get(colIdx).getDouble();","\t}","\tlong getMoney(int colIdx) throws Exception {","\t\treturn columnExpressions.get(colIdx).getMoney();","\t}","\tMutableNumeric getNumeric(int colIdx) throws Exception {","\t\treturn columnExpressions.get(colIdx).getNumeric();","\t}","\tObject getObject(int colIdx) throws Exception {","\t\treturn columnExpressions.get(colIdx).getObject();","\t}","\tString getString(int colIdx) throws Exception {","\t\treturn columnExpressions.get(colIdx).getString();","\t}","\tbyte[] getBytes(int colIdx) throws Exception {","\t\treturn columnExpressions.get(colIdx).getBytes();","\t}","\tint getDataType(int colIdx) {","\t\treturn columnExpressions.get(colIdx).getDataType();","\t}","\tvoid beforeFirst() throws Exception {","\t\tcommandSelect.beforeFirst();","\t}","\tboolean isBeforeFirst() throws SQLException{","\t\treturn commandSelect.isBeforeFirst();","\t}","\tboolean isFirst() throws SQLException{","\t\treturn commandSelect.isFirst();","\t}","\tboolean first() throws Exception {","\t\treturn commandSelect.first();","\t}","\tboolean previous() throws Exception{","\t\treturn commandSelect.previous();","\t}","\tboolean next() throws Exception {","\t\treturn commandSelect.next();","\t}","\tboolean last() throws Exception{","\t\treturn commandSelect.last();","\t}","\tboolean isLast() throws Exception{","\t\treturn commandSelect.isLast();","\t}","\tboolean isAfterLast() throws Exception{","\t\treturn commandSelect.isAfterLast();","\t}","\tvoid afterLast() throws Exception{","\t\tcommandSelect.afterLast();","\t}","\tboolean absolute(int row) throws Exception{","\t\treturn commandSelect.absolute(row);","\t}","\tboolean relative(int rows) throws Exception{","\t\treturn commandSelect.relative(rows);","\t}","\tint getRow() throws Exception{","\t\treturn commandSelect.getRow();","\t}","\tlong getRowPosition() {","\t\treturn commandSelect.from.getRowPosition();","\t}","\tvoid setRowPosition(long rowPosition) throws Exception {","\t\tcommandSelect.from.setRowPosition(rowPosition);","\t}","\tfinal boolean rowInserted(){","\t\treturn commandSelect.from.rowInserted();","\t}","\tfinal boolean rowDeleted(){","\t\treturn commandSelect.from.rowDeleted();","\t}","\tvoid nullRow() {","\t\tcommandSelect.from.nullRow();","\t}","\tvoid noRow() {","\t\tcommandSelect.from.noRow();","\t}","\tfinal void execute() throws Exception{","\t\tcommandSelect.from.execute();","\t}","}"],|project://smallsql/src/smallsql/junit/TestJoins.java|:["package smallsql.junit;","import junit.framework.*;","import java.math.BigDecimal;","import java.sql.*;","public class TestJoins extends BasicTestCase {","    private TestValue testValue;","    private static final String table = \"table_joins\";","    private static final String table2= \"table_joins2\";","\tprivate static final String table3= \"table_joins3\";","    private static final TestValue[] TESTS = new TestValue[]{","        a(\"tinyint\"           , new Byte( (byte)3),     new Byte( (byte)4)),","        a(\"byte\"              , new Byte( (byte)3),     new Byte( (byte)4)),","        a(\"smallint\"          , new Short( (short)3),   new Short( (short)4)),","        a(\"int\"               , new Integer(3),         new Integer(4)),","        a(\"bigint\"            , new Long(3),            new Long(4)),","        a(\"real\"              , new Float(3.45),        new Float(4.56)),","        a(\"float\"             , new Float(3.45),        new Float(4.56)),","        a(\"double\"            , new Double(3.45),       new Double(4.56)),","        a(\"smallmoney\"        , new Float(3.45),        new Float(4.56)),","        a(\"money\"             , new Float(3.45),        new Float(4.56)),","        a(\"money\"             , new Double(3.45),       new Double(4.56)),","        a(\"numeric(19,2)\"     , new BigDecimal(\"3.45\"), new BigDecimal(\"4.56\")),","        a(\"decimal(19,2)\"     , new BigDecimal(\"3.45\"), new BigDecimal(\"4.56\")),","        a(\"varnum(28,2)\"      , new BigDecimal(3.45),   new BigDecimal(4.56)),","        a(\"number(28,2)\"      , new BigDecimal(3.45),   new BigDecimal(4.56)),","        a(\"varchar(100)\"      , new String(\"abc\"),      new String(\"qwert\")),","        a(\"nvarchar(100)\"     , new String(\"abc\"),      new String(\"qwert\")),","        a(\"varchar2(100)\"     , new String(\"abc\"),      new String(\"qwert\")),","        a(\"nvarchar2(100)\"    , new String(\"abc\"),      new String(\"qwert\")),","        a(\"character(100)\"    , new String(\"abc\"),      new String(\"qwert\")),","        a(\"char(100)\"         , new String(\"abc\"),      new String(\"qwert\")),","        a(\"nchar(100)\"        , new String(\"abc\"),      new String(\"qwert\")),","        a(\"text\"              , new String(\"abc\"),      new String(\"qwert\")),","        a(\"ntext\"             , new String(\"abc\"),      new String(\"qwert\")),","        a(\"date\"              , new Date(99, 1,1),      new Date(99, 2,2)),","        a(\"time\"              , new Time(9, 1,1),       new Time(9, 2,2)),","        a(\"timestamp\"         , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),","        a(\"datetime\"          , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),","        a(\"smalldatetime\"     , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),","        a(\"binary(100)\"       , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),","        a(\"varbinary(100)\"    , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),","        a(\"raw(100)\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),","        a(\"long raw\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),","        a(\"longvarbinary\"     , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),","        a(\"blob\"              , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),","        a(\"image\"             , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),","        a(\"boolean\"           , Boolean.FALSE,          Boolean.TRUE),","        a(\"bit\"               , Boolean.FALSE,          Boolean.TRUE),","        a(\"uniqueidentifier\"  , \"12345678-3445-3445-3445-1234567890ab\",      \"12345679-3445-3445-3445-1234567890ab\"),","    };","    TestJoins(TestValue testValue){","        super(testValue.dataType);","        this.testValue = testValue;","    }","\tprivate void clear() throws SQLException{","        Connection con = AllTests.getConnection();","        dropTable( con, table );","        dropTable( con, table2 );","        dropTable( con, table3 );","\t}","    public void tearDown() throws SQLException{","\t\tclear();","    }","    public void setUp() throws Exception{","\t\tclear();","        Connection con = AllTests.getConnection();","        Statement st = con.createStatement();","        st.execute(\"create table \" + table + \"(a \" + testValue.dataType +\" PRIMARY KEY, b \" + testValue.dataType + \")\");","        st.execute(\"create table \" + table2+ \"(c \" + testValue.dataType +\" PRIMARY KEY, d \" + testValue.dataType + \")\");","\t\tst.execute(\"create table \" + table3+ \"(c \" + testValue.dataType +\" PRIMARY KEY, d \" + testValue.dataType + \")\");","        st.close();","\t\tcon.close();","\t\tcon = AllTests.getConnection();","        PreparedStatement pr = con.prepareStatement(\"INSERT into \" + table + \"(a,b) Values(?,?)\");","\t    insertValues( pr );","        pr.close();","\t    pr = con.prepareStatement(\"INSERT into \" + table2 + \" Values(?,?)\");","\t    insertValues( pr );","        pr.close();","    }","    private void insertValues(PreparedStatement pr ) throws Exception{","            pr.setObject( 1, testValue.small);","            pr.setObject( 2, testValue.large);","            pr.execute();","            pr.setObject( 1, testValue.small);","            pr.setObject( 2, testValue.small);","            pr.execute();","            pr.setObject( 1, testValue.large);","            pr.setObject( 2, testValue.large);","            pr.execute();","            pr.setObject( 1, testValue.large);","            pr.setObject( 2, testValue.small);","            pr.execute();","            pr.setObject( 1, null);","            pr.setObject( 2, testValue.small);","            pr.execute();","            pr.setObject( 1, testValue.small);","            pr.setObject( 2, null);","            pr.execute();","            pr.setObject( 1, null);","            pr.setObject( 2, null);","            pr.execute();","    }","    public void runTest() throws Exception{","        Connection con = AllTests.getConnection();","        Statement st = con.createStatement();","        ResultSet rs;","        rs = st.executeQuery(\"Select * from \" + table + \" where 1 = 0\");","        assertFalse( \"To many rows\", rs.next() );","        assertRowCount( 7, \"Select * from \" + table);","        assertRowCount( 49, \"Select * from \" + table + \" t1, \" + table2 + \" t2\");","        assertRowCount( 0, \"Select * from \" + table + \", \" + table3);","        assertRowCount( 49, \"Select * from (\"+ table +\"), \" + table2);","        assertRowCount( 49, \"Select * from \" + table + \" Cross Join \" + table2);","        assertRowCount( 13, \"Select * from \" + table + \" INNER JOIN \" + table2 + \" ON \" + table + \".a = \" + table2 + \".c\");","        assertRowCount( 13, \"Select * from \" + table + \"       JOIN \" + table2 + \" ON \" + table2 + \".c = \" + table + \".a\");","        assertRowCount( 13, \"Select * from {oj \" + table + \" INNER JOIN \" + table2 + \" ON \" + table + \".a = \" + table2 + \".c}\");","        assertRowCount( 13, \"Select * from \" + table + \" AS t1 INNER JOIN \" + table2 + \" t2 ON t1.a = t2.c\");","        assertRowCount( 13, \"Select * from {oj \" + table + \" t1 INNER JOIN \" + table2 + \" t2 ON t1.a = t2.c}\");","        assertRowCount( 4, \"Select * from \" + table + \" t1 INNER JOIN \" + table2 + \" t2 ON t1.a = t2.c and t1.b=t2.d\");","        assertRowCount( 4, \"Select * from \" + table + \" t1       JOIN \" + table2 + \" t2 ON t1.a = t2.c and t2.d=t1.b\");","        assertRowCount( 7, \"Select * from \" + table + \" t1 LEFT OUTER JOIN \" + table2 + \" t2 ON t1.a = t2.c and t1.b=t2.d\");","        assertRowCount( 7, \"Select * from \" + table + \" t1 LEFT       JOIN \" + table2 + \" t2 ON t1.a = t2.c and t1.b=t2.d\");","        assertRowCount( 15, \"Select * from \" + table + \" t1 LEFT OUTER JOIN \" + table2 + \" t2 ON t1.a = t2.c\");","        assertRowCount( 7, \"Select * from \" + table + \" t1 LEFT OUTER JOIN \" + table3 + \" t2 ON t1.a = t2.c\");","        assertRowCount( 7, \"Select * from \" + table + \" t1 RIGHT OUTER JOIN \" + table2 + \" t2 ON t1.a = t2.c and t1.b=t2.d\");","        assertRowCount( 7, \"Select * from \" + table + \" t1 RIGHT OUTER JOIN \" + table2 + \" t2 ON false\");","        assertRowCount( 15, \"Select * from \" + table + \" t1 RIGHT OUTER JOIN \" + table2 + \" t2 ON t1.a = t2.c\");","        assertRowCount( 0, \"Select * from \" + table + \" t1 RIGHT OUTER JOIN \" + table3 + \" t2 ON t1.a = t2.c\");","        assertRowCount( 14, \"Select * from \" + table + \" t1 FULL OUTER JOIN \" + table2 + \" t2 ON 1=0\");","        assertRowCount( 17, \"Select * from \" + table + \" t1 FULL OUTER JOIN \" + table2 + \" t2 ON t1.a = t2.c\");","\t\tassertRowCount( 7, \"Select * from \" + table + \" t1 FULL OUTER JOIN \" + table3 + \" t2 ON t1.a = t2.c\");","\t\tassertRowCount( 7, \"Select * from \" + table3 + \" t1 FULL OUTER JOIN \" + table + \" t2 ON t1.c = t2.a\");","        assertRowCount( 5, \"Select * from \" + table + \" INNER JOIN (SELECT DISTINCT c FROM \" + table2 + \") t1 ON \" + table + \".a = t1.c\");","        st.close();","    }","    public static Test suite() throws Exception{","        TestSuite theSuite = new TestSuite(\"Joins\");","        for(int i=0; i\<TESTS.length; i++){","            theSuite.addTest(new TestJoins( TESTS[i] ) );","        }","        return theSuite;","    }","    private static TestValue a(String dataType, Object small, Object large){","        TestValue value = new TestValue();","        value.dataType  = dataType;","        value.small     = small;","        value.large     = large;","        return value;","    }","    private static class TestValue{","        String dataType;","        Object small;","        Object large;","    }","}"],|project://smallsql/src/smallsql/junit/TestThreads.java|:["package smallsql.junit;","import java.sql.*;","import java.util.ArrayList;","public class TestThreads extends BasicTestCase{","    volatile Throwable throwable;","    public void testConcurrentRead() throws Throwable{","        ArrayList threadList = new ArrayList();","        throwable = null;","        final String sql = \"Select * From table_OrderBy1\";","        final Connection con = AllTests.getConnection();","        Statement st = con.createStatement();","        ResultSet rs = st.executeQuery(\"Select * From table_OrderBy1\");","        int count = 0;","        while(rs.next()){","            count++;","        }","        final int rowCount = count;","        for(int i = 0; i \< 200; i++){","            Thread thread = new Thread(new Runnable(){","                public void run(){","                    try{","                        assertRowCount(rowCount, sql);","                    }catch(Throwable ex){","                        throwable = ex;","                    }","                }","            });","            threadList.add(thread);","            thread.start();","        }","        for(int i = 0; i \< threadList.size(); i++){","            Thread thread = (Thread)threadList.get(i);","            thread.join(5000);","        }","        if(throwable != null){","            throw throwable;","        }","    }","    public void testConcurrentThreadWrite() throws Throwable{","        ArrayList threadList = new ArrayList();","        throwable = null;","        final Connection con = AllTests.getConnection();","        Statement st = con.createStatement();","        try{","            st.execute(\"CREATE TABLE ConcurrentWrite( value int)\");","            st.execute(\"INSERT INTO ConcurrentWrite(value) Values(0)\");","            for(int i = 0; i \< 200; i++){","                Thread thread = new Thread(new Runnable(){","                    public void run(){","                        try{","                            Statement st2 = con.createStatement();","                            int count = st2.executeUpdate(\"UPDATE ConcurrentWrite SET value = value + 1\");","                            assertEquals(\"Update Count\", 1, count);","                        }catch(Throwable ex){","                            throwable = ex;","                        }","                    }","                });","                threadList.add(thread);","                thread.start();","            }","            for(int i = 0; i \< threadList.size(); i++){","                Thread thread = (Thread)threadList.get(i);","                thread.join(5000);","            }","            if(throwable != null){","                throw throwable;","            }","            assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");","        }finally{","            dropTable(con, \"ConcurrentWrite\");","        }","    }","    public void testConcurrentConnectionWrite() throws Throwable{","        ArrayList threadList = new ArrayList();","        throwable = null;","        Connection con = AllTests.getConnection();","        Statement st = con.createStatement();","        try{","            st.execute(\"CREATE TABLE ConcurrentWrite( value int)\");","            st.execute(\"INSERT INTO ConcurrentWrite(value) Values(0)\");","            for(int i = 0; i \< 200; i++){","                Thread thread = new Thread(new Runnable(){","                    public void run(){","                        try{","                            Connection con2 = AllTests.createConnection();","                            Statement st2 = con2.createStatement();","                            int count = st2.executeUpdate(\"UPDATE ConcurrentWrite SET value = value + 1\");","                            assertEquals(\"Update Count\", 1, count);","                            con2.close();","                        }catch(Throwable ex){","                            throwable = ex;","                        }","                    }","                });","                threadList.add(thread);","                thread.start();","            }","            for(int i = 0; i \< threadList.size(); i++){","                Thread thread = (Thread)threadList.get(i);","                thread.join(5000);","            }","            if(throwable != null){","                throw throwable;","            }","            assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");","        }finally{","            dropTable(con, \"ConcurrentWrite\");","        }","    }","}"],|project://smallsql/src/smallsql/database/Table.java|:["package smallsql.database;","import java.io.*;","import java.nio.ByteBuffer;","import java.nio.channels.FileChannel;","import java.sql.*;","import java.util.ArrayList;","import java.util.HashMap;","import java.util.Iterator;","import java.util.List;","import smallsql.database.language.Language;","class Table extends TableView{","\tprivate static final int INDEX = 1;","    final Database database;","    FileChannel raFile; ","\tprivate Lobs lobs; ","    long firstPage; ","\tfinal private HashMap locks = new HashMap();","\tprivate SSConnection tabLockConnection; ","\tprivate int tabLockCount;","\tfinal private ArrayList locksInsert = new ArrayList(); ","\tfinal private HashMap serializeConnections = new HashMap();","\tfinal IndexDescriptions indexes;","\tfinal ForeignKeys references;","    Table( Database database, SSConnection con, String name, FileChannel raFile, long offset, int tableFormatVersion) throws Exception{","        super( name, new Columns() );","        this.database = database;","        this.raFile   = raFile;","\t\tthis.firstPage = offset;","\t\tStoreImpl store = getStore(con, firstPage, SQLTokenizer.SELECT);","        if(store == null){","            throw SmallSQLException.create(Language.TABLE_FILE_INVALID, getFile(database));","        }","\t\tint count = store.readInt();","\t\tfor(int i=0; i\<count; i++){","\t\t\tcolumns.add( store.readColumn(tableFormatVersion) );","\t\t}","\t\tindexes = new IndexDescriptions();","        references = new ForeignKeys();","\t\tint type;","\t\twhile((type = store.readInt()) != 0){","\t\t\tint offsetInPage = store.getCurrentOffsetInPage();","\t\t\tint size = store.readInt();","\t\t\tswitch(type){","\t\t\t\tcase INDEX:","\t\t\t\t\tindexes.add( IndexDescription.load( database, this, store) );","\t\t\t\t\tbreak;","\t\t\t}","\t\t\tstore.setCurrentOffsetInPage(offsetInPage + size);","\t\t}","\t\tfirstPage = store.getNextPagePos();","    }","    Table(Database database, SSConnection con, String name, Columns columns, IndexDescriptions indexes, ForeignKeys foreignKeys) throws Exception{","        this(database, con, name, columns, null, indexes, foreignKeys);","    }","    Table(Database database, SSConnection con, String name, Columns columns, IndexDescriptions existIndexes, IndexDescriptions newIndexes, ForeignKeys foreignKeys) throws Exception{","        super( name, columns );","        this.database = database;","        this.references = foreignKeys;","        newIndexes.create(con, database, this);","        if(existIndexes == null){","            this.indexes = newIndexes;","        }else{","            this.indexes = existIndexes;","            existIndexes.add(newIndexes);","        }","        write(con);","        for(int i=0; i\<foreignKeys.size(); i++){","            ForeignKey foreignKey = foreignKeys.get(i);","            Table pkTable = (Table)database.getTableView(con, foreignKey.pkTable);","            pkTable.references.add(foreignKey);","        }","    }","    Table(Database database, String name){","    \tsuper( name, null);","    \tthis.database = database;","\t\tindexes = null;","        references = null;","    }","    static void drop(Database database, String name) throws Exception{","        boolean ok = new File( Utils.createTableViewFileName( database, name ) ).delete();","        if(!ok) throw SmallSQLException.create(Language.TABLE_CANT_DROP, name);","    }","    void drop(SSConnection con) throws Exception{","\t\tTableStorePage storePage = requestLock( con, SQLTokenizer.CREATE, -1 );","\t\tif(storePage == null){","\t\t\tthrow SmallSQLException.create(Language.TABLE_CANT_DROP_LOCKED, name);","        }","\t\tcon.rollbackFile(raFile);","\t\tclose();","\t\tif(lobs != null)","\t\t\tlobs.drop(con);","\t\tif(indexes != null)","\t\t\tindexes.drop(database);","\t\tboolean ok = getFile(database).delete();","\t\tif(!ok) throw SmallSQLException.create(Language.TABLE_CANT_DROP, name);","    }","    @Override","    void close() throws Exception{","        if(indexes != null)","            indexes.close();","        raFile.close();","        raFile = null;","        if( lobs != null ){","            lobs.close();","            lobs = null;","        }","    }","    private void write(SSConnection con) throws Exception{","        raFile = createFile( con, database );","        firstPage = 8;","        StoreImpl store = getStore( con, firstPage, SQLTokenizer.CREATE);","        int count = columns.size();","        store.writeInt( count );","        for(int i=0; i\<count; i++){","            store.writeColumn(columns.get(i));","        }","\t\tfor(int i=0; i\<indexes.size(); i++){","\t\t\tIndexDescription indexDesc = indexes.get(i);","\t\t\tstore.writeInt( INDEX );","\t\t\tint offsetStart = store.getCurrentOffsetInPage();","\t\t\tstore.setCurrentOffsetInPage( offsetStart + 4 ); ","\t\t\tindexDesc.save(store);","\t\t\tint offsetEnd = store.getCurrentOffsetInPage();","\t\t\tstore.setCurrentOffsetInPage( offsetStart );","\t\t\tstore.writeInt( offsetEnd - offsetStart);","\t\t\tstore.setCurrentOffsetInPage( offsetEnd );","\t\t}","\t\tstore.writeInt( 0 ); ","\t\tstore.writeFinsh(null); ","        firstPage = store.getNextPagePos();","    }","\t@Override","    void writeMagic(FileChannel raFile) throws Exception{","        ByteBuffer buffer = ByteBuffer.allocate(8);","        buffer.putInt(MAGIC_TABLE);","        buffer.putInt(TABLE_VIEW_VERSION);","        buffer.position(0);","        raFile.write(buffer);","\t}","    StoreImpl getStore( SSConnection con, long filePos, int pageOperation ) throws Exception{","\t\tTableStorePage storePage = requestLock( con, pageOperation, filePos );","        return StoreImpl.createStore( this, storePage, pageOperation, filePos );","    }","\tStoreImpl getStore( TableStorePage storePage, int pageOperation ) throws Exception{","\t\treturn StoreImpl.recreateStore( this, storePage, pageOperation );","\t}","    StoreImpl getStoreInsert( SSConnection con ) throws Exception{","\t\tTableStorePage storePage = requestLock( con, SQLTokenizer.INSERT, -1 );","        return StoreImpl.createStore( this, storePage, SQLTokenizer.INSERT, -1 );","    }","\tStoreImpl getStoreTemp( SSConnection con ) throws Exception{","\t\tTableStorePage storePage = new TableStorePage( con, this, LOCK_NONE, -2);","\t\treturn StoreImpl.createStore( this, storePage, SQLTokenizer.INSERT, -2 );","\t}","\tStoreImpl getLobStore(SSConnection con, long filePos, int pageOperation) throws Exception{","\t\tif(lobs == null){","\t\t\tlobs = new Lobs( this );","\t\t}","\t\treturn lobs.getStore( con, filePos, pageOperation );","\t}","    final long getFirstPage(){","        return firstPage;","    }","    List getInserts(SSConnection con){","\t\tsynchronized(locks){","\t\t\tArrayList inserts = new ArrayList();","\t\t\tif(con.isolationLevel \<= Connection.TRANSACTION_READ_UNCOMMITTED){","\t\t\t\tfor(int i=0; i\<locksInsert.size(); i++){","\t\t\t\t\tTableStorePageInsert lock = (TableStorePageInsert)locksInsert.get(i);","\t\t\t\t\tinserts.add(lock.getLink());","\t\t\t\t}","\t\t\t}else{","\t\t\t\tfor(int i=0; i\<locksInsert.size(); i++){","\t\t\t\t\tTableStorePageInsert lock = (TableStorePageInsert)locksInsert.get(i);","\t\t\t\t\tif(lock.con == con)","\t\t\t\t\t\tinserts.add(lock.getLink());","\t\t\t\t}","\t\t\t}","\t\t\treturn inserts;","\t\t}    \t","    }","    final TableStorePage requestLock(SSConnection con, int pageOperation, long page) throws Exception{","    \tsynchronized(locks){","            if(raFile == null){","                throw SmallSQLException.create(Language.TABLE_MODIFIED, name);","            }","\t\t\tlong endTime = 0;","\t\t\twhile(true){","\t\t\t\tTableStorePage storePage = requestLockImpl( con, pageOperation, page);","\t\t\t\tif(storePage != null) ","\t\t\t\t\treturn storePage; ","\t\t\t\tif(endTime == 0)","\t\t\t\t\tendTime = System.currentTimeMillis() + 5000;","\t\t\t\tlong waitTime = endTime - System.currentTimeMillis();","\t\t\t\tif(waitTime \<= 0)","\t\t\t\t\tthrow SmallSQLException.create(Language.TABLE_DEADLOCK, name);","\t\t\t\tlocks.wait(waitTime);","\t\t\t}","    \t}","    }","\tfinal private TableStorePage requestLockImpl(SSConnection con, int pageOperation, long page) throws SQLException{","\t\tsynchronized(locks){","\t\t\tif(tabLockConnection != null && tabLockConnection != con) return null;","\t\t\tswitch(con.isolationLevel){","\t\t\t\tcase Connection.TRANSACTION_SERIALIZABLE:","\t\t\t\t\tserializeConnections.put( con, con);","\t\t\t\t\tbreak;","\t\t\t}","\t\t\tswitch(pageOperation){","\t\t\t\tcase SQLTokenizer.CREATE:{","\t\t\t\t\t\tif(locks.size() \> 0){","\t\t\t\t\t\t\tIterator values = locks.values().iterator();","\t\t\t\t\t\t\twhile(values.hasNext()){","\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();","\t\t\t\t\t\t\t\tif(lock.con != con) return null;","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}","\t\t\t\t\t\tfor(int i=0; i\<locksInsert.size(); i++){","\t\t\t\t\t\t\tTableStorePageInsert lock = (TableStorePageInsert)locksInsert.get(i);","\t\t\t\t\t\t\tif(lock.con != con) return null;","\t\t\t\t\t\t}","\t\t\t\t\t\tif(serializeConnections.size() \> 0){","\t\t\t\t\t\t\tIterator values = locks.values().iterator();","\t\t\t\t\t\t\twhile(values.hasNext()){","\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();","\t\t\t\t\t\t\t\tif(lock.con != con) return null;","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}","\t\t\t\t\t\ttabLockConnection = con;","\t\t\t\t\t\ttabLockCount++;","\t\t\t\t\t\tTableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);","\t\t\t\t\t\tcon.add(lock);","\t\t\t\t\t\treturn lock;","\t\t\t\t\t}","                case SQLTokenizer.ALTER:{","                    if(locks.size() \> 0 || locksInsert.size() \> 0){","                        return null;","                    }","                    if(serializeConnections.size() \> 0){","                        Iterator values = locks.values().iterator();","                        while(values.hasNext()){","                            TableStorePage lock = (TableStorePage)values.next();","                            if(lock.con != con) return null;","                        }","                    }","                    tabLockConnection = con;","                    tabLockCount++;","                    TableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);","                    lock.rollback();","                    return lock;","                }","\t\t\t\tcase SQLTokenizer.INSERT:{","\t\t\t\t\t\tif(serializeConnections.size() \> 1) return null;","\t\t\t\t\t\tif(serializeConnections.size() == 1 && serializeConnections.get(con) == null) return null;","\t\t\t\t\t\tTableStorePageInsert lock = new TableStorePageInsert(con, this, LOCK_INSERT);","\t\t\t\t\t\tlocksInsert.add( lock );","\t\t\t\t\t\tcon.add(lock);","\t\t\t\t\t\treturn lock;","\t\t\t\t\t}","\t\t\t\tcase SQLTokenizer.SELECT:","\t\t\t\tcase SQLTokenizer.UPDATE:{","\t\t\t\t\t\tLong pageKey = new Long(page); ","\t\t\t\t\t\tTableStorePage prevLock = null;","\t\t\t\t\t\tTableStorePage lock = (TableStorePage)locks.get( pageKey );","\t\t\t\t\t\tTableStorePage usableLock = null;","\t\t\t\t\t\twhile(lock != null){","\t\t\t\t\t\t\tif(lock.con == con || ","\t\t\t\t\t\t\t   con.isolationLevel \<= Connection.TRANSACTION_READ_UNCOMMITTED){","\t\t\t\t\t\t\t    usableLock = lock;","\t\t\t\t\t\t\t} else {","\t\t\t\t\t\t\t    if(lock.lockType == LOCK_WRITE){","\t\t\t\t\t\t\t        return null; ","\t\t\t\t\t\t\t    }","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tprevLock = lock;","\t\t\t\t\t\t\tlock = lock.nextLock;","\t\t\t\t\t\t}","\t\t\t\t\t\tif(usableLock != null){","\t\t\t\t\t\t    return usableLock;","\t\t\t\t\t\t}","\t\t\t\t\t\tlock = new TableStorePage( con, this, LOCK_NONE, page);","\t\t\t\t\t\tif(con.isolationLevel \>= Connection.TRANSACTION_REPEATABLE_READ || pageOperation == SQLTokenizer.UPDATE){","\t\t\t\t\t\t\tlock.lockType = pageOperation == SQLTokenizer.UPDATE ? LOCK_WRITE : LOCK_READ;","\t\t\t\t\t\t\tif(prevLock != null){","\t\t\t\t\t\t\t    prevLock.nextLock = lock.nextLock;","\t\t\t\t\t\t\t}else{","\t\t\t\t\t\t\t    locks.put( pageKey, lock );","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tcon.add(lock);","\t\t\t\t\t\t}","\t\t\t\t\t\treturn lock;\t\t\t\t\t\t\t","\t\t\t\t\t}","\t\t\t\tcase SQLTokenizer.LONGVARBINARY:","\t\t\t\t\treturn new TableStorePage( con, this, LOCK_INSERT, -1);","\t\t\t\tdefault:","\t\t\t\t\tthrow new Error(\"pageOperation:\"+pageOperation);","\t\t\t}","\t\t}","\t}","\tTableStorePage requestWriteLock(SSConnection con, TableStorePage readlock) throws SQLException{","\t\tif(readlock.lockType == LOCK_INSERT){","\t\t\tTableStorePage lock = new TableStorePage( con, this, LOCK_INSERT, -1);","\t\t\treadlock.nextLock = lock;","\t\t\tcon.add(lock);","\t\t\treturn lock;\t\t\t\t\t\t\t\t\t","\t\t}","\t\tLong pageKey = new Long(readlock.fileOffset); ","\t\tTableStorePage prevLock = null;","\t\tTableStorePage lock = (TableStorePage)locks.get( pageKey );","\t\twhile(lock != null){","\t\t\tif(lock.con != con) return null; ","\t\t\tif(lock.lockType \< LOCK_WRITE){","\t\t\t\tlock.lockType = LOCK_WRITE;","\t\t\t\treturn lock;","\t\t\t}","\t\t\tprevLock = lock;","\t\t\tlock = lock.nextLock;","\t\t}","\t\tlock = new TableStorePage( con, this, LOCK_WRITE, readlock.fileOffset);","\t\tif(prevLock != null){","\t\t    prevLock.nextLock = lock;","\t\t} else {","\t\t    locks.put( pageKey, lock );","\t\t}","\t\tcon.add(lock);","\t\treturn lock;\t\t\t\t\t\t\t\t\t","\t}","\tvoid freeLock(TableStorePage storePage){","\t\tfinal int lockType = storePage.lockType;","\t\tfinal long fileOffset = storePage.fileOffset;","\t\tsynchronized(locks){","\t\t\ttry{","\t\t\t\tTableStorePage lock;","\t\t\t\tTableStorePage prev;","\t\t\t\tswitch(lockType){","\t\t\t\t\tcase LOCK_INSERT:","\t\t\t\t\t\tfor(int i=0; i\<locksInsert.size(); i++){","\t\t\t\t\t\t\tprev = lock = (TableStorePage)locksInsert.get(i);","\t\t\t\t\t\t\twhile(lock != null){","\t\t\t\t\t\t\t\tif(lock == storePage){","\t\t\t\t\t\t\t\t\tif(lock == prev){","\t\t\t\t\t\t\t\t\t\tif(lock.nextLock == null){","\t\t\t\t\t\t\t\t\t\t\tlocksInsert.remove(i--);","\t\t\t\t\t\t\t\t\t\t}else{","\t\t\t\t\t\t\t\t\t\t\tlocksInsert.set( i, lock.nextLock );","\t\t\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t\t\t}else{","\t\t\t\t\t\t\t\t\t\tprev.nextLock = lock.nextLock;","\t\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t\t\treturn;","\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t\tprev = lock;","\t\t\t\t\t\t\t\tlock = lock.nextLock;","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase LOCK_READ:","\t\t\t\t\tcase LOCK_WRITE:","\t\t\t\t\t\tLong pageKey = new Long(fileOffset); ","\t\t\t\t\t\tlock = (TableStorePage)locks.get( pageKey );","\t\t\t\t\t\tprev = lock;","\t\t\t\t\t\twhile(lock != null){","\t\t\t\t\t\t\tif(lock == storePage){","\t\t\t\t\t\t\t\tif(lock == prev){","\t\t\t\t\t\t\t\t\tif(lock.nextLock == null){","\t\t\t\t\t\t\t\t\t\tlocks.remove(pageKey);","\t\t\t\t\t\t\t\t\t}else{","\t\t\t\t\t\t\t\t\t\tlocks.put( pageKey, lock.nextLock );","\t\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t\t}else{","\t\t\t\t\t\t\t\t\tprev.nextLock = lock.nextLock;","\t\t\t\t\t\t\t\t}","\t\t\t\t\t\t\t\treturn;","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tprev = lock;","\t\t\t\t\t\t\tlock = lock.nextLock;","\t\t\t\t\t\t}","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase LOCK_TAB:","\t\t\t\t\t\tassert storePage.con == tabLockConnection : \"Internal Error with TabLock\";","\t\t\t\t\t\tif(--tabLockCount == 0) tabLockConnection = null;","\t\t\t\t\t\tbreak;","\t\t\t\t\tdefault:","\t\t\t\t\t\tthrow new Error();","\t\t\t\t}","\t\t\t}finally{","\t\t\t\tlocks.notifyAll();","\t\t\t}","\t\t}","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|:["package smallsql.database;","import java.sql.*;","import smallsql.database.language.Language;","public class ExpressionArithmetic extends Expression {","    private Expression left;","    private Expression right;","    private Expression right2;","    private Expression[] inList;","    final private int operation;","    ExpressionArithmetic( Expression left, int operation){","    \tsuper(FUNCTION);","        this.left  = left;","        this.operation = operation;","        super.setParams( new Expression[]{ left });","    }","    ExpressionArithmetic( Expression left, Expression right, int operation){","\t\tsuper(FUNCTION);","        this.left   = left;","        this.right  = right;","        this.operation = operation;","        super.setParams( new Expression[]{ left, right });","    }","    ExpressionArithmetic( Expression left, Expression right, Expression right2, int operation){","\t\tsuper(FUNCTION);","        this.left   = left;","        this.right  = right;","        this.right2 = right2;","        this.operation = operation;","        super.setParams( new Expression[]{ left, right, right2 });","    }","    ExpressionArithmetic( Expression left, Expressions inList, int operation){","\t\tsuper(FUNCTION);","        this.left   = left;","        this.operation = operation;","\t\tExpression[] params;","        if(inList != null){","\t        this.inList = inList.toArray();","\t        params = new Expression[this.inList.length+1];","\t        params[0] = left;","\t        System.arraycopy(this.inList, 0, params, 1, this.inList.length);","        }else{","\t\t\tparams = new Expression[]{ left };","        }","        super.setParams( params );","    }","    int getOperation(){","        return operation;","    }","    private Expression convertExpressionIfNeeded( Expression expr, Expression other ){","        if(expr == null || other == null){","            return expr;","        }","        switch(expr.getDataType()){","        case SQLTokenizer.CHAR:","        case SQLTokenizer.NCHAR:","        case SQLTokenizer.BINARY:","            switch(other.getDataType()){","            case SQLTokenizer.VARCHAR:","            case SQLTokenizer.NVARCHAR:","            case SQLTokenizer.CLOB:","            case SQLTokenizer.NCLOB:","            case SQLTokenizer.LONGNVARCHAR:","            case SQLTokenizer.LONGVARCHAR:","            case SQLTokenizer.VARBINARY:","                ExpressionFunctionRTrim trim = new ExpressionFunctionRTrim();","                trim.setParams(new Expression[]{expr});","                return trim;","            case SQLTokenizer.CHAR:","            case SQLTokenizer.NCHAR:","            case SQLTokenizer.BINARY:","                if(other.getPrecision() \> expr.getPrecision()){","                    return new ExpressionFunctionConvert(new ColumnExpression(other), expr, null );","                }","                break; ","            }","            break;","        }","        return expr;","    }","\tfinal void setParamAt( Expression param, int idx){","\t\tswitch(idx){","\t\t\tcase 0:","\t\t\t\tleft = param;","\t\t\t\tbreak;","\t\t\tcase 1:","                if(right != null){","                    right = param;","                }","\t\t\t\tbreak;","\t\t\tcase 2:","                if(right != null){","                    right2 = param;","                }","\t\t\t\tbreak;","\t\t}","\t\tif(inList != null && idx\>0 && idx\<=inList.length){","\t\t\tinList[idx-1] = param;","\t\t}","\t\tsuper.setParamAt( param, idx );","\t}","\tpublic boolean equals(Object expr){","\t\tif(!super.equals(expr)) return false;","\t\tif(!(expr instanceof ExpressionArithmetic)) return false;","\t\tif( ((ExpressionArithmetic)expr).operation != operation) return false;","\t\treturn true;","\t}","    int getInt() throws java.lang.Exception {","        if(isNull()) return 0;","        int dataType = getDataType();","        switch(dataType){","            case SQLTokenizer.BIT:","            case SQLTokenizer.BOOLEAN:","\t\t\t\treturn getBoolean() ? 1 : 0;","            case SQLTokenizer.TINYINT:","            case SQLTokenizer.SMALLINT:","            case SQLTokenizer.INT:","\t\t\t\treturn getIntImpl();","            case SQLTokenizer.BIGINT:","                return (int)getLongImpl();","\t\t\tcase SQLTokenizer.REAL:","                return (int)getFloatImpl();","\t\t\tcase SQLTokenizer.FLOAT:","\t\t\tcase SQLTokenizer.DOUBLE:","            case SQLTokenizer.MONEY:","            case SQLTokenizer.SMALLMONEY:","            case SQLTokenizer.NUMERIC:","            case SQLTokenizer.DECIMAL:","                return (int)getDoubleImpl();","        }","        throw createUnspportedConversion( SQLTokenizer.INT);","    }","    private int getIntImpl() throws java.lang.Exception {","        switch(operation){","            case ADD:       return left.getInt() + right.getInt();","            case SUB:       return left.getInt() - right.getInt();","            case MUL:       return left.getInt() * right.getInt();","            case DIV:       return left.getInt() / right.getInt();","            case NEGATIVE:  return               - left.getInt();","            case MOD:\t\treturn left.getInt() % right.getInt();","            case BIT_NOT:   return               ~ left.getInt();","        }","        throw createUnspportedConversion( SQLTokenizer.INT);","    }","\tlong getLong() throws java.lang.Exception {","        if(isNull()) return 0;","        int dataType = getDataType();","        switch(dataType){","            case SQLTokenizer.BIT:","            case SQLTokenizer.BOOLEAN:","\t\t\t\treturn getBoolean() ? 1 : 0;","            case SQLTokenizer.TINYINT:","            case SQLTokenizer.SMALLINT:","            case SQLTokenizer.INT:","\t\t\t\treturn getIntImpl();","            case SQLTokenizer.BIGINT:","                return getLongImpl();","\t\t\tcase SQLTokenizer.REAL:","                return (long)getFloatImpl();","\t\t\tcase SQLTokenizer.FLOAT:","\t\t\tcase SQLTokenizer.DOUBLE:","            case SQLTokenizer.MONEY:","            case SQLTokenizer.SMALLMONEY:","            case SQLTokenizer.NUMERIC:","            case SQLTokenizer.DECIMAL:","                return (long)getDoubleImpl();","        }","\t\tthrow createUnspportedConversion( SQLTokenizer.LONG);","    }","\tprivate long getLongImpl() throws java.lang.Exception {","        if(isNull()) return 0;","        switch(operation){","            case ADD: return left.getLong() + right.getLong();","            case SUB: return left.getLong() - right.getLong();","            case MUL: return left.getLong() * right.getLong();","            case DIV: return left.getLong() / right.getLong();","            case NEGATIVE:  return          - left.getLong();","            case MOD:\t\treturn left.getLong() % right.getLong();","            case BIT_NOT:   return          ~ right.getInt();","        }","\t\tthrow createUnspportedConversion( SQLTokenizer.LONG);","    }","    double getDouble() throws java.lang.Exception {","        if(isNull()) return 0;","        int dataType = getDataType();","        switch(dataType){","            case SQLTokenizer.BIT:","            case SQLTokenizer.BOOLEAN:","\t\t\t\treturn getBoolean() ? 1 : 0;","            case SQLTokenizer.TINYINT:","            case SQLTokenizer.SMALLINT:","            case SQLTokenizer.INT:","\t\t\t\treturn getIntImpl();","            case SQLTokenizer.BIGINT:","                return getLongImpl();","\t\t\tcase SQLTokenizer.REAL:","                return getFloatImpl();","\t\t\tcase SQLTokenizer.FLOAT:","\t\t\tcase SQLTokenizer.DOUBLE:","            case SQLTokenizer.MONEY:","            case SQLTokenizer.SMALLMONEY:","            case SQLTokenizer.NUMERIC:","            case SQLTokenizer.DECIMAL:","                return getDoubleImpl();","        }","\t\tthrow createUnspportedConversion( SQLTokenizer.DOUBLE);","    }","    private double getDoubleImpl() throws java.lang.Exception{","\t\tif(operation == NEGATIVE)","\t\t\treturn getDoubleImpl(0, left.getDouble());","\t\treturn getDoubleImpl(left.getDouble(), right.getDouble());","\t}","    private double getDoubleImpl( double lVal, double rVal) throws java.lang.Exception{","        switch(operation){","            case ADD: return lVal + rVal;","            case SUB: return lVal - rVal;","            case MUL: return lVal * rVal;","            case DIV: return lVal / rVal;","            case NEGATIVE: return - rVal;","            case MOD:\t\treturn lVal % rVal;","        }","        throw createUnspportedConversion( SQLTokenizer.DOUBLE);","    }","    float getFloat() throws java.lang.Exception {","        if(isNull()) return 0;","        int dataType = getDataType();","        switch(dataType){","            case SQLTokenizer.BIT:","            case SQLTokenizer.BOOLEAN:","\t\t\t\treturn getBoolean() ? 1 : 0;","            case SQLTokenizer.TINYINT:","            case SQLTokenizer.SMALLINT:","            case SQLTokenizer.INT:","\t\t\t\treturn getIntImpl();","            case SQLTokenizer.BIGINT:","                return getLongImpl();","\t\t\tcase SQLTokenizer.REAL:","                return getFloatImpl();","\t\t\tcase SQLTokenizer.FLOAT:","\t\t\tcase SQLTokenizer.DOUBLE:","            case SQLTokenizer.MONEY:","            case SQLTokenizer.SMALLMONEY:","            case SQLTokenizer.NUMERIC:","            case SQLTokenizer.DECIMAL:","                return (float)getDoubleImpl();","        }","\t\tthrow createUnspportedConversion( SQLTokenizer.DOUBLE);","    }","    private float getFloatImpl() throws java.lang.Exception {","        switch(operation){","            case ADD: return left.getFloat() + right.getFloat();","            case SUB: return left.getFloat() - right.getFloat();","            case MUL: return left.getFloat() * right.getFloat();","            case DIV: return left.getFloat() / right.getFloat();","            case NEGATIVE:  return           - left.getFloat();","            case MOD:\t\treturn left.getFloat() % right.getFloat();","        }","        throw createUnspportedConversion( SQLTokenizer.REAL );","    }","    long getMoney() throws java.lang.Exception {","        if(isNull()) return 0;","        int dataType = getDataType();\t\t","        switch(dataType){","            case SQLTokenizer.BIT:","            case SQLTokenizer.BOOLEAN:","\t\t\t\treturn getBoolean() ? 10000 : 0;","            case SQLTokenizer.TINYINT:","            case SQLTokenizer.SMALLINT:","            case SQLTokenizer.INT:","\t\t\t\treturn getIntImpl() * 10000;","            case SQLTokenizer.BIGINT:","                return getLongImpl() * 10000;","\t\t\tcase SQLTokenizer.REAL:","                return Utils.doubleToMoney( getFloatImpl() );","\t\t\tcase SQLTokenizer.FLOAT:","\t\t\tcase SQLTokenizer.DOUBLE:","            case SQLTokenizer.NUMERIC:","            case SQLTokenizer.DECIMAL:","                return Utils.doubleToMoney( getDoubleImpl() );","            case SQLTokenizer.MONEY:","            case SQLTokenizer.SMALLMONEY:","\t\t\t\treturn getMoneyImpl();","        }","\t\tthrow createUnspportedConversion( SQLTokenizer.DOUBLE);","    }","    private long getMoneyImpl() throws java.lang.Exception {","        switch(operation){","            case ADD: return left.getMoney() + right.getMoney();","            case SUB: return left.getMoney() - right.getMoney();","            case MUL: return left.getMoney() * right.getMoney() / 10000;","            case DIV: return left.getMoney() * 10000 / right.getMoney();\t\t\t\t\t","            case NEGATIVE: return \t\t\t - left.getMoney();","        }","        throw createUnspportedConversion( SQLTokenizer.MONEY );","    }","    MutableNumeric getNumeric() throws java.lang.Exception {","        if(isNull()) return null;","        int dataType = getDataType();\t\t","        switch(dataType){","            case SQLTokenizer.BIT:","            case SQLTokenizer.BOOLEAN:","\t\t\t\treturn new MutableNumeric(getBoolean() ? 1 : 0);","            case SQLTokenizer.TINYINT:","            case SQLTokenizer.SMALLINT:","            case SQLTokenizer.INT:","\t\t\t\treturn new MutableNumeric(getIntImpl());","            case SQLTokenizer.BIGINT:","                return new MutableNumeric(getLongImpl());","\t\t\tcase SQLTokenizer.REAL:","                return new MutableNumeric(getFloatImpl());","\t\t\tcase SQLTokenizer.FLOAT:","\t\t\tcase SQLTokenizer.DOUBLE:","                return new MutableNumeric( getDoubleImpl() );","            case SQLTokenizer.NUMERIC:","            case SQLTokenizer.DECIMAL:","                return getNumericImpl();","            case SQLTokenizer.MONEY:","            case SQLTokenizer.SMALLMONEY:","\t\t\t\treturn new MutableNumeric(getMoneyImpl(),4);","        }","\t\tthrow createUnspportedConversion( SQLTokenizer.DOUBLE);","    }","    private MutableNumeric getNumericImpl() throws java.lang.Exception {","        switch(operation){","            case ADD: ","            \t{","\t\t\t\t\tMutableNumeric num = left.getNumeric();","            \t\tnum.add( right.getNumeric() );","            \t\treturn num;","            \t}","            case SUB:","\t\t\t\t{","\t\t\t\t\tMutableNumeric num = left.getNumeric();","\t\t\t\t\tnum.sub( right.getNumeric() );","\t\t\t\t\treturn num;","\t\t\t\t}","            case MUL: ","            \tif(getDataType(right.getDataType(), SQLTokenizer.INT) == SQLTokenizer.INT){","            \t\tMutableNumeric num = left.getNumeric();","            \t\tnum.mul(right.getInt());","            \t\treturn num;","            \t}else","            \tif(getDataType(left.getDataType(), SQLTokenizer.INT) == SQLTokenizer.INT){","\t\t\t\t\tMutableNumeric num = right.getNumeric();","\t\t\t\t\tnum.mul(left.getInt());","\t\t\t\t\treturn num;","            \t}else{","\t\t\t\t\tMutableNumeric num = left.getNumeric();","\t\t\t\t\tnum.mul( right.getNumeric() );","\t\t\t\t\treturn num;","            \t}","            case DIV:","            \t{","\t\t\t\t\tMutableNumeric num = left.getNumeric();","            \t\tif(getDataType(right.getDataType(), SQLTokenizer.INT) == SQLTokenizer.INT)","            \t\t\tnum.div( right.getInt() );","            \t\telse","            \t\t\tnum.div( right.getNumeric() ); ","            \t\treturn num;","            \t}","            case NEGATIVE:","            \t{","\t\t\t\t\tMutableNumeric num = left.getNumeric();","\t\t\t\t\tnum.setSignum(-num.getSignum());","\t\t\t\t\treturn num;","            \t}","            case MOD:","\t\t\t\t{","\t\t\t\t\tif(getDataType(getDataType(), SQLTokenizer.INT) == SQLTokenizer.INT)","\t\t\t\t\t\treturn new MutableNumeric(getInt());","\t\t\t\t\tMutableNumeric num = left.getNumeric();","\t\t\t\t\tnum.mod( right.getNumeric() );","\t\t\t\t\treturn num;","\t\t\t\t}","            default:    throw createUnspportedConversion( SQLTokenizer.NUMERIC );","        }","    }","    Object getObject() throws java.lang.Exception {","        if(isNull()) return null;","        int dataType = getDataType();","        switch(dataType){","            case SQLTokenizer.BIT:","            case SQLTokenizer.BOOLEAN:","                    return getBoolean() ? Boolean.TRUE : Boolean.FALSE;","            case SQLTokenizer.BINARY:","            case SQLTokenizer.VARBINARY:","                    return getBytes();","            case SQLTokenizer.TINYINT:","            case SQLTokenizer.SMALLINT:","            case SQLTokenizer.INT:","                    return new Integer( getInt() );","            case SQLTokenizer.BIGINT:","                    return new Long( getLong() );","            case SQLTokenizer.REAL:","                    return new Float( getFloat() );","            case SQLTokenizer.FLOAT:","            case SQLTokenizer.DOUBLE:","                    return new Double( getDouble() );","            case SQLTokenizer.MONEY:","            case SQLTokenizer.SMALLMONEY:","                    return Money.createFromUnscaledValue( getMoney() );","            case SQLTokenizer.NUMERIC:","            case SQLTokenizer.DECIMAL:","                    return getNumeric();","            case SQLTokenizer.CHAR:","            case SQLTokenizer.NCHAR:","            case SQLTokenizer.VARCHAR:","            case SQLTokenizer.NVARCHAR:","            case SQLTokenizer.LONGNVARCHAR:","            case SQLTokenizer.LONGVARCHAR:","            \t\treturn getString( left.getString(), right.getString() );","            case SQLTokenizer.JAVA_OBJECT:","                    Object lObj = left.getObject();","                    Object rObj = right.getObject();","                    if(lObj instanceof Number && rObj instanceof Number)","                        return new Double( getDoubleImpl( ((Number)lObj).doubleValue(), ((Number)rObj).doubleValue() ) );","                    else","                        return getString( lObj.toString(), rObj.toString() );","            case SQLTokenizer.LONGVARBINARY:","                    return getBytes();","\t\t\tcase SQLTokenizer.DATE:","\t\t\tcase SQLTokenizer.TIME:","\t\t\tcase SQLTokenizer.TIMESTAMP:","\t\t\tcase SQLTokenizer.SMALLDATETIME:","\t\t\t\treturn new DateTime( getLong(), dataType );","            case SQLTokenizer.UNIQUEIDENTIFIER:","                    return getBytes();","            default: throw createUnspportedDataType();","        }","    }","    boolean getBoolean() throws java.lang.Exception {","        switch(operation){","        \tcase OR:    return left.getBoolean() || right.getBoolean();","            case AND:   return left.getBoolean() && right.getBoolean();","            case NOT:   return                      !left.getBoolean();","            case LIKE:  return Utils.like( left.getString(), right.getString());","            case ISNULL:return \t\t\t\t\t\tleft.isNull();","\t\t\tcase ISNOTNULL:\treturn \t\t\t\t\t!left.isNull();","\t\t\tcase IN:\tif(right == null)","\t\t\t\t\t\t\treturn isInList();","\t\t\t\t\t\tbreak;","        }","        final boolean leftIsNull = left.isNull();","        int dataType;","        if(operation == NEGATIVE || operation == BIT_NOT){","        \tif(leftIsNull) return false;","        \tdataType = left.getDataType();","        }else{","            final boolean rightIsNull = right.isNull();","        \tif(operation == EQUALS_NULL && leftIsNull && rightIsNull) return true;","        \tif(leftIsNull || rightIsNull) return false;","        \tdataType = getDataType(left, right);","        }","        switch(dataType){","\t\t\tcase SQLTokenizer.BOOLEAN:","\t\t\t\t\tswitch(operation){","\t\t\t\t\t\tcase IN:","\t\t\t\t\t\tcase EQUALS_NULL:","\t\t\t\t\t\tcase EQUALS:    return left.getBoolean() == right.getBoolean();","\t\t\t\t\t\tcase UNEQUALS:  return left.getBoolean() != right.getBoolean();","\t\t\t\t\t}","            case SQLTokenizer.TINYINT:","            case SQLTokenizer.SMALLINT:","            case SQLTokenizer.INT:","            case SQLTokenizer.BIT:","                    switch(operation){","\t\t\t\t\t\tcase IN:","\t\t\t\t\t\tcase EQUALS_NULL:","                        case EQUALS:    return left.getInt() == right.getInt();","                        case GREATER:   return left.getInt() \>  right.getInt();","                        case GRE_EQU:   return left.getInt() \>= right.getInt();","                        case LESSER:    return left.getInt() \<  right.getInt();","                        case LES_EQU:   return left.getInt() \<= right.getInt();","                        case UNEQUALS:  return left.getInt() != right.getInt();","                        case BETWEEN:","                                        int _left = left.getInt();","                                        return _left \>= right.getInt() && right2.getInt() \>= _left;","                        default:","                        \treturn getInt() != 0;","                    }","            case SQLTokenizer.BIGINT:","\t\t\tcase SQLTokenizer.TIMESTAMP:","\t\t\tcase SQLTokenizer.TIME:","\t\t\tcase SQLTokenizer.DATE:","\t\t\tcase SQLTokenizer.SMALLDATETIME:","                    switch(operation){","\t\t\t\t\t\tcase IN:","\t\t\t\t\t\tcase EQUALS_NULL:","                        case EQUALS:    return left.getLong() == right.getLong();","                        case GREATER:   return left.getLong() \>  right.getLong();","                        case GRE_EQU:   return left.getLong() \>= right.getLong();","                        case LESSER:    return left.getLong() \<  right.getLong();","                        case LES_EQU:   return left.getLong() \<= right.getLong();","                        case UNEQUALS:  return left.getLong() != right.getLong();","                        case BETWEEN:","                                        long _left = left.getLong();","                                        return _left \>= right.getLong() && right2.getLong() \>= _left;","                        default:","                        \treturn getLong() != 0;","                    }","            case SQLTokenizer.REAL:","                    switch(operation){","\t\t\t\t\t\tcase IN:","\t\t\t\t\t\tcase EQUALS_NULL:","                        case EQUALS:    return left.getFloat() == right.getFloat();","                        case GREATER:   return left.getFloat() \>  right.getFloat();","                        case GRE_EQU:   return left.getFloat() \>= right.getFloat();","                        case LESSER:    return left.getFloat() \<  right.getFloat();","                        case LES_EQU:   return left.getFloat() \<= right.getFloat();","                        case UNEQUALS:  return left.getFloat() != right.getFloat();","                        case BETWEEN:","                                        float _left = left.getFloat();","                                        return _left \>= right.getFloat() && right2.getFloat() \>= _left;","                        default:","                        \treturn getFloat() != 0;","                    }","            case SQLTokenizer.FLOAT:","            case SQLTokenizer.DOUBLE:","                    switch(operation){","\t\t\t\t\t\tcase IN:","\t\t\t\t\t\tcase EQUALS_NULL:","                        case EQUALS:    return left.getDouble() == right.getDouble();","                        case GREATER:   return left.getDouble() \>  right.getDouble();","                        case GRE_EQU:   return left.getDouble() \>= right.getDouble();","                        case LESSER:    return left.getDouble() \<  right.getDouble();","                        case LES_EQU:   return left.getDouble() \<= right.getDouble();","                        case UNEQUALS:  return left.getDouble() != right.getDouble();","                        case BETWEEN:","                                        double _left = left.getDouble();","                                        return _left \>= right.getDouble() && right2.getDouble() \>= _left;","                        default:","                        \treturn getDouble() != 0;","                    }","            case SQLTokenizer.MONEY:","            case SQLTokenizer.SMALLMONEY:","                    switch(operation){","\t\t\t\t\t\tcase IN:","\t\t\t\t\t\tcase EQUALS_NULL:","                        case EQUALS:    return left.getMoney() == right.getMoney();","                        case GREATER:   return left.getMoney() \>  right.getMoney();","                        case GRE_EQU:   return left.getMoney() \>= right.getMoney();","                        case LESSER:    return left.getMoney() \<  right.getMoney();","                        case LES_EQU:   return left.getMoney() \<= right.getMoney();","                        case UNEQUALS:  return left.getMoney() != right.getMoney();","                        case BETWEEN:","                                        long _left = left.getMoney();","                                        return _left \>= right.getMoney() && right2.getMoney() \>= _left;","                        default:","                        \treturn getMoney() != 0;","                    }","            case SQLTokenizer.DECIMAL:","\t\t\tcase SQLTokenizer.NUMERIC:{","\t\t\t\t\tif(operation == NEGATIVE)","\t\t\t\t\t\treturn left.getNumeric().getSignum() != 0;","\t\t\t\t\tint comp = left.getNumeric().compareTo( right.getNumeric() );","\t\t\t\t\tswitch(operation){","\t\t\t\t\t\tcase IN:","\t\t\t\t\t\tcase EQUALS_NULL:","\t\t\t\t\t\tcase EQUALS:    return comp == 0;","\t\t\t\t\t\tcase GREATER:   return comp \>  0;","\t\t\t\t\t\tcase GRE_EQU:   return comp \>= 0;","\t\t\t\t\t\tcase LESSER:    return comp \<  0;","\t\t\t\t\t\tcase LES_EQU:   return comp \<= 0;","\t\t\t\t\t\tcase UNEQUALS:  return comp != 0;","\t\t\t\t\t\tcase BETWEEN:","\t\t\t\t\t\t\t\t\t\treturn comp \>= 0 && 0 \>= left.getNumeric().compareTo( right2.getNumeric() );","                        default:","                        \treturn getNumeric().getSignum() != 0;","\t\t\t\t\t}","\t\t\t\t\t}","            case SQLTokenizer.VARCHAR:","            case SQLTokenizer.NVARCHAR:","            case SQLTokenizer.CHAR:","            case SQLTokenizer.NCHAR:","            case SQLTokenizer.LONGVARCHAR:","            case SQLTokenizer.LONGNVARCHAR:","            case SQLTokenizer.CLOB:{","                    final String leftStr = left.getString();","                    final String rightStr = right.getString();","                    int comp = String.CASE_INSENSITIVE_ORDER.compare( leftStr, rightStr );","                    switch(operation){","\t\t\t\t\t\tcase IN:","\t\t\t\t\t\tcase EQUALS_NULL:","                        case EQUALS:    return comp == 0;","                        case GREATER:   return comp \>  0;","                        case GRE_EQU:   return comp \>= 0;","                        case LESSER:    return comp \<  0;","                        case LES_EQU:   return comp \<= 0;","                        case UNEQUALS:  return comp != 0;","                        case BETWEEN:","                                        return comp \>= 0 && 0 \>= String.CASE_INSENSITIVE_ORDER.compare( leftStr, right2.getString() );","                        case ADD:       return Utils.string2boolean(leftStr + rightStr);","                    }","                    break;}","            case SQLTokenizer.BINARY:","            case SQLTokenizer.VARBINARY:","            case SQLTokenizer.LONGVARBINARY:","            case SQLTokenizer.BLOB:","\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:{","                    byte[] leftBytes = left.getBytes();","                    byte[] rightBytes= right.getBytes();","                    int comp = Utils.compareBytes( leftBytes, rightBytes);","                    switch(operation){","\t\t\t\t\t\tcase IN:","\t\t\t\t\t\tcase EQUALS_NULL:","                        case EQUALS:    return comp == 0;","                        case GREATER:   return comp \>  0;","                        case GRE_EQU:   return comp \>= 0;","                        case LESSER:    return comp \<  0;","                        case LES_EQU:   return comp \<= 0;","                        case UNEQUALS:  return comp != 0;","                        case BETWEEN:","                                        return comp \>= 0 && 0 \>= Utils.compareBytes( leftBytes, right2.getBytes() );","                    }","                    break;}","        }","        throw createUnspportedDataType();","    }","    String getString() throws java.lang.Exception {","        if(isNull()) return null;","        return getObject().toString();","    }","    final private String getString( String lVal, String rVal ) throws java.lang.Exception {","        switch(operation){","            case ADD: return lVal + rVal;","        }","        throw createUnspportedConversion( SQLTokenizer.VARCHAR );","    }","    int getDataType() {","        switch(operation){","            case NEGATIVE:","            case BIT_NOT:","            \treturn left.getDataType();","\t\t\tcase EQUALS:","\t\t\tcase EQUALS_NULL:","\t\t\tcase GREATER:","\t\t\tcase GRE_EQU:","\t\t\tcase LESSER:","\t\t\tcase LES_EQU:","\t\t\tcase UNEQUALS:","\t\t\tcase BETWEEN:","\t\t\tcase OR:","\t\t\tcase AND:","\t\t\tcase NOT:","\t\t\tcase LIKE:","\t\t\tcase ISNULL:","\t\t\tcase ISNOTNULL:","\t\t\t \treturn SQLTokenizer.BOOLEAN;","            default:","            \treturn getDataType(left, right);","        }","    }","\tint getScale(){","\t\tint dataType = getDataType();","\t\tswitch(dataType){","\t\t\tcase SQLTokenizer.DECIMAL:","\t\t\tcase SQLTokenizer.NUMERIC:","\t\t\t\tswitch(operation){","\t\t\t\t\tcase ADD:","\t\t\t\t\tcase SUB:","\t\t\t\t\t\treturn Math.max(left.getScale(), right.getScale());","\t\t\t\t\tcase MUL:","\t\t\t\t\t\treturn left.getScale() + right.getScale();","\t\t\t\t\tcase DIV:","\t\t\t\t\t\treturn Math.max(left.getScale()+5, right.getScale()+4);","\t\t\t\t\tcase NEGATIVE:","\t\t\t\t\t\treturn left.getScale();","\t\t\t\t\tcase MOD:","\t\t\t\t\t\treturn 0;","\t\t\t\t}","\t\t}","\t\treturn getScale(dataType);","\t}","    boolean isNull() throws Exception{","        switch(operation){","\t        case OR:","\t        case AND:","\t        case NOT:","\t        case LIKE:","\t        case ISNULL:","\t\t\tcase ISNOTNULL:","\t\t\tcase IN:","\t\t\t\t\t\t\treturn false; ","            case NEGATIVE: ","            case BIT_NOT:","                           return                  left.isNull();","            default:       return left.isNull() || right.isNull();","        }","    }","    byte[] getBytes() throws java.lang.Exception {","        throw createUnspportedConversion( SQLTokenizer.BINARY );","    }","    boolean isInList() throws Exception{","    \tif(left.isNull()) return false;","    \ttry{","\t    \tfor(int i=0; i\<inList.length; i++){","\t    \t\tright = inList[i];","\t    \t\tif(getBoolean()) return true;","\t    \t}","    \t}finally{","    \t\tright = null;","    \t}","    \treturn false;","    }","    SQLException createUnspportedDataType(){","    \tObject[] params = {","    \t\t\tSQLTokenizer.getKeyWord(getDataType(left, right)),","    \t\t\tgetKeywordFromOperation(operation)","    \t};","        return SmallSQLException.create(Language.UNSUPPORTED_DATATYPE_OPER, params);","    }","    SQLException createUnspportedConversion( int dataType ){","        int type = left == null ? right.getDataType() : getDataType(left, right);","        Object[] params = new Object[] {","        \t\tSQLTokenizer.getKeyWord(dataType),","        \t\tSQLTokenizer.getKeyWord(type),","        \t\tgetKeywordFromOperation(operation)","        };","        return SmallSQLException.create(Language.UNSUPPORTED_CONVERSION_OPER, params);","    }","    void optimize() throws SQLException{","        super.optimize();","        Expression[] params = getParams();","        if(params.length == 1){","            return;","        }","        setParamAt( convertExpressionIfNeeded( params[0], params[1] ), 0 );","        for(int p=1; p\<params.length; p++){","            setParamAt( convertExpressionIfNeeded( params[p], left ), p );","        }","    }","    private static String getKeywordFromOperation(int operation){","    \tint token = 0;","    \tfor(int i=1; i\<1000; i++){","    \t\tif(getOperationFromToken(i) == operation){","\t\t\t\ttoken = i;","\t\t\t\tbreak;","    \t\t}","    \t}","    \tif(operation == NEGATIVE)  token = SQLTokenizer.MINUS;","    \tif(operation == ISNOTNULL) token =  SQLTokenizer.IS;","    \tString keyword = SQLTokenizer.getKeyWord(token);","    \tif(keyword == null) keyword = \"\" + (char)token;","    \treturn keyword;","    }","    static int getOperationFromToken( int value ){","        switch(value){","            case SQLTokenizer.PLUS:         return ADD;","            case SQLTokenizer.MINUS:        return SUB;","            case SQLTokenizer.ASTERISK:     return MUL;","            case SQLTokenizer.SLACH:        return DIV;","            case SQLTokenizer.PERCENT:      return MOD;","            case SQLTokenizer.EQUALS:       return EQUALS;","            case SQLTokenizer.GREATER:      return GREATER;","            case SQLTokenizer.GREATER_EQU:  return GRE_EQU;","            case SQLTokenizer.LESSER:       return LESSER;","            case SQLTokenizer.LESSER_EQU:   return LES_EQU;","            case SQLTokenizer.UNEQUALS:     return UNEQUALS;","            case SQLTokenizer.BETWEEN:      return BETWEEN;","            case SQLTokenizer.LIKE:         return LIKE;","            case SQLTokenizer.IN:           return IN;","\t\t\tcase SQLTokenizer.IS:           return ISNULL;","            case SQLTokenizer.OR:           return OR;","            case SQLTokenizer.AND:          return AND;","            case SQLTokenizer.NOT:          return NOT;","            case SQLTokenizer.BIT_OR:       return BIT_OR;","            case SQLTokenizer.BIT_AND:      return BIT_AND;","            case SQLTokenizer.BIT_XOR:      return BIT_XOR;","            case SQLTokenizer.TILDE:        return BIT_NOT;","            default:                        return 0;","        }","    }","    static int getDataType(Expression left, Expression right){","\t\tint typeLeft  = left.getDataType();","\t\tint typeRight = right.getDataType();","\t\treturn getDataType( typeLeft, typeRight);","    }","\tstatic int getBestNumberDataType(int paramDataType){","\t\tint dataTypeIdx = Utils.indexOf( paramDataType, DatatypeRange);","\t\tif(dataTypeIdx \>= NVARCHAR_IDX)","\t\t\treturn SQLTokenizer.DOUBLE;","\t\tif(dataTypeIdx \>= INT_IDX)","\t\t\treturn SQLTokenizer.INT;","\t\tif(dataTypeIdx \>= BIGINT_IDX)","\t\t\treturn SQLTokenizer.BIGINT;","\t\tif(dataTypeIdx \>= MONEY_IDX)","\t\t\treturn SQLTokenizer.MONEY;","\t\tif(dataTypeIdx \>= DECIMAL_IDX)","\t\t\treturn SQLTokenizer.DECIMAL;","\t\treturn SQLTokenizer.DOUBLE;","\t}","\tstatic int getDataType(int typeLeft, int typeRight){","\t\tif(typeLeft == typeRight) return typeLeft;","\t\tint dataTypeIdx = Math.min( Utils.indexOf( typeLeft, DatatypeRange), Utils.indexOf( typeRight, DatatypeRange) );","\t\tif(dataTypeIdx \< 0) throw new Error(\"getDataType(): \"+typeLeft+\", \"+typeRight);","\t\treturn DatatypeRange[ dataTypeIdx ];","    }","    static final int OR         = 11; ","    static final int AND        = 21; ","    static final int NOT        = 31; ","    static final int BIT_OR     = 41; ","    static final int BIT_AND    = 42; ","    static final int BIT_XOR    = 43; ","    static final int EQUALS     = 51; ","\tstatic final int EQUALS_NULL= 52; ","    static final int GREATER    = 53; ","    static final int GRE_EQU    = 54; ","    static final int LESSER     = 55; ","    static final int LES_EQU    = 56; ","    static final int UNEQUALS   = 57; ","\tstatic final int IN         = 61; ","\tstatic final int BETWEEN    = 62; ","\tstatic final int LIKE       = 63; ","\tstatic final int ISNULL     = 64; ","\tstatic final int ISNOTNULL  = ISNULL+1; ","    static final int ADD        = 71; ","    static final int SUB        = 72; ","    static final int MUL        = 81; ","    static final int DIV        = 82; ","    static final int MOD        = 83; ","    static final int BIT_NOT    = 91; ","    static final int NEGATIVE   =101; ","    private static final int[] DatatypeRange = {","        SQLTokenizer.TIMESTAMP,","        SQLTokenizer.SMALLDATETIME,","\t\tSQLTokenizer.DATE,","\t\tSQLTokenizer.TIME,","        SQLTokenizer.DOUBLE,","        SQLTokenizer.FLOAT,","        SQLTokenizer.REAL,","        SQLTokenizer.DECIMAL,","        SQLTokenizer.NUMERIC,","        SQLTokenizer.MONEY,","        SQLTokenizer.SMALLMONEY,","        SQLTokenizer.BIGINT,","        SQLTokenizer.INT,","        SQLTokenizer.SMALLINT,","        SQLTokenizer.TINYINT,","        SQLTokenizer.BIT,","        SQLTokenizer.BOOLEAN,","        SQLTokenizer.LONGNVARCHAR,","        SQLTokenizer.UNIQUEIDENTIFIER,","        SQLTokenizer.NVARCHAR,","        SQLTokenizer.NCHAR,","        SQLTokenizer.VARCHAR,","        SQLTokenizer.CHAR,","\t\tSQLTokenizer.LONGVARCHAR,","        SQLTokenizer.CLOB,","        SQLTokenizer.VARBINARY,","        SQLTokenizer.BINARY,","        SQLTokenizer.LONGVARBINARY,","        SQLTokenizer.BLOB,","    \tSQLTokenizer.NULL};","\tprivate static int NVARCHAR_IDX = Utils.indexOf( SQLTokenizer.NVARCHAR, DatatypeRange);","\tprivate static int INT_IDX = Utils.indexOf( SQLTokenizer.INT, DatatypeRange);","\tprivate static int BIGINT_IDX = Utils.indexOf( SQLTokenizer.BIGINT, DatatypeRange);","\tprivate static int MONEY_IDX = Utils.indexOf( SQLTokenizer.MONEY, DatatypeRange);","\tprivate static int DECIMAL_IDX = Utils.indexOf( SQLTokenizer.DECIMAL, DatatypeRange);","}"],|project://smallsql/src/smallsql/junit/TestScrollable.java|:["package smallsql.junit;","import java.sql.*;","public class TestScrollable extends BasicTestCase {","\tpublic void testLastWithWhere() throws Exception{","\t\tConnection con = AllTests.getConnection();","\t\ttry{\t\t\t","\t\t\tcon.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");","\t\t\tassertRowCount( 0, \"Select * from Scrollable\");","\t\t\tcon.createStatement().execute(\"Insert Into Scrollable(v) Values(\'qwert\')\");","\t\t\tassertRowCount( 1, \"Select * from Scrollable\");","\t\t\tassertRowCount( 0, \"Select * from Scrollable Where 1=0\");","\t\t\tStatement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);","            testLastWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0\") );","            testLastWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0 Order By v\") );","            testLastWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Order By v\") );","            testLastWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v Order By v\") );","\t\t}finally{","            dropTable( con, \"Scrollable\");","\t\t}","\t}","    private void testLastWithWhereAssert(ResultSet rs) throws Exception{","        assertFalse( \"There should be no rows:\", rs.last());","        assertFalse( \"isLast\", rs.isLast());","        try{","            rs.getString(\"v\");","            fail(\"SQLException \'No current row\' should be throw\");","        }catch(SQLException ex){","            assertSQLException( \"01000\", 0, ex );","        }","    }","\tpublic void testNextWithWhere() throws Exception{","\t\tConnection con = AllTests.getConnection();","\t\ttry{\t\t\t","\t\t\tcon.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");","\t\t\tassertRowCount( 0, \"Select * from Scrollable\");","\t\t\tcon.createStatement().execute(\"Insert Into Scrollable(v) Values(\'qwert\')\");","\t\t\tassertRowCount( 1, \"Select * from Scrollable\");","\t\t\tassertRowCount( 0, \"Select * from Scrollable Where 1=0\");","            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);","            testNextWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0\") );","            testNextWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0 Order By v\") );","            testNextWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v\") );","            testNextWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v Order By v\") );","\t\t}finally{","            dropTable( con, \"Scrollable\");","\t\t}","\t}","    private void testNextWithWhereAssert(ResultSet rs) throws Exception{","        assertFalse(\"There should be no rows:\", rs.next());","        try{","            rs.getString(\"v\");","            fail(\"SQLException \'No current row\' should be throw\");","        }catch(SQLException ex){","            assertSQLException( \"01000\", 0, ex);","        }","    }","\tpublic void testFirstWithWhere() throws Exception{","\t\tConnection con = AllTests.getConnection();","\t\ttry{\t\t\t","\t\t\tcon.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");","\t\t\tassertRowCount( 0, \"Select * from Scrollable\");","\t\t\tcon.createStatement().execute(\"Insert Into Scrollable(v) Values(\'qwert\')\");","\t\t\tassertRowCount( 1, \"Select * from Scrollable\");","\t\t\tassertRowCount( 0, \"Select * from Scrollable Where 1=0\");","            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);","            testFirstWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0\") );","            testFirstWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0 Order By v\") );","            testFirstWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v\") );","            testFirstWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v Order By v\") );","\t\t}finally{","            dropTable( con, \"Scrollable\");","\t\t}","\t}","    private void testFirstWithWhereAssert(ResultSet rs) throws Exception{","        assertFalse( \"isFirst\", rs.isFirst() );","        assertTrue( rs.isBeforeFirst() );","        assertFalse( \"There should be no rows:\", rs.first());","        assertFalse( \"isFirst\", rs.isFirst() );","        assertTrue( rs.isBeforeFirst() );","        try{","            rs.getString(\"v\");","            fail(\"SQLException \'No current row\' should be throw\");","        }catch(SQLException ex){","            assertSQLException(\"01000\", 0, ex);","        }","    }","\tpublic void testPreviousWithWhere() throws Exception{","\t\tConnection con = AllTests.getConnection();","\t\ttry{\t\t\t","\t\t\tcon.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");","\t\t\tassertRowCount( 0, \"Select * from Scrollable\");","\t\t\tcon.createStatement().execute(\"Insert Into Scrollable(v) Values(\'qwert\')\");","\t\t\tassertRowCount( 1, \"Select * from Scrollable\");","\t\t\tassertRowCount( 0, \"Select * from Scrollable Where 1=0\");","            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);","            testPreviousWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0\") );","            testPreviousWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0 Order By v\") );","            testPreviousWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v\") );","            testPreviousWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v Order By v\") );","            testPreviousWithWhereAssert( st.executeQuery(\"Select v from Scrollable Group By v Having 1=0 Order By v\") );","\t\t}finally{","            dropTable( con, \"Scrollable\");","\t\t}","\t}","    private void testPreviousWithWhereAssert(ResultSet rs) throws Exception{","        assertTrue( rs.isBeforeFirst() );","        assertTrue( rs.isAfterLast() );","        rs.afterLast();","        assertTrue( rs.isAfterLast() );","        assertFalse(\"There should be no rows:\", rs.previous());","        try{","            rs.getString(\"v\");","            fail(\"SQLException \'No current row\' should be throw\");","        }catch(SQLException ex){","            assertSQLException(\"01000\", 0, ex);","        }","    }","\tpublic void testAbsoluteRelative() throws Exception{","\t\tConnection con = AllTests.getConnection();","\t\ttry{\t\t\t","\t\t\tcon.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");","\t\t\tassertRowCount( 0, \"Select * from Scrollable\");","\t\t\tcon.createStatement().execute(\"Insert Into Scrollable(v) Values(\'qwert1\')\");","\t\t\tcon.createStatement().execute(\"Insert Into Scrollable(v) Values(\'qwert2\')\");","\t\t\tcon.createStatement().execute(\"Insert Into Scrollable(v) Values(\'qwert3\')\");","            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);","            testAbsoluteRelativeAssert( st.executeQuery(\"Select * from Scrollable\") );","            testAbsoluteRelativeAssert( st.executeQuery(\"Select * from Scrollable Order By i\") );","            testAbsoluteRelativeAssert( st.executeQuery(\"Select v from Scrollable Group By v\") );","            testAbsoluteRelativeAssert( st.executeQuery(\"Select v from Scrollable Group By v Order By v\") );","\t\t}finally{","            dropTable( con, \"Scrollable\");","\t\t}","\t}","    private void testAbsoluteRelativeAssert(ResultSet rs) throws SQLException{","        assertEquals(0, rs.getRow());","        assertTrue(rs.absolute(2));","        assertEquals(\"qwert2\", rs.getString(\"v\"));","        assertEquals(2, rs.getRow());","        assertTrue(rs.relative(-1));","        assertEquals(\"qwert1\", rs.getString(\"v\"));","        assertEquals(1, rs.getRow());","        assertTrue(rs.absolute(1));","        assertEquals(\"qwert1\", rs.getString(\"v\"));","        assertEquals(1, rs.getRow());","        assertTrue(rs.isFirst());","        assertTrue(rs.relative(1));","        assertEquals(\"qwert2\", rs.getString(\"v\"));","        assertEquals(2, rs.getRow());","        assertFalse(rs.isLast());","        assertFalse(rs.isFirst());","        assertTrue(rs.absolute(-1));","        assertEquals(\"qwert3\", rs.getString(\"v\"));","        assertEquals(3, rs.getRow());","        assertTrue(rs.isLast());","        assertFalse(rs.isFirst());","        assertTrue(rs.relative(0));","        assertEquals(\"qwert3\", rs.getString(\"v\"));","        assertEquals(3, rs.getRow());","        assertTrue(rs.isLast());","        assertFalse(rs.isFirst());","        assertFalse(rs.absolute(4));","        assertEquals(0, rs.getRow());","        assertFalse(rs.isLast());","        assertFalse(rs.isFirst());","        assertFalse(rs.isBeforeFirst());","        assertTrue(rs.isAfterLast());","        assertTrue(rs.last());","        assertEquals(3, rs.getRow());","        assertTrue(rs.isLast());","        assertFalse(rs.isFirst());","        assertFalse(rs.absolute(-4));","        assertEquals(0, rs.getRow());","        assertFalse(rs.isLast());","        assertFalse(rs.isFirst());","        assertTrue(rs.isBeforeFirst());","        assertFalse(rs.isAfterLast());","        assertFalse(rs.relative(4));","        assertEquals(0, rs.getRow());","        assertFalse(rs.isLast());","        assertFalse(rs.isFirst());","        assertFalse(rs.isBeforeFirst());","        assertTrue(rs.isAfterLast());","        assertFalse(rs.relative(-4));","        assertEquals(0, rs.getRow());","        assertFalse(rs.isLast());","        assertFalse(rs.isFirst());","        assertTrue(rs.isBeforeFirst());","        assertFalse(rs.isAfterLast());","    }","    public void testUpdatable() throws Exception{","        Connection con = AllTests.getConnection();","        try{            ","            con.createStatement().execute(\"Create Table Scrollable (i int Identity primary key, v varchar(20))\");","            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);","            for(int row = 1; row \< 4; row++){","                testUpdatableAssert( con, st.executeQuery(\"Select * from Scrollable\"), row );","                testUpdatableAssert( con, st.executeQuery(\"Select * from Scrollable Order By i\"), row );","                testUpdatableAssert( con, st.executeQuery(\"Select * from Scrollable Where 1 = 1\"), row );","                testUpdatableAssert( con, st.executeQuery(\"Select * from Scrollable Where 1 = 1 Order By i\"), row );","                con.createStatement().execute(\"Insert Into Scrollable(v) Values(\'qwert\" +row + \"\')\");","            }","        }finally{","            dropTable( con, \"Scrollable\");","        }","    }","    private void testUpdatableAssert( Connection con, ResultSet rs, int row) throws Exception{","        con.setAutoCommit(false);","        for(int r=row; r \< 4; r++){","            rs.moveToInsertRow();","            rs.updateString( \"v\", \"qwert\" + r);","            rs.insertRow();","        }","        assertTrue( rs.last() );","        assertEquals( 3, rs.getRow() );     ","        rs.beforeFirst();","        assertRowCount( 3, rs );","        rs.beforeFirst();","        testAbsoluteRelativeAssert(rs);","        con.rollback();","        assertRowCount( row - 1, con.createStatement().executeQuery(\"Select * from Scrollable\"));","        rs.last();","        assertTrue( rs.rowDeleted() );","        assertTrue( rs.rowInserted() );","        rs.beforeFirst();","        assertRowCount( 3, rs );","        con.setAutoCommit(true);","    }","}"],|project://smallsql/src/smallsql/database/TableStorePage.java|:["package smallsql.database;","import java.sql.*;","public class TableStorePage extends StorePage{","    final Table table;","\tint lockType;","\tSSConnection con;","\tTableStorePage nextLock;","\tTableStorePage(SSConnection con, Table table, int lockType, long fileOffset){","\t\tsuper( null, 0, table.raFile, fileOffset );","\t\tthis.con \t= con;","\t\tthis.table = table;","\t\tthis.lockType \t= lockType;","\t}","    byte[] getData(){","    \treturn page;","    }","    long commit() throws SQLException{","\t\tif(nextLock != null){","\t\t\tfileOffset = nextLock.commit();","\t\t\tnextLock = null;","\t\t\trollback();","\t\t\treturn fileOffset;","\t\t}","    \tif(lockType == TableView.LOCK_READ)","    \t\treturn fileOffset;","    \treturn super.commit();","    }","    final void freeLock(){","    \ttable.freeLock(this);","    }","}"],|project://smallsql/src/smallsql/database/MemoryStream.java|:["package smallsql.database;","import java.io.*;","import java.nio.ByteBuffer;","import java.nio.channels.FileChannel;","class MemoryStream {","\tprivate byte[] puffer;","\tprivate int offset;","\tMemoryStream(){","\t\tpuffer = new byte[256];","\t}","\tvoid writeTo(FileChannel file) throws IOException{","\t    ByteBuffer buffer = ByteBuffer.wrap( puffer, 0, offset );","\t\tfile.write(buffer);","\t}","\tvoid writeByte(int value){","\t\tverifyFreePufferSize(1);","\t\tpuffer[ offset++ ] = (byte)(value);","\t}","\tvoid writeShort(int value){","\t\tverifyFreePufferSize(2);","\t\tpuffer[ offset++ ] = (byte)(value \>\> 8);","\t\tpuffer[ offset++ ] = (byte)(value);","\t}","\tvoid writeInt(int value){","\t\tverifyFreePufferSize(4);","\t\tpuffer[ offset++ ] = (byte)(value \>\> 24);","\t\tpuffer[ offset++ ] = (byte)(value \>\> 16);","\t\tpuffer[ offset++ ] = (byte)(value \>\> 8);","\t\tpuffer[ offset++ ] = (byte)(value);","\t}","\tvoid writeLong(long value){","\t\tverifyFreePufferSize(8);","\t\tpuffer[ offset++ ] = (byte)(value \>\> 56);","\t\tpuffer[ offset++ ] = (byte)(value \>\> 48);","\t\tpuffer[ offset++ ] = (byte)(value \>\> 40);","\t\tpuffer[ offset++ ] = (byte)(value \>\> 32);","\t\tpuffer[ offset++ ] = (byte)(value \>\> 24);","\t\tpuffer[ offset++ ] = (byte)(value \>\> 16);","\t\tpuffer[ offset++ ] = (byte)(value \>\> 8);","\t\tpuffer[ offset++ ] = (byte)(value);","\t}","\tvoid writeChars(char[] value){","\t\tverifyFreePufferSize(2*value.length);","\t\tfor(int i=0; i\<value.length; i++){","\t\t\tchar c = value[i];","\t\t\tpuffer[ offset++ ] = (byte)(c \>\> 8);","\t\t\tpuffer[ offset++ ] = (byte)(c);","\t\t}","\t}","\tvoid writeBytes(byte[] value, int off, int length){","\t\tverifyFreePufferSize(length);","\t\tSystem.arraycopy(value, off, puffer, offset, length);","\t\toffset += length;","\t}","\tprivate void verifyFreePufferSize(int freeSize){","\t\tint minSize = offset+freeSize;","\t\tif(minSize \< puffer.length){","\t\t\tint newSize = puffer.length \<\< 1;","\t\t\tif(newSize \< minSize) newSize = minSize;","\t\t\tbyte[] temp = new byte[newSize];","\t\t\tSystem.arraycopy(puffer, 0, temp, 0, offset);","\t\t\tpuffer = temp;","\t\t}","\t}","    void skip(int count){","        offset += count;","    }","\tint readByte(){","\t\treturn puffer[ offset++ ];","\t}","\tint readShort(){","\t\treturn ((puffer[ offset++ ] & 0xFF) \<\< 8) | (puffer[ offset++ ] & 0xFF);","\t}","\tint readInt(){","\t\treturn ((puffer[ offset++ ] & 0xFF) \<\< 24)","\t\t\t | ((puffer[ offset++ ] & 0xFF) \<\< 16)","\t\t\t | ((puffer[ offset++ ] & 0xFF) \<\< 8)","\t\t\t |  (puffer[ offset++ ] & 0xFF);","\t}","\tlong readLong(){","\t\treturn (((long)(puffer[ offset++ ] & 0xFF)) \<\< 56)","\t\t\t | (((long)(puffer[ offset++ ] & 0xFF)) \<\< 48)","\t\t\t | (((long)(puffer[ offset++ ] & 0xFF)) \<\< 40)","\t\t\t | (((long)(puffer[ offset++ ] & 0xFF)) \<\< 32)","\t\t\t | ((puffer[ offset++ ] & 0xFF) \<\< 24)","\t\t\t | ((puffer[ offset++ ] & 0xFF) \<\< 16)","\t\t\t | ((puffer[ offset++ ] & 0xFF) \<\< 8)","\t\t\t |  (puffer[ offset++ ] & 0xFF);","\t}","\tchar[] readChars(int length){","\t\tchar[] chars = new char[length];","\t\tfor(int i=0; i\<length; i++){","\t\t\tchars[i] = (char)readShort();","\t\t}","\t\treturn chars;","\t}","\tbyte[] readBytes(int length){","\t\tbyte[] bytes = new byte[length];","\t\tSystem.arraycopy(puffer, offset, bytes, 0, length);","\t\toffset += length;","\t\treturn bytes;","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|:["package smallsql.database;","abstract class ExpressionFunctionReturnP1 extends ExpressionFunction {","    boolean isNull() throws Exception{","        return param1.isNull();","    }","    Object getObject() throws Exception{","\t\tif(isNull()) return null;","        int dataType = getDataType();","        switch(dataType){","\t        case SQLTokenizer.BIT:","\t        case SQLTokenizer.BOOLEAN:","\t                return getBoolean() ? Boolean.TRUE : Boolean.FALSE;","\t        case SQLTokenizer.BINARY:","\t        case SQLTokenizer.VARBINARY:","\t                return getBytes();","\t        case SQLTokenizer.TINYINT:","\t        case SQLTokenizer.SMALLINT:","\t        case SQLTokenizer.INT:","\t                return new Integer( getInt() );","\t        case SQLTokenizer.BIGINT:","\t                return new Long( getLong() );","\t        case SQLTokenizer.REAL:","\t                return new Float( getFloat() );","\t        case SQLTokenizer.FLOAT:","\t        case SQLTokenizer.DOUBLE:","\t                return new Double( getDouble() );","\t        case SQLTokenizer.MONEY:","\t        case SQLTokenizer.SMALLMONEY:","\t                return Money.createFromUnscaledValue( getMoney() );","\t        case SQLTokenizer.NUMERIC:","\t        case SQLTokenizer.DECIMAL:","\t                return getNumeric();","\t        case SQLTokenizer.CHAR:","\t        case SQLTokenizer.NCHAR:","\t        case SQLTokenizer.VARCHAR:","\t        case SQLTokenizer.NVARCHAR:","\t        case SQLTokenizer.LONGNVARCHAR:","\t        case SQLTokenizer.LONGVARCHAR:","\t        \t\treturn getString();","\t        case SQLTokenizer.LONGVARBINARY:","\t                return getBytes();","\t\t\tcase SQLTokenizer.DATE:","\t\t\tcase SQLTokenizer.TIME:","\t\t\tcase SQLTokenizer.TIMESTAMP:","\t\t\tcase SQLTokenizer.SMALLDATETIME:","\t\t\t\treturn new DateTime( getLong(), dataType );","\t        case SQLTokenizer.UNIQUEIDENTIFIER:","\t                return getBytes();","\t        default: throw createUnspportedDataType(param1.getDataType());","\t    }","    }","\tint getDataType() {","\t\treturn param1.getDataType();","\t}","\tint getPrecision() {","\t\treturn param1.getPrecision();","\t}","\tfinal int getScale(){","\t\treturn param1.getScale();","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionCeiling.java|:["package smallsql.database;","final class ExpressionFunctionCeiling extends ExpressionFunctionReturnFloat {","    final int getFunction(){ return SQLTokenizer.CEILING; }","    final double getDouble() throws Exception{","\t\tif(isNull()) return 0;","        return Math.ceil( param1.getDouble() );","    }","}"],|project://smallsql/src/smallsql/database/SQLParser.java|:["package smallsql.database;","import java.util.List;","import java.sql.*;","import smallsql.database.language.Language;","final class SQLParser {","\tSSConnection con;","\tprivate char[] sql;","    private List tokens;","    private int tokenIdx;","    Command parse(SSConnection con, String sqlString) throws SQLException{","    \tthis.con = con;","        Command cmd = parse( sqlString.toCharArray() );","        SQLToken token = nextToken();","        if(token != null){","        \tthrow createSyntaxError(token, Language.STXADD_ADDITIONAL_TOK);","        }","        return cmd;","    }","    final private Command parse(char[] sql) throws SQLException{","        this.sql = sql;","        this.tokens = SQLTokenizer.parseSQL( sql );","        tokenIdx = 0;","        SQLToken token = nextToken(COMMANDS);","        switch (token.value){","            case SQLTokenizer.SELECT:","                    return select();","            case SQLTokenizer.DELETE:","                    return delete();","            case SQLTokenizer.INSERT:","                    return insert();","            case SQLTokenizer.UPDATE:","                    return update();","            case SQLTokenizer.CREATE:","                    return create();","            case SQLTokenizer.DROP:","                    return drop();","            case SQLTokenizer.ALTER:","                    return alter();","            case SQLTokenizer.SET:","                    return set();","\t\t\tcase SQLTokenizer.USE:","\t\t\t\t\ttoken = nextToken(MISSING_EXPRESSION);","\t\t\t\t\tString name = token.getName( sql );","\t\t\t\t\tcheckValidIdentifier( name, token );","\t\t\t\t\tCommandSet set = new CommandSet( con.log, SQLTokenizer.USE);","\t\t\t\t\tset.name = name;","\t\t\t\t\treturn set;","            case SQLTokenizer.EXECUTE:","                    return execute();","            case SQLTokenizer.TRUNCATE:","            \t\treturn truncate();","            default:","                    throw new Error();","        }","    }","    Expression parseExpression(String expr) throws SQLException{","\t\tthis.sql = expr.toCharArray();","\t\tthis.tokens = SQLTokenizer.parseSQL( sql );","\t\ttokenIdx = 0;","    \treturn expression( null, 0);","    }","    private SQLException createSyntaxError(SQLToken token, String addMessageCode) {","    \tString message = getErrorString(token, addMessageCode, null);","    \treturn SmallSQLException.create(Language.CUSTOM_MESSAGE, message);","    }","    private SQLException createSyntaxError(SQLToken token, String addMessageCode, ","    \t\tObject param0) {","    \tString message = getErrorString(token, addMessageCode, param0);","    \treturn SmallSQLException.create(Language.CUSTOM_MESSAGE, message);","    }","    private SQLException createSyntaxError(SQLToken token, int[] validValues){","    \tString msgStr = SmallSQLException.translateMsg(","    \t\t\tLanguage.STXADD_KEYS_REQUIRED, new Object[] { });","    \tStringBuffer msgBuf = new StringBuffer( msgStr );","        for(int i=0; i\<validValues.length; i++){","            String name = SQLTokenizer.getKeyWord(validValues[i]);","            if(name == null) name = String.valueOf( (char)validValues[i] );","            msgBuf.append( name );","            if (i \< validValues.length - 2)","                msgBuf.append( \", \");","            else","            if ( i == validValues.length - 2 )","                msgBuf.append( \" or \");","        }","    \tString message = getErrorString(","    \t\t\ttoken, Language.CUSTOM_MESSAGE, msgBuf);","    \treturn SmallSQLException.create(Language.CUSTOM_MESSAGE, message);","    }","    private String getErrorString(SQLToken token, String middleMsgCode, ","    \t\tObject middleMsgParam) {","    \tStringBuffer buffer = new StringBuffer(1024);","        if(token != null){","        \tObject[] params = { String.valueOf(token.offset),","        \t\t\t\t\t\tString.valueOf(sql, token.offset, token.length) };","        \tString begin = SmallSQLException.translateMsg(Language.SYNTAX_BASE_OFS, params);","        \tbuffer.append(begin);","        }","        else{","        \tString begin = SmallSQLException.translateMsg(","        \t\t\tLanguage.SYNTAX_BASE_END, new Object[] { });","        \tbuffer.append(begin);","        }","    \tString middle = SmallSQLException.translateMsg(","    \t\t\tmiddleMsgCode, new Object[] { middleMsgParam });","    \tbuffer.append(middle);","        int valOffset = (token != null) ? token.offset : sql.length;","        int valBegin = Math.max( 0, valOffset-40);","        int valEnd   = Math.min( valOffset+20, sql.length );","        String lineSeparator = System.getProperty( \"line.separator\" );","        buffer.append( lineSeparator );","        buffer.append( sql, valBegin, valEnd-valBegin);","        buffer.append( lineSeparator );","        for(; valBegin\<valOffset; valBegin++) buffer.append(\' \');","        buffer.append(\'^\');","    \treturn buffer.toString();    \t","    }","    private void checkValidIdentifier(String name, SQLToken token) throws SQLException{","        if(token.value == SQLTokenizer.ASTERISK) return;","        if(token.value != SQLTokenizer.VALUE &&","\t\t   token.value != SQLTokenizer.IDENTIFIER &&","           token.value \< 200){","            throw createSyntaxError( token, Language.STXADD_IDENT_EXPECT);","        }","        if(name.length() == 0) {","            throw createSyntaxError( token, Language.STXADD_IDENT_EMPTY, name);","        }","        char firstChar = name.charAt(0);","\t\tif(firstChar != \'#\' && firstChar \< \'@\') {","\t\t\tthrow createSyntaxError( token, Language.STXADD_IDENT_WRONG, name );","\t\t}","    }","    private String getIdentifier(SQLToken token) throws SQLException{","    \tString name = token.getName(sql);","    \tcheckValidIdentifier( name, token );","    \treturn name;","    }","    private String nextIdentifier() throws SQLException{","    \treturn getIdentifier( nextToken( MISSING_IDENTIFIER ) );","    }","    private String nextIdentiferPart(String name) throws SQLException{","        SQLToken token = nextToken();","        if(token != null && token.value == SQLTokenizer.POINT){","            return nextIdentifier();","        }else{","            previousToken();","        }","        return name;","    }","    final private boolean isKeyword(SQLToken token){","    \tif(token == null) return false;","    \tswitch(token.value){","    \t\tcase SQLTokenizer.SELECT:","    \t\tcase SQLTokenizer.INSERT:","    \t\tcase SQLTokenizer.UPDATE:","    \t\tcase SQLTokenizer.UNION:","    \t\tcase SQLTokenizer.FROM:","    \t\tcase SQLTokenizer.WHERE:","    \t\tcase SQLTokenizer.GROUP:","    \t\tcase SQLTokenizer.HAVING:","\t\t\tcase SQLTokenizer.ORDER:","    \t\tcase SQLTokenizer.COMMA:","\t\t\tcase SQLTokenizer.SET:","            case SQLTokenizer.JOIN:","            case SQLTokenizer.LIMIT:","    \t\t\treturn true;","    \t}","    \treturn false;","    }","\tprivate SQLToken lastToken(){","\t\tif(tokenIdx \> tokens.size()){","\t\t\treturn null;","\t\t}","\t\treturn (SQLToken)tokens.get( tokenIdx-1 );","\t}","    private void previousToken(){","        tokenIdx--;","    }","    private SQLToken nextToken(){","        if(tokenIdx \>= tokens.size()){","            tokenIdx++; ","            return null;","        }","        return (SQLToken)tokens.get( tokenIdx++ );","    }","    private SQLToken nextToken( int[] validValues) throws SQLException{","        SQLToken token = nextToken();","        if(token == null) throw createSyntaxError( token, validValues);","        if(validValues == MISSING_EXPRESSION){","            return token; ","        }","        if(validValues == MISSING_IDENTIFIER){","            switch(token.value){","                case SQLTokenizer.PARENTHESIS_L:","                case SQLTokenizer.PARENTHESIS_R:","                case SQLTokenizer.COMMA:","                    throw createSyntaxError( token, validValues);","            }","            return token;","        }","        for(int i=validValues.length-1; i\>=0; i--){","            if(token.value == validValues[i]) return token;","        }","        throw createSyntaxError( token, validValues);","    }","    private CommandSelect singleSelect() throws SQLException{","        CommandSelect selCmd = new CommandSelect(con.log);","\t\tSQLToken token;","Switch: while(true){","\t\t\ttoken = nextToken(MISSING_EXPRESSION);","\t\t\tswitch(token.value){","\t\t\t\tcase SQLTokenizer.TOP:","\t\t\t\t\ttoken = nextToken(MISSING_EXPRESSION);","\t\t\t\t\ttry{","\t\t\t\t\t\tint maxRows = Integer.parseInt(token.getName(sql));","\t\t\t\t\t\tselCmd.setMaxRows(maxRows);","\t\t\t\t\t}catch(NumberFormatException e){","\t\t\t\t\t\tthrow createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));","\t\t\t\t\t}","\t\t\t\t\tbreak;","\t\t\t\tcase SQLTokenizer.ALL:","\t\t\t\t\tselCmd.setDistinct(false);","\t\t\t\t\tbreak;","\t\t\t\tcase SQLTokenizer.DISTINCT:","\t\t\t\t\tselCmd.setDistinct(true);","\t\t\t\t\tbreak;","\t\t\t\tdefault:","\t\t\t\t\tpreviousToken();","\t\t\t\t\tbreak Switch;","\t\t\t}","\t\t}","        while(true){","            Expression column = expression(selCmd, 0);","            selCmd.addColumnExpression( column );","            token = nextToken();","            if(token == null) return selCmd; ","            boolean as = false;","            if(token.value == SQLTokenizer.AS){","                token = nextToken(MISSING_EXPRESSION);","                as = true;","            }","            if(as || (!isKeyword(token))){","            \tString alias = getIdentifier( token);","                column.setAlias( alias );","                token = nextToken();","                if(token == null) return selCmd; ","            }","            switch(token.value){","                case SQLTokenizer.COMMA:","                        if(column == null) throw createSyntaxError( token, MISSING_EXPRESSION );","                        column = null;","                        break;","                case SQLTokenizer.FROM:","                        if(column == null) throw createSyntaxError( token, MISSING_EXPRESSION );","                        column = null;","                        from(selCmd);","                        return selCmd;","                default:","                        if(!isKeyword(token))","                \t\t\tthrow createSyntaxError( token, new int[]{SQLTokenizer.COMMA, SQLTokenizer.FROM} );","                        previousToken();","                        return selCmd;","            }","        }","    }","    final private CommandSelect select() throws SQLException{","\t\tCommandSelect selCmd = singleSelect();","\t\tSQLToken token = nextToken();","    \tUnionAll union = null; ","\t\twhile(token != null && token.value == SQLTokenizer.UNION){","\t\t\tif(union == null){","\t\t\t\tunion = new UnionAll();","\t\t\t\tunion.addDataSource(new ViewResult( con, selCmd ));","\t\t\t\tselCmd = new CommandSelect(con.log);","\t\t\t\tselCmd.setSource( union );","\t\t\t\tDataSources from = new DataSources();","\t\t\t\tfrom.add(union);","\t\t\t\tselCmd.setTables( from );","\t\t\t\tselCmd.addColumnExpression( new ExpressionName(\"*\") );","\t\t\t}","\t\t\tnextToken(MISSING_ALL);","\t\t\tnextToken(MISSING_SELECT);","\t\t\tunion.addDataSource( new ViewResult( con, singleSelect() ) );","\t\t\ttoken = nextToken();","\t\t}","\t\tif(token != null && token.value == SQLTokenizer.ORDER){","\t\t\torder( selCmd );","\t\t\ttoken = nextToken();","\t\t}","\t\tif(token != null && token.value == SQLTokenizer.LIMIT){","            limit( selCmd );","            token = nextToken();","        }","        previousToken();","\t\treturn selCmd;","    }","    private Command delete() throws SQLException{","    \tCommandDelete cmd = new CommandDelete(con.log);","    \tnextToken(MISSING_FROM);","    \tfrom(cmd);","\t\tSQLToken token = nextToken();","\t\tif(token != null){","\t\t\tif(token.value != SQLTokenizer.WHERE)","\t\t\t\tthrow this.createSyntaxError(token, MISSING_WHERE);","\t\t\twhere(cmd);","\t\t}","\t\treturn cmd;","    }","\tprivate Command truncate() throws SQLException{","\t\tCommandDelete cmd = new CommandDelete(con.log);","\t\tnextToken(MISSING_TABLE);","\t\tfrom(cmd);","\t\treturn cmd;","\t}","    private Command insert() throws SQLException{","        SQLToken token = nextToken( MISSING_INTO );","        CommandInsert cmd = new CommandInsert( con.log, nextIdentifier() );","\t\tint parthesisCount = 0;","\t\ttoken = nextToken(MISSING_PARENTHESIS_VALUES_SELECT);","        if(token.value == SQLTokenizer.PARENTHESIS_L){","        \ttoken = nextToken(MISSING_EXPRESSION);","        \tif(token.value == SQLTokenizer.SELECT){","\t\t\t\tparthesisCount++;","\t\t\t\tcmd.noColumns = true;","        \t}else{","\t\t\t\tpreviousToken();","\t            Expressions list = expressionParenthesisList(cmd);","\t            for(int i=0; i\<list.size(); i++){","\t                cmd.addColumnExpression( list.get( i ) );","\t            }","\t            token = nextToken(MISSING_PARENTHESIS_VALUES_SELECT);","        \t}","        }else cmd.noColumns = true;","Switch: while(true)","        switch(token.value){","        \tcase SQLTokenizer.VALUES:{","\t            token = nextToken(MISSING_PARENTHESIS_L);","\t            cmd.addValues( expressionParenthesisList(cmd) );","\t            return cmd;","\t        }","        \tcase SQLTokenizer.SELECT:","        \t\tcmd.addValues( select() );","        \t\twhile(parthesisCount-- \> 0){","        \t\t\tnextToken(MISSING_PARENTHESIS_R);","        \t\t}","        \t\treturn cmd;","        \tcase SQLTokenizer.PARENTHESIS_L:","        \t\ttoken = nextToken(MISSING_PARENTHESIS_VALUES_SELECT);","        \t\tparthesisCount++;","        \t\tcontinue Switch;","        \tdefault:","        \t\tthrow new Error();","        }","    }","    private Command update() throws SQLException{","\t\tCommandUpdate cmd = new CommandUpdate(con.log);","\t\tDataSources tables = new DataSources();","\t\tcmd.setTables( tables );","\t\tcmd.setSource( rowSource( cmd, tables, 0 ) );","\t\tSQLToken token = nextToken(MISSING_SET);","\t\twhile(true){","\t\t\ttoken = nextToken();","\t\t\tExpression dest = expressionSingle( cmd, token);","\t\t\tif(dest.getType() != Expression.NAME) throw createSyntaxError( token, MISSING_IDENTIFIER );","\t\t\tnextToken(MISSING_EQUALS);","\t\t\tExpression src = expression(cmd, 0);","\t\t\tcmd.addSetting( dest, src);","\t\t\ttoken = nextToken();","\t\t\tif(token == null) break;","\t\t\tswitch(token.value){","\t\t\t\tcase SQLTokenizer.WHERE:","\t\t\t\t\twhere(cmd);","\t\t\t\t\treturn cmd;\t\t\t\t","\t\t\t\tcase SQLTokenizer.COMMA:","\t\t\t\t\tcontinue;","\t\t\t\tdefault: throw createSyntaxError( token, MISSING_WHERE_COMMA );","\t\t\t}","\t\t}","\t\treturn cmd;","    }","    private Command create() throws SQLException{","        while(true){","            SQLToken token = nextToken(COMMANDS_CREATE);","            switch(token.value){","                case SQLTokenizer.DATABASE:","                    return createDatabase();","                case SQLTokenizer.TABLE:","                    return createTable();","                case SQLTokenizer.VIEW:","                    return createView();","                case SQLTokenizer.INDEX:","                    return createIndex(false);","                case SQLTokenizer.PROCEDURE:","                    return createProcedure();","                case SQLTokenizer.UNIQUE:","                    do{","                        token = nextToken(COMMANDS_CREATE_UNIQUE);","                    }while(token.value == SQLTokenizer.INDEX);","                    return createIndex(true);","                case SQLTokenizer.NONCLUSTERED:","                case SQLTokenizer.CLUSTERED:","                    continue;","                default:","                    throw createSyntaxError( token, COMMANDS_CREATE );","            }","        }","    }","    private CommandCreateDatabase createDatabase() throws SQLException{","        SQLToken token = nextToken();","        if(token == null) throw createSyntaxError( token, MISSING_EXPRESSION );","        return new CommandCreateDatabase( con.log, token.getName(sql));","    }","    private CommandTable createTable() throws SQLException{","        String catalog;","        String tableName = catalog = nextIdentifier();","        tableName = nextIdentiferPart(tableName);","        if(tableName == catalog) catalog = null;","        CommandTable cmdCreate = new CommandTable( con.log, catalog, tableName, SQLTokenizer.CREATE );","        SQLToken token = nextToken( MISSING_PARENTHESIS_L );","        nextCol:","        while(true){","            token = nextToken( MISSING_EXPRESSION );","\t\t\tString constraintName;","            if(token.value == SQLTokenizer.CONSTRAINT){","\t\t    \tconstraintName = nextIdentifier();","\t\t\t\ttoken = nextToken( MISSING_KEYTYPE );","            }else{","\t\t\t\tconstraintName = null;","            }","\t\t\tswitch(token.value){","\t\t\t\tcase SQLTokenizer.PRIMARY:","\t\t\t\tcase SQLTokenizer.UNIQUE:","\t\t\t\tcase SQLTokenizer.FOREIGN:","\t\t\t\t\tIndexDescription index = index(cmdCreate, token.value, tableName, constraintName, null);","                    if(token.value == SQLTokenizer.FOREIGN){","                        nextToken( MISSING_REFERENCES );","                        String pk = nextIdentifier();","                        Expressions expressions = new Expressions();","                        Strings columns = new Strings();","                        expressionDefList( cmdCreate, expressions, columns );","                        IndexDescription pkIndex = new IndexDescription( null, pk, SQLTokenizer.UNIQUE, expressions, columns);","                        ForeignKey foreignKey = new ForeignKey(pk, pkIndex, tableName, index);","                        cmdCreate.addForeingnKey(foreignKey);","                    }else{","                        cmdCreate.addIndex( index );","                    }","\t\t\t\t\ttoken = nextToken( MISSING_COMMA_PARENTHESIS );","\t\t\t\t\tswitch(token.value){","\t\t\t\t\t\tcase SQLTokenizer.PARENTHESIS_R:","\t\t\t\t\t\t\treturn cmdCreate;","\t\t\t\t\t\tcase SQLTokenizer.COMMA:","\t\t\t\t\t\t\tcontinue nextCol;","\t\t\t\t\t}","            }","\t\t\ttoken = addColumn( token, cmdCreate );","            if(token == null){","                throw createSyntaxError(token, MISSING_COMMA_PARENTHESIS);","            }","            switch(token.value){","                case SQLTokenizer.PARENTHESIS_R:","                    return cmdCreate;","                case SQLTokenizer.COMMA:","                    continue nextCol;","                default:","                    throw createSyntaxError(token, MISSING_COMMA_PARENTHESIS);","            }","        }","    }","    private SQLToken addColumn(SQLToken token, CommandTable cmdCreate) throws SQLException{","        String colName = getIdentifier( token );","        Column col = datatype(false);","        col.setName( colName );","\t\ttoken = nextToken();","        boolean nullableWasSet = false;","        boolean defaultWasSet = col.isAutoIncrement(); ","        while(true){","            if(token == null){","                cmdCreate.addColumn( col );","                return null;","            }","            switch(token.value){","                case SQLTokenizer.PARENTHESIS_R:","                case SQLTokenizer.COMMA:","                    cmdCreate.addColumn( col );","                    return token;","                case SQLTokenizer.DEFAULT:","                    if(defaultWasSet) throw createSyntaxError( token, MISSING_COMMA_PARENTHESIS );","\t\t\t\t\tint offset = token.offset + token.length;","                    token = nextToken();","                    if(token != null) offset = token.offset;","\t\t\t\t\tpreviousToken();                    ","\t\t\t\t\tExpression expr = expression(cmdCreate, 0);","\t\t\t\t\tSQLToken last = lastToken();","\t\t\t\t\tint length = last.offset + last.length - offset;","\t\t\t\t\tString def = new String( sql, offset, length );","                    col.setDefaultValue( expr, def );","                    defaultWasSet = true;","                    break;","                case SQLTokenizer.IDENTITY:","                    if(defaultWasSet) throw createSyntaxError( token, MISSING_COMMA_PARENTHESIS );","                    col.setAutoIncrement(true);","                    defaultWasSet = true;","                    break;","                case SQLTokenizer.NULL:","                    if(nullableWasSet) throw createSyntaxError( token, MISSING_COMMA_PARENTHESIS );","                    nullableWasSet = true;","                    break;","                case SQLTokenizer.NOT:","                    if(nullableWasSet) throw createSyntaxError( token, MISSING_COMMA_PARENTHESIS );","                    token = nextToken( MISSING_NULL );","                    col.setNullable(false);","                    nullableWasSet = true;","                    break;","\t\t\t\tcase SQLTokenizer.PRIMARY:","\t\t\t\tcase SQLTokenizer.UNIQUE:","\t\t\t\t\tIndexDescription index = index(cmdCreate, token.value, cmdCreate.name, null, colName);","\t\t\t\t\tcmdCreate.addIndex( index );","\t\t\t\t\tbreak;","                default:","                    throw createSyntaxError(token, MISSING_OPTIONS_DATATYPE);","            }","            token = nextToken();","        }","    }","\tprivate IndexDescription index(Command cmd, int constraintType, String tableName, String contrainName, String columnName) throws SQLException{","\t\tif(constraintType != SQLTokenizer.UNIQUE) nextToken( MISSING_KEY );","\t\tSQLToken token = nextToken();","        if(token != null){","    \t\tswitch(token.value){","    \t\t\tcase SQLTokenizer.CLUSTERED:","    \t\t\tcase SQLTokenizer.NONCLUSTERED:","    \t\t\t\tbreak;","                default:","                    previousToken();","    \t\t}","        }else{","            previousToken();","        }","\t\tStrings columns = new Strings();","\t\tExpressions expressions = new Expressions();","\t\tif(columnName != null){","\t\t\tcolumns.add(columnName);","\t\t\texpressions.add(new ExpressionName(columnName));","\t\t}else{","            expressionDefList( cmd, expressions, columns );","\t\t}","\t\treturn new IndexDescription( contrainName, tableName, constraintType, expressions, columns);","\t}","    private Column datatype(boolean isEscape) throws SQLException{","\t\tSQLToken token;","\t\tint dataType;","\t\tif(isEscape){","\t\t\ttoken = nextToken( MISSING_SQL_DATATYPE );","\t\t\tswitch(token.value){","\t\t\t\tcase SQLTokenizer.SQL_BIGINT: \t\t\tdataType = SQLTokenizer.BIGINT;\t\tbreak;","\t\t\t\tcase SQLTokenizer.SQL_BINARY:\t\t\tdataType = SQLTokenizer.BINARY; \tbreak;","\t\t\t\tcase SQLTokenizer.SQL_BIT:\t\t\t\tdataType = SQLTokenizer.BIT;\t\tbreak;","\t\t\t\tcase SQLTokenizer.SQL_CHAR:\t\t\t\tdataType = SQLTokenizer.CHAR;\t\tbreak;","\t\t\t\tcase SQLTokenizer.SQL_DATE:\t\t\t\tdataType = SQLTokenizer.DATE;\t\tbreak;","\t\t\t\tcase SQLTokenizer.SQL_DECIMAL:\t\t\tdataType = SQLTokenizer.DECIMAL;\tbreak;","\t\t\t\tcase SQLTokenizer.SQL_DOUBLE:\t\t\tdataType = SQLTokenizer.DOUBLE;\t\tbreak;","\t\t\t\tcase SQLTokenizer.SQL_FLOAT:\t\t\tdataType = SQLTokenizer.FLOAT;\t\tbreak;","\t\t\t\tcase SQLTokenizer.SQL_INTEGER:\t\t\tdataType = SQLTokenizer.INT;\t\tbreak;","\t\t\t\tcase SQLTokenizer.SQL_LONGVARBINARY:\tdataType = SQLTokenizer.LONGVARBINARY;break;","\t\t\t\tcase SQLTokenizer.SQL_LONGVARCHAR:\t\tdataType = SQLTokenizer.LONGVARCHAR;break;","\t\t\t\tcase SQLTokenizer.SQL_REAL:\t\t\t\tdataType = SQLTokenizer.REAL;\t\tbreak;","\t\t\t\tcase SQLTokenizer.SQL_SMALLINT:\t\t\tdataType = SQLTokenizer.SMALLINT;\tbreak;","\t\t\t\tcase SQLTokenizer.SQL_TIME:\t\t\t\tdataType = SQLTokenizer.TIME;\t\tbreak;","\t\t\t\tcase SQLTokenizer.SQL_TIMESTAMP:\t\tdataType = SQLTokenizer.TIMESTAMP;\tbreak;","\t\t\t\tcase SQLTokenizer.SQL_TINYINT:\t\t\tdataType = SQLTokenizer.TINYINT;\tbreak;","\t\t\t\tcase SQLTokenizer.SQL_VARBINARY:\t\tdataType = SQLTokenizer.VARBINARY;\tbreak;","\t\t\t\tcase SQLTokenizer.SQL_VARCHAR:\t\t\tdataType = SQLTokenizer.VARCHAR;\tbreak;","\t\t\t\tdefault: throw new Error();","\t\t\t}","\t\t}else{","\t\t\ttoken = nextToken( MISSING_DATATYPE );","\t\t\tdataType = token.value;","\t\t}","\t\tColumn col = new Column();","\t\tif(dataType == SQLTokenizer.LONG){","\t\t\ttoken = nextToken();","\t\t\tif(token != null && token.value == SQLTokenizer.RAW){","\t\t\t\tdataType = SQLTokenizer.LONGVARBINARY;","\t\t\t}else{","\t\t\t\tdataType = SQLTokenizer.LONGVARCHAR;","\t\t\t\tpreviousToken();","\t\t\t}","\t\t}","\t\tswitch(dataType){","\t\t\tcase SQLTokenizer.RAW:","\t\t\t\tdataType = SQLTokenizer.VARBINARY;","\t\t\tcase SQLTokenizer.CHAR:","\t\t\tcase SQLTokenizer.VARCHAR:","\t\t\tcase SQLTokenizer.NCHAR:","\t\t\tcase SQLTokenizer.NVARCHAR:","\t\t\tcase SQLTokenizer.BINARY:","\t\t\tcase SQLTokenizer.VARBINARY:","\t\t\t{","                token = nextToken();","\t\t\t\tint displaySize;","\t\t\t\tif(token == null || token.value != SQLTokenizer.PARENTHESIS_L){","\t\t\t\t\tdisplaySize = 30;","                    previousToken();","\t\t\t\t}else{","\t\t\t\t\ttoken = nextToken( MISSING_EXPRESSION );","\t\t\t\t\ttry{","\t\t\t\t\t\tdisplaySize = Integer.parseInt(token.getName(sql) );","\t\t\t\t\t}catch(Exception e){","\t\t\t\t\t\tthrow createSyntaxError(token, MISSING_NUMBERVALUE );","\t\t\t\t\t}","\t\t\t\t\tnextToken( MISSING_PARENTHESIS_R );","\t\t\t\t}","\t\t\t\tcol.setPrecision( displaySize );","\t\t\t\tbreak;","\t\t\t}","\t\t\tcase SQLTokenizer.SYSNAME:","\t\t\t\tcol.setPrecision(255);","\t\t\t\tdataType = SQLTokenizer.VARCHAR;","\t\t\t\tbreak;","\t\t\tcase SQLTokenizer.COUNTER:","\t\t\t\tcol.setAutoIncrement(true);","\t\t\t\tdataType = SQLTokenizer.INT;","\t\t\t\tbreak;","\t\t\tcase SQLTokenizer.NUMERIC:","\t\t\tcase SQLTokenizer.DECIMAL:","                token = nextToken();","\t\t\t\tif(token != null && token.value == SQLTokenizer.PARENTHESIS_L){","\t\t\t\t\ttoken = nextToken( MISSING_EXPRESSION );","\t\t\t\t\tint value;","\t\t\t\t\ttry{","\t\t\t\t\t\tvalue = Integer.parseInt(token.getName(sql) );","\t\t\t\t\t}catch(Exception e){","\t\t\t\t\t\tthrow createSyntaxError(token, MISSING_NUMBERVALUE );","\t\t\t\t\t}","\t\t\t\t\tcol.setPrecision(value);","\t\t\t\t\ttoken = nextToken( MISSING_COMMA_PARENTHESIS );","\t\t\t\t\tif(token.value == SQLTokenizer.COMMA){","\t\t\t\t\t\ttoken = nextToken( MISSING_EXPRESSION );","\t\t\t\t\t\ttry{","\t\t\t\t\t\t\tvalue = Integer.parseInt(token.getName(sql) );","\t\t\t\t\t\t}catch(Exception e){","\t\t\t\t\t\t\tthrow createSyntaxError(token, MISSING_NUMBERVALUE );","\t\t\t\t\t\t}","\t\t\t\t\t\tcol.setScale(value);","\t\t\t\t\t\tnextToken( MISSING_PARENTHESIS_R );","\t\t\t\t\t}","\t\t\t\t}else{","\t\t\t\t\tcol.setPrecision(18); ","                    previousToken();","\t\t\t\t}","\t\t\t\tbreak;","\t\t}","\t\tcol.setDataType( dataType );","\t\treturn col;","    }","    private CommandCreateView createView() throws SQLException{","    \tString viewName = nextIdentifier();","\t\tnextToken(MISSING_AS);","\t\tSQLToken token = nextToken(MISSING_SELECT);","\t\tCommandCreateView cmd = new CommandCreateView( con.log, viewName );","\t\tcmd.sql = new String(sql, token.offset, sql.length-token.offset );","\t\tselect(); ","        return cmd;","    }","    private CommandTable createIndex(boolean unique) throws SQLException{","        String indexName = nextIdentifier();","        nextToken(MISSING_ON);","        String catalog;","        String tableName = catalog = nextIdentifier();","        tableName = nextIdentiferPart(tableName);","        if(tableName == catalog) catalog = null;","        CommandTable cmd = new CommandTable( con.log, catalog, tableName, SQLTokenizer.INDEX );","        Expressions expressions = new Expressions();","        Strings columns = new Strings();","        expressionDefList( cmd, expressions, columns );","        IndexDescription indexDesc = new IndexDescription( ","                indexName, ","                tableName, ","                unique ? SQLTokenizer.UNIQUE : SQLTokenizer.INDEX, ","                        expressions, ","                        columns);","\t\tObject[] param = { \"Create Index\" };","        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, param);","    }","    private CommandCreateDatabase createProcedure() throws SQLException{","\t\tObject[] param = { \"Create Procedure\" };","    \tthrow SmallSQLException.create(Language.UNSUPPORTED_OPERATION, param);","    }","    private Command drop() throws SQLException{","        SQLToken tokenType = nextToken(COMMANDS_DROP);","\t\tString catalog;","\t\tString name = catalog = nextIdentifier();","        name = nextIdentiferPart( name );","        if(name == catalog) catalog = null;","        switch(tokenType.value){","            case SQLTokenizer.DATABASE:","            case SQLTokenizer.TABLE:","            case SQLTokenizer.VIEW:","            case SQLTokenizer.INDEX:","            case SQLTokenizer.PROCEDURE:","            \treturn new CommandDrop( con.log, catalog, name, tokenType.value);","            default:","                throw createSyntaxError( tokenType, COMMANDS_DROP );","        }","    }","    private Command alter() throws SQLException{","    \tSQLToken tokenType = nextToken(COMMANDS_ALTER);","\t\tString catalog;","\t\tString tableName = catalog = nextIdentifier();","        switch(tokenType.value){","        case SQLTokenizer.TABLE:","        case SQLTokenizer.VIEW:","        case SQLTokenizer.INDEX:","        case SQLTokenizer.PROCEDURE:","            tableName = nextIdentiferPart(tableName);","            if(tableName == catalog) catalog = null;","        }","        switch(tokenType.value){","        case SQLTokenizer.TABLE:","            return alterTable( catalog, tableName );","        default:","    \t\tObject[] param = { \"ALTER \" + tokenType.getName( sql ) };","        \tthrow SmallSQLException.create(Language.UNSUPPORTED_OPERATION, param);","        }","    }","    Command alterTable( String catalog, String name ) throws SQLException{","    \tSQLToken tokenType = nextToken(MISSING_ADD_ALTER_DROP);","        CommandTable cmd = new CommandTable( con.log, catalog, name, tokenType.value );","    \tswitch(tokenType.value){","    \tcase SQLTokenizer.ADD:","    \t\tSQLToken token;","    \t\tdo{","    \t\t\ttoken = nextToken( MISSING_IDENTIFIER );","    \t\t\ttoken = addColumn( token, cmd );","    \t\t}while(token != null && token.value == SQLTokenizer.COMMA );","    \t\treturn cmd;","    \tdefault:","    \t\tObject[] param = { \"ALTER TABLE \" + tokenType.getName( sql ) };","            throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, param);","    \t}","    }","    private CommandSet set() throws SQLException{","        SQLToken token = nextToken( COMMANDS_SET );","        switch(token.value){","            case SQLTokenizer.TRANSACTION:","                return setTransaction();","            default:","                throw new Error();","        }","    }","    private CommandSet setTransaction() throws SQLException{","        SQLToken token = nextToken( MISSING_ISOLATION );","        token = nextToken( MISSING_LEVEL );","        token = nextToken( COMMANDS_TRANS_LEVEL );","        CommandSet cmd = new CommandSet( con.log, SQLTokenizer.LEVEL );","        switch(token.value){","            case SQLTokenizer.READ:","                token = nextToken( MISSING_COMM_UNCOMM );","                switch(token.value){","                    case SQLTokenizer.COMMITTED:","                        cmd.isolationLevel = Connection.TRANSACTION_READ_COMMITTED;","                        break;","                    case SQLTokenizer.UNCOMMITTED:","                        cmd.isolationLevel = Connection.TRANSACTION_READ_UNCOMMITTED;","                        break;","                    default:","                        throw new Error();","                }","                return cmd;","            case SQLTokenizer.REPEATABLE:","                token = nextToken( MISSING_READ );","                cmd.isolationLevel = Connection.TRANSACTION_REPEATABLE_READ;","                return cmd;","            case SQLTokenizer.SERIALIZABLE:","                cmd.isolationLevel = Connection.TRANSACTION_SERIALIZABLE;","                return cmd;","            default:","                throw new Error();","        }","    }","    private Command execute() throws SQLException{","        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Execute\");","    }","    private Expressions expressionParenthesisList(Command cmd) throws SQLException{","\t\tExpressions list = new Expressions();","\t\t{","\t\t\tSQLToken token = nextToken();","\t\t\tif(token != null && token.value == SQLTokenizer.PARENTHESIS_R){","\t\t\t\treturn list;","\t\t\t}","\t\t\tpreviousToken();","\t\t}","        while(true){","            list.add( expression(cmd, 0) );","            SQLToken token = nextToken(MISSING_COMMA_PARENTHESIS);","            switch(token.value){","                case SQLTokenizer.PARENTHESIS_R:","                    return list;","                case SQLTokenizer.COMMA:","                    continue;","                default:","                    throw new Error();","            }","        }","    }","    private Expressions expressionTokenList(Command cmd, int listType) throws SQLException{","\t\tExpressions list = new Expressions();","        while(true){","        \tExpression expr = expression(cmd, 0);","            list.add( expr );","            SQLToken token = nextToken();","\t\t\tif(listType == SQLTokenizer.ORDER && token != null){","\t\t\t\tswitch(token.value){","\t\t\t\t\tcase SQLTokenizer.DESC:","\t\t\t\t\t\texpr.setAlias(SQLTokenizer.DESC_STR);","\t\t\t\t\tcase SQLTokenizer.ASC:","\t\t\t\t\t\ttoken = nextToken();","\t\t\t\t}\t\t\t\t","\t\t\t}","\t\t\tif(token == null) {","\t\t\t\tpreviousToken();","\t\t\t\treturn list;","\t\t\t}","\t\t\tswitch(token.value){","                case SQLTokenizer.COMMA:","                    continue;","                default:","\t\t\t\t\tif(isKeyword(token) ){","\t\t\t\t\t\tpreviousToken();","\t\t\t\t\t\treturn list;","\t\t\t\t\t}","                    throw createSyntaxError( token, MISSING_TOKEN_LIST);","            }","        }","    }","    private void expressionDefList(Command cmd, Expressions expressions, Strings columns) throws SQLException{","        SQLToken token = nextToken();","        if(token.value != SQLTokenizer.PARENTHESIS_L) throw createSyntaxError(token, MISSING_PARENTHESIS_L );","        Loop:","        while(true){","            int offset = token.offset + token.length;","            token = nextToken();","            if(token != null) offset = token.offset;","            previousToken();  ","            expressions.add( expression(cmd, 0) );","            SQLToken last = lastToken();","            int length = last.offset + last.length - offset;","            columns.add( new String( sql, offset, length ) );","            token = nextToken(MISSING_COMMA_PARENTHESIS);","            switch(token.value){","                case SQLTokenizer.PARENTHESIS_R:","                    break Loop;","                case SQLTokenizer.COMMA:","                    continue;","                default:","                    throw new Error();","            }","        }","    }","    private Expression expression(Command cmd, int previousOperationLevel) throws SQLException{","        SQLToken token = nextToken(MISSING_EXPRESSION);","        Expression leftExpr;","        switch(token.value){","            case SQLTokenizer.NOT:","            \tleftExpr =  new ExpressionArithmetic( expression( cmd, ExpressionArithmetic.NOT      / 10), ExpressionArithmetic.NOT);","            \tbreak;","            case SQLTokenizer.MINUS:","            \tleftExpr =  new ExpressionArithmetic( expression( cmd, ExpressionArithmetic.NEGATIVE / 10), ExpressionArithmetic.NEGATIVE);","            \tbreak;","            case SQLTokenizer.TILDE:","            \tleftExpr =  new ExpressionArithmetic( expression( cmd, ExpressionArithmetic.BIT_NOT  / 10), ExpressionArithmetic.BIT_NOT);","            \tbreak;","            case SQLTokenizer.PARENTHESIS_L:","                leftExpr = expression( cmd, 0);","                token = nextToken(MISSING_PARENTHESIS_R);","                break;","            default:","                leftExpr = expressionSingle( cmd, token);","        }","        boolean isNot = false;","        while((token = nextToken()) != null){","            Expression rightExpr;","            int operation = ExpressionArithmetic.getOperationFromToken(token.value);","            int level = operation / 10;","            if(previousOperationLevel \>= level){","                previousToken();","                return leftExpr;","            }","            switch(token.value){","                case SQLTokenizer.PLUS:","                case SQLTokenizer.MINUS:","                case SQLTokenizer.ASTERISK:","                case SQLTokenizer.SLACH:","                case SQLTokenizer.PERCENT:","                case SQLTokenizer.EQUALS:","                case SQLTokenizer.LESSER:","                case SQLTokenizer.LESSER_EQU:","                case SQLTokenizer.GREATER:","                case SQLTokenizer.GREATER_EQU:","                case SQLTokenizer.UNEQUALS:","                case SQLTokenizer.LIKE:","                case SQLTokenizer.OR:","                case SQLTokenizer.AND:","                case SQLTokenizer.BIT_AND:","                case SQLTokenizer.BIT_OR:","                case SQLTokenizer.BIT_XOR:","                    rightExpr = expression( cmd, level );","                    leftExpr = new ExpressionArithmetic( leftExpr, rightExpr, operation );","                    break;","                case SQLTokenizer.BETWEEN:","                    rightExpr = expression( cmd, ExpressionArithmetic.AND );","                    nextToken( MISSING_AND );","                    Expression rightExpr2 = expression( cmd, level );","                    leftExpr = new ExpressionArithmetic( leftExpr, rightExpr, rightExpr2, operation );","                    break;","                case SQLTokenizer.IN:","            \t\tnextToken(MISSING_PARENTHESIS_L);","                \ttoken = nextToken(MISSING_EXPRESSION);","                \tif(token.value == SQLTokenizer.SELECT){","                \t\tCommandSelect cmdSel = select();","\t\t\t\t\t\tleftExpr = new ExpressionInSelect( con, leftExpr, cmdSel, operation );","\t\t\t\t\t\tnextToken(MISSING_PARENTHESIS_R);","                \t}else{","                \t\tpreviousToken();","                \t\tExpressions list = expressionParenthesisList( cmd );","                \t\tleftExpr = new ExpressionArithmetic( leftExpr, list, operation );","                \t}","                    break;","                case SQLTokenizer.IS:","                \ttoken = nextToken(MISSING_NOT_NULL);","                \tif(token.value == SQLTokenizer.NOT){","                \t\tnextToken(MISSING_NULL);","\t\t\t\t\t\toperation++;","                \t}","                \tleftExpr = new ExpressionArithmetic( leftExpr, operation );","                \tbreak;","                case SQLTokenizer.NOT:","                \ttoken = nextToken(MISSING_BETWEEN_IN);","                \tpreviousToken();","                \tisNot = true;","                \tcontinue;","                default:","                        previousToken();","                        return leftExpr;","            }","            if(isNot){","            \tisNot = false;","\t\t\t\tleftExpr =  new ExpressionArithmetic( leftExpr, ExpressionArithmetic.NOT);","            }","        }","        previousToken();","        return leftExpr;","    }","    private Expression expressionSingle(Command cmd, SQLToken token) throws SQLException{","        boolean isMinus = false;","        if(token != null){","            switch(token.value){","                case SQLTokenizer.NULL:","                        return new ExpressionValue( null, SQLTokenizer.NULL );","                case SQLTokenizer.STRING:","                        return new ExpressionValue( token.getName(null), SQLTokenizer.VARCHAR );","                case SQLTokenizer.IDENTIFIER:","                        {","                        String name = getIdentifier( token );","                        ExpressionName expr =  new ExpressionName( name );","                        SQLToken token2 = nextToken();","                        if(token2 != null && token2.value == SQLTokenizer.POINT){","                            expr.setNameAfterTableAlias( nextIdentifier() );","                        }else{","                            previousToken();","                        }","                        return expr;","                        }","                case SQLTokenizer.TRUE:","                        return new ExpressionValue( Boolean.TRUE, SQLTokenizer.BOOLEAN );","                case SQLTokenizer.FALSE:","                        return new ExpressionValue( Boolean.FALSE, SQLTokenizer.BOOLEAN );","                case SQLTokenizer.ESCAPE_L:{","                        token = nextToken(COMMANDS_ESCAPE);","                        SQLToken para = nextToken(MISSING_EXPRESSION);","                        Expression expr;","                        switch(token.value){","                            case SQLTokenizer.D: ","                            \texpr = new ExpressionValue( DateTime.valueOf(para.getName(sql), SQLTokenizer.DATE), SQLTokenizer.DATE );","                            \tbreak;","                            case SQLTokenizer.T: ","                                expr = new ExpressionValue( DateTime.valueOf(para.getName(sql), SQLTokenizer.TIME), SQLTokenizer.TIME );","                            \tbreak;","                            case SQLTokenizer.TS: ","                                expr = new ExpressionValue( DateTime.valueOf(para.getName(sql), SQLTokenizer.TIMESTAMP), SQLTokenizer.TIMESTAMP );","                            \tbreak;","                            case SQLTokenizer.FN: ","                            \tnextToken(MISSING_PARENTHESIS_L);","                            \texpr = function(cmd, para, true);","                            \tbreak;","                            case SQLTokenizer.CALL: ","                                throw new java.lang.UnsupportedOperationException(\"call escape sequence\");","                            default: throw new Error();","                        }","                        token = nextToken( ESCAPE_MISSING_CLOSE );","                        return expr;","                }","                case SQLTokenizer.QUESTION:","                        ExpressionValue param = new ExpressionValue();","                        cmd.addParameter( param );","                        return param;","                case SQLTokenizer.CASE:","                \t\treturn caseExpr(cmd);","                case SQLTokenizer.MINUS:","                case SQLTokenizer.PLUS:","                        do{","                            if(token.value == SQLTokenizer.MINUS)","                                    isMinus = !isMinus;","                            token = nextToken();","                            if(token == null) throw createSyntaxError( token, MISSING_EXPRESSION );","                        }while(token.value == SQLTokenizer.MINUS || token.value == SQLTokenizer.PLUS);","                default:","                        SQLToken token2 = nextToken();","                        if(token2 != null && token2.value == SQLTokenizer.PARENTHESIS_L){","                            if(isMinus)","                                return new ExpressionArithmetic( function( cmd, token, false ),  ExpressionArithmetic.NEGATIVE );","                            return function( cmd, token, false );","                        }else{","                            char chr1 = sql[ token.offset ];","\t\t\t\t\t\t\tif(chr1 == \'$\'){","\t\t\t\t\t\t\t\tpreviousToken();","\t                            String tok = new String(sql, token.offset+1, token.length-1);","                                if(isMinus) tok = \"-\" + tok;","\t\t\t\t\t\t\t\treturn new ExpressionValue( new Money(Double.parseDouble(tok)), SQLTokenizer.MONEY );","\t\t\t\t\t\t\t}","                            String tok = new String(sql, token.offset, token.length);","                            if((chr1 \>= \'0\' && \'9\' \>= chr1) || chr1 == \'.\'){","                                previousToken();","                                if(token.length\>1 && (sql[ token.offset +1 ] | 0x20) == \'x\'){","                                    if(isMinus) {","                \t\t\t\t\t\tthrow createSyntaxError(token, Language.STXADD_OPER_MINUS);","                                    }","                                    return new ExpressionValue( Utils.hex2bytes( sql, token.offset+2, token.length-2), SQLTokenizer.VARBINARY );","                                }","                                if(isMinus) tok = \"-\" + tok;","                                if(Utils.indexOf( \'.\', sql, token.offset, token.length ) \>= 0 ||","                                   Utils.indexOf( \'e\', sql, token.offset, token.length ) \>= 0){","                                    return new ExpressionValue( new Double(tok), SQLTokenizer.DOUBLE );","                                }else{","                                    try{","                                        return new ExpressionValue( new Integer(tok), SQLTokenizer.INT );","                                    }catch(NumberFormatException e){","                                        return new ExpressionValue( new Long(tok), SQLTokenizer.BIGINT );","                                    }","                                }","                            }else{","                                checkValidIdentifier( tok, token );","                                ExpressionName expr = new ExpressionName(tok);","                                if(token2 != null && token2.value == SQLTokenizer.POINT){","                                    expr.setNameAfterTableAlias( nextIdentifier() );","                                }else{","                                    previousToken();","                                }","                                if(isMinus)","                                    return new ExpressionArithmetic( expr,  ExpressionArithmetic.NEGATIVE );","                                return expr;","                            }","                        }","            }","        }","        return null;","    }","    ExpressionFunctionCase caseExpr(final Command cmd) throws SQLException{","\t\tExpressionFunctionCase expr = new ExpressionFunctionCase();","\t\tSQLToken token = nextToken(MISSING_EXPRESSION);","\t\tExpression input = null;","\t\tif(token.value != SQLTokenizer.WHEN){","\t\t\tpreviousToken();","\t\t\tinput = expression(cmd, 0);","\t\t\ttoken = nextToken(MISSING_WHEN_ELSE_END);","\t\t}\t\t\t","\t\twhile(true){","\t\t\tswitch(token.value){","\t\t\t\tcase SQLTokenizer.WHEN:\t\t\t\t","\t\t\t\t\tExpression condition = expression(cmd, 0);","\t\t\t\t\tif(input != null){","\t\t\t\t\t\tcondition = new ExpressionArithmetic( input, condition, ExpressionArithmetic.EQUALS);","\t\t\t\t\t}","\t\t\t\t\tnextToken(MISSING_THEN);","\t\t\t\t\tExpression result = expression(cmd, 0);","\t\t\t\t\texpr.addCase(condition, result);","\t\t\t\t\tbreak;","\t\t\t\tcase SQLTokenizer.ELSE:","\t\t\t\t\texpr.setElseResult(expression(cmd, 0));","\t\t\t\t\tbreak;","\t\t\t\tcase SQLTokenizer.END:","\t\t\t\t\texpr.setEnd();","\t\t\t\t\treturn expr;","\t\t\t\tdefault:","\t\t\t\t\tthrow new Error();","\t\t\t}","\t\t\ttoken = nextToken(MISSING_WHEN_ELSE_END);","\t\t}","    }","    private Expression function( Command cmd, SQLToken token, boolean isEscape ) throws SQLException{","        Expression expr;","        switch(token.value){","        \tcase SQLTokenizer.CONVERT:{","        \t\tColumn col;","        \t\tExpression style = null;","        \t\tif(isEscape){","        \t\t\texpr = expression( cmd, 0);","\t\t\t\t\tnextToken(MISSING_COMMA);","\t\t\t\t\tcol = datatype(isEscape);","        \t\t}else{","\t        \t\tcol = datatype(isEscape);","\t        \t\tnextToken(MISSING_COMMA);","\t\t\t\t\texpr = expression( cmd, 0);","\t\t\t\t\ttoken = nextToken(MISSING_COMMA_PARENTHESIS);","\t\t\t\t\tif(token.value == SQLTokenizer.COMMA){","\t\t\t\t\t\tstyle = expression( cmd, 0);","\t\t\t\t\t}else","\t\t\t\t\t\tpreviousToken();","        \t\t}","        \t\tnextToken(MISSING_PARENTHESIS_R);","        \t\treturn new ExpressionFunctionConvert( col, expr, style );","        \t}","        \tcase SQLTokenizer.CAST:","        \t\texpr = expression( cmd, 0);","        \t\tnextToken(MISSING_AS);","        \t\tColumn col = datatype(false);","        \t\tnextToken(MISSING_PARENTHESIS_R);","        \t\treturn new ExpressionFunctionConvert( col, expr, null );","\t\t\tcase SQLTokenizer.TIMESTAMPDIFF:","\t\t\t\ttoken = nextToken(MISSING_INTERVALS);","\t\t\t\tnextToken(MISSING_COMMA);","\t\t\t\texpr = expression( cmd, 0);","\t\t\t\tnextToken(MISSING_COMMA);","\t\t\t\texpr = new ExpressionFunctionTimestampDiff( token.value, expr, expression( cmd, 0));","\t\t\t\tnextToken(MISSING_PARENTHESIS_R);","\t\t\t\treturn expr;","\t\t\tcase SQLTokenizer.TIMESTAMPADD:","\t\t\t\ttoken = nextToken(MISSING_INTERVALS);","\t\t\t\tnextToken(MISSING_COMMA);","\t\t\t\texpr = expression( cmd, 0);","\t\t\t\tnextToken(MISSING_COMMA);","\t\t\t\texpr = new ExpressionFunctionTimestampAdd( token.value, expr, expression( cmd, 0));","\t\t\t\tnextToken(MISSING_PARENTHESIS_R);","\t\t\t\treturn expr;","        }","\t\tExpressions paramList = expressionParenthesisList(cmd);","        int paramCount = paramList.size();","        Expression[] params = paramList.toArray();","        boolean invalidParamCount;","        switch(token.value){","            case SQLTokenizer.ABS:","                invalidParamCount = (paramCount != 1);","                expr = new ExpressionFunctionAbs();","                break;","            case SQLTokenizer.ACOS:","                invalidParamCount = (paramCount != 1);","                expr = new ExpressionFunctionACos();","                break;","            case SQLTokenizer.ASIN:","                invalidParamCount = (paramCount != 1);","                expr = new ExpressionFunctionASin();","                break;","            case SQLTokenizer.ATAN:","                invalidParamCount = (paramCount != 1);","                expr = new ExpressionFunctionATan();","                break;","            case SQLTokenizer.ATAN2:","                invalidParamCount = (paramCount != 2);","                expr = new ExpressionFunctionATan2();","                break;","            case SQLTokenizer.CEILING:","                invalidParamCount = (paramCount != 1);","                expr = new ExpressionFunctionCeiling();","                break;","            case SQLTokenizer.COS:","                invalidParamCount = (paramCount != 1);","                expr = new ExpressionFunctionCos();","                break;","            case SQLTokenizer.COT:","                invalidParamCount = (paramCount != 1);","                expr = new ExpressionFunctionCot();","                break;","            case SQLTokenizer.DEGREES:","                invalidParamCount = (paramCount != 1);","                expr = new ExpressionFunctionDegrees();","                break;","            case SQLTokenizer.EXP:","                invalidParamCount = (paramCount != 1);","                expr = new ExpressionFunctionExp();","                break;","            case SQLTokenizer.FLOOR:","                invalidParamCount = (paramCount != 1);","                expr = new ExpressionFunctionFloor();","                break;","            case SQLTokenizer.LOG:","                invalidParamCount = (paramCount != 1);","                expr = new ExpressionFunctionLog();","                break;","            case SQLTokenizer.LOG10:","                invalidParamCount = (paramCount != 1);","                expr = new ExpressionFunctionLog10();","                break;","            case SQLTokenizer.MOD:","                invalidParamCount = (paramCount != 2);","                expr = new ExpressionFunctionMod();","                break;","            case SQLTokenizer.PI:","                invalidParamCount = (paramCount != 0);","                expr = new ExpressionFunctionPI();","                break;","            case SQLTokenizer.POWER:","                invalidParamCount = (paramCount != 2);","                expr = new ExpressionFunctionPower();","                break;","            case SQLTokenizer.RADIANS:","                invalidParamCount = (paramCount != 1);","                expr = new ExpressionFunctionRadians();","                break;","            case SQLTokenizer.RAND:","                invalidParamCount =  (paramCount != 0) && (paramCount != 1);","                expr = new ExpressionFunctionRand();","                break;","            case SQLTokenizer.ROUND:","                invalidParamCount =  (paramCount != 2);","                expr = new ExpressionFunctionRound();","                break;","            case SQLTokenizer.SIN:","                invalidParamCount = (paramCount != 1);","                expr = new ExpressionFunctionSin();","                break;","            case SQLTokenizer.SIGN:","                invalidParamCount = (paramCount != 1);","                expr = new ExpressionFunctionSign();","                break;","            case SQLTokenizer.SQRT:","                invalidParamCount = (paramCount != 1);","                expr = new ExpressionFunctionSqrt();","                break;","            case SQLTokenizer.TAN:","                invalidParamCount = (paramCount != 1);","                expr = new ExpressionFunctionTan();","                break;","            case SQLTokenizer.TRUNCATE:","                invalidParamCount =  (paramCount != 2);","                expr = new ExpressionFunctionTruncate();","                break;","\t\t\tcase SQLTokenizer.ASCII:","\t\t\t\tinvalidParamCount = (paramCount != 1);","\t\t\t\texpr = new ExpressionFunctionAscii();","\t\t\t\tbreak;","            case SQLTokenizer.BITLEN:","                invalidParamCount = (paramCount != 1);","                expr = new ExpressionFunctionBitLen();","                break;","            case SQLTokenizer.CHARLEN:","            case SQLTokenizer.CHARACTLEN:","                invalidParamCount = (paramCount != 1);","                expr = new ExpressionFunctionCharLen();","                break;","\t\t\tcase SQLTokenizer.CHAR:","\t\t\t\tinvalidParamCount = (paramCount != 1);","\t\t\t\texpr = new ExpressionFunctionChar();","\t\t\t\tbreak;","            case SQLTokenizer.CONCAT:","                if(paramCount != 2){","                    invalidParamCount = true;","                    expr = null;","                    break;","                }","                invalidParamCount = false;","                expr = new ExpressionArithmetic( params[0], params[1], ExpressionArithmetic.ADD);","                break;","            case SQLTokenizer.DIFFERENCE:","                invalidParamCount = (paramCount != 2);","                expr = new ExpressionFunctionDifference();","                break;","            case SQLTokenizer.INSERT:","                invalidParamCount = (paramCount != 4);","                expr = new ExpressionFunctionInsert();","                break;","            case SQLTokenizer.LCASE:","                invalidParamCount = (paramCount != 1);","                expr = new ExpressionFunctionLCase();","                break;","            case SQLTokenizer.LEFT:","                invalidParamCount = (paramCount != 2);","                expr = new ExpressionFunctionLeft();","                break;","\t\t\tcase SQLTokenizer.LENGTH:","\t\t\t\tinvalidParamCount = (paramCount != 1);","\t\t\t\texpr = new ExpressionFunctionLength();","\t\t\t\tbreak;","            case SQLTokenizer.LOCATE:","            \tinvalidParamCount = (paramCount != 2) && (paramCount != 3);","            \texpr = new ExpressionFunctionLocate();","            \tbreak;","            case SQLTokenizer.LTRIM:","                invalidParamCount = (paramCount != 1);","                expr = new ExpressionFunctionLTrim();","                break;","            case SQLTokenizer.OCTETLEN:","                invalidParamCount = (paramCount != 1);","                expr = new ExpressionFunctionOctetLen();","                break;","            case SQLTokenizer.REPEAT:","                invalidParamCount = (paramCount != 2);","                expr = new ExpressionFunctionRepeat();","                break;","            case SQLTokenizer.REPLACE:","                invalidParamCount = (paramCount != 3);","                expr = new ExpressionFunctionReplace();","                break;","\t\t\tcase SQLTokenizer.RIGHT:","\t\t\t\tinvalidParamCount = (paramCount != 2);","\t\t\t\texpr = new ExpressionFunctionRight();","\t\t\t\tbreak;","            case SQLTokenizer.RTRIM:","                invalidParamCount = (paramCount != 1);","                expr = new ExpressionFunctionRTrim();","                break;","            case SQLTokenizer.SPACE:","                invalidParamCount = (paramCount != 1);","                expr = new ExpressionFunctionSpace();","                break;","            case SQLTokenizer.SOUNDEX:","                invalidParamCount = (paramCount != 1);","                expr = new ExpressionFunctionSoundex();","                break;","\t\t\tcase SQLTokenizer.SUBSTRING:","\t\t\t\tinvalidParamCount = (paramCount != 3);","\t\t\t\texpr = new ExpressionFunctionSubstring();","\t\t\t\tbreak;","            case SQLTokenizer.UCASE:","                invalidParamCount = (paramCount != 1);","                expr = new ExpressionFunctionUCase();","                break;","            case SQLTokenizer.CURDATE:","            case SQLTokenizer.CURRENTDATE:","            \tinvalidParamCount = (paramCount != 0);","\t\t\t\texpr = new ExpressionValue( new DateTime(DateTime.now(), SQLTokenizer.DATE), SQLTokenizer.DATE);","\t\t\t\tbreak;","            case SQLTokenizer.CURTIME:","            \tinvalidParamCount = (paramCount != 0);","\t\t\t\texpr = new ExpressionValue( new DateTime(DateTime.now(), SQLTokenizer.TIME), SQLTokenizer.TIME);","\t\t\t\tbreak;","            case SQLTokenizer.DAYOFMONTH:","            \tinvalidParamCount = (paramCount != 1);","\t\t\t\texpr = new ExpressionFunctionDayOfMonth();","\t\t\t\tbreak;","            case SQLTokenizer.DAYOFWEEK:","            \tinvalidParamCount = (paramCount != 1);","\t\t\t\texpr = new ExpressionFunctionDayOfWeek();","\t\t\t\tbreak;","            case SQLTokenizer.DAYOFYEAR:","            \tinvalidParamCount = (paramCount != 1);","\t\t\t\texpr = new ExpressionFunctionDayOfYear();","\t\t\t\tbreak;","            case SQLTokenizer.HOUR:","            \tinvalidParamCount = (paramCount != 1);","\t\t\t\texpr = new ExpressionFunctionHour();","\t\t\t\tbreak;","            case SQLTokenizer.MINUTE:","            \tinvalidParamCount = (paramCount != 1);","\t\t\t\texpr = new ExpressionFunctionMinute();","\t\t\t\tbreak;","            case SQLTokenizer.MONTH:","            \tinvalidParamCount = (paramCount != 1);","\t\t\t\texpr = new ExpressionFunctionMonth();","\t\t\t\tbreak;","            case SQLTokenizer.NOW:","            \tinvalidParamCount = (paramCount != 0);","\t\t\t\texpr = new ExpressionValue( new DateTime(DateTime.now(), SQLTokenizer.TIMESTAMP), SQLTokenizer.TIMESTAMP);","\t\t\t\tbreak;","            case SQLTokenizer.YEAR:","                invalidParamCount = (paramCount != 1);","                expr = new ExpressionFunctionYear();","                break;","            case SQLTokenizer.IIF:","        \t\tinvalidParamCount = (paramCount != 3);","            \texpr = new ExpressionFunctionIIF();","        \t\tbreak;","        \tcase SQLTokenizer.SWITCH:","        \t\tinvalidParamCount = (paramCount % 2 != 0);","        \t\tExpressionFunctionCase exprCase = new ExpressionFunctionCase();","        \t\tfor(int i=0; i \< paramCount-1; i +=2)","        \t\t\texprCase.addCase(params[i], params[i+1] );","        \t\texprCase.setEnd();","        \t\texpr = exprCase;","        \t\tbreak;","        \tcase SQLTokenizer.IFNULL:","        \t\tswitch(paramCount){","        \t\t\tcase 1:","        \t\t\t\treturn new ExpressionArithmetic( params[0], ExpressionArithmetic.ISNULL );","        \t\t\tcase 2:        \t\t\t\t","        \t\t\t\tinvalidParamCount = false;","        \t\t\t\texpr = new ExpressionFunctionIIF();","        \t\t\t\tExpression[] newParams = new Expression[3];","        \t\t\t\tnewParams[0] = new ExpressionArithmetic( params[0], ExpressionArithmetic.ISNULL );","        \t\t\t\tnewParams[1] = params[1];","        \t\t\t\tnewParams[2] = params[0];        \t\t\t\t","        \t\t\t\tparams = newParams;","        \t\t\t\tparamCount = 3;","        \t\t\t\tbreak;","        \t\t\tdefault:","        \t\t\t\tinvalidParamCount = true;","        \t\t\t\texpr = null; ","        \t\t}","        \t\tbreak;","            case SQLTokenizer.COUNT:","\t\t\t\t\tinvalidParamCount = (paramCount != 1);","\t\t\t\t\tif(params[0].getType() == Expression.NAME){","\t\t\t\t\t\tExpressionName param = (ExpressionName)params[0];","\t\t\t\t\t\tif(\"*\".equals(param.getName()) && param.getTableAlias() == null){","\t\t\t\t\t\t\tparams[0] = new ExpressionValue(\"*\", SQLTokenizer.VARCHAR);","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t\texpr = new ExpressionName( Expression.COUNT );","\t\t\t\t\tbreak;","\t\t\tcase SQLTokenizer.SUM:","\t\t\t\t\tinvalidParamCount = (paramCount != 1);","\t\t\t\t\texpr = new ExpressionName( Expression.SUM );","\t\t\t\t\tbreak;","\t\t\tcase SQLTokenizer.MAX:","\t\t\t\t\tinvalidParamCount = (paramCount != 1);","\t\t\t\t\texpr = new ExpressionName( Expression.MAX );","\t\t\t\t\tbreak;","\t\t\tcase SQLTokenizer.MIN:","\t\t\t\t\tinvalidParamCount = (paramCount != 1);","\t\t\t\t\texpr = new ExpressionName( Expression.MIN );","\t\t\t\t\tbreak;","\t\t\tcase SQLTokenizer.FIRST:","\t\t\t\t\tinvalidParamCount = (paramCount != 1);","\t\t\t\t\texpr = new ExpressionName( Expression.FIRST );","\t\t\t\t\tbreak;","\t\t\tcase SQLTokenizer.LAST:","\t\t\t\t\tinvalidParamCount = (paramCount != 1);","\t\t\t\t\texpr = new ExpressionName( Expression.LAST );","\t\t\t\t\tbreak;","\t\t\tcase SQLTokenizer.AVG:","\t\t\t\t\tif(paramCount != 1){","                        invalidParamCount = true;","                        expr = null;","                        break;","                    }","\t\t\t\t\texpr = new ExpressionName( Expression.SUM );","\t\t\t\t\texpr.setParams( params );","\t\t\t\t\tExpression expr2 = new ExpressionName( Expression.COUNT );","\t\t\t\t\texpr2.setParams( params );","\t\t\t\t\texpr = new ExpressionArithmetic( expr, expr2, ExpressionArithmetic.DIV );","\t\t\t\t\treturn expr;","            default:","            \tthrow createSyntaxError(token, Language.STXADD_FUNC_UNKNOWN);","        }","        if(invalidParamCount) {","        \tthrow createSyntaxError(token, Language.STXADD_PARAM_INVALID_COUNT);","        }","        expr.setParams( params );","        return expr;","    }","    private RowSource tableSource( Command cmd, DataSources tables) throws SQLException{","        SQLToken token = nextToken(MISSING_EXPRESSION);","        switch(token.value){","            case SQLTokenizer.PARENTHESIS_L: ","                    return rowSource( cmd, tables, SQLTokenizer.PARENTHESIS_R );","            case SQLTokenizer.ESCAPE_L: ","                    token = nextToken(MISSING_OJ);","                    return rowSource( cmd, tables, SQLTokenizer.ESCAPE_R );","            case SQLTokenizer.SELECT:","            \t\tViewResult viewResult = new ViewResult( con, select() );","            \t\ttables.add(viewResult);","            \t\treturn viewResult;","        }","        String catalog = null;","        String name = getIdentifier( token );","\t\ttoken = nextToken();","\t\tif(token != null && token.value == SQLTokenizer.POINT){","\t\t\tcatalog = name;","\t\t\tname = nextIdentifier();","\t\t\ttoken = nextToken();","\t\t}","\t\tTableView tableView = Database.getTableView( con, catalog, name);","\t\tTableViewResult table = TableViewResult.createResult(tableView);","        tables.add( table );","        if(token != null && token.value == SQLTokenizer.AS){","            token = nextToken(MISSING_EXPRESSION);","            table.setAlias( token.getName( sql ) );","        }else{","            previousToken();","        }","        return table;","    }","    private Join join(Command cmd, DataSources tables, RowSource left, int type) throws SQLException{","        RowSource right = rowSource(cmd, tables, 0);","        SQLToken token = nextToken();","        while(true){","            if(token == null) {","            \tthrow createSyntaxError(token, Language.STXADD_JOIN_INVALID);","            }","            switch(token.value){","            \tcase SQLTokenizer.ON:","\t            \tif(type == Join.RIGHT_JOIN)","\t\t\t\t\t\treturn new Join( Join.LEFT_JOIN, right, left, expression( cmd, 0 ) );","\t                return new Join( type, left, right, expression( cmd, 0 ) );","\t            default:","\t                if(!right.hasAlias()){","\t                    right.setAlias( token.getName( sql ) );","\t                    token = nextToken();","\t                    continue;","\t                }","\t                throw createSyntaxError( token, MISSING_ON );\t                ","            }","        }","    }","    private RowSource rowSource(Command cmd, DataSources tables, int parenthesis) throws SQLException{","        RowSource fromSource = null;","        fromSource = tableSource(cmd, tables);","        while(true){","            SQLToken token = nextToken();","            if(token == null) return fromSource;","            switch(token.value){","                case SQLTokenizer.ON:","                    previousToken();","                    return fromSource;","                case SQLTokenizer.CROSS:","                    nextToken(MISSING_JOIN);","                case SQLTokenizer.COMMA:","                    fromSource = new Join( Join.CROSS_JOIN, fromSource, rowSource(cmd, tables, 0), null);","                    break;","                case SQLTokenizer.INNER:","                    nextToken(MISSING_JOIN);","                case SQLTokenizer.JOIN:","                    fromSource = join( cmd, tables, fromSource, Join.INNER_JOIN );","                    break;","                case SQLTokenizer.LEFT:","                    token = nextToken(MISSING_OUTER_JOIN);","                \tif(token.value == SQLTokenizer.OUTER)","                \t\ttoken = nextToken(MISSING_JOIN);","                    fromSource = join( cmd, tables, fromSource, Join.LEFT_JOIN );","                    break;","                case SQLTokenizer.RIGHT:","                \ttoken = nextToken(MISSING_OUTER_JOIN);","                \tif(token.value == SQLTokenizer.OUTER)","                \t\ttoken = nextToken(MISSING_JOIN);","\t\t\t\t\tfromSource = join( cmd, tables, fromSource, Join.RIGHT_JOIN );","\t\t\t\t\tbreak;                \t","\t\t\t\tcase SQLTokenizer.FULL:","\t\t\t\t\ttoken = nextToken(MISSING_OUTER_JOIN);","\t\t\t\t\tif(token.value == SQLTokenizer.OUTER)","\t\t\t\t\t\ttoken = nextToken(MISSING_JOIN);","\t\t\t\t\tfromSource = join( cmd, tables, fromSource, Join.FULL_JOIN );","\t\t\t\t\tbreak;                \t","                case SQLTokenizer.PARENTHESIS_R:","                case SQLTokenizer.ESCAPE_R:","                    if(parenthesis == token.value) return fromSource;","                    if(parenthesis == 0){","                    \tpreviousToken();","\t\t\t\t\t\treturn fromSource;","                    }","                    throw createSyntaxError( token, Language.STXADD_FROM_PAR_CLOSE );","                default:","                \tif(isKeyword(token)){","\t\t\t\t\t\tpreviousToken();","\t\t\t\t\t\treturn fromSource;","                \t}","                    if(!fromSource.hasAlias()){","                        fromSource.setAlias( token.getName( sql ) );","                        break;","                    }","                    throw createSyntaxError( token, new int[]{SQLTokenizer.COMMA, SQLTokenizer.GROUP, SQLTokenizer.ORDER, SQLTokenizer.HAVING} );","            }","        }","    }","    private void from(CommandSelect cmd) throws SQLException{","\t\tDataSources tables = new DataSources();","        cmd.setTables(tables);","        cmd.setSource( rowSource( cmd, tables, 0 ) );","\t\tSQLToken token;","        while(null != (token = nextToken())){","            switch(token.value){","                case SQLTokenizer.WHERE:","                    where( cmd );","                    break;","                case SQLTokenizer.GROUP:","                    group( cmd );","                    break;","                case SQLTokenizer.HAVING:","                    having( cmd );","                    break;","                default:","                \tpreviousToken();","                    return;","            }","        }","    }","    private void order(CommandSelect cmd) throws SQLException{","        nextToken(MISSING_BY);","        cmd.setOrder(expressionTokenList(cmd, SQLTokenizer.ORDER));","    }","    private void limit(CommandSelect selCmd) throws SQLException{","        SQLToken token = nextToken(MISSING_EXPRESSION);","        try{","            int maxRows = Integer.parseInt(token.getName(sql));","            selCmd.setMaxRows(maxRows);","        }catch(NumberFormatException e){","            throw createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));","        }","    }","    private void group(CommandSelect cmd) throws SQLException{","        nextToken(MISSING_BY);","        cmd.setGroup( expressionTokenList(cmd, SQLTokenizer.GROUP) );","    }","    private void where(CommandSelect cmd) throws SQLException{","        cmd.setWhere( expression(cmd, 0) );","    }","    private void having(CommandSelect cmd) throws SQLException{","        cmd.setHaving( expression(cmd, 0) );","    }","    private static final int[] COMMANDS = {SQLTokenizer.SELECT, SQLTokenizer.DELETE, SQLTokenizer.INSERT, SQLTokenizer.UPDATE, SQLTokenizer.CREATE, SQLTokenizer.DROP, SQLTokenizer.ALTER, SQLTokenizer.SET, SQLTokenizer.USE, SQLTokenizer.EXECUTE, SQLTokenizer.TRUNCATE};","    private static final int[] COMMANDS_ESCAPE = {SQLTokenizer.D, SQLTokenizer.T, SQLTokenizer.TS, SQLTokenizer.FN, SQLTokenizer.CALL};","    private static final int[] COMMANDS_ALTER = {SQLTokenizer.DATABASE, SQLTokenizer.TABLE, SQLTokenizer.VIEW,  SQLTokenizer.PROCEDURE, };","    private static final int[] COMMANDS_CREATE = {SQLTokenizer.DATABASE, SQLTokenizer.TABLE, SQLTokenizer.VIEW, SQLTokenizer.INDEX, SQLTokenizer.PROCEDURE, SQLTokenizer.UNIQUE, SQLTokenizer.CLUSTERED, SQLTokenizer.NONCLUSTERED};","    private static final int[] COMMANDS_DROP = {SQLTokenizer.DATABASE, SQLTokenizer.TABLE, SQLTokenizer.VIEW, SQLTokenizer.INDEX, SQLTokenizer.PROCEDURE};","    private static final int[] COMMANDS_SET = {SQLTokenizer.TRANSACTION};","    private static final int[] COMMANDS_CREATE_UNIQUE = {SQLTokenizer.INDEX, SQLTokenizer.CLUSTERED, SQLTokenizer.NONCLUSTERED};","\tprivate static final int[] MISSING_TABLE = {SQLTokenizer.TABLE};","    private static final int[] ESCAPE_MISSING_CLOSE = {SQLTokenizer.ESCAPE_R};","    private static final int[] MISSING_EXPRESSION = {SQLTokenizer.VALUE};","    private static final int[] MISSING_IDENTIFIER = {SQLTokenizer.IDENTIFIER};","    private static final int[] MISSING_BY = {SQLTokenizer.BY};","    private static final int[] MISSING_PARENTHESIS_L = {SQLTokenizer.PARENTHESIS_L};","    private static final int[] MISSING_PARENTHESIS_R = {SQLTokenizer.PARENTHESIS_R};","    private static final int[] MISSING_DATATYPE  = {SQLTokenizer.BIT, SQLTokenizer.BOOLEAN, SQLTokenizer.BINARY, SQLTokenizer.VARBINARY, SQLTokenizer.RAW, SQLTokenizer.LONGVARBINARY, SQLTokenizer.BLOB, SQLTokenizer.TINYINT, SQLTokenizer.SMALLINT, SQLTokenizer.INT, SQLTokenizer.COUNTER, SQLTokenizer. BIGINT, SQLTokenizer.SMALLMONEY, SQLTokenizer.MONEY, SQLTokenizer.DECIMAL, SQLTokenizer.NUMERIC, SQLTokenizer.REAL, SQLTokenizer.FLOAT, SQLTokenizer.DOUBLE, SQLTokenizer.DATE, SQLTokenizer.TIME, SQLTokenizer.TIMESTAMP, SQLTokenizer.SMALLDATETIME, SQLTokenizer.CHAR, SQLTokenizer.NCHAR, SQLTokenizer.VARCHAR, SQLTokenizer.NVARCHAR, SQLTokenizer.LONG, SQLTokenizer.LONGNVARCHAR, SQLTokenizer.LONGVARCHAR, SQLTokenizer.CLOB, SQLTokenizer.NCLOB, SQLTokenizer.UNIQUEIDENTIFIER, SQLTokenizer.JAVA_OBJECT, SQLTokenizer.SYSNAME};","\tprivate static final int[] MISSING_SQL_DATATYPE = { SQLTokenizer.SQL_BIGINT , SQLTokenizer.SQL_BINARY , SQLTokenizer.SQL_BIT , SQLTokenizer.SQL_CHAR , SQLTokenizer.SQL_DATE , SQLTokenizer.SQL_DECIMAL , SQLTokenizer.SQL_DOUBLE , SQLTokenizer.SQL_FLOAT , SQLTokenizer.SQL_INTEGER , SQLTokenizer.SQL_LONGVARBINARY , SQLTokenizer.SQL_LONGVARCHAR , SQLTokenizer.SQL_REAL , SQLTokenizer.SQL_SMALLINT , SQLTokenizer.SQL_TIME , SQLTokenizer.SQL_TIMESTAMP , SQLTokenizer.SQL_TINYINT , SQLTokenizer.SQL_VARBINARY , SQLTokenizer.SQL_VARCHAR };","    private static final int[] MISSING_INTO = {SQLTokenizer.INTO};","\tprivate static final int[] MISSING_BETWEEN_IN = {SQLTokenizer.BETWEEN, SQLTokenizer.IN};","\tprivate static final int[] MISSING_NOT_NULL = {SQLTokenizer.NOT, SQLTokenizer.NULL};","    private static final int[] MISSING_NULL = {SQLTokenizer.NULL};","\tprivate static final int[] MISSING_COMMA = {SQLTokenizer.COMMA};","    private static final int[] MISSING_COMMA_PARENTHESIS = {SQLTokenizer.COMMA, SQLTokenizer.PARENTHESIS_R};","    private static final int[] MISSING_PARENTHESIS_VALUES_SELECT = {SQLTokenizer.PARENTHESIS_L, SQLTokenizer.VALUES, SQLTokenizer.SELECT};","    private static final int[] MISSING_TOKEN_LIST = {SQLTokenizer.COMMA, SQLTokenizer.FROM, SQLTokenizer.GROUP, SQLTokenizer.HAVING, SQLTokenizer.ORDER};","\tprivate static final int[] MISSING_FROM = {SQLTokenizer.FROM};","\tprivate static final int[] MISSING_SET = {SQLTokenizer.SET};","\tprivate static final int[] MISSING_EQUALS = {SQLTokenizer.EQUALS};","\tprivate static final int[] MISSING_WHERE = {SQLTokenizer.WHERE};","\tprivate static final int[] MISSING_WHERE_COMMA = {SQLTokenizer.WHERE, SQLTokenizer.COMMA};","    private static final int[] MISSING_ISOLATION = {SQLTokenizer.ISOLATION};","    private static final int[] MISSING_LEVEL = {SQLTokenizer.LEVEL};","    private static final int[] COMMANDS_TRANS_LEVEL = {SQLTokenizer.READ, SQLTokenizer.REPEATABLE, SQLTokenizer.SERIALIZABLE};","    private static final int[] MISSING_READ = {SQLTokenizer.READ};","    private static final int[] MISSING_COMM_UNCOMM = {SQLTokenizer.COMMITTED, SQLTokenizer.UNCOMMITTED};","    private static final int[] MISSING_OPTIONS_DATATYPE = { SQLTokenizer.DEFAULT, SQLTokenizer.IDENTITY, SQLTokenizer.NOT, SQLTokenizer.NULL, SQLTokenizer.PRIMARY, SQLTokenizer.UNIQUE, SQLTokenizer.COMMA, SQLTokenizer.PARENTHESIS_R};","    private static final int[] MISSING_NUMBERVALUE = {SQLTokenizer.NUMBERVALUE};","    private static final int[] MISSING_AND = {SQLTokenizer.AND};","    private static final int[] MISSING_JOIN = {SQLTokenizer.JOIN};","    private static final int[] MISSING_OUTER_JOIN = {SQLTokenizer.OUTER, SQLTokenizer.JOIN};","    private static final int[] MISSING_OJ = {SQLTokenizer.OJ};","    private static final int[] MISSING_ON = {SQLTokenizer.ON};","\tprivate static final int[] MISSING_KEYTYPE = {SQLTokenizer.PRIMARY, SQLTokenizer.UNIQUE, SQLTokenizer.FOREIGN};","\tprivate static final int[] MISSING_KEY = {SQLTokenizer.KEY};","    private static final int[] MISSING_REFERENCES = {SQLTokenizer.REFERENCES};","\tprivate static final int[] MISSING_AS = {SQLTokenizer.AS};","\tprivate static final int[] MISSING_SELECT = {SQLTokenizer.SELECT};","\tprivate static final int[] MISSING_INTERVALS = {SQLTokenizer.SQL_TSI_FRAC_SECOND, SQLTokenizer.SQL_TSI_SECOND, SQLTokenizer.SQL_TSI_MINUTE, SQLTokenizer.SQL_TSI_HOUR, SQLTokenizer.SQL_TSI_DAY, SQLTokenizer.SQL_TSI_WEEK, SQLTokenizer.SQL_TSI_MONTH, SQLTokenizer.SQL_TSI_QUARTER, SQLTokenizer.SQL_TSI_YEAR, SQLTokenizer.MILLISECOND, SQLTokenizer.SECOND, SQLTokenizer.MINUTE, SQLTokenizer.HOUR, SQLTokenizer.DAY, SQLTokenizer.WEEK, SQLTokenizer.MONTH, SQLTokenizer.QUARTER, SQLTokenizer.YEAR, SQLTokenizer.D};","\tprivate static final int[] MISSING_ALL = {SQLTokenizer.ALL};","\tprivate static final int[] MISSING_THEN = {SQLTokenizer.THEN};","\tprivate static final int[] MISSING_WHEN_ELSE_END = {SQLTokenizer.WHEN, SQLTokenizer.ELSE, SQLTokenizer.END};","\tprivate static final int[] MISSING_ADD_ALTER_DROP = {SQLTokenizer.ADD, SQLTokenizer.ALTER, SQLTokenizer.DROP};","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionExp.java|:["package smallsql.database;","final class ExpressionFunctionExp extends ExpressionFunctionReturnFloat {","    final int getFunction(){ return SQLTokenizer.EXP; }","    final double getDouble() throws Exception{","\t\tif(isNull()) return 0;","        return Math.exp( param1.getDouble() );","    }","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionRight.java|:["package smallsql.database;","public class ExpressionFunctionRight extends ExpressionFunctionReturnP1StringAndBinary {","\tfinal int getFunction() {","\t\treturn SQLTokenizer.RIGHT;","\t}","\tfinal boolean isNull() throws Exception {","\t\treturn param1.isNull() || param2.isNull();","\t}","\tfinal byte[] getBytes() throws Exception{","\t\tif(isNull()) return null;","\t\tbyte[] bytes = param1.getBytes();","\t\tint length = param2.getInt();","\t\tif(bytes.length \<= length) return bytes;","\t\tbyte[] b = new byte[length];","\t\tSystem.arraycopy(bytes, bytes.length -length, b, 0, length);","\t\treturn b;\t\t","\t}","\tfinal String getString() throws Exception {","\t\tif(isNull()) return null;","\t\tString str = param1.getString();","\t\tint length  = param2.getInt();","\t\tint start = str.length() - Math.min( length, str.length() );","\t\treturn str.substring(start);","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|:["package smallsql.database;","final class ExpressionFunctionCase extends Expression {","\tExpressionFunctionCase() {","\t\tsuper(FUNCTION);","\t}","\tprivate final Expressions cases   = new Expressions();","\tprivate final Expressions results = new Expressions();","\tprivate Expression elseResult = Expression.NULL;","\tprivate int dataType = -1;","\tfinal void addCase(Expression condition, Expression result){","\t\tcases.add(condition);","\t\tresults.add(result);","\t}","\tfinal void setElseResult(Expression expr){","\t\telseResult = expr;","\t}","\tfinal void setEnd(){","\t\tExpression[] params = new Expression[cases.size()*2 + (elseResult!=null ? 1 : 0)];","\t\tint i=0;","\t\tfor(int p=0; p\<cases.size(); p++){","\t\t\tparams[i++] = cases  .get( p );","\t\t\tparams[i++] = results.get( p );","\t\t}","\t\tif(i\<params.length)","\t\t\tparams[i] = elseResult;","\t\tsuper.setParams(params);","\t}","\tfinal void setParams( Expression[] params ){","\t\tsuper.setParams(params);","\t\tint i = 0;","\t\tfor(int p=0; p\<cases.size(); p++){","\t\t\tcases  .set( p, params[i++]);","\t\t\tresults.set( p, params[i++]);","\t\t}","\t\tif(i\<params.length)","\t\t\telseResult = params[i];","\t}","    void setParamAt( Expression param, int idx){","    \tsuper.setParamAt( param, idx );","    \tint p = idx / 2;","    \tif(p\>=cases.size()){","    \t\telseResult = param;","    \t\treturn;","    \t}","    \tif(idx % 2 \> 0){    \t\t","    \t\tresults.set( p, param );","    \t}else{","    \t\tcases.set( p, param );","    \t}","    }","\tfinal int getFunction() {","\t\treturn SQLTokenizer.CASE;","\t}","\tfinal boolean isNull() throws Exception {","\t\treturn getResult().isNull();","\t}","\tfinal boolean getBoolean() throws Exception {","\t\treturn getResult().getBoolean();","\t}","\tfinal int getInt() throws Exception {","\t\treturn getResult().getInt();","\t}","\tfinal long getLong() throws Exception {","\t\treturn getResult().getLong();","\t}","\tfinal float getFloat() throws Exception {","\t\treturn getResult().getFloat();","\t}","\tfinal double getDouble() throws Exception {","\t\treturn getResult().getDouble();","\t}","\tfinal long getMoney() throws Exception {","\t\treturn getResult().getMoney();","\t}","\tfinal MutableNumeric getNumeric() throws Exception {","\t\treturn getResult().getNumeric();","\t}","\tfinal Object getObject() throws Exception {","\t\treturn getResult().getObject();","\t}","\tfinal String getString() throws Exception {","\t\treturn getResult().getString();","\t}","\tfinal byte[] getBytes() throws Exception{","\t\treturn getResult().getBytes();","\t}","\tfinal int getDataType() {","\t\tif(dataType \< 0){","\t\t\tdataType = elseResult.getDataType();","\t\t\tfor(int i=0; i\<results.size(); i++){","\t\t\t\tdataType = ExpressionArithmetic.getDataType(dataType, results.get(i).getDataType());","\t\t\t}","\t\t}","\t\treturn dataType;","\t}","\tfinal int getPrecision(){","\t\tint precision = 0;","\t\tfor(int i=results.size()-1; i\>=0; i--){","\t\t\tprecision = Math.max(precision, results.get(i).getPrecision());","\t\t}","\t\treturn precision;","\t}","\tfinal int getScale(){","\t\tint precision = 0;","\t\tfor(int i=results.size()-1; i\>=0; i--){","\t\t\tprecision = Math.max(precision, results.get(i).getScale());","\t\t}","\t\treturn precision;","\t}","\tfinal private Expression getResult() throws Exception{","\t\tfor(int i=0; i\<cases.size(); i++){","\t\t\tif(cases.get(i).getBoolean()) return results.get(i);","\t\t}","\t\treturn elseResult;","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionLCase.java|:["package smallsql.database;","public class ExpressionFunctionLCase extends ExpressionFunctionReturnP1StringAndBinary {","\tfinal int getFunction() {","\t\treturn SQLTokenizer.LCASE;","\t}","\tfinal boolean isNull() throws Exception {","\t\treturn param1.isNull();","\t}","\tfinal byte[] getBytes() throws Exception{","        if(isNull()) return null;","        return getString().getBytes();","\t}","\tfinal String getString() throws Exception {","\t\tif(isNull()) return null;","\t\treturn param1.getString().toLowerCase();","\t}","}"],|project://smallsql/src/smallsql/database/CommandCreateView.java|:["package smallsql.database;","public class CommandCreateView extends Command{","\tprivate Columns columns = new Columns();","\tString sql;","    CommandCreateView( Logger log, String name ){","    \tsuper(log);","        this.type = SQLTokenizer.VIEW;","        this.name = name;","    }","\tvoid addColumn( Column column ){","\t\tcolumns.add( column );","\t}","    void executeImpl(SSConnection con, SSStatement st) throws Exception{","        con.getDatabase(false).createView(con, name, sql);","    }","}"],|project://smallsql/src/smallsql/junit/TestExceptions.java|:["package smallsql.junit;","import junit.framework.*;","import java.sql.*;","public class TestExceptions extends BasicTestCase {","    private TestValue testValue;","\tprivate static boolean init;","    private static final int SYNTAX = 1;","    private static final int RUNTIME= 2;","    private static final TestValue[] TESTS = new TestValue[]{","        a( \"01000\",    0, SYNTAX,  \"SELECT 23 FROM\"), ","\t    a( \"01000\",    0, SYNTAX,  \"SELECT c FROM exceptions Group By i\"), ","\t    a( \"01000\",    0, SYNTAX,  \"SELECT first(c) FROM exceptions Group By i ORDER  by c\"), ","\t    a( \"01000\",    0, SYNTAX,  \"SELECT 1 ORDER BY substring(\'qwert\', 2, -3)\"), ","        a( \"01000\",    0, RUNTIME, \"SELECT abs(\'abc\')\"), ","        a( \"01000\",    0, SYNTAX,  \"Create Table anyTable (c char(10)\"), ","        a( \"01000\",    0, SYNTAX,  \"SELECT {ts \'abc\'}\"), ","        a( \"01000\",    0, RUNTIME, \"SELECT cast(\'abc\' as timestamp)\"), ","        a( \"01000\",    0, SYNTAX, \"SELECT 0xas\"), ","        a( \"01000\",    0, RUNTIME, \"SELECT cast(\'1234-56as\' as uniqueidentifier)\"), ","        a( \"01000\",    0, SYNTAX, \"SELECT {ts \'2020-04-31 00:00:00.000\'}\"), ","        a( \"01000\",    0, SYNTAX, \"SELECT {ts \'2020-02-30 12:30:15.000\'}\"), ","        a( \"01000\",    0, SYNTAX, \"SELECT {d \'2021-02-29\'}\"), ","        a( \"01000\",    0, SYNTAX, \"SELECT {d \'2021-22-09\'}\"), ","        a( \"01000\",    0, SYNTAX, \"SELECT {t \'24:30:15.000\'}\"), ","        a( \"01000\",    0, SYNTAX, \"SELECT {t \'12:60:15.000\'}\"), ","        a( \"01000\",    0, SYNTAX, \"SELECT {t \'12:30:65.000\'}\"), ","        a( \"01000\",    0, SYNTAX,  \"SELECT * FROM exceptions JOIN\"), ","        a( \"01000\",    0, SYNTAX,  \"select 10/2,\"),","    };","    TestExceptions(TestValue testValue){","        super(testValue.sql);","        this.testValue = testValue;","    }","    private void init() throws Exception{","    \tif(init) return;","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\tdropTable( con, \"exceptions\");","\t\tst.execute(\"Create Table exceptions (c varchar(30), i int)\");","\t\tinit = true;","    }","    public void runTest() throws Exception{","    \tinit();","        Connection con = AllTests.getConnection();","        Statement st = con.createStatement();","\t\tResultSet rs = null;","        try{","            rs = st.executeQuery( testValue.sql );","        }catch(SQLException sqle){","            assertTrue( \"There should no syntax error:\"+sqle, SYNTAX == testValue.errorType);","            assertSQLException( testValue.sqlstate, testValue.errorCode, sqle );","        }","        if(testValue.errorType == SYNTAX){","            assertNull(\"There should be a syntax error\", rs);","            return;","        }","        try{","            while(rs.next()){","                for(int i=1; i\<=rs.getMetaData().getColumnCount(); i++){","                    rs.getObject(i);","                }","            }","            fail(\"There should be a runtime error\");","        }catch(SQLException sqle){","            assertSQLException( testValue.sqlstate, testValue.errorCode, sqle );","        }","    }","    public static Test suite() throws Exception{","        TestSuite theSuite = new TestSuite(\"Exceptions\");","        for(int i=0; i\<TESTS.length; i++){","            theSuite.addTest(new TestExceptions( TESTS[i] ) );","        }","        return theSuite;","    }","    private static TestValue a(String sqlstate, int errorCode, int errorType, String sql ){","        TestValue value = new TestValue();","        value.sql       = sql;","        value.sqlstate  = sqlstate;","        value.errorCode = errorCode;","        value.errorType = errorType;","        return value;","    }","    private static class TestValue{","        String sql;","        String sqlstate;","        int errorCode;","        int errorType;","    }","}"],|project://smallsql/src/smallsql/database/TableResult.java|:["package smallsql.database;","import java.sql.*;","import java.util.List;","final class TableResult extends TableViewResult{","    final private Table table;","    private List insertStorePages;","    private long firstOwnInsert; ","    private long maxFileOffset;","\tTableResult(Table table){","\t\tthis.table = table;","\t}","\t@Override","    final boolean init( SSConnection con ) throws Exception{","\t\tif(super.init(con)){","\t\t\tColumns columns = table.columns;","\t\t\toffsets     = new int[columns.size()];","\t\t\tdataTypes   = new int[columns.size()];","\t\t\tfor(int i=0; i\<columns.size(); i++){","\t\t\t\tdataTypes[i] = columns.get(i).getDataType();","\t\t\t}","\t\t\treturn true;","\t\t}","\t\treturn false;","\t}","\t@Override","    final void execute() throws Exception{","\t\tinsertStorePages = table.getInserts(con);","\t\tfirstOwnInsert = 0x4000000000000000L | insertStorePages.size();","\t\tmaxFileOffset = table.raFile.size();","        beforeFirst();","\t}","\t@Override","    final TableView getTableView(){","\t\treturn table;","\t}","\t@Override","    final void deleteRow() throws SQLException{","\t\tstore.deleteRow(con); ","\t\tstore = new StoreNull(store.getNextPagePos());","\t}","\t@Override","    final void updateRow(Expression[] updateValues) throws Exception{","\t\tColumns tableColumns = table.columns;","\t\tint count = tableColumns.size();","\t\tStoreImpl newStore = table.getStoreTemp(con);","\t\tsynchronized(con.getMonitor()){","\t\t    ((StoreImpl)this.store).createWriteLock();","    \t\tfor(int i=0; i\<count; i++){","    \t\t\tExpression src = updateValues[i];","    \t\t\tif(src != null){","    \t\t\t\tnewStore.writeExpression( src, tableColumns.get(i) );","    \t\t\t}else{","    \t\t\t\tcopyValueInto( i, newStore );","    \t\t\t}","    \t\t}","    \t\t((StoreImpl)this.store).updateFinsh(con, newStore);","\t\t}","\t}","\t@Override","    final void insertRow(Expression[] updateValues) throws Exception{","\t\tColumns tableColumns = table.columns;","\t\tint count = tableColumns.size();","\t\tStoreImpl store = table.getStoreInsert(con);","\t\tfor(int i=0; i\<count; i++){","\t\t\tColumn tableColumn = tableColumns.get(i);","\t\t\tExpression src = updateValues[i];","\t\t\tif(src == null) src = tableColumn.getDefaultValue(con);","\t\t\tstore.writeExpression( src, tableColumn );","\t\t}","\t\tstore.writeFinsh( con );","\t\tinsertStorePages.add(store.getLink());","\t}","    private Store store = Store.NOROW;","    private long filePos; ","    private int[] offsets;","    private int[] dataTypes;","    private int row;","    private long afterLastValidFilePos;","    final private boolean moveToRow() throws Exception{","    \tif(filePos \>= 0x4000000000000000L){","    \t\tstore = ((StorePageLink)insertStorePages.get( (int)(filePos & 0x3FFFFFFFFFFFFFFFL) )).getStore( table, con, lock);","    \t}else{","    \t\tstore = (filePos \< maxFileOffset) ? table.getStore( con, filePos, lock ) : null;","\t\t\tif(store == null){","\t\t\t\tif(insertStorePages.size() \> 0){\t\t\t","\t\t\t\t\tfilePos = 0x4000000000000000L;","\t\t\t\t\tstore = ((StorePageLink)insertStorePages.get( (int)(filePos & 0x3FFFFFFFFFFFFFFFL) )).getStore( table, con, lock);","\t\t\t\t}","\t\t\t}","    \t}","\t\tif(store != null){","\t\t\tif(!store.isValidPage()){","\t\t\t\treturn false;","\t\t\t}","\t\t\tstore.scanObjectOffsets( offsets, dataTypes );","\t\t\tafterLastValidFilePos = store.getNextPagePos();","\t\t\treturn true;","\t\t}else{","\t\t\tfilePos = -1;","\t\t\tnoRow();","\t\t\treturn false;","\t\t}","    }","    final private boolean moveToValidRow() throws Exception{","\t\twhile(filePos \>= 0){","        \tif(moveToRow())","        \t\treturn true;","\t\t\tsetNextFilePos();","    \t}","        row = 0;","    \treturn false;","    }","\t@Override","    final void beforeFirst(){","\t\tfilePos = 0;","\t\tstore = Store.NOROW;","\t\trow = 0;","\t}","\t@Override","    final boolean first() throws Exception{","\t\tfilePos = table.getFirstPage();","\t\trow = 1;","\t\treturn moveToValidRow();","\t}","\tfinal private void setNextFilePos(){","\t\tif(filePos \< 0) return; ","\t\tif(store == Store.NOROW)","\t\t\t filePos = table.getFirstPage(); ","\t\telse","\t\tif(filePos \>= 0x4000000000000000L){","\t\t\tfilePos++;","\t\t\tif((filePos & 0x3FFFFFFFFFFFFFFFL) \>= insertStorePages.size()){","\t\t\t\tfilePos = -1;","\t\t\t\tnoRow();","\t\t\t}","\t\t}else","\t\t\tfilePos = store.getNextPagePos();","\t}","    @Override","    final boolean next() throws Exception{","        if(filePos \< 0) return false;","\t\tsetNextFilePos();","        row++;","        return moveToValidRow();","    }","\t@Override","    final void afterLast(){","\t\tfilePos = -1;","\t\tnoRow();","\t}","\t@Override","    final int getRow(){","    \treturn row;","    }","\t@Override","    final long getRowPosition(){","\t\treturn filePos;","\t}","\t@Override","    final void setRowPosition(long rowPosition) throws Exception{","\t\tfilePos = rowPosition;","\t\tif(filePos \< 0 || !moveToRow()){","\t\t\tstore = new StoreNull(store.getNextPagePos());","\t\t}","\t}","\t@Override","    final boolean rowInserted(){","\t\treturn filePos \>= firstOwnInsert;","\t}","\t@Override","    final boolean rowDeleted(){","\t\tif(store instanceof StoreNull && store != Store.NULL){","            return true;","        }","        if(store instanceof StoreImpl &&","            ((StoreImpl)store).isRollback()){","            return true;","        }","        return false;","\t}","\t@Override","    final void nullRow(){","\t\trow = 0;","    \tstore = Store.NULL;","    }","\t@Override","    final void noRow(){","\t\trow = 0;","\t\tstore = Store.NOROW;","\t}","\t@Override","    final boolean isNull( int colIdx ) throws Exception{","        return store.isNull( offsets[colIdx] );","    }","\t@Override","    final boolean getBoolean( int colIdx ) throws Exception{","        return store.getBoolean( offsets[colIdx], dataTypes[colIdx] );","    }","\t@Override","    final int getInt( int colIdx ) throws Exception{","        return store.getInt( offsets[colIdx], dataTypes[colIdx] );","    }","\t@Override","    final long getLong( int colIdx ) throws Exception{","        return store.getLong( offsets[colIdx], dataTypes[colIdx] );","    }","\t@Override","    final float getFloat( int colIdx ) throws Exception{","        return store.getFloat( offsets[colIdx], dataTypes[colIdx] );","    }","\t@Override","    final double getDouble( int colIdx ) throws Exception{","        return store.getDouble( offsets[colIdx], dataTypes[colIdx] );","    }","\t@Override","    final long getMoney( int colIdx ) throws Exception{","        return store.getMoney( offsets[colIdx], dataTypes[colIdx] );","    }","\t@Override","    final MutableNumeric getNumeric( int colIdx ) throws Exception{","        return store.getNumeric( offsets[colIdx], dataTypes[colIdx] );","    }","\t@Override","    final Object getObject( int colIdx ) throws Exception{","        return store.getObject( offsets[colIdx], dataTypes[colIdx] );","    }","\t@Override","    final String getString( int colIdx ) throws Exception{","        return store.getString( offsets[colIdx], dataTypes[colIdx] );","    }","\t@Override","    final byte[] getBytes( int colIdx ) throws Exception{","        return store.getBytes( offsets[colIdx], dataTypes[colIdx] );","    }","\t@Override","    final int getDataType( int colIdx ){","        return dataTypes[colIdx];","    }","    final private void copyValueInto( int colIdx, StoreImpl dst){","    \tint offset = offsets[colIdx++];","    \tint length = (colIdx \< offsets.length ? offsets[colIdx] : store.getUsedSize()) - offset;","\t\tdst.copyValueFrom( (StoreImpl)store, offset, length);","    }","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|:["package smallsql.database;","public class ExpressionFunctionTimestampDiff extends ExpressionFunction {","\tfinal private int interval;","\tstatic final int mapIntervalType(int intervalType){","\t\tswitch(intervalType){","\t\t\tcase SQLTokenizer.MILLISECOND:","\t\t\t\treturn SQLTokenizer.SQL_TSI_FRAC_SECOND;","\t\t\tcase SQLTokenizer.SECOND:","\t\t\t\treturn SQLTokenizer.SQL_TSI_SECOND;","\t\t\tcase SQLTokenizer.MINUTE:","\t\t\t\treturn SQLTokenizer.SQL_TSI_MINUTE;","\t\t\tcase SQLTokenizer.HOUR:","\t\t\t\treturn SQLTokenizer.SQL_TSI_HOUR;","\t\t\tcase SQLTokenizer.D:","\t\t\tcase SQLTokenizer.DAY:","\t\t\t\treturn SQLTokenizer.SQL_TSI_DAY;","\t\t\tcase SQLTokenizer.WEEK:","\t\t\t\treturn SQLTokenizer.SQL_TSI_WEEK;","\t\t\tcase SQLTokenizer.MONTH:","\t\t\t\treturn SQLTokenizer.SQL_TSI_MONTH;","\t\t\tcase SQLTokenizer.QUARTER:","\t\t\t\treturn SQLTokenizer.SQL_TSI_QUARTER;","\t\t\tcase SQLTokenizer.YEAR:","\t\t\t\treturn SQLTokenizer.SQL_TSI_YEAR;","\t\t\tdefault:","\t\t\t\treturn intervalType;","\t\t}","\t}","\tExpressionFunctionTimestampDiff(int intervalType, Expression p1, Expression p2){","\t\tinterval = mapIntervalType( intervalType );","\t\tsetParams( new Expression[]{p1,p2});","\t}","\tint getFunction() {","\t\treturn SQLTokenizer.TIMESTAMPDIFF;","\t}","\tboolean isNull() throws Exception {","\t\treturn param1.isNull() || param2.isNull();","\t}","\tboolean getBoolean() throws Exception {","\t\treturn getInt() != 0;","\t}","\tint getInt() throws Exception {","\t\tif(isNull()) return 0;","\t\tswitch(interval){","\t\t\tcase SQLTokenizer.SQL_TSI_FRAC_SECOND:","\t\t\t\treturn (int)(param2.getLong() - param1.getLong());","\t\t\tcase SQLTokenizer.SQL_TSI_SECOND:","\t\t\t\treturn (int)(param2.getLong() /1000 - param1.getLong() /1000);","\t\t\tcase SQLTokenizer.SQL_TSI_MINUTE:","\t\t\t\treturn (int)(param2.getLong() /60000 - param1.getLong() /60000);","\t\t\tcase SQLTokenizer.SQL_TSI_HOUR:","\t\t\t\treturn (int)(param2.getLong() /3600000 - param1.getLong() /3600000);","\t\t\tcase SQLTokenizer.SQL_TSI_DAY:","\t\t\t\treturn (int)(param2.getLong() /86400000 - param1.getLong() /86400000);","\t\t\tcase SQLTokenizer.SQL_TSI_WEEK:{","\t\t\t\tlong day2 = param2.getLong() /86400000;","\t\t\t\tlong day1 = param1.getLong() /86400000;","\t\t\t\treturn (int)((day2 + 3) / 7 - (day1 + 3) / 7);","\t\t\t}case SQLTokenizer.SQL_TSI_MONTH:{","\t\t\t\tDateTime.Details details2 = new DateTime.Details(param2.getLong());","\t\t\t\tDateTime.Details details1 = new DateTime.Details(param1.getLong());","\t\t\t\treturn (details2.year * 12 + details2.month) - (details1.year * 12 + details1.month);","\t\t\t}","\t\t\tcase SQLTokenizer.SQL_TSI_QUARTER:{","\t\t\t\tDateTime.Details details2 = new DateTime.Details(param2.getLong());","\t\t\t\tDateTime.Details details1 = new DateTime.Details(param1.getLong());","\t\t\t\treturn (details2.year * 4 + details2.month / 3) - (details1.year * 4 + details1.month / 3);","\t\t\t}","\t\t\tcase SQLTokenizer.SQL_TSI_YEAR:{","\t\t\t\tDateTime.Details details2 = new DateTime.Details(param2.getLong());","\t\t\t\tDateTime.Details details1 = new DateTime.Details(param1.getLong());","\t\t\t\treturn details2.year - details1.year;","\t\t\t}","\t\t\tdefault: throw new Error();","\t\t}","\t}","\tlong getLong() throws Exception {","\t\treturn getInt();","\t}","\tfloat getFloat() throws Exception {","\t\treturn getInt();","\t}","\tdouble getDouble() throws Exception {","\t\treturn getInt();","\t}","\tlong getMoney() throws Exception {","\t\treturn getInt() * 10000L;","\t}","\tMutableNumeric getNumeric() throws Exception {","\t\tif(isNull()) return null;","\t\treturn new MutableNumeric(getInt());","\t}","\tObject getObject() throws Exception {","\t\tif(isNull()) return null;","\t\treturn Utils.getInteger(getInt());","\t}","\tString getString() throws Exception {","\t\tif(isNull()) return null;","\t\treturn String.valueOf(getInt());","\t}","\tint getDataType() {","\t\treturn SQLTokenizer.INT;","\t}","}"],|project://smallsql/src/smallsql/database/Command.java|:["package smallsql.database;","import java.sql.*;","import smallsql.database.language.Language;","abstract class Command {","    int type;","    String catalog;","    String name;","    SSResultSet rs;","    int updateCount = -1;","    final Expressions columnExpressions; ","    Expressions params  = new Expressions(); ","    final Logger log;","    Command(Logger log){","    \tthis.log = log;","\t\tthis.columnExpressions = new Expressions();","    }","\tCommand(Logger log, Expressions columnExpressions){","\t\tthis.log = log;","\t\tthis.columnExpressions = columnExpressions;","\t}","    void addColumnExpression( Expression column ) throws SQLException{","        columnExpressions.add( column );","    }","    void addParameter( ExpressionValue param ){","        params.add( param );","    }","    void verifyParams() throws SQLException{","        for(int p=0; p\<params.size(); p++){","            if(((ExpressionValue)params.get(p)).isEmpty())","            \tthrow SmallSQLException.create(Language.PARAM_EMPTY, new Integer(p+1));","        }","    }","    void clearParams(){","        for(int p=0; p\<params.size(); p++){","            ((ExpressionValue)params.get(p)).clear();","        }","    }","\tprivate ExpressionValue getParam(int idx) throws SQLException{","\t\tif(idx \< 1 || idx \> params.size())","\t\t\tthrow SmallSQLException.create(Language.PARAM_IDX_OUT_RANGE, new Object[] { new Integer(idx), new Integer(params.size())});","\t\treturn ((ExpressionValue)params.get(idx-1));","\t}","    void setParamValue(int idx, Object value, int dataType) throws SQLException{","\t\tgetParam(idx).set( value, dataType );","\t\tif(log.isLogging()){","\t\t\tlog.println(\"param\"+idx+\'=\'+value+\"; type=\"+dataType);","\t\t}","    }","\tvoid setParamValue(int idx, Object value, int dataType, int length) throws SQLException{","\t\tgetParam(idx).set( value, dataType, length );","\t\tif(log.isLogging()){","\t\t\tlog.println(\"param\"+idx+\'=\'+value+\"; type=\"+dataType+\"; length=\"+length);","\t\t}","\t}","    final void execute(SSConnection con, SSStatement st) throws SQLException{","    \tint savepoint = con.getSavepoint();","        try{","            executeImpl( con, st );","        }catch(Throwable e){","            con.rollback(savepoint);","            throw SmallSQLException.createFromException(e);","        }finally{","            if(con.getAutoCommit()) con.commit();","        }","    }","    abstract void executeImpl(SSConnection con, SSStatement st) throws Exception;","    SSResultSet getQueryResult() throws SQLException{","        if(rs == null)","        \tthrow SmallSQLException.create(Language.RSET_NOT_PRODUCED);","        return rs;","    }","    SSResultSet getResultSet(){","        return rs;","    }","    int getUpdateCount(){","        return updateCount;","    }","    boolean getMoreResults(){","    \trs = null;","    \tupdateCount = -1;","    \treturn false;","    }","\tvoid setMaxRows(int max){}","    int getMaxRows(){return -1;}","}"],|project://smallsql/src/smallsql/database/TransactionStep.java|:["package smallsql.database;","import java.nio.channels.FileChannel;","import java.sql.SQLException;","abstract class TransactionStep{","    FileChannel raFile;","    TransactionStep(FileChannel raFile){","        this.raFile = raFile;","    }","    abstract long commit() throws SQLException;","    abstract void rollback() throws SQLException;","    void freeLock(){}","}"],|project://smallsql/src/smallsql/database/SSConnection.java|:["package smallsql.database;","import java.nio.channels.FileChannel;","import java.sql.Array;","import java.sql.Blob;","import java.sql.CallableStatement;","import java.sql.Clob;","import java.sql.Connection;","import java.sql.DatabaseMetaData;","import java.sql.NClob;","import java.sql.PreparedStatement;","import java.sql.SQLClientInfoException;","import java.sql.SQLException;","import java.sql.SQLWarning;","import java.sql.SQLXML;","import java.sql.Savepoint;","import java.sql.Statement;","import java.sql.Struct;","import java.util.ArrayList;","import java.util.List;","import java.util.Map;","import java.util.Properties;","import smallsql.database.language.Language;","public class SSConnection implements Connection {","    private final boolean readonly;","    private Database database;","    private boolean autoCommit = true;","    int isolationLevel = TRANSACTION_READ_COMMITTED; ","    private List commitPages = new ArrayList();","    private long transactionTime;","    private final SSDatabaseMetaData metadata;","    private int holdability;","    final Logger log;","    SSConnection( Properties props ) throws SQLException{","    \tSmallSQLException.setLanguage(props.get(\"locale\"));","        log = new Logger();","        String name = props.getProperty(\"dbpath\");","        readonly = \"true\".equals(props.getProperty(\"readonly\"));","        boolean create = \"true\".equals(props.getProperty(\"create\"));","        database = Database.getDatabase(name, this, create);","\t\tmetadata = new SSDatabaseMetaData(this);","    }","    SSConnection( SSConnection con ){","        readonly = con.readonly;","        database = con.database;","        metadata = con.metadata;","        log      = con.log;","    }","    Database getDatabase(boolean returnNull) throws SQLException{","        testClosedConnection();","    \tif(!returnNull && database == null) throw SmallSQLException.create(Language.DB_NOTCONNECTED);","    \treturn database;","    }","    Object getMonitor(){","        return this;","    }","    public Statement createStatement() throws SQLException {","        return new SSStatement(this);","    }","    public PreparedStatement prepareStatement(String sql) throws SQLException {","        return new SSPreparedStatement( this, sql);","    }","    public CallableStatement prepareCall(String sql) throws SQLException {","        return new SSCallableStatement( this, sql);","    }","    public String nativeSQL(String sql){","        return sql;","    }","    public void setAutoCommit(boolean autoCommit) throws SQLException {","\t\tif(log.isLogging()) log.println(\"AutoCommit:\"+autoCommit);","    \tif(this.autoCommit != autoCommit){","    \t\tcommit();","    \t\tthis.autoCommit = autoCommit;","    \t}","    }","    public boolean getAutoCommit(){","        return autoCommit;","    }","\tvoid add(TransactionStep storePage) throws SQLException{","\t\ttestClosedConnection();","\t\tsynchronized(getMonitor()){","            commitPages.add(storePage);","        }","\t}","    public void commit() throws SQLException {","        log.println(\"Commit\");","        testClosedConnection();","        synchronized(getMonitor()){","    \ttry{","\t            int count = commitPages.size();","\t            for(int i=0; i\<count; i++){","\t                TransactionStep page = (TransactionStep)commitPages.get(i);","\t                page.commit();","\t            }","\t\t\t\tfor(int i=0; i\<count; i++){","\t\t\t\t    TransactionStep page = (TransactionStep)commitPages.get(i);","\t\t\t\t\tpage.freeLock();","\t\t\t\t}","\t            commitPages.clear();","\t            transactionTime = System.currentTimeMillis();","    \t}catch(Throwable e){","    \t\trollback();","    \t\tthrow SmallSQLException.createFromException(e);","    \t}","        }","    }","\tvoid rollbackFile(FileChannel raFile) throws SQLException{","\t\ttestClosedConnection();","\t\tsynchronized(getMonitor()){","            for(int i = commitPages.size() - 1; i \>= 0; i--){","                TransactionStep page = (TransactionStep)commitPages.get(i);","                if(page.raFile == raFile){","                    page.rollback();","                    page.freeLock();","                }","            }","        }","\t}","    void rollback(int savepoint) throws SQLException{","\t\ttestClosedConnection();","\t\tsynchronized(getMonitor()){","            for(int i = commitPages.size() - 1; i \>= savepoint; i--){","                TransactionStep page = (TransactionStep)commitPages.remove(i);","                page.rollback();","                page.freeLock();","            }","        }","    }","    public void rollback() throws SQLException {","\t\tlog.println(\"Rollback\");","\t\ttestClosedConnection();","        synchronized(getMonitor()){","            int count = commitPages.size();","            for(int i=0; i\<count; i++){","                TransactionStep page = (TransactionStep)commitPages.get(i);","                page.rollback();","                page.freeLock();","            }","            commitPages.clear();","\t\t\ttransactionTime = System.currentTimeMillis();","        }","    }","    public void close() throws SQLException {","        rollback();","\t\tdatabase = null;","        commitPages = null;","\t\tDatabase.closeConnection(this);","    }","\tfinal void testClosedConnection() throws SQLException{","\t\tif(isClosed()) throw SmallSQLException.create(Language.CONNECTION_CLOSED);","\t}","    public boolean isClosed(){","        return (commitPages == null);","    }","    public DatabaseMetaData getMetaData(){","        return metadata;","    }","    public void setReadOnly(boolean readOnly){","    }","    public boolean isReadOnly(){","        return readonly;","    }","    public void setCatalog(String catalog) throws SQLException {","        testClosedConnection();","        database = Database.getDatabase(catalog, this, false);","    }","    public String getCatalog(){","    \tif(database == null)","    \t\treturn \"\";","        return database.getName();","    }","    public void setTransactionIsolation(int level) throws SQLException {","    \tif(!metadata.supportsTransactionIsolationLevel(level)) {","    \t\tthrow SmallSQLException.create(Language.ISOLATION_UNKNOWN, String.valueOf(level));","    \t}","        isolationLevel = level;        ","    }","    public int getTransactionIsolation(){","        return isolationLevel;","    }","    public SQLWarning getWarnings(){","        return null;","    }","    public void clearWarnings(){","    }","    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {","        return new SSStatement( this, resultSetType, resultSetConcurrency);","    }","    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {","        return new SSPreparedStatement( this, sql, resultSetType, resultSetConcurrency);","    }","    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {","        return new SSCallableStatement( this, sql, resultSetType, resultSetConcurrency);","    }","    public Map getTypeMap(){","        return null;","    }","    public void setHoldability(int holdability){","        this.holdability = holdability;","    }","    public int getHoldability(){","        return holdability;","    }","\tint getSavepoint() throws SQLException{","\t\ttestClosedConnection();","\t\treturn commitPages.size(); ","\t}","    public Savepoint setSavepoint() throws SQLException {","        return new SSSavepoint(getSavepoint(), null, transactionTime);","    }","    public Savepoint setSavepoint(String name) throws SQLException {","\t\treturn new SSSavepoint(getSavepoint(), name, transactionTime);","    }","    public void rollback(Savepoint savepoint) throws SQLException {","    \tif(savepoint instanceof SSSavepoint){","    \t\tif(((SSSavepoint)savepoint).transactionTime != transactionTime){","\t\t\t\tthrow SmallSQLException.create(Language.SAVEPT_INVALID_TRANS);","    \t\t}","    \t\trollback( savepoint.getSavepointId() );","    \t\treturn;","    \t}","        throw SmallSQLException.create(Language.SAVEPT_INVALID_DRIVER, savepoint);","    }","    public void releaseSavepoint(Savepoint savepoint) throws SQLException {","\t\tif(savepoint instanceof SSSavepoint){","\t\t\t((SSSavepoint)savepoint).transactionTime = 0;","\t\t\treturn;","\t\t}","\t\tthrow SmallSQLException.create(Language.SAVEPT_INVALID_DRIVER, new Object[] { savepoint });","    }","    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {","\t\treturn new SSStatement( this, resultSetType, resultSetConcurrency);","    }","    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {","\t\treturn new SSPreparedStatement( this, sql);","    }","    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {","\t\treturn new SSCallableStatement( this, sql, resultSetType, resultSetConcurrency);","    }","    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {","        SSPreparedStatement pr = new SSPreparedStatement( this, sql);","        pr.setNeedGeneratedKeys(autoGeneratedKeys);","        return pr;","    }","    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {","        SSPreparedStatement pr = new SSPreparedStatement( this, sql);","        pr.setNeedGeneratedKeys(columnIndexes);","        return pr;","    }","    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {","        SSPreparedStatement pr = new SSPreparedStatement( this, sql);","        pr.setNeedGeneratedKeys(columnNames);","        return pr;","    }","\t@Override","\tpublic \<T\> T unwrap(Class\<T\> iface) throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic boolean isWrapperFor(Class\<?\> iface) throws SQLException {","\t\treturn false;","\t}","\t@Override","\tpublic void setTypeMap(Map\<String, Class\<?\>\> map) throws SQLException {","\t}","\t@Override","\tpublic Clob createClob() throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic Blob createBlob() throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic NClob createNClob() throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic SQLXML createSQLXML() throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic boolean isValid(int timeout) throws SQLException {","\t\treturn false;","\t}","\t@Override","\tpublic void setClientInfo(String name, String value)","\t\t\tthrows SQLClientInfoException {","\t}","\t@Override","\tpublic void setClientInfo(Properties properties)","\t\t\tthrows SQLClientInfoException {","\t}","\t@Override","\tpublic String getClientInfo(String name) throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic Properties getClientInfo() throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic Array createArrayOf(String typeName, Object[] elements)","\t\t\tthrows SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic Struct createStruct(String typeName, Object[] attributes)","\t\t\tthrows SQLException {","\t\treturn null;","\t}","}"],|project://smallsql/src/smallsql/database/StorePageLink.java|:["package smallsql.database;","class StorePageLink {","\tlong filePos;","\tTableStorePage page;","\tStoreImpl getStore(Table table, SSConnection con, int lock) throws Exception{","\t\tTableStorePage page = this.page;","\t\tif(page == null)","\t\t\treturn table.getStore( con, filePos, lock );","\t\twhile(page.nextLock != null) page = page.nextLock;","\t\treturn table.getStore( page, lock);","\t}","}"],|project://smallsql/src/smallsql/database/MemoryResult.java|:["package smallsql.database;","import java.sql.*;","import java.util.ArrayList;","import java.util.List;","import smallsql.database.language.Language;","class MemoryResult extends DataSource {","\tExpressionValue[] currentRow;","    private final Columns columns = new Columns();","\tprivate int rowIdx = -1;","\tprivate List rowList = new ArrayList(); ","\tMemoryResult(){}","\tMemoryResult(Object[][] data, int colCount) throws SQLException{","        for(int c=0; c\<colCount; c++){","            Column column = new Column();","            column.setDataType(SQLTokenizer.NULL);","            columns.add( column );","        }","\t\tfor(int r=0; r\<data.length; r++){","\t\t\tObject[] row = data[r];","            ExpressionValue[] rowValues = new ExpressionValue[row.length];","\t\t\taddRow(rowValues);","\t\t\tfor(int c=0; c\<colCount; c++){","                ExpressionValue expr = rowValues[c] = new ExpressionValue();","\t\t\t\texpr.set( row[c], -1);","                Column column = columns.get(c);","                if(expr.getDataType() != SQLTokenizer.NULL){","                    column.setDataType(expr.getDataType());","                }","                if(expr.getPrecision() \> column.getPrecision()){","                    column.setPrecision(expr.getPrecision());","                }","\t\t\t}","\t\t}","\t}","\tfinal void addRow(ExpressionValue[] row){","\t\trowList.add(row);","\t}","    final Column getColumn(int colIdx){","        return columns.get(colIdx);","    }","    final void addColumn(Column column){","        columns.add(column);","    }","\tfinal boolean isScrollable(){","\t\treturn true;","\t}","\tfinal void beforeFirst(){","\t\trowIdx = -1;","\t\tcurrentRow = null;","\t}","\tfinal boolean isBeforeFirst(){","\t\treturn rowIdx \< 0 || rowList.size() == 0;","\t}","\tfinal boolean isFirst(){","\t\treturn rowIdx == 0 && currentRow != null;","\t}","\tfinal boolean first(){","\t\trowIdx = 0;","\t\treturn move();","\t}","\tfinal boolean previous(){","\t\tif(rowIdx-- \< 0) rowIdx = -1;","\t\treturn move();","\t}","\tfinal boolean next(){","\t\trowIdx++;","\t\treturn move();","\t}","\tfinal boolean last(){","\t\trowIdx = rowList.size() - 1;","\t\treturn move();","\t}","\tfinal boolean isLast(){","\t\treturn rowIdx == rowList.size() - 1 && currentRow != null;","\t}","\tfinal boolean isAfterLast(){","\t\treturn rowIdx \>= rowList.size() || rowList.size() == 0;","\t}","\tfinal void afterLast(){","\t\trowIdx = rowList.size();","\t\tcurrentRow = null;","\t}","\tfinal boolean absolute(int row) throws SQLException{","\t\tif(row == 0) throw SmallSQLException.create(Language.ROW_0_ABSOLUTE);","\t\trowIdx = (row \> 0) ?","\t\t\tMath.min( row - 1, rowList.size() ):","\t\t\tMath.max( row +rowList.size(), -1 );","\t\treturn move();","\t}","\tfinal boolean relative(int rows){","\t\tif(rows == 0) return (currentRow != null);","\t\trowIdx = Math.min( Math.max( rowIdx + rows, -1), rowList.size());","\t\treturn move();","\t}","\tfinal int getRow(){","\t\treturn currentRow == null ? 0 : rowIdx+1;","\t}","\tfinal long getRowPosition(){","\t\treturn rowIdx;","\t}","\tfinal void setRowPosition(long rowPosition) throws Exception{","\t\trowIdx = (int)rowPosition;","\t\tmove();","\t}","\tfinal boolean rowInserted(){","\t\treturn false;","\t}","\tfinal boolean rowDeleted(){","\t\treturn false;","\t}","\tvoid nullRow(){","\t\tthrow new Error();","\t}","\tvoid noRow(){","\t\tcurrentRow = null;","\t}","\tfinal private boolean move(){","\t\tif(rowIdx \< rowList.size() && rowIdx \>= 0){","\t\t\tcurrentRow = (ExpressionValue[])rowList.get(rowIdx);","\t\t\treturn true;","\t\t}","\t\tcurrentRow = null;","\t\treturn false;","\t}","\tboolean isNull( int colIdx ) throws Exception{","\t\treturn get( colIdx ).isNull();","\t}","\tboolean getBoolean( int colIdx ) throws Exception{","\t\treturn get( colIdx ).getBoolean();","\t}","\tint getInt( int colIdx ) throws Exception{","\t\treturn get( colIdx ).getInt();","\t}","\tlong getLong( int colIdx ) throws Exception{","\t\treturn get( colIdx ).getLong();","\t}","\tfloat getFloat( int colIdx ) throws Exception{","\t\treturn get( colIdx ).getFloat();","\t}","\tdouble getDouble( int colIdx ) throws Exception{","\t\treturn get( colIdx ).getDouble();","\t}","\tlong getMoney( int colIdx ) throws Exception{","\t\treturn get( colIdx ).getMoney();","\t}","\tMutableNumeric getNumeric( int colIdx ) throws Exception{","\t\treturn get( colIdx ).getNumeric();","\t}","\tObject getObject( int colIdx ) throws Exception{","\t\treturn get( colIdx ).getObject();","\t}","\tString getString( int colIdx ) throws Exception{","\t\treturn get( colIdx ).getString();","\t}","\tbyte[] getBytes( int colIdx ) throws Exception{","\t\treturn get( colIdx ).getBytes();","\t}","\tint getDataType( int colIdx ){","\t\treturn columns.get( colIdx ).getDataType();","\t}","\tfinal TableView getTableView(){","\t\treturn null;","\t}","\tfinal void deleteRow() throws Exception{","\t\tthrow SmallSQLException.create(Language.RSET_READONLY);","\t}","\tfinal void updateRow(Expression[] updateValues) throws Exception{","\t\tthrow SmallSQLException.create(Language.RSET_READONLY);","\t}","\tfinal void insertRow(Expression[] updateValues) throws Exception{","\t\tthrow SmallSQLException.create(Language.RSET_READONLY);","\t}","\tprivate Expression get(int colIdx) throws Exception{","\t\tif(currentRow == null) throw SmallSQLException.create(Language.ROW_NOCURRENT);","\t\treturn currentRow[ colIdx ];","\t}","\tint getRowCount(){","\t\treturn rowList.size();","\t}","\tvoid execute() throws Exception{","        rowList.clear();","\t}","}"],|project://smallsql/src/smallsql/junit/TestOrderBy.java|:["package smallsql.junit;","import java.sql.*;","import java.util.ArrayList;","public class TestOrderBy extends BasicTestCase {","\tstatic private boolean init;","\tprivate static final String table1 = \"table_OrderBy1\";","\tprivate static final String table2 = \"table_OrderBy2\";","\tprivate static final String table3 = \"table_OrderBy3\";","\tstatic private int valueCount;","\tpublic void init(){","\t\tif(init) return;","\t\ttry{","\t\t\tConnection con = AllTests.getConnection();","\t\t\tdropTable( con, table1 );","\t\t\tdropTable( con, table2 );","\t\t\tdropTable( con, table3 );","\t\t\tStatement st = con.createStatement();","\t\t\tst.execute(\"create table \" + table1 + \"(v varchar(30), c char(30), nv nvarchar(30),i int, d float, r real, bi bigint, b boolean)\");","\t\t\tst.execute(\"create table \" + table2 + \"(c2 char(30))\");","\t\t\tst.execute(\"create table \" + table3 + \"(vc varchar(30), vb varbinary(30))\");","\t\t\tst.close();","\t\t\tPreparedStatement pr = con.prepareStatement(\"INSERT into \" + table1 + \"(v,c,nv,i,d,r,bi,b) Values(?,?,?,?,?,?,?,?)\");","\t\t\tPreparedStatement pr2= con.prepareStatement(\"INSERT into \" + table2 + \"(c2) Values(?)\");","\t\t\tfor(int i=150; i\>-10; i--){","\t\t\t\tpr.setString( 1, String.valueOf(i));","\t\t\t\tpr.setString( 2, String.valueOf(i));","\t\t\t\tpr.setString( 3, String.valueOf( (char)i ));","\t\t\t\tpr.setInt   ( 4, i );","\t\t\t\tpr.setDouble( 5, i );","\t\t\t\tpr.setFloat ( 6, i );","\t\t\t\tpr.setInt   ( 7, i );","\t\t\t\tpr.setBoolean( 8, i == 0 );","\t\t\t\tpr.execute();","\t\t\t\tpr2.setString( 1, String.valueOf(i));","\t\t\t\tpr2.execute();","\t\t\t\tvalueCount++;","\t\t\t}","\t\t\tpr.setObject( 1, null, Types.VARCHAR);","\t\t\tpr.setObject( 2, null, Types.VARCHAR);","\t\t\tpr.setObject( 3, null, Types.VARCHAR);","\t\t\tpr.setObject( 4, null, Types.VARCHAR);","\t\t\tpr.setObject( 5, null, Types.VARCHAR);","\t\t\tpr.setObject( 6, null, Types.VARCHAR);","\t\t\tpr.setObject( 7, null, Types.VARCHAR);","\t\t\tpr.setObject( 8, null, Types.VARCHAR);","\t\t\tpr.execute();","\t\t\tpr2.setObject( 1, null, Types.VARCHAR);","\t\t\tpr2.execute();","\t\t\tpr2.setString( 1, \"\");","\t\t\tpr2.execute();","\t\t\tpr.close();","\t\t\tpr = con.prepareStatement(\"INSERT into \" + table3 + \"(vc, vb) Values(?,?)\");","\t\t\tpr.setString( 1, table3);","\t\t\tpr.setBytes( 2, table3.getBytes());","\t\t\tpr.execute();","\t\t\tpr.setString( 1, \"\");","\t\t\tpr.setBytes( 2, new byte[0]);","\t\t\tpr.execute();","\t\t\tpr.setString( 1, null);","\t\t\tpr.setBytes( 2, null);","\t\t\tpr.execute();","\t\t\tinit = true;","\t\t}catch(Throwable e){","\t\t\te.printStackTrace();","\t\t}","\t}","\tpublic void testOrderBy_char() throws Exception{","\t\tinit();","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\tResultSet rs;","\t\tString oldValue;","\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by c\");","\t\tassertTrue( rs.next() );","\t\toldValue = rs.getString(\"c\");","\t\tassertNull(oldValue);","\t\tassertTrue( rs.next() );","\t\toldValue = rs.getString(\"c\");","\t\tint count = 1;","\t\twhile(rs.next()){","\t\t\tString newValue = rs.getString(\"c\");","\t\t\tassertTrue( oldValue + \"\<\" + newValue, oldValue.compareTo( newValue ) \< 0 );","\t\t\toldValue = newValue;","\t\t\tcount++;","\t\t}","\t\trs.close();","\t\tassertEquals( valueCount, count );","\t}","\tpublic void testOrderBy_varchar() throws Exception{","\t\tinit();","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\tResultSet rs;","\t\tString oldValue;","\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v\");","\t\tassertTrue( rs.next() );","\t\toldValue = rs.getString(\"v\");","\t\tassertNull(oldValue);","\t\tassertTrue( rs.next() );","\t\toldValue = rs.getString(\"v\");","\t\tint count = 1;","\t\twhile(rs.next()){","\t\t\tString newValue = rs.getString(\"v\");","\t\t\tassertTrue( oldValue + \"\<\" + newValue, oldValue.compareTo( newValue ) \< 0 );","\t\t\toldValue = newValue;","\t\t\tcount++;","\t\t}","\t\tassertEquals( valueCount, count );","\t}","\tpublic void testOrderBy_varchar_asc() throws Exception{","\t\tinit();","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\tResultSet rs;","\t\tString oldValue;","\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v ASC\");","\t\tassertTrue( rs.next() );","\t\toldValue = rs.getString(\"v\");","\t\tassertNull(oldValue);","\t\tassertTrue( rs.next() );","\t\toldValue = rs.getString(\"v\");","\t\tint count = 1;","\t\twhile(rs.next()){","\t\t\tString newValue = rs.getString(\"v\");","\t\t\tassertTrue( oldValue.compareTo( newValue ) \< 0 );","\t\t\toldValue = newValue;","\t\t\tcount++;","\t\t}","\t\trs.close();","\t\tassertEquals( valueCount, count );","\t}","\tpublic void testOrderBy_varchar_desc() throws Exception{","\t\tinit();","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\tResultSet rs;","\t\tString oldValue;","\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc\");","\t\tassertTrue( rs.next() );","\t\toldValue = rs.getString(\"v\");","\t\tint count = 1;","\t\twhile(oldValue != null && rs.next()){","\t\t\tString newValue = rs.getString(\"v\");","\t\t\tif(newValue != null){","\t\t\t\tassertTrue( oldValue.compareTo( newValue ) \> 0 );","\t\t\t\tcount++;","\t\t\t}","\t\t\toldValue = newValue;","\t\t}","\t\tassertNull(oldValue);","\t\tassertFalse( rs.next() );","\t\tassertEquals( valueCount, count );","\t}","\tpublic void testOrderBy_varchar_DescAsc() throws Exception{","\t\tinit();","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\tResultSet rs;","\t\tString oldValue;","\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc, i asc\");","\t\tassertTrue( rs.next() );","\t\toldValue = rs.getString(\"v\");","\t\tint count = 1;","\t\twhile(oldValue != null && rs.next()){","\t\t\tString newValue = rs.getString(\"v\");","\t\t\tif(newValue != null){","\t\t\t\tassertTrue( oldValue.compareTo( newValue ) \> 0 );","\t\t\t\tcount++;","\t\t\t}","\t\t\toldValue = newValue;","\t\t}","\t\tassertNull(oldValue);","\t\tassertFalse( rs.next() );","\t\tassertEquals( valueCount, count );","\t}","\tpublic void testOrderBy_varchar_GroupBy() throws Exception{","\t\tinit();","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\tResultSet rs;","\t\tString oldValue;","\t\trs = st.executeQuery(\"SELECT first(v) cc FROM \" + table1 + \" Group By i ORDER  by first(V)\");","\t\tassertTrue( rs.next() );","\t\toldValue = rs.getString(\"cc\");","\t\tassertNull(oldValue);","\t\tassertTrue( rs.next() );","\t\toldValue = rs.getString(\"cc\");","\t\tint count = 1;","\t\twhile(rs.next()){","\t\t\tassertTrue( oldValue.compareTo( rs.getString(\"cc\") ) \< 0 );","\t\t\toldValue = rs.getString(\"cc\");","\t\t\tcount++;","\t\t}","\t\tassertEquals( valueCount, count );","\t}","\tpublic void testOrderBy_varchar_Join() throws Exception{","\t\tinit();","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\tResultSet rs;","\t\tString oldValue;","\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" t1 Inner join \"+table2+\" t2 on t1.c=t2.c2  ORDER  by v\");","\t\tassertTrue( rs.next() );","\t\toldValue = rs.getString(\"v\");","\t\tint count = 1;","\t\twhile(rs.next()){","\t\t\tassertTrue( oldValue.compareTo( rs.getString(\"v\") ) \< 0 );","\t\t\toldValue = rs.getString(\"v\");","\t\t\tcount++;","\t\t}","\t\tassertEquals( valueCount, count );","\t}","\tpublic void testOrderBy_nvarchar() throws Exception{","\t\tinit();","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\tResultSet rs;","\t\tString oldValue;","\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by nv\");","\t\tassertTrue( rs.next() );","\t\toldValue = rs.getString(\"nv\");","\t\tassertNull(oldValue);","\t\tassertTrue( rs.next() );","\t\toldValue = rs.getString(\"nv\");","\t\tint count = 1;","\t\twhile(rs.next()){","\t\t\tassertTrue( String.CASE_INSENSITIVE_ORDER.compare( oldValue, rs.getString(\"nv\") ) \<= 0 );","\t\t\toldValue = rs.getString(\"nv\");","\t\t\tcount++;","\t\t}","\t\tassertEquals( valueCount, count );","\t}","\tpublic void testOrderBy_int() throws Exception{","\t\tinit();","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\tResultSet rs;","\t\tInteger oldValue;","\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i\");","\t\tassertTrue( rs.next() );","\t\toldValue = (Integer)rs.getObject(\"i\");","\t\tassertNull(oldValue);","\t\tassertTrue( rs.next() );","\t\toldValue = (Integer)rs.getObject(\"i\");","\t\tint count = 1;","\t\twhile(rs.next()){","\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) \< 0 );","\t\t\toldValue = (Integer)rs.getObject(\"i\");","\t\t\tcount++;","\t\t}","\t\tassertEquals( valueCount, count );","\t}","\tpublic void test_function() throws Exception{","\t\tinit();","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\tResultSet rs;","\t\tint oldValue;","\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by abs(i)\");","\t\tassertTrue( rs.next() );","\t\tassertNull(rs.getObject(\"i\"));","\t\tassertTrue( rs.next() );","\t\toldValue = Math.abs( rs.getInt(\"i\") );","\t\tint count = 1;","\t\twhile(rs.next()){","\t\t\tint newValue = Math.abs( rs.getInt(\"i\") );","\t\t\tassertTrue( oldValue \<= newValue );","\t\t\toldValue = newValue;","\t\t\tcount++;","\t\t}","\t\tassertEquals( valueCount, count );","\t}","\tpublic void test_functionAscDesc() throws Exception{","\t\tinit();","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\tResultSet rs;","\t\tint oldValue;","\t\tint oldValue2;","\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by abs(i) Asc, i desc\");","\t\tassertTrue( rs.next() );","\t\tassertNull(rs.getObject(\"i\"));","\t\tassertTrue( rs.next() );","\t\toldValue = Math.abs( rs.getInt(\"i\") );","\t\toldValue2 = rs.getInt(\"i\");","\t\tint count = 1;","\t\twhile(rs.next()){","\t\t\tint newValue2 = rs.getInt(\"i\");","\t\t\tint newValue = Math.abs( newValue2 );","\t\t\tassertTrue( oldValue \<= newValue );","\t\t\tif(oldValue == newValue){","\t\t\t\tassertTrue( oldValue2 \> newValue2 );","\t\t\t}","\t\t\toldValue = newValue;","\t\t\toldValue2 = newValue2;","\t\t\tcount++;","\t\t}","\t\tassertEquals( valueCount, count );","\t}","\tpublic void testOrderBy_int_asc() throws Exception{","\t\tinit();","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\tResultSet rs;","\t\tInteger oldValue;","\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i Asc\");","\t\tassertTrue( rs.next() );","\t\toldValue = (Integer)rs.getObject(\"i\");","\t\tassertNull(oldValue);","\t\tassertTrue( rs.next() );","\t\toldValue = (Integer)rs.getObject(\"i\");","\t\tint count = 1;","\t\twhile(rs.next()){","\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) \< 0 );","\t\t\toldValue = (Integer)rs.getObject(\"i\");","\t\t\tcount++;","\t\t}","\t\tassertEquals( valueCount, count );","\t}","\tpublic void testOrderBy_int_desc() throws Exception{","\t\tinit();","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\tResultSet rs;","\t\tInteger oldValue;","\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i Desc\");","\t\tassertTrue( rs.next() );","\t\toldValue = (Integer)rs.getObject(\"i\");","\t\tint count = 1;","\t\twhile(oldValue != null && rs.next()){","\t\t\tInteger newValue = (Integer)rs.getObject(\"i\");","\t\t\tif(newValue != null){","\t\t\t\tassertTrue( oldValue.compareTo( newValue ) \> 0 );","\t\t\t\tcount++;","\t\t\t}","\t\t\toldValue = newValue;","\t\t}","\t\tassertNull(oldValue);","\t\tassertFalse( rs.next() );","\t\tassertEquals( valueCount, count );","\t}","\tpublic void testOrderBy_double() throws Exception{","\t\tinit();","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\tResultSet rs;","\t\tDouble oldValue;","\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by d\");","\t\tassertTrue( rs.next() );","\t\toldValue = (Double)rs.getObject(\"d\");","\t\tassertNull(oldValue);","\t\tassertTrue( rs.next() );","\t\toldValue = (Double)rs.getObject(\"d\");","\t\tint count = 1;","\t\twhile(rs.next()){","\t\t\tassertTrue( oldValue.compareTo( (Double)rs.getObject(\"d\") ) \< 0 );","\t\t\toldValue = (Double)rs.getObject(\"d\");","\t\t\tcount++;","\t\t}","\t\tassertEquals( valueCount, count );","\t}","\tpublic void testOrderBy_real() throws Exception{","\t\tinit();","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\tResultSet rs;","\t\tFloat oldValue;","\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by r\");","\t\tassertTrue( rs.next() );","\t\toldValue = (Float)rs.getObject(\"r\");","\t\tassertNull(oldValue);","\t\tassertTrue( rs.next() );","\t\toldValue = (Float)rs.getObject(\"r\");","\t\tint count = 1;","\t\twhile(rs.next()){","\t\t\tassertTrue( oldValue.compareTo( (Float)rs.getObject(\"r\") ) \< 0 );","\t\t\toldValue = (Float)rs.getObject(\"r\");","\t\t\tcount++;","\t\t}","\t\tassertEquals( valueCount, count );","\t}","\tpublic void test_bigint() throws Exception{","\t\tinit();","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\tResultSet rs;","\t\tLong oldValue;","\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by bi\");","\t\tassertTrue( rs.next() );","\t\toldValue = (Long)rs.getObject(\"bi\");","\t\tassertNull(oldValue);","\t\tassertTrue( rs.next() );","\t\toldValue = (Long)rs.getObject(\"bi\");","\t\tint count = 1;","\t\twhile(rs.next()){","\t\t\tassertTrue( oldValue.compareTo( (Long)rs.getObject(\"bi\") ) \< 0 );","\t\t\toldValue = (Long)rs.getObject(\"bi\");","\t\t\tcount++;","\t\t}","\t\tassertEquals( valueCount, count );","\t}","\tpublic void test_bigint_withDoublicateValues() throws Exception{","\t\tinit();","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\tResultSet rs;","\t\tLong oldValue;","\t\trs = st.executeQuery(\"SELECT bi/2 bi_2 FROM \" + table1 + \" ORDER  by (bi/2)\");","\t\tassertTrue( rs.next() );","\t\toldValue = (Long)rs.getObject(\"bi_2\");","\t\tassertNull(oldValue);","\t\tassertTrue( rs.next() );","\t\toldValue = (Long)rs.getObject(\"bi_2\");","\t\tint count = 1;","\t\twhile(rs.next()){","\t\t\tLong newValue = (Long)rs.getObject(\"bi_2\");","\t\t\tassertTrue( oldValue + \"\<=\"+newValue, oldValue.compareTo( newValue ) \<= 0 );","\t\t\toldValue = newValue;","\t\t\tcount++;","\t\t}","\t\tassertEquals( valueCount, count );","\t}","\tpublic void test_boolean() throws Exception{","\t\tinit();","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\tResultSet rs;","\t\tboolean oldValue;","\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by b\");","\t\tassertTrue( rs.next() );","\t\toldValue = rs.getBoolean(\"b\");","\t\tassertFalse(oldValue);","\t\tassertTrue(rs.wasNull());","\t\tassertTrue( rs.next() );","\t\toldValue = rs.getBoolean(\"b\");","\t\tassertFalse(oldValue);\t\t","\t\tassertFalse(rs.wasNull());","\t\tint count = 1;","\t\twhile(!oldValue && rs.next()){","\t\t\toldValue = rs.getBoolean(\"b\");","\t\t\tassertFalse(rs.wasNull());","\t\t\tcount++;","\t\t}","\t\twhile(oldValue && rs.next()){","\t\t\toldValue = rs.getBoolean(\"b\");","\t\t\tassertFalse(rs.wasNull());","\t\t\tcount++;","\t\t}","\t\tassertFalse(rs.next());","\t\tassertEquals( valueCount, count );","\t}","\tpublic void testVarcharEmpty() throws Exception{","\t\tinit();","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\tResultSet rs;","\t\trs = st.executeQuery(\"SELECT * FROM \" + table3 + \" ORDER  by vc\");","\t\tassertTrue( rs.next() );\t\t","\t\tassertNull( rs.getObject(\"vc\") );","\t\tassertTrue( rs.next() );","\t\tassertEquals( \"\", rs.getObject(\"vc\") );","\t\tassertTrue( rs.next() );","\t\tassertEquals( table3, rs.getObject(\"vc\") );","\t\tassertFalse( rs.next() );","\t}","\tpublic void testVarbinaryEmpty() throws Exception{","\t\tinit();","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\tResultSet rs;","\t\trs = st.executeQuery(\"SELECT * FROM \" + table3 + \" ORDER  by vb\");","\t\tassertTrue( rs.next() );\t\t","\t\tassertNull( rs.getObject(\"vb\") );","\t\tassertTrue( rs.next() );","\t\tassertEqualsObject( \"\", new byte[0], rs.getObject(\"vb\"), false );","\t\tassertTrue( rs.next() );","\t\tassertEqualsObject( \"\", table3.getBytes(), rs.getObject(\"vb\"), false );","\t\tassertFalse( rs.next() );","\t}","\tpublic void test2Columns() throws Exception{","\t\tinit();","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\tResultSet rs = null;","\t\tString oldValue;","\t\trs = st.executeQuery(\"SELECT * FROM \" + table1+\",\"+table2+\" ORDER  by v, c2\");","\t\tassertTrue( rs.next() );","\t\tassertNull( rs.getObject(\"v\") );","\t\tassertNull( rs.getObject(\"c2\") );","\t\tassertTrue( rs.next() );","\t\toldValue = rs.getString(\"c2\");","\t\tint count = 1;","\t\twhile(rs.next() && rs.getString(\"v\") == null){","\t\t\tString newValue = rs.getString(\"c2\");","\t\t\tassertTrue( oldValue.compareTo( newValue ) \< 0 );","\t\t\toldValue = newValue;","\t\t\tcount++;","\t\t}","\t\tassertEquals( valueCount+1, count );","\t\tboolean isNext = true;","\t\twhile(isNext){","\t\t\tString vValue = rs.getString(\"v\");","\t\t\tassertNull( rs.getObject(\"c2\") );","\t\t\tassertTrue( rs.next() );","\t\t\toldValue = rs.getString(\"c2\");","\t\t\tassertEquals( vValue, rs.getString(\"v\") );","\t\t\tisNext = rs.next();","\t\t\tcount = 1;","\t\t\twhile(isNext && vValue.equals(rs.getString(\"v\"))){","\t\t\t\tString newValue = rs.getString(\"c2\");","\t\t\t\tassertTrue( oldValue.compareTo( newValue ) \< 0 );","\t\t\t\toldValue = newValue;","\t\t\t\tcount++;","\t\t\t\tisNext = rs.next();","\t\t\t}","\t\t\tassertEquals( valueCount+1, count );","\t\t}","\t}","\tpublic void testOrderBy_Scollable() throws Exception{","\t\tinit();","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);","\t\tResultSet rs;","\t\tint count;","\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v\");","\t\trs.next();","\t\trs.next();","\t\trs.previous(); ","\t\trs.last();","\t\tcount = 0;","\t\twhile(rs.previous()) count++;\t\t","\t\tassertEquals( valueCount, count );","\t\trs.beforeFirst();","\t\tcount = -1;","\t\twhile(rs.next()) count++;\t\t","\t\tassertEquals( valueCount, count );","\t\trs.beforeFirst();","\t\tcount = -1;","\t\twhile(rs.next()) count++;\t\t","\t\tassertEquals( valueCount, count );","\t}","\tpublic void testOrderBy_ScollableDesc() throws Exception{","\t\tinit();","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);","\t\tResultSet rs;","\t\tint count;","\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i desc, d\");","\t\trs.next();","\t\trs.next();","\t\trs.previous(); ","\t\trs.last();","\t\tcount = 0;","\t\twhile(rs.previous()) count++;\t\t","\t\tassertEquals( valueCount, count );","\t\trs.beforeFirst();","\t\tcount = -1;","\t\twhile(rs.next()) count++;\t\t","\t\tassertEquals( valueCount, count );","\t\trs.beforeFirst();","\t\tcount = -1;","\t\twhile(rs.next()) count++;\t\t","\t\tassertEquals( valueCount, count );","\t}","\tpublic void testOrderBy_Scollable2() throws Exception{","\t\tinit();","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);","\t\tResultSet rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v\");","\t\tint colCount = rs.getMetaData().getColumnCount();","\t\tArrayList result = new ArrayList();","\t\twhile(rs.next()){","\t\t\tObject[] row = new Object[colCount];","\t\t\tfor(int i=0; i\<colCount; i++){","\t\t\t\trow[i] = rs.getObject(i+1);","\t\t\t}","\t\t\tresult.add(row);","\t\t}","\t\tint rowCount = result.size();","\t\twhile(rs.previous()){","\t\t\tObject[] row = (Object[])result.get(--rowCount);","\t\t\tfor(int i=0; i\<colCount; i++){","\t\t\t\tassertEquals( \"Difference in row:\"+rowCount, row[i], rs.getObject(i+1));","\t\t\t}","\t\t}","\t\tassertEquals( \"RowCount different between next and previous:\"+rowCount, 0, rowCount);","\t}","\tpublic void testUnion() throws Exception{","\t\tinit();","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\tResultSet rs;","\t\tString oldValue;","\t\trs = st.executeQuery(\"SELECT v, 5 as Const FROM \" + table1 + \" Union All Select vc, 6 From \" + table3 + \" ORDER by v\");","\t\tassertRSMetaData(rs, new String[]{\"v\", \"Const\"}, new int[]{Types.VARCHAR, Types.INTEGER});","\t\tassertTrue( rs.next() );\t\t","\t\toldValue = rs.getString(\"v\");","\t\tassertNull(oldValue);","\t\tassertTrue( rs.next() );\t\t","\t\toldValue = rs.getString(\"v\");","\t\tassertNull(oldValue);","\t\tassertTrue( rs.next() );","\t\toldValue = rs.getString(\"v\");","\t\tint count = 3;","\t\twhile(rs.next()){","\t\t\tString newValue = rs.getString(\"v\");","\t\t\tassertTrue( oldValue.compareTo( newValue ) \< 0 );","\t\t\toldValue = newValue;","\t\t\tcount++;","\t\t}","\t\tassertEquals( valueCount+4, count );","\t}","}"],|project://smallsql/src/smallsql/junit/TestExceptionMethods.java|:["package smallsql.junit;","import java.io.File;","import java.sql.*;","public class TestExceptionMethods extends BasicTestCase{","    public void testForwardOnly() throws Exception{","        Connection con = AllTests.getConnection();","        try{","            con.createStatement().execute(\"Create Table ExceptionMethods(v varchar(30))\");","            con.createStatement().execute(\"Insert Into ExceptionMethods(v) Values(\'qwert\')\");","            ResultSet rs = con.createStatement().executeQuery(\"Select * from ExceptionMethods\");","            assertEquals(true, rs.next());","            try{","                rs.isBeforeFirst();","                fail(\"SQLException \'ResultSet is forward only\' should be throw\");","            }catch(SQLException e){","                assertSQLException(\"01000\", 0, e);","            }","            try{","                rs.isFirst();","                fail(\"SQLException \'ResultSet is forward only\' should be throw\");","            }catch(SQLException e){","                assertSQLException(\"01000\", 0, e);","            }","            try{","                rs.first();","                fail(\"SQLException \'ResultSet is forward only\' should be throw\");","            }catch(SQLException e){","                assertSQLException(\"01000\", 0, e);","            }","            try{","                rs.previous();","                fail(\"SQLException \'ResultSet is forward only\' should be throw\");","            }catch(SQLException e){","                assertSQLException(\"01000\", 0, e);","            }","            try{","                rs.last();","                fail(\"SQLException \'ResultSet is forward only\' should be throw\");","            }catch(SQLException e){","                assertSQLException(\"01000\", 0, e);","            }","            try{","                rs.isLast();","                fail(\"SQLException \'ResultSet is forward only\' should be throw\");","            }catch(SQLException e){","                assertSQLException(\"01000\", 0, e);","            }","            try{","                rs.isAfterLast();","                fail(\"SQLException \'ResultSet is forward only\' should be throw\");","            }catch(SQLException e){","                assertSQLException(\"01000\", 0, e);","            }","            try{","                rs.afterLast();","                fail(\"SQLException \'ResultSet is forward only\' should be throw\");","            }catch(SQLException e){","                assertSQLException(\"01000\", 0, e);","            }","            try{","                rs.absolute(1);","                fail(\"SQLException \'ResultSet is forward only\' should be throw\");","            }catch(SQLException e){","                assertSQLException(\"01000\", 0, e);","            }","            try{","                rs.relative(1);","                fail(\"SQLException \'ResultSet is forward only\' should be throw\");","            }catch(SQLException e){","                assertSQLException(\"01000\", 0, e);","            }","        }finally{","            dropTable(con, \"ExceptionMethods\");","        }","    }","    public void testGetConnection() throws Exception{","        Connection con;","        try{","            con = DriverManager.getConnection(AllTests.JDBC_URL + \"?abc\");","            con.close();","            fail(\"SQLException should be thrown\");","        }catch(SQLException ex){","        }","        con = DriverManager.getConnection(AllTests.JDBC_URL + \"? \");","        con.close();","        con = DriverManager.getConnection(AllTests.JDBC_URL + \"?a=b; ; c=d  ; e = f; ; \");","        Connection con2 = DriverManager.getConnection( \"jdbc:smallsql:\" + new File( AllTests.CATALOG ).getAbsolutePath());","        con.close();","        con2.close();","        con = DriverManager.getConnection( \"jdbc:smallsql:file:\" + AllTests.CATALOG );","        con.close();","    }","    public void testDuplicatedColumnCreate() throws Exception{","        Connection con = AllTests.getConnection();","        Statement st = con.createStatement();","        try{","            st.execute(\"Create Table DuplicatedColumn(col INT, Col INT)\");","            fail(\"SQLException \'Duplicated Column\' should be throw\");","        }catch(SQLException e){","            assertSQLException(\"01000\", 0, e);","        }","    }","    public void testDuplicatedColumnAlter() throws Exception{","        Connection con = AllTests.getConnection();","        try{","            Statement st = con.createStatement();","            st.execute(\"Create Table DuplicatedColumn(col INT)\");","            try{","                st.execute(\"ALTER TABLE DuplicatedColumn Add Col INT\");","                fail(\"SQLException \'Duplicated Column\' should be throw\");","            }catch(SQLException e){","                assertSQLException(\"01000\", 0, e);","            }","        }finally{","            dropTable(con, \"DuplicatedColumn\");","        }","    }","    public void testDuplicatedColumnInsert() throws Exception{","        Connection con = AllTests.getConnection();","        try{","            Statement st = con.createStatement();","            st.execute(\"Create Table DuplicatedColumn(col INT)\");","            try{","                st.execute(\"INSERT INTO DuplicatedColumn(col,Col) Values(1,2)\");","                fail(\"SQLException \'Duplicated Column\' should be throw\");","            }catch(SQLException e){","                assertSQLException(\"01000\", 0, e);","            }","        }finally{","            dropTable(con, \"DuplicatedColumn\");","        }","    }","    public void testDuplicatedCreateTable() throws Exception{","        Connection con = AllTests.getConnection();","        try{","            dropTable(con, \"DuplicatedTable\");","            Statement st = con.createStatement();","            st.execute(\"Create Table DuplicatedTable(col INT primary key)\");","            int tableFileCount = countFiles(\"DuplicatedTable\");","            try{","                st.execute(\"Create Table DuplicatedTable(col INT primary key)\");","                fail(\"SQLException \'Duplicated Table\' should be throw\");","            }catch(SQLException e){","                assertSQLException(\"01000\", 0, e);","            }","            assertEquals(\"Additional Files created\",tableFileCount, countFiles(\"DuplicatedTable\"));","        }finally{","            dropTable(con, \"DuplicatedTable\");","        }","    }","    private int countFiles(String fileNameStart){","        int count = 0;","        String names[] = new File(AllTests.CATALOG).list();","        for(int i=0; i\<names.length; i++){","            if(names[i].startsWith(fileNameStart)){","                count++;","            }","        }","        return count;","    }","    public void testAmbiguousColumn() throws Exception{","        Connection con = AllTests.getConnection();","        try{","            Statement st = con.createStatement();","            st.execute(\"create table foo (myint number)\");","            st.execute(\"create table bar (myint number)\");","            try{","                st.executeQuery(\"select myint from foo, bar\");","                fail(\"SQLException \'Ambiguous name\' should be throw\");","            }catch(SQLException e){","                assertSQLException(\"01000\", 0, e);","            }","        }finally{","            dropTable(con, \"foo\");","            dropTable(con, \"bar\");","        }","    }","    public void testClosedStatement() throws Exception{","        Connection con = AllTests.getConnection();","        Statement st = con.createStatement();","        st.close();","        try{","            st.execute(\"Select 1\");","            fail(\"Exception should throw\");","        }catch(SQLException ex){","            assertSQLException(\"HY010\", 0, ex);","        }","        try{","            st.executeQuery(\"Select 1\");","            fail(\"Exception should throw\");","        }catch(SQLException ex){","            assertSQLException(\"HY010\", 0, ex);","        }","        try{","            st.executeUpdate(\"Select 1\");","            fail(\"Exception should throw\");","        }catch(SQLException ex){","            assertSQLException(\"HY010\", 0, ex);","        }","    }","    public void testClosedPreparedStatement() throws Exception{","        Connection con = AllTests.getConnection();","        PreparedStatement pr = con.prepareStatement(\"Select ?\");","        pr.setInt(1, 1);","        pr.close();","        try{","            pr.setInt(1, 1);","            fail(\"Exception should throw\");","        }catch(SQLException ex){","            assertSQLException(\"HY010\", 0, ex);","        }","        try{","            pr.execute();","            fail(\"Exception should throw\");","        }catch(SQLException ex){","            assertSQLException(\"HY010\", 0, ex);","        }","        try{","            pr.executeQuery();","            fail(\"Exception should throw\");","        }catch(SQLException ex){","            assertSQLException(\"HY010\", 0, ex);","        }","        try{","            pr.executeUpdate();","            fail(\"Exception should throw\");","        }catch(SQLException ex){","            assertSQLException(\"HY010\", 0, ex);","        }","    }","}"],|project://smallsql/src/smallsql/database/Identity.java|:["package smallsql.database;","import java.io.*;","import java.nio.ByteBuffer;","import java.nio.channels.FileChannel;","import java.sql.SQLException;","public class Identity extends Number implements Mutable{","\tfinal private long filePos;","\tfinal private FileChannel raFile;","\tfinal private byte[] page = new byte[8];","\tprivate long value;","\tpublic Identity(FileChannel raFile, long filePos) throws IOException{","\t    ByteBuffer buffer = ByteBuffer.wrap(page);","\t\tsynchronized(raFile){","\t\t\traFile.position(filePos);","\t\t\traFile.read(buffer);","\t\t}","\t\tvalue = ((long)(page[ 0 ]) \<\< 56) |","\t\t\t\t((long)(page[ 1 ] & 0xFF) \<\< 48) |","\t\t\t\t((long)(page[ 2 ] & 0xFF) \<\< 40) |","\t\t\t\t((long)(page[ 3 ] & 0xFF) \<\< 32) |","\t\t\t\t((long)(page[ 4 ] & 0xFF) \<\< 24) |","\t\t\t\t((page[ 5 ] & 0xFF) \<\< 16) |","\t\t\t\t((page[ 6 ] & 0xFF) \<\< 8) |","\t\t\t\t((page[ 7 ] & 0xFF));","\t\tthis.raFile  = raFile;","\t\tthis.filePos = filePos;","\t}","\tprivate StorePage createStorePage(){","\t\tpage[ 0 ] = (byte)(value \>\> 56);","\t\tpage[ 1 ] = (byte)(value \>\> 48);","\t\tpage[ 2 ] = (byte)(value \>\> 40);","\t\tpage[ 3 ] = (byte)(value \>\> 32);","\t\tpage[ 4 ] = (byte)(value \>\> 24);","\t\tpage[ 5 ] = (byte)(value \>\> 16);","\t\tpage[ 6 ] = (byte)(value \>\> 8);","\t\tpage[ 7 ] = (byte)(value);","\t\treturn new StorePage( page, 8, raFile, filePos);","\t}","\tvoid createNextValue(SSConnection con) throws SQLException{","\t\tvalue++;","\t\tcon.add( createStorePage() );","\t}","\tvoid setNextValue(Expression expr) throws Exception{","\t\tlong newValue = expr.getLong();","\t\tif(newValue \> value){","\t\t\tvalue = newValue;","\t\t\tcreateStorePage().commit();","\t\t}","\t}","\t@Override","    public float floatValue() {","\t\treturn value;","\t}","\t@Override","    public double doubleValue() {","\t\treturn value;","\t}","\t@Override","    public int intValue() {","\t\treturn (int)value;","\t}","\t@Override","    public long longValue() {","\t\treturn value;","\t}","\t@Override","    public String toString(){","\t    return String.valueOf(value);","\t}","    public Object getImmutableObject(){","        return new Long(value);","    }","}"],|project://smallsql/src/smallsql/junit/TestResultSet.java|:["package smallsql.junit;","import java.sql.*;","public class TestResultSet extends BasicTestCase {","\tprivate static boolean init;","    protected void setUp() throws Exception{","    \tif(init) return;","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\tdropTable( con, \"ResultSet\");","\t\tst.execute(\"Create Table ResultSet (i int identity, c varchar(30))\");","        st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);","        ResultSet rs = st.executeQuery(\"Select * From ResultSet\");","        rs.moveToInsertRow();","        rs.insertRow();","        rs.moveToInsertRow();","        rs.insertRow();","\t\tinit = true;","    }","    public void testScrollStates() throws Exception{","        Connection con = AllTests.getConnection();","        Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);","        ResultSet rs = st.executeQuery(\"Select * From ResultSet Where 1=0\");","        assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );","        assertTrue(\"isAfterLast\", rs.isAfterLast() );","        assertEquals(\"getRow\", 0, rs.getRow() );","        rs.moveToInsertRow();","        rs.insertRow();","        rs.beforeFirst();","        assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );","        assertFalse(\"isAfterLast\", rs.isAfterLast() );","        assertEquals(\"getRow\", 0, rs.getRow() );","        assertTrue(\"next\", rs.next() );","        assertTrue(\"isFirst\", rs.isFirst() );","        assertTrue(\"rowInserted\", rs.rowInserted() );","        assertEquals(\"getRow\", 1, rs.getRow() );","        assertTrue(\"isLast\", rs.isLast() );","        assertFalse(\"next\", rs.next() );","        assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );","        assertTrue(\"isAfterLast\", rs.isAfterLast() );","        assertEquals(\"getRow\", 0, rs.getRow() );","        assertTrue(\"first\", rs.first() );","        assertEquals(\"getRow\", 1, rs.getRow() );","        assertFalse(\"previous\", rs.previous() );","        assertEquals(\"getRow\", 0, rs.getRow() );","        assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );","        assertFalse(\"isAfterLast\", rs.isAfterLast() );","        assertTrue(\"last\", rs.last() );","        assertEquals(\"getRow\", 1, rs.getRow() );","        assertTrue(\"isLast\", rs.isLast() );","        rs.afterLast();","        assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );","        assertTrue(\"isAfterLast\", rs.isAfterLast() );","        assertEquals(\"getRow\", 0, rs.getRow() );","    }","    public void testScrollStatesGroupBy() throws Exception{","        Connection con = AllTests.getConnection();","        Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);","        ResultSet rs = st.executeQuery(\"Select i,max(c) From ResultSet Group By i HAVING i=1\");","        assertEquals(\"getConcurrency\",ResultSet.CONCUR_READ_ONLY, rs.getConcurrency());","        assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );","        assertFalse(\"isAfterLast\", rs.isAfterLast() );","        assertEquals(\"getRow\", 0, rs.getRow() );","        rs.beforeFirst();","        assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );","        assertFalse(\"isAfterLast\", rs.isAfterLast() );","        assertEquals(\"getRow\", 0, rs.getRow() );","        assertTrue(\"next\", rs.next() );","        assertTrue(\"isFirst\", rs.isFirst() );","        assertFalse(\"rowInserted\", rs.rowInserted() );","        assertEquals(\"getRow\", 1, rs.getRow() );","        assertTrue(\"isLast\", rs.isLast() );","        assertFalse(\"next\", rs.next() );","        assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );","        assertTrue(\"isAfterLast\", rs.isAfterLast() );","        assertEquals(\"getRow\", 0, rs.getRow() );","        assertTrue(\"first\", rs.first() );","        assertEquals(\"getRow\", 1, rs.getRow() );","        assertFalse(\"previous\", rs.previous() );","        assertEquals(\"getRow\", 0, rs.getRow() );","        assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );","        assertFalse(\"isAfterLast\", rs.isAfterLast() );","        assertTrue(\"last\", rs.last() );","        assertEquals(\"getRow\", 1, rs.getRow() );","        assertTrue(\"isLast\", rs.isLast() );","        rs.afterLast();","        assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );","        assertTrue(\"isAfterLast\", rs.isAfterLast() );","        assertEquals(\"getRow\", 0, rs.getRow() );","    }","    public void testUpdate() throws Exception{","        Connection con = AllTests.getConnection();","        Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);","        ResultSet rs;","        rs = st.executeQuery(\"Select * From ResultSet\");","        assertTrue(\"next\", rs.next());","        assertEquals(\"getRow\", 1, rs.getRow() );","        int id = rs.getInt(\"i\");","        rs.updateShort(\"c\", (short)123 );","        assertEquals( (short)123, rs.getShort(\"c\") );","        assertEquals( id, rs.getInt(\"i\") ); ","        rs.updateRow();","        assertEquals( (short)123, rs.getShort(\"c\") );","        assertFalse( rs.rowUpdated() );  ","        assertFalse( rs.rowInserted() );","        assertFalse( rs.rowDeleted() );","        assertEquals(\"getRow\", 1, rs.getRow() );","        rs = st.executeQuery(\"Select * From ResultSet\");","        assertTrue(\"next\", rs.next());","        rs.updateByte(\"c\", (byte)66 );","        assertEquals( (byte)66, rs.getByte(\"c\") );","        rs.updateRow();","        assertEquals( (short)66, rs.getShort(\"c\") );","    }","    public void testUpdateAndScroll() throws Exception{","        final Object value = \"UpdateAndScroll\";","        Object value1;","        Object value2;","        Connection con = AllTests.getConnection();","        Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);","        ResultSet rs = st.executeQuery(\"Select * From ResultSet\");","        assertTrue(\"start\", rs.last());","        value1 = rs.getObject(\"i\");","        rs.updateObject(\"c\", value, Types.VARCHAR );","        assertEquals(\"getObject\", value, rs.getObject(\"c\"));","        assertEquals(\"getObject\", value1, rs.getObject(\"i\"));","        assertTrue(\"first\", rs.first());","        assertNotSame(\"getObject\", value, rs.getObject(\"c\"));","        assertTrue(\"start\", rs.first());","        rs.updateObject(\"c\", value, Types.VARCHAR );","        assertEquals(\"getObject\", value, rs.getObject(\"c\"));","        assertTrue(\"next\", rs.next());","        assertNotSame(\"getObject\", value, rs.getObject(\"c\"));","        assertTrue(\"start\", rs.last());","        rs.updateObject(\"c\", value );","        assertEquals(\"getObject\", value, rs.getObject(\"c\"));","        assertTrue(\"previous\", rs.previous());","        assertNotSame(\"getObject\", value, rs.getObject(\"c\"));","        assertTrue(\"start\", rs.first());","        rs.updateObject(\"c\", value, Types.VARCHAR );","        assertEquals(\"getObject\", value, rs.getObject(\"c\"));","        assertTrue(\"last\", rs.last());","        assertNotSame(\"getObject\", value, rs.getObject(\"c\"));","        assertTrue(\"start\", rs.first());","        rs.updateObject(\"c\", value, Types.VARCHAR );","        assertEquals(\"getObject\", value, rs.getObject(\"c\"));","        rs.refreshRow();","        assertNotSame(\"getObject\", value, rs.getObject(\"c\"));","        assertTrue(\"start\", rs.first());","        value1 = rs.getObject(\"i\");","        value2 = rs.getObject(\"c\");","        rs.updateObject(\"c\", value);","        assertEquals(\"getObject\", value, rs.getObject(\"c\"));","        rs.moveToInsertRow();","        assertNull(\"new row\", rs.getObject(\"i\"));","        assertNull(\"new row\", rs.getObject(\"c\"));","        rs.updateObject(\"c\", value);","        assertEquals(\"getObject\", value, rs.getObject(\"c\"));","        rs.moveToCurrentRow();","        assertEquals(\"getObject\", value1, rs.getObject(\"i\"));","        assertEquals(\"getObject\", value2, rs.getObject(\"c\"));","    }","    public void testDelete() throws Exception{","        Connection con = AllTests.getConnection();","        Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);","        ResultSet rs = st.executeQuery(\"Select * From ResultSet Where i\>1\");","        assertTrue(\"next\", rs.next());","        assertFalse( rs.rowDeleted() );","        rs.deleteRow();","        assertTrue( rs.rowDeleted() );","    }","    public void testOther() throws Exception{","        Connection con = AllTests.getConnection();","        Statement st = con.createStatement();","        ResultSet rs = st.executeQuery(\"Select * From ResultSet\");","        assertEquals(st, rs.getStatement());","        rs.clearWarnings();","        assertNull(rs.getWarnings());","        rs.setFetchDirection(ResultSet.FETCH_FORWARD);","        assertEquals( rs.getFetchDirection(), ResultSet.FETCH_FORWARD);","        rs.setFetchDirection(ResultSet.FETCH_REVERSE);","        assertEquals( rs.getFetchDirection(), ResultSet.FETCH_REVERSE);","        rs.setFetchSize(123);","        assertEquals( rs.getFetchSize(), 123);","    }","}"],|project://smallsql/src/smallsql/database/IndexDescriptions.java|:["package smallsql.database;","import java.sql.SQLException;","import smallsql.database.language.Language;","class IndexDescriptions {","\tprivate int size;","\tprivate IndexDescription[] data;","    private boolean hasPrimary;","\tIndexDescriptions(){","\t\tdata = new IndexDescription[4];","\t}","\tfinal int size(){","\t\treturn size;","\t}","\tfinal IndexDescription get(int idx){","\t\tif (idx \>= size)","\t\t\tthrow new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);","\t\treturn data[idx];","\t}","\tfinal void add(IndexDescription descr) throws SQLException{","\t\tif(size \>= data.length ){","\t\t\tresize(size \<\< 1);","\t\t}","        if(hasPrimary && descr.isPrimary()){","            throw SmallSQLException.create(Language.PK_ONLYONE);","        }","        hasPrimary = descr.isPrimary();","\t\tdata[size++] = descr;","\t}","\tprivate final void resize(int newSize){","\t\tIndexDescription[] dataNew = new IndexDescription[newSize];","\t\tSystem.arraycopy(data, 0, dataNew, 0, size);","\t\tdata = dataNew;\t\t","\t}","\tfinal IndexDescription findBestMatch(Strings columns){","\t\tint bestFactor = Integer.MAX_VALUE;","\t\tint bestIdx = 0;","\t\tfor(int i=0; i\<size; i++){","\t\t\tint factor = data[i].matchFactor(columns);","\t\t\tif(factor == 0) ","\t\t\t\treturn data[i];","\t\t\tif(factor \< bestFactor){","\t\t\t\tbestFactor = factor;","\t\t\t\tbestIdx = i;","\t\t\t}","\t\t}","\t\tif(bestFactor == Integer.MAX_VALUE)","\t\t\treturn null;","\t\telse","\t\t\treturn data[bestIdx];","\t}","\tvoid create(SSConnection con, Database database, TableView tableView) throws Exception{","\t\tfor(int i=0; i\<size; i++){","\t\t\tdata[i].create(con, database, tableView);","\t\t}","\t}","\tvoid drop(Database database) throws Exception {","\t\tfor(int i=0; i\<size; i++){","\t\t\tdata[i].drop(database);","\t\t}","\t}","    void close() throws Exception{","        for(int i=0; i\<size; i++){","            data[i].close();","        }","    }","    void add(IndexDescriptions indexes) throws SQLException {","        for(int i=0; i\<indexes.size; i++){","            add(indexes.data[i]);","        }","    }","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionDayOfMonth.java|:["package smallsql.database;","final class ExpressionFunctionDayOfMonth extends ExpressionFunctionReturnInt {","\tfinal int getFunction() {","\t\treturn SQLTokenizer.DAYOFMONTH;","\t}","\tfinal int getInt() throws Exception {","\t\tif(param1.isNull()) return 0;","\t\tDateTime.Details details = new DateTime.Details(param1.getLong());","\t\treturn details.day;","\t}","}"],|project://smallsql/src/smallsql/database/SmallSQLException.java|:["package smallsql.database;","import java.io.PrintStream;","import java.io.PrintWriter;","import java.sql.DriverManager;","import java.sql.SQLException;","import java.text.MessageFormat;","import smallsql.database.language.Language;","class SmallSQLException extends SQLException {","    private static final long serialVersionUID = -1683756623665114L;","    private boolean isInit;","    private static Language language;","\tprivate SmallSQLException(String message, String vendorCode) {","\t\tsuper(\"[SmallSQL]\" + message, vendorCode, 0);","\t\tinit();","\t}","\tprivate SmallSQLException(Throwable throwable, String message, String vendorCode) {","\t\tsuper(\"[SmallSQL]\" + message, vendorCode, 0);","\t\tthis.initCause(throwable);","\t\tinit();","\t}","\tprivate void init(){","\t\tthis.isInit = true;","\t\tPrintWriter pw = DriverManager.getLogWriter();","\t\tif(pw != null) this.printStackTrace(pw);\t","\t}","    static void setLanguage(Object localeObj) throws SQLException {","    \tif (language != null && localeObj == null) return;","    \tif (localeObj == null) {","    \t\tlanguage = Language.getDefaultLanguage(); ","    \t}","    \telse {","    \t\tlanguage = Language.getLanguage(localeObj.toString()); ","    \t}","    }","\tpublic void printStackTrace(){","\t\tif(!isInit) return;","\t\tsuper.printStackTrace();","\t}","\tpublic void printStackTrace(PrintStream ps){","\t\tif(!isInit) return;","\t\tsuper.printStackTrace(ps);","\t}","\tpublic void printStackTrace(PrintWriter pw){","\t\tif(!isInit) return;","\t\tsuper.printStackTrace(pw);","\t}","    static SQLException create( String messageCode ) {","    \tassert (messageCode != null): \"Fill parameters\";","    \tString message = translateMsg(messageCode, null);","    \tString sqlState = language.getSqlState(messageCode);","        return new SmallSQLException(message, sqlState);","    }","    static SQLException create( String messageCode, Object param0 ) {","    \tString message = translateMsg(messageCode, new Object[] { param0 });","    \tString sqlState = language.getSqlState(messageCode);","        return new SmallSQLException(message, sqlState);","    }","    static SQLException create( String messageCode, Object[] params ) {","    \tString message = translateMsg(messageCode, params);","    \tString sqlState = language.getSqlState(messageCode);","        return new SmallSQLException(message, sqlState);","    }","    static SQLException createFromException( Throwable e ){","        if(e instanceof SQLException) {","        \treturn (SQLException)e;","        }","        else {","        \tString message = stripMsg(e);","        \tString sqlState = language.getSqlState(Language.CUSTOM_MESSAGE);","        \treturn new SmallSQLException(e, message, sqlState);","        }","    }","    static SQLException createFromException( String messageCode, Object param0, ","    \t\tThrowable e )","    {","    \tString message = translateMsg(messageCode, new Object[] { param0 });","    \tString sqlState = language.getSqlState(messageCode);","        return new SmallSQLException(e, message, sqlState);","    }","\tstatic String translateMsg(String messageCode, Object[] params) {","\t\tassert ( messageCode != null && params != null ): \"Fill parameters. msgCode=\" + messageCode + \" params=\" + params;","\t\tString localized = language.getMessage(messageCode);\t\t","\t\treturn MessageFormat.format(localized, params); ","\t}","\tprivate static String stripMsg(Throwable throwable) {","\t\tString msg = throwable.getMessage();","\t\tif(msg == null || msg.length() \< 30){","\t\t\tString msg2 = throwable.getClass().getName();","\t\t\tmsg2 = msg2.substring(msg2.lastIndexOf(\'.\')+1);","\t\t\tif(msg != null)","\t\t\t\tmsg2 = msg2 + \':\' + msg;","\t\t\treturn msg2;","\t\t}","\t\treturn throwable.getMessage(); ","\t}","}"],|project://smallsql/src/smallsql/database/ForeignKeys.java|:["package smallsql.database;","class ForeignKeys {","\tprivate int size;","\tprivate ForeignKey[] data;","\tForeignKeys(){","\t\tdata = new ForeignKey[16];","\t}","\tfinal int size(){","\t\treturn size;","\t}","\tfinal ForeignKey get(int idx){","\t\tif (idx \>= size)","\t\t\tthrow new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);","\t\treturn data[idx];","\t}","\tfinal void add(ForeignKey foreignKey){","\t\tif(size \>= data.length ){","\t\t\tresize(size \<\< 1);","\t\t}","\t\tdata[size++] = foreignKey;","\t}","\tprivate final void resize(int newSize){","\t\tForeignKey[] dataNew = new ForeignKey[newSize];","\t\tSystem.arraycopy(data, 0, dataNew, 0, size);","\t\tdata = dataNew;\t\t","\t}","}"],|project://smallsql/src/smallsql/database/StoreNull.java|:["package smallsql.database;","import java.sql.*;","import smallsql.database.language.Language;","class StoreNull extends Store {","\tprivate final long nextPagePos;","\tStoreNull(){","\t\tthis(-1);","\t}","\tStoreNull(long nextPos){","\t\tnextPagePos = nextPos;","\t}","\tfinal boolean isNull(int offset) {","\t\treturn true;","\t}","\tfinal boolean getBoolean(int offset, int dataType) throws Exception {","\t\treturn false;","\t}","\tfinal byte[] getBytes(int offset, int dataType) throws Exception {","\t\treturn null;","\t}","\tfinal double getDouble(int offset, int dataType) throws Exception {","\t\treturn 0;","\t}","\tfinal float getFloat(int offset, int dataType) throws Exception {","\t\treturn 0;","\t}","\tfinal int getInt(int offset, int dataType) throws Exception {","\t\treturn 0;","\t}","\tfinal long getLong(int offset, int dataType) throws Exception {","\t\treturn 0;","\t}","\tfinal long getMoney(int offset, int dataType) throws Exception {","\t\treturn 0;","\t}","\tfinal MutableNumeric getNumeric(int offset, int dataType) throws Exception {","\t\treturn null;","\t}","\tfinal Object getObject(int offset, int dataType) throws Exception {","\t\treturn null;","\t}","\tfinal String getString(int offset, int dataType) throws Exception {","\t\treturn null;","\t}","\tfinal void scanObjectOffsets(int[] offsets, int[] dataTypes) {}","\tfinal int getUsedSize() {","\t\treturn 0;","\t}","\tfinal long getNextPagePos(){","\t\treturn nextPagePos;","\t}","\tfinal void deleteRow(SSConnection con) throws SQLException{","\t\tif(nextPagePos \>= 0){","\t\t\tthrow SmallSQLException.create(Language.ROW_DELETED);","\t\t}","\t\tthrow new Error();","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionSin.java|:["package smallsql.database;","final class ExpressionFunctionSin extends ExpressionFunctionReturnFloat {","    final int getFunction(){ return SQLTokenizer.SIN; }","    final double getDouble() throws Exception{","\t\tif(isNull()) return 0;","        return Math.sin( param1.getDouble() );","    }","}"],|project://smallsql/src/smallsql/database/Distinct.java|:["package smallsql.database;","final class Distinct extends RowSource {","\tfinal private Expressions distinctColumns;","\tfinal private RowSource rowSource;","\tprivate Index index;","\tprivate int row;","\tDistinct(RowSource rowSource, Expressions columns){","\t\tthis.rowSource = rowSource;","\t\tthis.distinctColumns = columns;","\t}","\tfinal void execute() throws Exception{","\t\trowSource.execute();","\t\tindex = new Index(true);\t","\t}","\tfinal boolean isScrollable() {","\t\treturn false;","\t}","\tfinal void beforeFirst() throws Exception {","\t\trowSource.beforeFirst();","\t\trow = 0;","\t}","\tfinal boolean first() throws Exception {","\t\tbeforeFirst();","\t\treturn next();","\t}","\tfinal boolean next() throws Exception {","\t\twhile(true){","\t\t\tboolean isNext = rowSource.next();","\t\t\tif(!isNext) return false;","\t\t\tLong oldRowOffset = (Long)index.findRows(distinctColumns, true, null);","\t\t\tlong newRowOffset = rowSource.getRowPosition();","\t\t\tif(oldRowOffset == null){","\t\t\t\tindex.addValues( newRowOffset, distinctColumns);","\t\t\t\trow++;","\t\t\t\treturn true;","\t\t\t}else","\t\t\tif(oldRowOffset.longValue() == newRowOffset){","\t\t\t\trow++;","\t\t\t\treturn true;","\t\t\t}","\t\t}","\t}","\tfinal void afterLast() throws Exception {","\t\trowSource.afterLast();","\t\trow = 0;","\t}","\tfinal int getRow() throws Exception {","\t\treturn row;","\t}","\tfinal long getRowPosition() {","\t\treturn rowSource.getRowPosition();","\t}","\tfinal void setRowPosition(long rowPosition) throws Exception {","\t\trowSource.setRowPosition(rowPosition);","\t}","\tfinal void nullRow() {","\t\trowSource.nullRow();","\t\trow = 0;","\t}","\tfinal void noRow() {","\t\trowSource.noRow();","\t\trow = 0;","\t}","\tfinal boolean rowInserted(){","\t\treturn rowSource.rowInserted();","\t}","\tfinal boolean rowDeleted() {","\t\treturn rowSource.rowDeleted();","\t}","    boolean isExpressionsFromThisRowSource(Expressions columns){","        return rowSource.isExpressionsFromThisRowSource(columns);","    }","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|:["package smallsql.database;","public class ExpressionFunctionTimestampAdd extends ExpressionFunction {","\tfinal private int interval;","\tExpressionFunctionTimestampAdd(int intervalType, Expression p1, Expression p2){","\t\tinterval = ExpressionFunctionTimestampDiff.mapIntervalType( intervalType );","\t\tsetParams( new Expression[]{p1,p2});","\t}","\tint getFunction() {","\t\treturn SQLTokenizer.TIMESTAMPADD;","\t}","\tboolean isNull() throws Exception {","\t\treturn param1.isNull() || param2.isNull();","\t}","\tboolean getBoolean() throws Exception {","\t\treturn getLong() != 0;","\t}","\tint getInt() throws Exception {","\t\treturn (int)getLong();","\t}","\tlong getLong() throws Exception {","\t\tif(isNull()) return 0;","\t\tswitch(interval){","\t\t\tcase SQLTokenizer.SQL_TSI_FRAC_SECOND:","\t\t\t\treturn param2.getLong() + param1.getLong();","\t\t\tcase SQLTokenizer.SQL_TSI_SECOND:","\t\t\t\treturn param2.getLong() + param1.getLong() * 1000;","\t\t\tcase SQLTokenizer.SQL_TSI_MINUTE:","\t\t\t\treturn param2.getLong() + param1.getLong() * 60000;","\t\t\tcase SQLTokenizer.SQL_TSI_HOUR:","\t\t\t\treturn param2.getLong() + param1.getLong() * 3600000;","\t\t\tcase SQLTokenizer.SQL_TSI_DAY:","\t\t\t\treturn param2.getLong() + param1.getLong() * 86400000;","\t\t\tcase SQLTokenizer.SQL_TSI_WEEK:{","\t\t\t\treturn param2.getLong() + param1.getLong() * 604800000;","\t\t\t}case SQLTokenizer.SQL_TSI_MONTH:{","\t\t\t\tDateTime.Details details2 = new DateTime.Details(param2.getLong());","\t\t\t\tdetails2.month += param1.getLong();","\t\t\t\treturn DateTime.calcMillis(details2);","\t\t\t}","\t\t\tcase SQLTokenizer.SQL_TSI_QUARTER:{","\t\t\t\tDateTime.Details details2 = new DateTime.Details(param2.getLong());","\t\t\t\tdetails2.month += param1.getLong() * 3;","\t\t\t\treturn DateTime.calcMillis(details2);","\t\t\t}","\t\t\tcase SQLTokenizer.SQL_TSI_YEAR:{","\t\t\t\tDateTime.Details details2 = new DateTime.Details(param2.getLong());","\t\t\t\tdetails2.year += param1.getLong();","\t\t\t\treturn DateTime.calcMillis(details2);","\t\t\t}","\t\t\tdefault: throw new Error();","\t\t}","\t}","\tfloat getFloat() throws Exception {","\t\treturn getLong();","\t}","\tdouble getDouble() throws Exception {","\t\treturn getLong();","\t}","\tlong getMoney() throws Exception {","\t\treturn getLong() * 10000;","\t}","\tMutableNumeric getNumeric() throws Exception {","\t\tif(isNull()) return null;","\t\treturn new MutableNumeric(getLong());","\t}","\tObject getObject() throws Exception {","\t\tif(isNull()) return null;","\t\treturn new DateTime( getLong(), SQLTokenizer.TIMESTAMP );","\t}","\tString getString() throws Exception {","\t\tif(isNull()) return null;","\t\treturn new DateTime( getLong(), SQLTokenizer.TIMESTAMP ).toString();","\t}","\tint getDataType() {","\t\treturn SQLTokenizer.TIMESTAMP;","\t}","}"],|project://smallsql/src/smallsql/database/Where.java|:["package smallsql.database;","class Where extends RowSource {","\tfinal private RowSource rowSource;","\tfinal private Expression where;","\tprivate int row = 0;","\tprivate boolean isCurrentRow;","\tWhere(RowSource rowSource, Expression where){","\t\tthis.rowSource = rowSource;","\t\tthis.where = where;","\t}","\tRowSource getFrom(){","\t\treturn rowSource;","\t}","\tfinal private boolean isValidRow() throws Exception{","\t\treturn where == null || rowSource.rowInserted() || where.getBoolean();","\t}","\tfinal boolean isScrollable() {","\t\treturn rowSource.isScrollable();","\t}","\tfinal boolean isBeforeFirst(){","\t\treturn row == 0;","\t}","\tfinal boolean isFirst(){","\t\treturn row == 1 && isCurrentRow;","\t}","\tfinal boolean isLast() throws Exception{","\t\tif(!isCurrentRow) return false;","\t\tlong rowPos = rowSource.getRowPosition();","\t\tboolean isNext = next();","\t\trowSource.setRowPosition(rowPos);","\t\treturn !isNext;","\t}","\tfinal boolean isAfterLast(){","\t\treturn row \> 0 && !isCurrentRow;","\t}","\tfinal void beforeFirst() throws Exception {","\t\trowSource.beforeFirst();","\t\trow = 0;","\t}","\tfinal boolean first() throws Exception {","\t\tisCurrentRow = rowSource.first();","\t\twhile(isCurrentRow && !isValidRow()){","\t\t\tisCurrentRow = rowSource.next();","\t\t}","\t\trow = 1;","\t\treturn isCurrentRow;","\t}","\tfinal boolean previous() throws Exception {","        boolean oldIsCurrentRow = isCurrentRow;","\t\tdo{","\t\t\tisCurrentRow = rowSource.previous();","\t\t}while(isCurrentRow && !isValidRow());","\t\tif(oldIsCurrentRow || isCurrentRow) row--;","\t\treturn isCurrentRow;","\t}","\tfinal boolean next() throws Exception {","        boolean oldIsCurrentRow = isCurrentRow;","\t\tdo{","\t\t\tisCurrentRow = rowSource.next();","\t\t}while(isCurrentRow && !isValidRow());","\t\tif(oldIsCurrentRow || isCurrentRow) row++;","\t\treturn isCurrentRow;","\t}","\tfinal boolean last() throws Exception{","\t\twhile(next()){}","\t\treturn previous();","\t}","\tfinal void afterLast() throws Exception {","\t\twhile(next()){}","\t}","\tfinal int getRow() throws Exception {","\t\treturn isCurrentRow ? row : 0;","\t}","\tfinal long getRowPosition() {","\t\treturn rowSource.getRowPosition();","\t}","\tfinal void setRowPosition(long rowPosition) throws Exception {","\t\trowSource.setRowPosition(rowPosition);","\t}","\tfinal void nullRow() {","\t\trowSource.nullRow();","\t\trow = 0;","\t}","\tfinal void noRow() {","\t\trowSource.noRow();","\t\trow = 0;","\t}","\tfinal boolean rowInserted() {","\t\treturn rowSource.rowInserted();","\t}","\tfinal boolean rowDeleted() {","\t\treturn rowSource.rowDeleted();","\t}","\tfinal void execute() throws Exception{","\t\trowSource.execute();","\t}","    boolean isExpressionsFromThisRowSource(Expressions columns){","        return rowSource.isExpressionsFromThisRowSource(columns);","    }","}"],|project://smallsql/src/smallsql/database/Database.java|:["package smallsql.database;","import java.util.*;","import java.io.*;","import java.nio.channels.FileChannel;","import java.sql.*;","import smallsql.database.language.Language;","final class Database{","    static private HashMap databases = new HashMap();","    private final TableViewMap tableViews = new TableViewMap();","    private final String name;","    private final boolean readonly;","\tprivate final File directory;","\tprivate final FileChannel master;","\tprivate final WeakHashMap connections = new WeakHashMap();","    static Database getDatabase(String name, SSConnection con, boolean create) throws SQLException{","        if(name == null){","            return null;","        }","        if(name.startsWith(\"file:\")){","            name = name.substring(5);","        }","        File file;","        try{","            file = new File(name).getCanonicalFile();","        }catch(Throwable th){","            throw SmallSQLException.createFromException( th );","        }","        String dbKey = file.getName() + \";readonly=\" + con.isReadOnly();","        synchronized(databases){","            Database db = (Database)databases.get(dbKey);","            if(db == null){","                if(create && !file.isDirectory()){","                    CommandCreateDatabase command = new CommandCreateDatabase(con.log, name);","                    command.execute(con, null);","                }","                db = new Database( name, file, con.isReadOnly() );","                databases.put(dbKey, db);","            }","            db.connections.put(con, null);","            return db;","        }","    }","    private static Database getDatabase(SSConnection con, String name) throws SQLException{","\t\treturn name == null ?","\t\t\t\t\tcon.getDatabase(false) :","\t\t\t\t\tgetDatabase( name, con, false );","    }","    private Database( String name, File canonicalFile, boolean readonly ) throws SQLException{","        try{","\t        this.name = name;","\t        this.readonly = readonly;","\t\t\tdirectory = canonicalFile;","\t\t\tif(!directory.isDirectory()){","                throw SmallSQLException.create(Language.DB_NONEXISTENT, name);","            }","\t\t\tFile file = new File( directory, Utils.MASTER_FILENAME);","\t\t\tif(!file.exists())","\t\t\t\tthrow SmallSQLException.create(Language.DB_NOT_DIRECTORY, name);","\t\t\tmaster = Utils.openRaFile( file, readonly );","        }catch(Exception e){","        \tthrow SmallSQLException.createFromException(e);","        }","    }","    String getName(){","        return name;","    }","\tboolean isReadOnly(){","\t    return readonly;","\t}","\tstatic final void closeConnection(SSConnection con) throws SQLException{","\t\tsynchronized(databases){","\t\t\tIterator iterator = databases.values().iterator();","\t\t\twhile(iterator.hasNext()){","\t\t\t\tDatabase database = (Database)iterator.next();","\t\t\t\tWeakHashMap connections = database.connections;","\t\t\t\tconnections.remove(con);","\t\t\t\tif(connections.size() == 0){","\t\t\t\t\ttry {","\t\t\t\t\t\titerator.remove();","\t\t\t\t\t\tdatabase.close();","\t\t\t\t\t} catch (Exception e) {","\t\t\t\t\t\tthrow SmallSQLException.createFromException(e);","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t}","\t}","\tprivate final void close() throws Exception{","\t\tsynchronized(tableViews){","\t\t\tIterator iterator = tableViews.values().iterator();","\t\t\twhile(iterator.hasNext()){","\t\t\t\tTableView tableView = (TableView)iterator.next();","\t\t\t\ttableView.close();","\t\t\t\titerator.remove();","\t\t\t}","\t\t}","\t\tmaster.close();","\t}","    static TableView getTableView(SSConnection con, String catalog, String tableName) throws SQLException{","    \treturn getDatabase( con, catalog).getTableView( con, tableName);","    }","    TableView getTableView(SSConnection con, String tableName) throws SQLException{","        synchronized(tableViews){","            TableView tableView = tableViews.get(tableName);","            if(tableView == null){","                tableView = TableView.load(con, this, tableName);","                tableViews.put( tableName, tableView);","            }","            return tableView;","        }","    }","\tstatic void dropTable(SSConnection con, String catalog, String tableName) throws Exception{","\t\tgetDatabase( con, catalog).dropTable( con, tableName);","\t}","    void dropTable(SSConnection con, String tableName) throws Exception{","        synchronized(tableViews){","            Table table = (Table)tableViews.get( tableName );","            if(table != null){","\t\t\t\ttableViews.remove( tableName );","                table.drop(con);","            }else{","            \tTable.drop( this, tableName );","            }","        }","    }","    void removeTableView(String tableViewName){","        synchronized(tableViews){","            tableViews.remove( tableViewName );","        }","    }","    void replaceTable( Table oldTable, Table newTable) throws Exception{","        synchronized(tableViews){","            tableViews.remove( oldTable.name );","            tableViews.remove( newTable.name );","            oldTable.close();","            newTable.close();","            File oldFile = oldTable.getFile(this);","            File newFile = newTable.getFile(this);","            File tmpFile = new File(Utils.createTableViewFileName( this, \"#\" + System.currentTimeMillis() + this.hashCode() ));","            if( !oldFile.renameTo(tmpFile) ){","                throw SmallSQLException.create(Language.TABLE_CANT_RENAME, oldTable.name);","            }","            if( !newFile.renameTo(oldFile) ){","                tmpFile.renameTo(oldFile); ","                throw SmallSQLException.create(Language.TABLE_CANT_RENAME, oldTable.name);","            }","            tmpFile.delete();","        }","    }","\tstatic void dropView(SSConnection con, String catalog, String tableName) throws Exception{","\t\tgetDatabase( con, catalog).dropView(tableName);","\t}","\tvoid dropView(String viewName) throws Exception{","\t\tsynchronized(tableViews){","\t\t\tObject view = tableViews.remove( viewName );","\t\t\tif(view != null && !(view instanceof View))","\t\t\t\tthrow SmallSQLException.create(Language.VIEWDROP_NOT_VIEW, viewName);","\t\t\tView.drop( this, viewName );","\t\t}","\t}","    private void checkForeignKeys( SSConnection con, ForeignKeys foreignKeys ) throws SQLException{","        for(int i=0; i\<foreignKeys.size(); i++){","            ForeignKey foreignKey = foreignKeys.get(i);","            TableView pkTable = getTableView(con, foreignKey.pkTable);","            if(!(pkTable instanceof Table)){","                throw SmallSQLException.create(Language.FK_NOT_TABLE, foreignKey.pkTable);","            }","        }","    }","\tvoid createTable(SSConnection con, String name, Columns columns, IndexDescriptions indexes, ForeignKeys foreignKeys) throws Exception{","        checkForeignKeys( con, foreignKeys );","        Table table = new Table( this, con, name, columns, indexes, foreignKeys);","        synchronized(tableViews){","            tableViews.put( name, table);","        }","    }","    Table createTable(SSConnection con, String tableName, Columns columns, IndexDescriptions oldIndexes, IndexDescriptions newIndexes, ForeignKeys foreignKeys) throws Exception{","        checkForeignKeys( con, foreignKeys );","        Table table = new Table( this, con, tableName, columns, oldIndexes, newIndexes, foreignKeys);","        synchronized(tableViews){","            tableViews.put( tableName, table);","        }","        return table;","    }","\tvoid createView(SSConnection con, String viewName, String sql) throws Exception{","\t\tnew View( this, con, viewName, sql);","\t}","    static Object[][] getCatalogs(Database database){","    \tList catalogs = new ArrayList();","    \tFile baseDir = (database != null) ?","    \t\t\t\t\tdatabase.directory.getParentFile() :","\t\t\t\t\t\tnew File(\".\");","\t\tFile dirs[] = baseDir.listFiles();","\t\tif(dirs != null)","\t\t\tfor(int i=0; i\<dirs.length; i++){","\t\t\t\tif(dirs[i].isDirectory()){","\t\t\t\t\tif(new File(dirs[i], Utils.MASTER_FILENAME).exists()){","\t\t\t\t\t\tObject[] catalog = new Object[1];","\t\t\t\t\t\tcatalog[0] = dirs[i].getPath();","\t\t\t\t\t\tcatalogs.add(catalog);","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\tObject[][] result = new Object[catalogs.size()][];","\t\tcatalogs.toArray(result);","\t\treturn result;","    }","\tStrings getTables(String tablePattern){","\t\tStrings list = new Strings();","\t\tFile dirs[] = directory.listFiles();    ","\t\tif(dirs != null)","\t\t\tif(tablePattern == null) tablePattern = \"%\"; ","\t\t\ttablePattern += Utils.TABLE_VIEW_EXTENTION;","\t\t\tfor(int i=0; i\<dirs.length; i++){","\t\t\t\tString name = dirs[i].getName();","\t\t\t\tif(Utils.like(name, tablePattern)){","\t\t\t\t\tlist.add(name.substring( 0, name.length()-Utils.TABLE_VIEW_EXTENTION.length() ));","\t\t\t\t}","\t\t\t}","    \treturn list;","    }","    Object[][] getColumns( SSConnection con, String tablePattern, String colPattern) throws Exception{","    \tList rows = new ArrayList();","\t\tStrings tables = getTables(tablePattern);","    \tfor(int i=0; i\<tables.size(); i++){","    \t\tString tableName = tables.get(i);","\t\t\ttry{","\t    \t\tTableView tab = getTableView( con, tableName);","\t    \t\tColumns cols = tab.columns;","\t    \t\tfor(int c=0; c\<cols.size(); c++){","\t    \t\t\tColumn col = cols.get(c);","\t\t\t\t\tObject[] row = new Object[18];","\t\t\t\t\trow[0] = getName(); \t\t\t","\t\t\t\t\trow[2] = tableName;\t\t\t\t","\t\t\t\t\trow[3] = col.getName();\t\t\t","\t\t\t\t\trow[4] = Utils.getShort( SQLTokenizer.getSQLDataType( col.getDataType() )); ","\t\t\t\t\trow[5] = SQLTokenizer.getKeyWord( col.getDataType() );\t","\t\t\t\t\trow[6] = Utils.getInteger(col.getColumnSize());","\t\t\t\t\trow[8] = Utils.getInteger(col.getScale());","\t\t\t\t\trow[9] = Utils.getInteger(10);\t\t","\t\t\t\t\trow[10]= Utils.getInteger(col.isNullable() ? DatabaseMetaData.columnNullable : DatabaseMetaData.columnNoNulls); ","\t\t\t\t\trow[12]= col.getDefaultDefinition(); ","\t\t\t\t\trow[15]= row[6];\t\t\t\t","\t\t\t\t\trow[16]= Utils.getInteger(i); \t","\t\t\t\t\trow[17]= col.isNullable() ? \"YES\" : \"NO\"; ","\t\t\t\t\trows.add(row);","\t    \t\t}","\t\t\t}catch(Exception e){","\t\t\t}","    \t}","\t\tObject[][] result = new Object[rows.size()][];","\t\trows.toArray(result);","\t\treturn result;","    }","\tObject[][] getReferenceKeys(SSConnection con, String pkTable, String fkTable) throws SQLException{","\t\tList rows = new ArrayList();","\t\tStrings tables = (pkTable != null) ? getTables(pkTable) : getTables(fkTable);","\t\tfor(int t=0; t\<tables.size(); t++){","    \t\tString tableName = tables.get(t);","    \t\tTableView tab = getTableView( con, tableName);","\t\t\tif(!(tab instanceof Table)) continue;","\t\t\tForeignKeys references = ((Table)tab).references;","\t\t\tfor(int i=0; i\<references.size(); i++){","\t\t\t\tForeignKey foreignKey = references.get(i);","\t\t\t\tIndexDescription pk = foreignKey.pk;","\t\t\t\tIndexDescription fk = foreignKey.fk;","\t\t\t\tif((pkTable == null || pkTable.equals(foreignKey.pkTable)) &&","\t\t\t\t   (fkTable == null || fkTable.equals(foreignKey.fkTable))){","\t\t\t\t\tStrings columnsPk = pk.getColumns();","\t\t\t\t\tStrings columnsFk = fk.getColumns();","\t\t\t\t\tfor(int c=0; c\<columnsPk.size(); c++){","\t\t\t\t\t\tObject[] row = new Object[14];","\t\t\t\t\t\trow[0] = getName();\t\t\t\t","\t\t\t\t\t\trow[2] = foreignKey.pkTable;\t","\t\t\t\t\t\trow[3] = columnsPk.get(c);\t\t","\t\t\t\t\t\trow[4] = getName();\t\t\t\t","\t\t\t\t\t\trow[6] = foreignKey.fkTable;\t","\t\t\t\t\t\trow[7] = columnsFk.get(c);\t\t","\t\t\t\t\t\trow[8] = Utils.getShort(c+1);\t","\t\t\t\t\t\trow[9] = Utils.getShort(foreignKey.updateRule);","\t\t\t\t\t\trow[10]= Utils.getShort(foreignKey.deleteRule); ","\t\t\t\t\t\trow[11]= fk.getName();\t","\t\t\t\t\t\trow[12]= pk.getName();\t","\t\t\t\t\t\trow[13]= Utils.getShort(DatabaseMetaData.importedKeyNotDeferrable); ","\t\t\t\t\t\trows.add(row);","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t}","\t\tObject[][] result = new Object[rows.size()][];","\t\trows.toArray(result);","\t\treturn result;\t\t","\t}","\tObject[][] getBestRowIdentifier(SSConnection con, String table) throws SQLException{","\t\tList rows = new ArrayList();","\t\tStrings tables = getTables(table);","\t\tfor(int t=0; t\<tables.size(); t++){","    \t\tString tableName = tables.get(t);","    \t\tTableView tab = getTableView( con, tableName);","\t\t\tif(!(tab instanceof Table)) continue;","\t\t\tIndexDescriptions indexes = ((Table)tab).indexes;","\t\t\tfor(int i=0; i\<indexes.size(); i++){","\t\t\t\tIndexDescription index = indexes.get(i);","\t\t\t\tif(index.isUnique()){","\t\t\t\t\tStrings columns = index.getColumns();","\t\t\t\t\tfor(int c=0; c\<columns.size(); c++){","\t\t\t\t\t\tString columnName = columns.get(c);","\t\t\t\t\t\tColumn column = tab.findColumn(columnName);","\t\t\t\t\t\tObject[] row = new Object[8];","\t\t\t\t\t\trow[0] = Utils.getShort(DatabaseMetaData.bestRowSession);","\t\t\t\t\t\trow[1] = columnName;\t\t\t","\t\t\t\t\t\tfinal int dataType = column.getDataType();","\t\t\t\t\t\trow[2] = Utils.getInteger(dataType);","\t\t\t\t\t\trow[3] = SQLTokenizer.getKeyWord(dataType);","\t\t\t\t\t\trow[4] = Utils.getInteger(column.getPrecision());\t","\t\t\t\t\t\trow[6] = Utils.getShort(column.getScale());\t\t","\t\t\t\t\t\trow[7] = Utils.getShort(DatabaseMetaData.bestRowNotPseudo);","\t\t\t\t\t\trows.add(row);","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t}","\t\tObject[][] result = new Object[rows.size()][];","\t\trows.toArray(result);","\t\treturn result;\t\t","\t}","\tObject[][] getPrimaryKeys(SSConnection con, String table) throws SQLException{","\t\tList rows = new ArrayList();","\t\tStrings tables = getTables(table);","\t\tfor(int t=0; t\<tables.size(); t++){","    \t\tString tableName = tables.get(t);","    \t\tTableView tab = getTableView( con, tableName);","\t\t\tif(!(tab instanceof Table)) continue;","\t\t\tIndexDescriptions indexes = ((Table)tab).indexes;","\t\t\tfor(int i=0; i\<indexes.size(); i++){","\t\t\t\tIndexDescription index = indexes.get(i);","\t\t\t\tif(index.isPrimary()){","\t\t\t\t\tStrings columns = index.getColumns();","\t\t\t\t\tfor(int c=0; c\<columns.size(); c++){","\t\t\t\t\t\tObject[] row = new Object[6];","\t\t\t\t\t\trow[0] = getName(); \t\t\t","\t\t\t\t\t\trow[2] = tableName;\t\t\t\t","\t\t\t\t\t\trow[3] = columns.get(c);\t\t","\t\t\t\t\t\trow[4] = Utils.getShort(c+1);\t","\t\t\t\t\t\trow[5] = index.getName();\t\t","\t\t\t\t\t\trows.add(row);","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t}","\t\tObject[][] result = new Object[rows.size()][];","\t\trows.toArray(result);","\t\treturn result;\t\t","\t}","\tObject[][] getIndexInfo( SSConnection con, String table, boolean unique) throws SQLException {","\t\tList rows = new ArrayList();","\t\tStrings tables = getTables(table);","\t\tShort type = Utils.getShort( DatabaseMetaData.tableIndexOther );","\t\tfor(int t=0; t\<tables.size(); t++){","    \t\tString tableName = tables.get(t);","    \t\tTableView tab = getTableView( con, tableName);","\t\t\tif(!(tab instanceof Table)) continue;","\t\t\tIndexDescriptions indexes = ((Table)tab).indexes;","\t\t\tfor(int i=0; i\<indexes.size(); i++){","\t\t\t\tIndexDescription index = indexes.get(i);","\t\t\t\tStrings columns = index.getColumns();","\t\t\t\tfor(int c=0; c\<columns.size(); c++){","\t\t\t\t\tObject[] row = new Object[13];","\t\t\t\t\trow[0] = getName(); \t\t\t","\t\t\t\t\trow[2] = tableName;\t\t\t\t","\t\t\t\t\trow[3] = Boolean.valueOf(!index.isUnique());","\t\t\t\t\trow[5] = index.getName();\t\t","\t\t\t\t\trow[6] = type;\t\t\t\t\t","\t\t\t\t\trow[7] = Utils.getShort(c+1);\t","\t\t\t\t\trow[8] = columns.get(c);\t\t","\t\t\t\t\trows.add(row);","\t\t\t\t}","\t\t\t}","    \t}","\t\tObject[][] result = new Object[rows.size()][];","\t\trows.toArray(result);","\t\treturn result;","\t}","}"],|project://smallsql/src/smallsql/database/DateTime.java|:["package smallsql.database;","import java.sql.*;","import java.text.DateFormatSymbols;","import java.util.Calendar;","import java.util.TimeZone;","import smallsql.database.language.Language;","public final class DateTime implements Mutable{","\tlong time;","\tprivate int dataType = SQLTokenizer.TIMESTAMP;","\tstatic final int[] MONTH_DAYS = {0,31,59,90,120,151,181,212,243,273,304,334}; ","\tprivate static final String[] SHORT_MONTHS = new DateFormatSymbols().getShortMonths();","\tDateTime(long time, int dataType){","\t\tswitch(dataType){","        case SQLTokenizer.SMALLDATETIME:","            int seconds = (int)(time % 60000);","            if(seconds \< 0){","                seconds += 60000;","            }","            time -= seconds;","            break;","\t\tcase SQLTokenizer.TIME:","\t\t\ttime %= 86400000;","\t\t\tbreak;","\t\tcase SQLTokenizer.DATE:","\t\t\tint millis = (int)(time % 86400000);","\t\t\tif(millis \< 0)","\t\t\t\tmillis += 86400000;","\t\t\ttime -= millis;","\t\t\tbreak;","\t\t}","\t\tthis.time = time;","\t\tthis.dataType = dataType;","\t}","\tstatic long calcMillis(Details details){","\t\treturn calcMillis(details.year, details.month, details.day, details.hour, details.minute, details.second, details.millis);","\t}","\tstatic long calcMillis(int year, int month, final int day, final int hour, final int minute, final int second, final int millis){","\t\tlong result = millis;","\t\tresult += second * 1000;","\t\tresult += minute * 60000;","\t\tresult += hour * 3600000;","\t\tresult += (day-1) * 86400000L;","\t\tif(month \> 11){","\t\t\tyear += month / 12;","\t\t\tmonth %= 12;","\t\t}","\t\tresult += MONTH_DAYS[month] * 86400000L;","\t\tresult += (year - 1970) * 31536000000L; ","\t\tresult += ((year/4) - (year/100) + (year/400) - 477) * 86400000L;","\t\tif(month\<2 && year % 4 == 0 && (year%100 != 0 || year%400 == 0))","\t\t\tresult -= 86400000L;","\t\treturn result;","\t}","\tstatic long now(){\t","\t\treturn removeDateTimeOffset( System.currentTimeMillis() );","\t}","\tstatic int dayOfWeek(long time){","\t\treturn (int)((time / 86400000 + 3) % 7);","\t}","\tstatic long parse(java.util.Date date){","\t\tlong t = date.getTime();","\t\treturn removeDateTimeOffset(t);","\t}","\tstatic DateTime valueOf(java.util.Date date){","\t\tif(date == null) return null;","\t\tint type;","\t\tif(date instanceof java.sql.Date)","\t\t\ttype = SQLTokenizer.DATE;","\t\telse","\t\tif(date instanceof java.sql.Time)","\t\t\ttype = SQLTokenizer.TIME;","\t\telse","\t\t\ttype = SQLTokenizer.TIMESTAMP;","\t\treturn new DateTime( parse(date), type);","\t}","\tstatic DateTime valueOf(java.sql.Date date){","\t\tif(date == null) return null;","\t\treturn new DateTime( parse(date), SQLTokenizer.DATE);","\t}","\tstatic DateTime valueOf(java.sql.Time date){","\t\tif(date == null) return null;","\t\treturn new DateTime( parse(date), SQLTokenizer.TIME);","\t}","\tstatic DateTime valueOf(java.sql.Timestamp date){","\t\tif(date == null) return null;","\t\treturn new DateTime( parse(date), SQLTokenizer.TIMESTAMP);","\t}","\tstatic DateTime valueOf(String date, int dataType) throws SQLException{","\t\tif(date == null) return null;","\t\treturn new DateTime( parse(date), dataType);","\t}","\tstatic long parse(final String datetime) throws SQLException{","\t\ttry{","\t\t\tfinal int length = datetime.length();","\t\t\tfinal int year;","\t\t\tfinal int month;","\t\t\tfinal int day;","\t\t\tfinal int hour;","\t\t\tfinal int minute;","\t\t\tfinal int second;","\t\t\tfinal int millis;","\t\t\tint idx1 = 0;","\t\t\tint idx2 = datetime.indexOf(\'-\');","\t\t\tif(idx2 \> 0){","\t\t\t\tyear = Integer.parseInt(datetime.substring(idx1, idx2).trim());","\t\t\t\tidx1 = idx2+1;","\t\t\t\tidx2 = datetime.indexOf(\'-\', idx1);","\t\t\t\tmonth = Integer.parseInt(datetime.substring(idx1, idx2).trim())-1;","\t\t\t\tidx1 = idx2+1;","\t\t\t\tidx2 = datetime.indexOf(\' \', idx1);","\t\t\t\tif(idx2 \< 0) idx2 = datetime.length();","\t\t\t\tday = Integer.parseInt(datetime.substring(idx1, idx2).trim());","\t\t\t}else{","\t\t\t\tyear  = 1970;","\t\t\t\tmonth = 0;","\t\t\t\tday   = 1;","\t\t\t}","\t\t\tidx1 = idx2+1;","\t\t\tidx2 = datetime.indexOf(\':\', idx1);","\t\t\tif(idx2\>0){","\t\t\t\thour = Integer.parseInt(datetime.substring(idx1, idx2).trim());","\t\t\t\tidx1 = idx2+1;","\t\t\t\tidx2 = datetime.indexOf(\':\', idx1);","\t\t\t\tminute = Integer.parseInt(datetime.substring(idx1, idx2).trim());","\t\t\t\tidx1 = idx2+1;","\t\t\t\tidx2 = datetime.indexOf(\'.\', idx1);","\t\t\t\tif(idx2 \< 0) idx2 = datetime.length();","\t\t\t\tsecond = Integer.parseInt(datetime.substring(idx1, idx2).trim());","\t\t\t\tidx1 = idx2+1;","\t\t\t\tif(idx1 \< length){","\t\t\t\t\tString strMillis = datetime.substring(idx1).trim();","\t\t\t\t\tswitch(strMillis.length()){","\t\t\t\t\t\tcase 1:","\t\t\t\t\t\t\tmillis = Integer.parseInt(strMillis) * 100;","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase 2:","\t\t\t\t\t\t\tmillis = Integer.parseInt(strMillis) * 10;","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase 3:","\t\t\t\t\t\t\tmillis = Integer.parseInt(strMillis);","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tdefault:","\t\t\t\t\t\t\tmillis = Integer.parseInt(strMillis.substring(0,3));","\t\t\t\t\t}","\t\t\t\t}else","\t\t\t\t\tmillis = 0;","\t\t\t}else{","\t\t\t\thour   = 0;","\t\t\t\tminute = 0;","\t\t\t\tsecond = 0;","\t\t\t\tmillis = 0;\t\t\t\t","\t\t\t}","            if(idx1 == 0 && length \> 0){","                throw SmallSQLException.create(Language.DATETIME_INVALID);","            }","            if(month \>= 12){","                throw SmallSQLException.create(Language.MONTH_TOOLARGE, datetime );","            }","            if(day \>= 32){","                throw SmallSQLException.create(Language.DAYS_TOOLARGE, datetime );","            }","            if(day == 31){","                switch(month){","                case 1:","                case 3:","                case 5:","                case 8:","                case 10:","                    throw SmallSQLException.create(Language.DAYS_TOOLARGE, datetime );","                }","            }","            if(month == 1){","                if(day == 30){","                    throw SmallSQLException.create(Language.DAYS_TOOLARGE, datetime );","                }","                if(day == 29){","                    if(!isLeapYear(year)){","                        throw SmallSQLException.create(Language.DAYS_TOOLARGE, datetime );","                    }","                }","            }","            if(hour \>= 24){","                throw SmallSQLException.create(Language.HOURS_TOOLARGE, datetime );","            }","            if(minute \>= 60){","                throw SmallSQLException.create(Language.MINUTES_TOOLARGE, datetime );","            }","            if(second \>= 60){","                throw SmallSQLException.create(Language.SECS_TOOLARGE, datetime );","            }","            if(millis \>= 1000){","                throw SmallSQLException.create(Language.MILLIS_TOOLARGE, datetime );","            }","\t\t\treturn calcMillis(year, month, day, hour, minute, second, millis);","        }catch(SQLException ex){","            throw ex;","\t\t}catch(Throwable ex){","\t\t\tthrow SmallSQLException.createFromException(Language.DATETIME_INVALID, datetime, ex );","\t\t}","\t}","\tlong getTimeMillis(){","\t\treturn time;","\t}","\tint getDataType(){","\t\treturn dataType;","\t}","\tpublic String toString(){","\t\tDetails details = new Details(time);","\t\tStringBuffer buf = new StringBuffer();","\t\tif(dataType != SQLTokenizer.TIME){","\t\t\tformatNumber( details.year,  4, buf );","\t\t\tbuf.append(\'-\');","\t\t\tformatNumber( details.month + 1, 2, buf );","\t\t\tbuf.append(\'-\');","\t\t\tformatNumber( details.day,   2, buf );","\t\t}","\t\tif(dataType != SQLTokenizer.DATE){","\t\t\tif(buf.length() \> 0) buf.append(\' \');","\t\t\tformatNumber( details.hour,  2, buf );","\t\t\tbuf.append(\':\');","\t\t\tformatNumber( details.minute, 2, buf );","\t\t\tbuf.append(\':\');","\t\t\tformatNumber( details.second, 2, buf );","\t\t}","\t\tswitch(dataType){","        case SQLTokenizer.TIMESTAMP:","        case SQLTokenizer.SMALLDATETIME:","\t\t\tbuf.append(\'.\');","\t\t\tformatMillis( details.millis, buf );","\t\t}","\t\treturn buf.toString();","\t}","    public boolean equals(Object obj){","        if(!(obj instanceof DateTime)) return false;","        DateTime value = (DateTime)obj;","        return value.time == time && value.dataType == dataType;","    }","\tString toString(int style){","\t\tif(style \< 0)","\t\t\treturn toString();","\t\tDetails details = new Details(time);","\t\tStringBuffer buf = new StringBuffer();","\t\tswitch(style){","\t\t\tcase 0:","\t\t\tcase 100: ","\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);","\t\t\t\tbuf.append(\' \');","\t\t\t\tformatNumber( details.day, 2, buf);","\t\t\t\tbuf.append(\' \');","\t\t\t\tformatNumber( details.year, 4, buf);","\t\t\t\tbuf.append(\' \');","\t\t\t\tformatHour12( details.hour, buf );","\t\t\t\tbuf.append(\':\');","\t\t\t\tformatNumber( details.minute, 2, buf);","\t\t\t\tbuf.append( details.hour \< 12 ? \"AM\" : \"PM\" );","\t\t\t\treturn buf.toString();","\t\t\tcase 1:   ","\t\t\t\tformatNumber( details.month+1, 2, buf);","\t\t\t\tbuf.append(\'/\');","\t\t\t\tformatNumber( details.day, 2, buf);","\t\t\t\tbuf.append(\'/\');","\t\t\t\tformatNumber( details.year % 100, 2, buf);","\t\t\t\treturn buf.toString();","\t\t\tcase 101:   ","\t\t\t\tformatNumber( details.month+1, 2, buf);","\t\t\t\tbuf.append(\'/\');","\t\t\t\tformatNumber( details.day, 2, buf);","\t\t\t\tbuf.append(\'/\');","\t\t\t\tformatNumber( details.year, 4, buf);","\t\t\t\treturn buf.toString();","\t\t\tcase 2: ","\t\t\t\tformatNumber( details.year % 100, 2, buf);","\t\t\t\tbuf.append(\'.\');","\t\t\t\tformatNumber( details.month+1, 2, buf);","\t\t\t\tbuf.append(\'.\');","\t\t\t\tformatNumber( details.day, 2, buf);","\t\t\t\treturn buf.toString();","\t\t\tcase 102: ","\t\t\t\tformatNumber( details.year, 4, buf);","\t\t\t\tbuf.append(\'.\');","\t\t\t\tformatNumber( details.month+1, 2, buf);","\t\t\t\tbuf.append(\'.\');","\t\t\t\tformatNumber( details.day, 2, buf);","\t\t\t\treturn buf.toString();","\t\t\tcase 3: ","\t\t\t\tformatNumber( details.day, 2, buf);","\t\t\t\tbuf.append(\'/\');","\t\t\t\tformatNumber( details.month+1, 2, buf);","\t\t\t\tbuf.append(\'/\');","\t\t\t\tformatNumber( details.year % 100, 2, buf);","\t\t\t\treturn buf.toString();","\t\t\tcase 103: ","\t\t\t\tformatNumber( details.day, 2, buf);","\t\t\t\tbuf.append(\'/\');","\t\t\t\tformatNumber( details.month+1, 2, buf);","\t\t\t\tbuf.append(\'/\');","\t\t\t\tformatNumber( details.year, 4, buf);","\t\t\t\treturn buf.toString();","\t\t\tcase 4: ","\t\t\t\tformatNumber( details.day, 2, buf);","\t\t\t\tbuf.append(\'.\');","\t\t\t\tformatNumber( details.month+1, 2, buf);","\t\t\t\tbuf.append(\'.\');","\t\t\t\tformatNumber( details.year % 100, 2, buf);","\t\t\t\treturn buf.toString();","\t\t\tcase 104: ","\t\t\t\tformatNumber( details.day, 2, buf);","\t\t\t\tbuf.append(\'.\');","\t\t\t\tformatNumber( details.month+1, 2, buf);","\t\t\t\tbuf.append(\'.\');","\t\t\t\tformatNumber( details.year, 4, buf);","\t\t\t\treturn buf.toString();","\t\t\tcase 5: ","\t\t\t\tformatNumber( details.day, 2, buf);","\t\t\t\tbuf.append(\'-\');","\t\t\t\tformatNumber( details.month+1, 2, buf);","\t\t\t\tbuf.append(\'-\');","\t\t\t\tformatNumber( details.year % 100, 2, buf);","\t\t\t\treturn buf.toString();","\t\t\tcase 105: ","\t\t\t\tformatNumber( details.day, 2, buf);","\t\t\t\tbuf.append(\'-\');","\t\t\t\tformatNumber( details.month+1, 2, buf);","\t\t\t\tbuf.append(\'-\');","\t\t\t\tformatNumber( details.year, 4, buf);","\t\t\t\treturn buf.toString();","\t\t\tcase 6: ","\t\t\t\tformatNumber( details.day, 2, buf);","\t\t\t\tbuf.append(\' \');","\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);","\t\t\t\tbuf.append(\' \');","\t\t\t\tformatNumber( details.year % 100, 2, buf);","\t\t\t\treturn buf.toString();","\t\t\tcase 106: ","\t\t\t\tformatNumber( details.day, 2, buf);","\t\t\t\tbuf.append(\' \');","\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);","\t\t\t\tbuf.append(\' \');","\t\t\t\tformatNumber( details.year, 4, buf);","\t\t\t\treturn buf.toString();","\t\t\tcase 7: ","\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);","\t\t\t\tbuf.append(\' \');","\t\t\t\tformatNumber( details.day, 2, buf);","\t\t\t\tbuf.append(\',\');","\t\t\t\tbuf.append(\' \');","\t\t\t\tformatNumber( details.year % 100, 2, buf);","\t\t\t\treturn buf.toString();","\t\t\tcase 107: ","\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);","\t\t\t\tbuf.append(\' \');","\t\t\t\tformatNumber( details.day, 2, buf);","\t\t\t\tbuf.append(\',\');","\t\t\t\tbuf.append(\' \');","\t\t\t\tformatNumber( details.year, 4, buf);","\t\t\t\treturn buf.toString();","\t\t\tcase 8: ","\t\t\tcase 108:","\t\t\t\tformatNumber( details.hour, 2, buf);","\t\t\t\tbuf.append(\':\');","\t\t\t\tformatNumber( details.minute, 2, buf);","\t\t\t\tbuf.append(\':\');","\t\t\t\tformatNumber( details.second, 2, buf);","\t\t\t\treturn buf.toString();","\t\t\tcase 9:","\t\t\tcase 109: ","\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);","\t\t\t\tbuf.append(\' \');","\t\t\t\tformatNumber( details.day, 2, buf);","\t\t\t\tbuf.append(\' \');","\t\t\t\tformatNumber( details.year, 4, buf);","\t\t\t\tbuf.append(\' \');","\t\t\t\tformatHour12( details.hour, buf );","\t\t\t\tbuf.append(\':\');","\t\t\t\tformatNumber( details.minute, 2, buf);","\t\t\t\tbuf.append(\':\');","\t\t\t\tformatNumber( details.second, 2, buf);","\t\t\t\tbuf.append(\':\');","\t\t\t\tformatMillis( details.millis, buf);","\t\t\t\tbuf.append( details.hour \< 12 ? \"AM\" : \"PM\" );","\t\t\t\treturn buf.toString();","\t\t\tcase 10: ","\t\t\t\tformatNumber( details.month+1, 2, buf);","\t\t\t\tbuf.append(\'-\');","\t\t\t\tformatNumber( details.day, 2, buf);","\t\t\t\tbuf.append(\'-\');","\t\t\t\tformatNumber( details.year % 100, 2, buf);","\t\t\t\treturn buf.toString();","\t\t\tcase 110: ","\t\t\t\tformatNumber( details.month+1, 2, buf);","\t\t\t\tbuf.append(\'-\');","\t\t\t\tformatNumber( details.day, 2, buf);","\t\t\t\tbuf.append(\'-\');","\t\t\t\tformatNumber( details.year, 4, buf);","\t\t\t\treturn buf.toString();","\t\t\tcase 11: ","\t\t\t\tformatNumber( details.year % 100, 2, buf);","\t\t\t\tbuf.append(\'/\');","\t\t\t\tformatNumber( details.month+1, 2, buf);","\t\t\t\tbuf.append(\'/\');","\t\t\t\tformatNumber( details.day, 2, buf);","\t\t\t\treturn buf.toString();","\t\t\tcase 111: ","\t\t\t\tformatNumber( details.year, 4, buf);","\t\t\t\tbuf.append(\'/\');","\t\t\t\tformatNumber( details.month+1, 2, buf);","\t\t\t\tbuf.append(\'/\');","\t\t\t\tformatNumber( details.day, 2, buf);","\t\t\t\treturn buf.toString();","\t\t\tcase 12: ","\t\t\t\tformatNumber( details.year % 100, 2, buf);","\t\t\t\tformatNumber( details.month+1, 2, buf);","\t\t\t\tformatNumber( details.day, 2, buf);","\t\t\t\treturn buf.toString();","\t\t\tcase 112: ","\t\t\t\tformatNumber( details.year, 4, buf);","\t\t\t\tformatNumber( details.month+1, 2, buf);","\t\t\t\tformatNumber( details.day, 2, buf);","\t\t\t\treturn buf.toString();","\t\t\tcase 13:","\t\t\tcase 113: ","\t\t\t\tformatNumber( details.day, 2, buf);","\t\t\t\tbuf.append(\' \');","\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);","\t\t\t\tbuf.append(\' \');","\t\t\t\tformatNumber( details.year, 4, buf);","\t\t\t\tbuf.append(\' \');","\t\t\t\tformatNumber( details.hour, 2, buf );","\t\t\t\tbuf.append(\':\');","\t\t\t\tformatNumber( details.minute, 2, buf);","\t\t\t\tbuf.append(\':\');","\t\t\t\tformatNumber( details.second, 2, buf);","\t\t\t\tbuf.append(\':\');","\t\t\t\tformatMillis( details.millis, buf);","\t\t\t\treturn buf.toString();","\t\t\tcase 14:","\t\t\tcase 114: ","\t\t\t\tformatNumber( details.hour, 2, buf);","\t\t\t\tbuf.append(\':\');","\t\t\t\tformatNumber( details.minute, 2, buf);","\t\t\t\tbuf.append(\':\');","\t\t\t\tformatNumber( details.second, 2, buf);","\t\t\t\tbuf.append(\':\');","\t\t\t\tformatMillis( details.millis, buf );","\t\t\t\treturn buf.toString();","\t\t\tcase 20:","\t\t\tcase 120: ","\t\t\t\tformatNumber( details.year, 4, buf);","\t\t\t\tbuf.append(\'-\');","\t\t\t\tformatNumber( details.month+1, 2, buf);","\t\t\t\tbuf.append(\'-\');","\t\t\t\tformatNumber( details.day, 2, buf);","\t\t\t\tbuf.append(\' \');","\t\t\t\tformatNumber( details.hour, 2, buf);","\t\t\t\tbuf.append(\':\');","\t\t\t\tformatNumber( details.minute, 2, buf);","\t\t\t\tbuf.append(\':\');","\t\t\t\tformatNumber( details.second, 2, buf);","\t\t\t\treturn buf.toString();","\t\t\tcase 21:","\t\t\tcase 121: ","\t\t\t\tformatNumber( details.year, 4, buf);","\t\t\t\tbuf.append(\'-\');","\t\t\t\tformatNumber( details.month+1, 2, buf);","\t\t\t\tbuf.append(\'-\');","\t\t\t\tformatNumber( details.day, 2, buf);","\t\t\t\tbuf.append(\' \');","\t\t\t\tformatNumber( details.hour, 2, buf);","\t\t\t\tbuf.append(\':\');","\t\t\t\tformatNumber( details.minute, 2, buf);","\t\t\t\tbuf.append(\':\');","\t\t\t\tformatNumber( details.second, 2, buf);","\t\t\t\tbuf.append(\'.\');","\t\t\t\tformatMillis( details.millis, buf );","\t\t\t\treturn buf.toString();","\t\t\tcase 26:","\t\t\tcase 126: ","\t\t\t\tformatNumber( details.year, 4, buf);","\t\t\t\tbuf.append(\'-\');","\t\t\t\tformatNumber( details.month+1, 2, buf);","\t\t\t\tbuf.append(\'-\');","\t\t\t\tformatNumber( details.day, 2, buf);","\t\t\t\tbuf.append(\'T\');","\t\t\t\tformatNumber( details.hour, 2, buf);","\t\t\t\tbuf.append(\':\');","\t\t\t\tformatNumber( details.minute, 2, buf);","\t\t\t\tbuf.append(\':\');","\t\t\t\tformatNumber( details.second, 2, buf);","\t\t\t\tbuf.append(\'.\');","\t\t\t\tformatMillis( details.millis, buf );","\t\t\t\treturn buf.toString();","\t\t\tcase 130: ","\t\t\t\tformatNumber( details.day, 2, buf);","\t\t\t\tbuf.append(\' \');","\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);","\t\t\t\tbuf.append(\' \');","\t\t\t\tformatNumber( details.year, 4, buf);","\t\t\t\tbuf.append(\' \');","\t\t\t\tformatHour12( details.hour, buf );","\t\t\t\tbuf.append(\':\');","\t\t\t\tformatNumber( details.minute, 2, buf);","\t\t\t\tbuf.append(\':\');","\t\t\t\tformatNumber( details.second, 2, buf);","\t\t\t\tbuf.append(\':\');","\t\t\t\tformatMillis( details.millis, buf);","\t\t\t\tbuf.append( details.hour \< 12 ? \"AM\" : \"PM\" );","\t\t\t\treturn buf.toString();","\t\t\tcase 131: ","\t\t\t\tformatNumber( details.day, 2, buf);","\t\t\t\tbuf.append(\'/\');","\t\t\t\tformatNumber( details.month+1, 2, buf);","\t\t\t\tbuf.append(\'/\');","\t\t\t\tformatNumber( details.year % 100, 2, buf);","\t\t\t\tbuf.append(\' \');","\t\t\t\tformatNumber( details.hour, 2, buf);","\t\t\t\tbuf.append(\':\');","\t\t\t\tformatNumber( details.minute, 2, buf);","\t\t\t\tbuf.append(\':\');","\t\t\t\tformatNumber( details.second, 2, buf);","\t\t\t\tbuf.append(\':\');","\t\t\t\tformatMillis( details.millis, buf );","\t\t\t\treturn buf.toString();","\t\t\tdefault:","\t\t\t\treturn toString();","\t\t}","\t}","\tprivate final static void formatNumber(int value, int digitCount, StringBuffer buf){","\t\tbuf.setLength(buf.length() + digitCount);","\t\tif(value \< 0) value = - value;","\t\tfor(int i=1; i\<=digitCount; i++){","\t\t\tbuf.setCharAt( buf.length()-i, Utils.digits[ value % 10 ] );","\t\t\tvalue /= 10;","\t\t}","\t}","\tprivate final static void formatMillis(int millis,  StringBuffer buf){","\t\tbuf.append(Utils.digits[ (millis / 100) % 10 ]);","\t\tint value = millis % 100;","\t\tif(value != 0){","\t\t\tbuf.append(Utils.digits[ value / 10 ]);","\t\t\tvalue %= 10;","\t\t\tif(value != 0)","\t\t\t\tbuf.append(Utils.digits[ value ]);","\t\t}","\t}","\tprivate final static void formatHour12(int hour,  StringBuffer buf){","\t\thour %= 12;","\t\tif(hour == 0) hour = 12;","\t\tformatNumber( hour, 2, buf );","\t}","\tprivate final static long addDateTimeOffset(long datetime){","        return addDateTimeOffset( datetime, TimeZone.getDefault());","\t}","    final static long addDateTimeOffset(long datetime, TimeZone timezone){","        int t = (int)(datetime % 86400000);","        int d = (int)(datetime / 86400000);","        if(t\<0){","            t += 86400000;","            d--;","        }              ","        int millis = t % 1000;","        t /= 1000;","        synchronized(cal){","            cal.setTimeZone( timezone );","            cal.set( 1970, 0, d+1, 0, 0, t );","            cal.set( Calendar.MILLISECOND, millis );","            return cal.getTimeInMillis();","        }","    }","\tprivate static long removeDateTimeOffset(long datetime){","\t\tsynchronized(cal){","\t\t\tcal.setTimeZone( TimeZone.getDefault() );","\t\t\tcal.setTimeInMillis( datetime );","\t\t\treturn datetime + cal.get( Calendar.ZONE_OFFSET) + cal.get( Calendar.DST_OFFSET);","\t\t}","\t}","\tstatic Timestamp getTimestamp(long time){","\t\treturn new Timestamp( DateTime.addDateTimeOffset(time) ); ","\t}","\tstatic Time getTime(long time){","\t\treturn new Time( DateTime.addDateTimeOffset(time) ); ","\t}","\tstatic Date getDate(long time){","\t\treturn new Date( DateTime.addDateTimeOffset(time) ); ","\t}","\tpublic Object getImmutableObject(){","\t\tswitch(dataType){","\t\t\tcase SQLTokenizer.DATE:","\t\t\t\treturn getDate( time );","\t\t\tcase SQLTokenizer.TIME:","\t\t\t\treturn getTime( time );","\t\t\tdefault:","\t\t\t\treturn getTimestamp( time );","\t\t}","\t}","\tstatic class Details{","\t\tint year;","\t\tint month;","\t\tint dayofyear;","\t\tint day;","\t\tint hour;","\t\tint minute;","\t\tint second;","\t\tint millis;","\t\tDetails(long time){","\t\t\tint t = (int)(time % 86400000);","\t\t\tint d = (int)(time / 86400000);","\t\t\tif(t\<0){","\t\t\t\tt += 86400000;","\t\t\t\td--;","\t\t\t}\t\t\t\t","\t\t\tmillis = t % 1000;","\t\t\tt /= 1000;","\t\t\tsecond = t % 60;","\t\t\tt /= 60;","\t\t\tminute = t % 60;","\t\t\tt /= 60;","\t\t\thour = t % 24;","\t\t\tyear = 1970 - (int)(t / 365.2425);","\t\t\tboolean isLeap;","\t\t\tdo{","\t\t\t\tisLeap = false;","\t\t\t\tdayofyear = day = d - ((year - 1970)*365 + (year/4) - (year/100) + (year/400) - 477);","\t\t\t\tif(isLeapYear(year)){","\t\t\t\t\tif(day \< 59){","\t\t\t\t\t\tday++;","\t\t\t\t\t\tisLeap = true;","\t\t\t\t\t}","\t\t\t\t\tdayofyear++;","\t\t\t\t}","\t\t\t\tif(day \< 0){","\t\t\t\t\tyear--;","\t\t\t\t\tcontinue;","\t\t\t\t}else","\t\t\t\tif(day \>= 365){","\t\t\t\t\tyear++;","\t\t\t\t\tcontinue;","\t\t\t\t}","\t\t\t\tbreak;","\t\t\t}while(true);","\t\t\tif(isLeap && day == 59){","\t\t\t\tmonth = 1;","\t\t\t\tday   = 29;","\t\t\t}else{","\t\t\t\tfor(int m=11; m\>=0; m--){","\t\t\t\t\tif(MONTH_DAYS[m] \<= day){","\t\t\t\t\t\tmonth = m;","\t\t\t\t\t\tday   = day - MONTH_DAYS[m] + 1;","\t\t\t\t\t\tbreak;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t}","\t}","    static boolean isLeapYear(int year){","        return year % 4 == 0 && (year%100 != 0 || year%400 == 0);","    }","\tprivate static final Calendar cal = Calendar.getInstance();","}"],|project://smallsql/src/smallsql/database/TableStorePageInsert.java|:["package smallsql.database;","import java.sql.*;","class TableStorePageInsert extends TableStorePage {","\tfinal private StorePageLink link = new StorePageLink();","\tTableStorePageInsert(SSConnection con, Table table, int lockType){","\t\tsuper( con, table, lockType, -1);","\t\tlink.page = this;","\t\tlink.filePos = fileOffset;","\t}","\tfinal long commit() throws SQLException{","\t\tlong result = super.commit();","\t\tlink.filePos = fileOffset;","\t\tlink.page = null;","\t\treturn result;","\t}","\tfinal StorePageLink getLink(){","\t\treturn link;","\t}","}"],|project://smallsql/src/smallsql/junit/BasicTestCase.java|:["package smallsql.junit;","import junit.framework.*;","import java.io.*;","import java.math.BigDecimal;","import java.sql.*;","import java.text.DateFormatSymbols;","public class BasicTestCase extends TestCase {","\tprotected static final String[] MONTHS = ","\t\tnew DateFormatSymbols().getShortMonths();","\tpublic BasicTestCase(){","        super();","    }","    public BasicTestCase(String name){","        super(makeNameValid(name));","    }","    private static String makeNameValid(String name){","    \treturn name.replace(\',\' , \';\').replace(\'(\',\'{\');","    }","    void dropTable(Connection con, String name) throws SQLException{","\t\ttry {","\t\t\tStatement st = con.createStatement();","\t\t\tst.execute(\"drop table \"+name);","\t\t\tst.close();","\t\t} catch (SQLException e) {","            String msg = e.getMessage();","            if(msg.indexOf(\"[SmallSQL]Table\")==0 && msg.indexOf(name)\>0 && msg.indexOf(\"can\'t be dropped.\")\>0 ){","                return;","            }","            throw e;","        }","    }","    void dropView(Connection con, String name){","\t\ttry {","\t\t\tStatement st = con.createStatement();","\t\t\tst.execute(\"drop view \"+name);","\t\t\tst.close();","\t\t} catch (SQLException e) {}","    }","\tpublic void assertRSMetaData( ResultSet rs, String[] colNames, int[] types) throws Exception{","\t\tResultSetMetaData rm = rs.getMetaData();","\t\tint count = rm.getColumnCount();","\t\tassertEquals( \"Column count:\", colNames.length, count);","\t\tfor(int i=1; i\<=count; i++){","\t\t\tassertEquals(\"Col \"+i+\" name\", colNames[i-1], rm.getColumnName(i));","\t\t\tassertEquals(\"Col \"+i+\" label\", colNames[i-1], rm.getColumnLabel(i));","\t\t\tassertEquals(\"Col \"+i+\" type\", types   [i-1], rm.getColumnType(i));","\t\t\tswitch(types[i-1]){","\t\t\t\tcase Types.VARCHAR:","\t\t\t\t\tassertTrue  (\"Wrong Precision (\" + rm.getColumnTypeName(i) + \") for Column \"+i+\": \"+rm.getPrecision(i), rm.getPrecision(i) \> 0);","\t\t\t\t\tbreak;","\t\t\t\tcase Types.INTEGER:","\t\t\t\t\tassertTrue  (\"Wrong Precision (\" + rm.getColumnTypeName(i) + \") for Column \"+i, rm.getPrecision(i) \> 0);","\t\t\t\t\tbreak;","\t\t\t}","\t\t}","\t}","\tprivate final static char[] digits = {\'0\',\'1\',\'2\',\'3\',\'4\',\'5\',\'6\',\'7\',\'8\',\'9\',\'A\',\'B\',\'C\',\'D\',\'E\',\'F\'};","\tprivate static String bytes2hex( byte[] bytes ){","\t\tStringBuffer buf = new StringBuffer(bytes.length \<\< 1);","\t\tfor(int i=0; i\<bytes.length; i++){","\t\t\tbuf.append( digits[ (bytes[i] \>\> 4) & 0x0F ] );","\t\t\tbuf.append( digits[ (bytes[i]     ) & 0x0F ] );","\t\t}","\t\treturn buf.toString();","\t}","\tpublic void assertEqualsObject( String msg, Object obj1, Object obj2 ){","\t\tif(obj1 instanceof byte[]){","\t\t\tif(!java.util.Arrays.equals( (byte[])obj1, (byte[])obj2)){","\t\t\t\tfail(msg + \" expected:\" + bytes2hex((byte[])obj1)+ \" but was:\"+bytes2hex((byte[])obj2));","\t\t\t}","\t\t}else{ ","\t\t\tif(obj1 instanceof BigDecimal)","\t\t\t\tif(((BigDecimal)obj1).compareTo((BigDecimal)obj2) == 0) return;","\t\t\tassertEquals( msg, obj1, obj2);","\t\t}","\t}","    public void assertEqualsObject( String msg, Object obj1, Object obj2, boolean needTrim ){","        if(needTrim && obj1 != null){","            if(obj1 instanceof String) obj1 = ((String)obj1).trim();","            if(obj1 instanceof byte[]){","                byte[] tmp = (byte[])obj1;","                int k=tmp.length-1;","                for(; k\>= 0; k--) if(tmp[k] != 0) break;","                k++;","                byte[] tmp2 = new byte[k];","                System.arraycopy( tmp, 0, tmp2, 0, k);","                obj1 = tmp2;","            }","        }","\t\tif(needTrim && obj2 != null){","\t\t\tif(obj2 instanceof String) obj2 = ((String)obj2).trim();","\t\t\tif(obj2 instanceof byte[]){","\t\t\t\tbyte[] tmp = (byte[])obj2;","\t\t\t\tint k=tmp.length-1;","\t\t\t\tfor(; k\>= 0; k--) if(tmp[k] != 0) break;","\t\t\t\tk++;","\t\t\t\tbyte[] tmp2 = new byte[k];","\t\t\t\tSystem.arraycopy( tmp, 0, tmp2, 0, k);","\t\t\t\tobj2 = tmp2;","\t\t\t}","\t\t}","\t\tassertEqualsObject( msg, obj1, obj2);","    }","\tvoid assertRowCount(int sollCount, String sql ) throws Exception{","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\tResultSet rs = st.executeQuery(sql);","        assertRowCount(sollCount,rs);","    }","    void assertRowCount(int sollCount, ResultSet rs ) throws Exception{","\t\tint colCount = rs.getMetaData().getColumnCount();","\t\tint count = 0;","\t\twhile(rs.next()){","\t\t\tcount++;","\t\t\tfor(int i=1; i\<=colCount; i++){","\t\t\t\trs.getObject(i);","\t\t\t}","\t\t}","\t\tassertEquals( \"Wrong row count\", sollCount, count);","\t\tfor(int i=1; i\<=colCount; i++){","\t\t\ttry{","\t\t\t\tfail( \"Column:\"+i+\" Value:\"+String.valueOf(rs.getObject(i)));","\t\t\t}catch(SQLException e){","                assertSQLException(\"01000\", 0, e);","            }","\t\t}","\t\tassertFalse( \"Scroll after last\", rs.next() );","\t}","    private boolean string2boolean( String val){","        try{","            return Double.parseDouble( val ) != 0;","        }catch(NumberFormatException e){}","        return \"true\".equalsIgnoreCase( val ) || \"yes\".equalsIgnoreCase( val ) || \"t\".equalsIgnoreCase( val );","    }","   \tvoid assertEqualsRsValue(Object obj, String sql) throws Exception{","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\tResultSet rs = st.executeQuery(sql);","\t\tassertTrue( \"No row produce\", rs.next());","        assertEqualsRsValue(obj,rs,false);","    }","    void assertEqualsRsValue(Object obj, ResultSet rs, boolean needTrim) throws Exception{","        String name = rs.getMetaData().getColumnName(1);","\t\tassertEqualsObject( \"Values not identical on read:\", obj, rs.getObject(name), needTrim);","\t\tif(obj instanceof Time){","\t\t\tassertEquals(\"Time is different:\", obj, rs.getTime(name) );","\t\t\tassertEquals(\"Time String is different:\", obj.toString(), rs.getString(name) );","\t\t}","\t\tif(obj instanceof Timestamp){","\t\t\tassertEquals(\"Timestamp is different:\", obj, rs.getTimestamp(name) );","\t\t\tassertEquals(\"Timestamp String is different:\", obj.toString(), rs.getString(name) );","\t\t}","\t\tif(obj instanceof Date){","\t\t\tassertEquals(\"Date is different:\", obj, rs.getDate(name) );","\t\t\tassertEquals(\"Date String is different:\", obj.toString(), rs.getString(name) );","\t\t}","\t\tif(obj instanceof String){","            String str = (String)obj;","            assertEqualsObject(\"String is different:\", str, rs.getString(name), needTrim );","\t\t\tassertEquals(\"String Boolean is different:\", string2boolean(str), rs.getBoolean(name) );","            try{","                assertEquals(\"String Long is different:\", Long.parseLong(str), rs.getLong(name) );","            }catch(NumberFormatException ex){}","            try{","                assertEquals(\"String Integer is different:\", Integer.parseInt(str), rs.getInt(name) );","            }catch(NumberFormatException ex){}","            try{","                assertEquals(\"String Float is different:\", Float.parseFloat(str), rs.getFloat(name), 0.0 );","            }catch(NumberFormatException ex){}","            try{","                assertEquals(\"String Double is different:\", Double.parseDouble(str), rs.getDouble(name), 0.0 );","            }catch(NumberFormatException ex){}","\t\t}","\t\tif(obj instanceof BigDecimal){","            if(!needTrim){","                assertEquals(\"BigDecimal is different:\", obj, rs.getBigDecimal(name) );","                assertEquals(\"Scale is different:\", ((BigDecimal)obj).scale(), rs.getMetaData().getScale(1));","            }","            assertEquals(\"Scale Meta is different:\", rs.getBigDecimal(name).scale(), rs.getMetaData().getScale(1));","\t\t\tBigDecimal big2 = ((BigDecimal)obj).setScale(2,BigDecimal.ROUND_HALF_EVEN);","\t\t\tassertEquals(\"BigDecimal mit scale is different:\", big2, rs.getBigDecimal(name, 2) );","\t\t}","\t\tif(obj instanceof Integer){","\t\t\tassertEquals(\"Scale is different:\", 0, rs.getMetaData().getScale(1));","\t\t}","\t\tif(obj instanceof Number){","            long longValue = ((Number)obj).longValue();","\t\t\tint intValue = ((Number)obj).intValue();","            if(longValue \>= Integer.MAX_VALUE)","                intValue = Integer.MAX_VALUE;","            if(longValue \<= Integer.MIN_VALUE)","                intValue = Integer.MIN_VALUE;","\t\t\tassertEquals(\"int is different:\", intValue, rs.getInt(name) );","\t\t\tassertEquals(\"long is different:\", longValue, rs.getLong(name) );","\t\t\tif(intValue \>= Short.MIN_VALUE && intValue \<= Short.MAX_VALUE)","\t\t\t\tassertEquals(\"short is different:\", (short)intValue, rs.getShort(name) );","\t\t\tif(intValue \>= Byte.MIN_VALUE && intValue \<= Byte.MAX_VALUE)","\t\t\t\tassertEquals(\"byte is different:\", (byte)intValue, rs.getByte(name) );","\t\t\tdouble value = ((Number)obj).doubleValue();","\t\t\tassertEquals(\"Double is different:\", value, rs.getDouble(name),0.0 );","\t\t\tassertEquals(\"Float is different:\", (float)value, rs.getFloat(name),0.0 );","\t\t\tString valueStr = obj.toString();","            if(!needTrim){","                assertEquals(\"Number String is different:\", valueStr, rs.getString(name) );","            }","\t\t\tBigDecimal decimal = Double.isInfinite(value) || Double.isNaN(value) ? null : new BigDecimal(valueStr);","            assertEqualsObject(\"Number BigDecimal is different:\", decimal, rs.getBigDecimal(name) );","\t\t\tassertEquals(\"Number boolean is different:\", value != 0, rs.getBoolean(name) );","\t\t}","\t\tif(obj == null){","\t\t\tassertNull(\"String is different:\", rs.getString(name) );","\t\t\tassertNull(\"Date is different:\", rs.getDate(name) );","\t\t\tassertNull(\"Time is different:\", rs.getTime(name) );","\t\t\tassertNull(\"Timestamp is different:\", rs.getTimestamp(name) );","\t\t\tassertNull(\"BigDecimal is different:\", rs.getBigDecimal(name) );","\t\t\tassertNull(\"BigDecimal with scale is different:\", rs.getBigDecimal(name, 2) );","\t\t\tassertNull(\"Bytes with scale is different:\", rs.getBytes(name) );","\t\t\tassertEquals(\"Double is different:\", 0, rs.getDouble(name),0 );","\t\t\tassertEquals(\"Float is different:\", 0, rs.getFloat(name),0 );","\t\t\tassertEquals(\"Long is different:\", 0, rs.getLong(name) );","\t\t\tassertEquals(\"Int is different:\", 0, rs.getInt(name) );","\t\t\tassertEquals(\"SmallInt is different:\", 0, rs.getShort(name) );","\t\t\tassertEquals(\"TinyInt is different:\", 0, rs.getByte(name) );","\t\t\tassertEquals(\"Boolean is different:\", false, rs.getBoolean(name) );","\t\t}","\t\tif(obj instanceof byte[]){","\t\t    assertTrue(\"Binary should start with 0x\", rs.getString(name).startsWith(\"0x\"));","\t\t}","\t\tResultSetMetaData metaData = rs.getMetaData();","\t\tString className = metaData.getColumnClassName(1);","\t\tassertNotNull( \"ClassName:\", className);","\t\tif(obj != null){","\t\t\tClass gotClass = Class.forName(className);","\t\t\tClass objClass = obj.getClass();","\t\t\tString objClassName = objClass.getName();","\t\t\tint expectedLen = metaData.getColumnDisplaySize(1);","\t\t\tif (gotClass.equals(java.sql.Blob.class)) {","\t\t\t\tassertTrue(","\t\t\t\t\t\"ClassName assignable: \"+className+\"\<-\>\"+objClassName,","\t\t\t\t\tobjClass.equals(new byte[0].getClass()));","\t\t\t\tString message = \"Check DisplaySize: \" + expectedLen + \"!=\" + Integer.MAX_VALUE + \")\";","\t\t\t\tassertTrue( message, expectedLen == Integer.MAX_VALUE );","\t\t\t}","\t\t\telse if (gotClass.equals(java.sql.Clob.class)) { ","\t\t\t\tassertTrue(","\t\t\t\t\t\"ClassName assignable: \"+className+\"\<-\>\"+objClassName,","\t\t\t\t\tobjClass.equals(String.class));","\t\t\t\tString message = \"Check DisplaySize: \" + expectedLen + \"!=\" + Integer.MAX_VALUE + \")\";","\t\t\t\tassertTrue( message, expectedLen == Integer.MAX_VALUE );","\t\t\t}","\t\t\telse {","\t\t\t\tString foundStr = rs.getString(name);","\t\t\t\tassertTrue(\"ClassName assignable: \"+className+\"\<-\>\"+objClassName, gotClass.isAssignableFrom(objClass));","\t\t\t\tassertTrue( \"DisplaySize to small \"+ expectedLen +\"\<\"+foundStr.length()+\" (\" + foundStr + \")\", expectedLen \>= foundStr.length() );","\t\t\t}","\t\t}","   \t}","    void assertSQLException(String sqlstate, int vendorCode, SQLException ex) {","        StringWriter sw = new StringWriter();","        ex.printStackTrace(new PrintWriter(sw));","        assertEquals( \"Vendor Errorcode:\"+sw, vendorCode, ex.getErrorCode() );","        assertEquals( \"SQL State:\"+sw, sqlstate, ex.getSQLState());","    }","\tvoid printSQL(String sql) throws SQLException{","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\tResultSet rs = st.executeQuery(sql);","\t\tprintRS( rs );","\t}","   \tvoid printRS(ResultSet rs) throws SQLException{","   \t\tint count = rs.getMetaData().getColumnCount();","\t\twhile(rs.next()){ ","\t\t\tfor(int i=1; i\<=count; i++){","\t\t\t\tSystem.out.print(rs.getString(i) + \'\\t\');","\t\t\t} ","\t\t\tSystem.out.println();","\t\t}","   \t}","   \tstatic String getMonth3L(int ordinal) {","   \t\treturn MONTHS[ordinal - 1];","   \t}","}"],|project://smallsql/src/smallsql/database/CommandSelect.java|:["package smallsql.database;","import java.sql.*;","import smallsql.database.language.Language;","class CommandSelect extends Command{","    private DataSources tables; ","\tprivate Expression where;","    RowSource from;","    private Expressions groupBy;","    private Expression having;","    private Expressions orderBy;","    private boolean isAggregateFunction;","    private int maxRows = -1;","    private boolean isDistinct; ","    CommandSelect(Logger log){","\t\tsuper(log);","    }","\tCommandSelect(Logger log, Expressions columnExpressions){","\t\tsuper(log, columnExpressions);","\t}","    boolean compile(SSConnection con) throws Exception{","        boolean needCompile = false;","        if(tables != null){","            for(int i=0; i\<tables.size(); i++){","\t\t\t\tDataSource fromEntry = tables.get(i);","                needCompile |= fromEntry.init( con );","            }","        }","\t\tif(from == null){","\t\t\tfrom = new NoFromResult();","\t\t\ttables = new DataSources();","\t\t\tneedCompile = true;","\t\t}","        if(!needCompile) return false;","        for(int i=0; i\<columnExpressions.size(); i++){","            Expression col = columnExpressions.get(i);","            if(col.getAlias() == null){","                col.setAlias(\"col\" + (i+1));","            }","            if(col.getType() != Expression.NAME){","                compileLinkExpressionParams(col);","                continue;","            }","            ExpressionName expr = (ExpressionName)col;","            if(\"*\".equals( expr.getName() )){","                String tableAlias = expr.getTableAlias();","                if(tableAlias != null){","                    int t=0;","                    for(; t\<tables.size(); t++){","\t\t\t\t\t\tDataSource fromEntry = tables.get(t);","                        if(tableAlias.equalsIgnoreCase( fromEntry.getAlias() )){","                            TableView table = fromEntry.getTableView();","                            columnExpressions.remove(i);","                            i = compileAdd_All_Table_Columns( fromEntry, table, i ) - 1;","                            break;","                        }","                    }","                    if(t==tables.size()) throw SmallSQLException.create(Language.COL_WRONG_PREFIX, new Object[] {tableAlias});","                }else{","                    columnExpressions.remove(i);","                    for(int t=0; t\<tables.size(); t++){","\t\t\t\t\t\tDataSource fromEntry = tables.get(t);","                        TableView table = fromEntry.getTableView();","                        i = compileAdd_All_Table_Columns( fromEntry, table, i );","                    }","                    i--;","                }","            }else{","                compileLinkExpressionName( expr );","            }","        }","        if(where != null) compileLinkExpression( where );","        if(having != null) compileLinkExpression( having );","        if(orderBy != null) {","            for(int i=0; i\<orderBy.size(); i++){","            \tcompileLinkExpression( orderBy.get(i));","            }","        }","\t\tif(groupBy != null){","\t\t\tfor(int i=0; i\<groupBy.size(); i++){","\t\t\t\tcompileLinkExpression( groupBy.get(i) );","\t\t\t}","\t\t}","        if(from instanceof Join){","            compileJoin( (Join)from );","        }","        if(where != null){","        \tfrom = new Where( from, where );","        }","\t\tif(isGroupResult()) {","\t\t\tfrom = new GroupResult( this, from, groupBy, having, orderBy);","\t\t\tif(having != null){","                from = new Where( from, having );","            }","\t\t}","\t\tif(isDistinct){","\t\t\tfrom = new Distinct( from, columnExpressions );","\t\t}","\t\tif(orderBy != null){","\t\t\tfrom = new SortedResult( from, orderBy );","\t\t}","\t\treturn true;","    }","    final boolean isGroupResult(){","    \treturn groupBy != null || having != null || isAggregateFunction;","    }","    private void compileJoin( Join singleJoin ) throws Exception{","        if(singleJoin.condition != null) compileLinkExpressionParams( singleJoin.condition );","        if(singleJoin.left instanceof Join){","            compileJoin( (Join)singleJoin.left );","        }","        if(singleJoin.right instanceof Join){","            compileJoin( (Join)singleJoin.right );","        }","    }","    private void compileLinkExpression( Expression expr) throws Exception{","\t\tif(expr.getType() == Expression.NAME)","\t\t\t compileLinkExpressionName( (ExpressionName)expr);","\t\telse compileLinkExpressionParams( expr );","    }","    private void compileLinkExpressionName(ExpressionName expr) throws Exception{","        String tableAlias = expr.getTableAlias();","        if(tableAlias != null){","            int t = 0;","            for(; t \< tables.size(); t++){","                DataSource fromEntry = tables.get(t);","                if(tableAlias.equalsIgnoreCase(fromEntry.getAlias())){","                    TableView table = fromEntry.getTableView();","                    int colIdx = table.findColumnIdx(expr.getName());","                    if(colIdx \>= 0){","                        expr.setFrom(fromEntry, colIdx, table);","                        break;","                    }else","                        throw SmallSQLException.create(Language.COL_INVALID_NAME, new Object[]{expr.getName()});","                }","            }","            if(t == tables.size())","                throw SmallSQLException.create(Language.COL_WRONG_PREFIX, tableAlias);","        }else{","            boolean isSetFrom = false;","            for(int t = 0; t \< tables.size(); t++){","                DataSource fromEntry = tables.get(t);","                TableView table = fromEntry.getTableView();","                int colIdx = table.findColumnIdx(expr.getName());","                if(colIdx \>= 0){","                    if(isSetFrom){","                        throw SmallSQLException.create(Language.COL_AMBIGUOUS, expr.getName());","                    }","                    isSetFrom = true;","                    expr.setFrom(fromEntry, colIdx, table);","                }","            }","            if(!isSetFrom){","                throw SmallSQLException.create(Language.COL_INVALID_NAME, expr.getName());","            }","        }","        compileLinkExpressionParams(expr);","    }","    private void compileLinkExpressionParams(Expression expr) throws Exception{","        Expression[] expParams = expr.getParams();","\t\tisAggregateFunction = isAggregateFunction || expr.getType() \>= Expression.GROUP_BEGIN;","        if(expParams != null){","            for(int k=0; k\<expParams.length; k++){","                Expression param = expParams[k];","\t\t\t\tint paramType = param.getType();","\t\t\t\tisAggregateFunction = isAggregateFunction || paramType \>= Expression.GROUP_BEGIN;","                if(paramType == Expression.NAME)","                     compileLinkExpressionName( (ExpressionName)param );","                else compileLinkExpressionParams( param );","            }","        }","        expr.optimize();","    }","    private final int compileAdd_All_Table_Columns( DataSource fromEntry, TableView table, int position){","        for(int k=0; k\<table.columns.size(); k++){","            ExpressionName expr = new ExpressionName( table.columns.get(k).getName() );","            expr.setFrom( fromEntry, k, table );","            columnExpressions.add( position++, expr );","        }","        return position;","    }","    void executeImpl(SSConnection con, SSStatement st) throws Exception{","        compile(con);","        if((st.rsType == ResultSet.TYPE_SCROLL_INSENSITIVE || st.rsType == ResultSet.TYPE_SCROLL_SENSITIVE) &&","        \t!from.isScrollable()){","        \tfrom = new Scrollable(from);","        }","        from.execute();","        rs =  new SSResultSet( st, this );","    }","    void beforeFirst() throws Exception{","\t\tfrom.beforeFirst();","    }","\tboolean isBeforeFirst() throws SQLException{","\t\treturn from.isBeforeFirst();","\t}","\tboolean isFirst() throws SQLException{","\t\treturn from.isFirst();","\t}","    boolean first() throws Exception{","\t\treturn from.first();","    }","\tboolean previous() throws Exception{","\t\treturn from.previous();","\t}","    boolean next() throws Exception{","        if(maxRows \>= 0 && from.getRow() \>= maxRows){","        \tfrom.afterLast();","        \treturn false;","        }","\t\treturn from.next();","    }","\tfinal boolean last() throws Exception{","\t\tif(maxRows \>= 0){","            if(maxRows == 0){","                from.beforeFirst();","                return false;","            }","\t\t\treturn from.absolute(maxRows);","\t\t}","\t\treturn from.last();","\t}","\tfinal void afterLast() throws Exception{","\t\tfrom.afterLast();","\t}","\tboolean isLast() throws Exception{","\t\treturn from.isLast();","\t}","\tboolean isAfterLast() throws Exception{","\t\treturn from.isAfterLast();","\t}","\tfinal boolean absolute(int row) throws Exception{","\t\treturn from.absolute(row);","\t}","\tfinal boolean relative(int rows) throws Exception{","\t\treturn from.relative(rows);","\t}","\tfinal int getRow() throws Exception{","\t\tint row = from.getRow();","\t\tif(maxRows \>= 0 && row \> maxRows) return 0;","\t\treturn row;","\t}","\tfinal void updateRow(SSConnection con, Expression[] newRowSources) throws SQLException{","\t\tint savepoint = con.getSavepoint();","\t\ttry{","\t\t\tfor(int t=0; t\<tables.size(); t++){","\t\t\t\tTableViewResult result = TableViewResult.getTableViewResult( tables.get(t) );","\t\t\t\tTableView table = result.getTableView();","\t\t\t\tColumns tableColumns = table.columns;","\t\t\t\tint count = tableColumns.size();","\t\t\t\tExpression[] updateValues = new Expression[count];","\t\t\t\tboolean isUpdateNeeded = false;","\t\t\t\tfor(int i=0; i\<columnExpressions.size(); i++){","\t\t\t\t\tExpression src = newRowSources[i];","\t\t\t\t\tif(src != null && (!(src instanceof ExpressionValue) || !((ExpressionValue)src).isEmpty())){\t","\t\t\t\t\t\tExpression col = columnExpressions.get(i);","\t\t\t\t\t\tif(!col.isDefinitelyWritable())","\t\t\t\t\t\t\tthrow SmallSQLException.create(Language.COL_READONLY, new Integer(i));","\t\t\t\t\t\tExpressionName exp = (ExpressionName)col;","\t\t\t\t\t\tif(table == exp.getTable()){","\t\t\t\t\t\t\tupdateValues[exp.getColumnIndex()] = src;","\t\t\t\t\t\t\tisUpdateNeeded = true;","\t\t\t\t\t\t\tcontinue;","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\tif(isUpdateNeeded){","\t\t\t\t\tresult.updateRow(updateValues);","\t\t\t\t}","\t\t\t}","\t\t}catch(Throwable e){","\t\t\tcon.rollback(savepoint);","\t\t\tthrow SmallSQLException.createFromException(e);","\t\t}finally{","\t\t\tif(con.getAutoCommit()) con.commit();","\t\t}","\t}","\tfinal void insertRow(SSConnection con, Expression[] newRowSources) throws SQLException{","\t\tif(tables.size() \> 1)","\t\t\tthrow SmallSQLException.create(Language.JOIN_INSERT);","\t\tif(tables.size() == 0)","\t\t\tthrow SmallSQLException.create(Language.INSERT_WO_FROM);","\t\tint savepoint = con.getSavepoint();","\t\ttry{","\t\t\tTableViewResult result = TableViewResult.getTableViewResult( tables.get(0) );","\t\t\tTableView table = result.getTableView();","\t\t\tColumns tabColumns = table.columns;","\t\t\tint count = tabColumns.size();","\t\t\tExpression[] updateValues = new Expression[count];","\t\t\tif(newRowSources != null){","\t\t\t\tfor(int i=0; i\<columnExpressions.size(); i++){","\t\t\t\t\tExpression src = newRowSources[i];","\t\t\t\t\tif(src != null && (!(src instanceof ExpressionValue) || !((ExpressionValue)src).isEmpty())){\t","\t\t\t\t\t\tExpression rsColumn = columnExpressions.get(i); ","\t\t\t\t\t\tif(!rsColumn.isDefinitelyWritable())","\t\t\t\t\t\t\tthrow SmallSQLException.create(Language.COL_READONLY, new Integer(i));","\t\t\t\t\t\tExpressionName exp = (ExpressionName)rsColumn;","\t\t\t\t\t\tif(table == exp.getTable()){","\t\t\t\t\t\t\tupdateValues[exp.getColumnIndex()] = src;","\t\t\t\t\t\t\tcontinue;","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t\tupdateValues[i] = null;","\t\t\t\t}","\t\t\t}","\t\t\tresult.insertRow(updateValues);","\t\t}catch(Throwable e){","\t\t\tcon.rollback(savepoint);","\t\t\tthrow SmallSQLException.createFromException(e);","\t\t}finally{","\t\t\tif(con.getAutoCommit()) con.commit();","\t\t}","\t}","\tfinal void deleteRow(SSConnection con) throws SQLException{","\t\tint savepoint = con.getSavepoint();","\t\ttry{","\t\t\tif(tables.size() \> 1)","\t\t\t\tthrow SmallSQLException.create(Language.JOIN_DELETE);","\t\t\tif(tables.size() == 0)","\t\t\t\tthrow SmallSQLException.create(Language.DELETE_WO_FROM);","\t\t\tTableViewResult.getTableViewResult( tables.get(0) ).deleteRow();","\t\t}catch(Throwable e){","\t\t\tcon.rollback(savepoint);","\t\t\tthrow SmallSQLException.createFromException(e);","\t\t}finally{","\t\t\tif(con.getAutoCommit()) con.commit();","\t\t}","\t}","\tpublic int findColumn(String columnName) throws SQLException {","\t\tExpressions columns = columnExpressions;","\t\tfor(int i=0; i\<columns.size(); i++){","\t\t\tif(columnName.equalsIgnoreCase(columns.get(i).getAlias()))","\t\t\t\treturn i;","\t\t}","\t\tthrow SmallSQLException.create(Language.COL_MISSING, columnName);","\t}","\tfinal void setDistinct(boolean distinct){","\t\tthis.isDistinct = distinct;","\t}","    final void setSource(RowSource join){","        this.from = join;","    }","    final void setTables( DataSources from ){","        this.tables = from;","    }","\tfinal void setWhere( Expression where ){","\t\tthis.where = where;","\t}","\tfinal void setGroup(Expressions group){","        this.groupBy = group;","    }","\tfinal void setHaving(Expression having){","        this.having = having;","    }","\tfinal void setOrder(Expressions order){","        this.orderBy = order;","    }","\tfinal void setMaxRows(int max){","\t\tmaxRows = max;","\t}","    final int getMaxRows(){","        return maxRows;","    }","}"],|project://smallsql/src/smallsql/database/language/Language_it.java|:["package smallsql.database.language;","public class Language_it extends Language {","\tprotected Language_it() {","\t\taddMessages(ENTRIES);","\t}","\tpublic String[][] getEntries() {","\t\treturn ENTRIES;","\t}","\tprivate final String[][] ENTRIES = {","{ UNSUPPORTED_OPERATION           , \"Operazione non supportata: {0}.\" },","{ CANT_LOCK_FILE                  , \"Impossibile bloccare il file \'\'{0}\'\'. Un database SmallSQL Database puÃ² essere aperto da un unico processo.\" },","{ DB_EXISTENT                     , \"Il database \'\'{0}\'\' Ã¨ giÃ\u00a0 esistente.\" },","{ DB_NONEXISTENT                  , \"Il database \'\'{0}\'\' Non esiste.\" },","{ DB_NOT_DIRECTORY                , \"La directory \'\'{0}\'\' non Ã¨ un database SmallSQL.\" },","{ DB_NOTCONNECTED                 , \"L\'\'utente non Ã¨ connesso a un database.\" },","{ CONNECTION_CLOSED               , \"La connessione Ã¨ giÃ\u00a0 chiusa.\" },","{ VIEW_INSERT                     , \"INSERT non Ã¨ supportato per una view.\" },","{ VIEWDROP_NOT_VIEW               , \"Non Ã¨ possibile effettuare DROP VIEW con \'\'{0}\'\' perchÃ© non Ã¨ una view.\" },","{ VIEW_CANTDROP                   , \"Non si puÃ² effettuare drop sulla view \'\'{0}\'\'.\" },","{ RSET_NOT_PRODUCED               , \"Nessun ResultSet Ã¨ stato prodotto.\" },","{ RSET_READONLY                   , \"Il ResultSet Ã¨ di sola lettura.\" },","{ RSET_FWDONLY                    , \"Il ResultSet Ã¨ forward only.\" }, ","{ RSET_CLOSED                     , \"Il ResultSet Ã¨ chiuso.\" },","{ RSET_NOT_INSERT_ROW             , \"Il cursore non Ã¨ attualmente nella riga \'\'InsertRow\'\'.\" },","{ RSET_ON_INSERT_ROW              , \"Il cursore Ã¨ attualmente nella riga \'\'InsertRow\'\'.\" },","{ ROWSOURCE_READONLY              , \"Il Rowsource Ã¨ di sola lettura.\" },","{ STMT_IS_CLOSED                  , \"Lo Statement Ã¨ in stato chiuso.\" },","{ SUBQUERY_COL_COUNT              , \"Il conteggio delle colonne nella subquery deve essere 1 e non {0}.\" },","{ JOIN_DELETE                     , \"DeleteRow non supportato nelle join.\" },","{ JOIN_INSERT                     , \"InsertRow non supportato nelle join.\" },","{ DELETE_WO_FROM                  , \"DeleteRow necessita un\'\'espressione FROM.\" },","{ INSERT_WO_FROM                  , \"InsertRow necessita un\'\'espressione FROM.\" },","{ TABLE_CANT_RENAME               , \"La tabella \'\'{0}\'\' non puÃ² essere rinominata.\" },","{ TABLE_CANT_DROP                 , \"Non si puÃ² effettuare DROP della tabella \'\'{0}\'\'.\" },","{ TABLE_CANT_DROP_LOCKED          , \"Non si puÃ² effettuare DROP della tabella \'\'{0}\'\' perchÃ© Ã¨ in LOCK.\" },","{ TABLE_CORRUPT_PAGE              , \"Pagina della tabella corrotta alla posizione: {0}.\" },","{ TABLE_MODIFIED                  , \"La tabella \'\'{0}\'\' Ã¨ stata modificata.\" },","{ TABLE_DEADLOCK                  , \"Deadlock: non si puÃ² mettere un lock sulla tabella \'\'{0}\'\'.\" },","{ TABLE_OR_VIEW_MISSING           , \"La tabella/view \'\'{0}\'\' non esiste.\" },","{ TABLE_FILE_INVALID              , \"Il file \'\'{0}\'\' non include una tabella SmallSQL valida.\" },","{ TABLE_OR_VIEW_FILE_INVALID      , \"Il file \'\'{0}\'\' non Ã¨ un contenitore valido di tabella/view.\" },","{ TABLE_EXISTENT                  , \"La tabella/vista \'\'{0}\'\' Ã¨ giÃ\u00a0 esistente.\" },","{ FK_NOT_TABLE                    , \"\'\'{0}\'\' non Ã¨ una tabella.\" },","{ PK_ONLYONE                      , \"Una tabella puÃ² avere solo una primary key.\" },","{ KEY_DUPLICATE                   , \"Chiave duplicata.\" },","{ MONTH_TOOLARGE                  , \"Valore del mese troppo alto del in DATE o TIMESTAMP \'\'{0}\'\'.\" },","{ DAYS_TOOLARGE                   , \"Valore del giorno troppo altro in DATE o TIMESTAMP \'\'{0}\'\'.\" },","{ HOURS_TOOLARGE                  , \"Valore delle ore troppo alto in in TIME o TIMESTAMP \'\'{0}\'\'.\" },","{ MINUTES_TOOLARGE                , \"Valore dei minuti troppo alto in TIME o TIMESTAMP \'\'{0}\'\'.\" },","{ SECS_TOOLARGE                   , \"Valore dei secondi troppo alto in TIME o TIMESTAMP \'\'{0}\'\'.\" },","{ MILLIS_TOOLARGE                 , \"VAlore dei millisecondi troppo alto in TIMESTAMP \'\'{0}\'\'.\" },","{ DATETIME_INVALID                , \"\'\'{0}\'\' Ã¨ un DATE, TIME or TIMESTAMP non valido.\" },","{ UNSUPPORTED_CONVERSION_OPER     , \"Conversione non supportata verso il tipo di dato \'\'{0}\'\' dal tipo \'\'{1}\'\' per l\'\'operazione \'\'{2}\'\'.\" },","{ UNSUPPORTED_DATATYPE_OPER       , \"Tipo di dato \'\'{0}\'\' non supportato per l\'\'operazione \'\'{1}\'\'.\" },","{ UNSUPPORTED_DATATYPE_FUNC       , \"Tipo di dato \'\'{0}\'\' non supportato per la funzione \'\'{1}\'\'.\" },","{ UNSUPPORTED_CONVERSION_FUNC     , \"Conversione verso il tipo di dato \'\'{0}\'\' non supportato per la funzione \'\'{1}\'\'.\" },","{ UNSUPPORTED_TYPE_CONV           , \"Tipo non supportato per la funzione CONVERT: {0}.\" },","{ UNSUPPORTED_TYPE_SUM            , \"Tipo non supportato per la funzione SUM: \'\'{0}\'\'.\" },","{ UNSUPPORTED_TYPE_MAX            , \"Tipo non supportato per la funzione MAX: \'\'{0}\'\'.\" },","{ UNSUPPORTED_CONVERSION          , \"Non Ã¨ possible convertire \'\'{0}\'\' [{1}] in \'\'{2}\'\'.\" },","{ INSERT_INVALID_LEN              , \"Lunghezza non valida \'\'{0}\'\' per la funzione INSERT.\" },","{ SUBSTR_INVALID_LEN              , \"Lunghezza non valida \'\'{0}\'\' per la funzione SUBSTRING.\" },","{ VALUE_STR_TOOLARGE              , \"Stringa troppo lunga per la colonna.\" },","{ VALUE_BIN_TOOLARGE              , \"Valore binario di lunghezza {0} eccessiva per la colonna di lunghezza {1}.\" },","{ VALUE_NULL_INVALID              , \"Valori nulli non validi per la colonna \'\'{0}\'\'.\" },","{ VALUE_CANT_CONVERT              , \"Impossible convertire un valore {0} in un valore {1}.\" },","{ BYTEARR_INVALID_SIZE            , \"Lunghezza non valida per un array di bytes: {0}.\" },","{ LOB_DELETED                     , \"L\'\'oggetto LOB Ã¨ stato cancellato.\" },","{ PARAM_CLASS_UNKNOWN             , \"Classe sconosciuta (\'\'{0}\'\') per il parametro.\" },","{ PARAM_EMPTY                     , \"Il parametro {0} Ã¨ vuoto.\" },","{ PARAM_IDX_OUT_RANGE             , \"L\'\'indice {0} per il parametro Ã¨ fuori dall\'\'intervallo consentito ( 1 \<= n \<= {1} ).\" },","{ COL_DUPLICATE                \t  , \"Nome di colonna duplicato: \'\'{0}\'\'.\" },","{ COL_MISSING                     , \"Colonna \'\'{0}\'\' non trovata.\" },","{ COL_VAL_UNMATCH                 , \"Il conteggio di colonne e valori non Ã¨ identico.\" },","{ COL_INVALID_SIZE                , \"Lunghezza non valida ({0}) per la colonna \'\'{1}\'\'.\" },","{ COL_WRONG_PREFIX                , \"Il prefisso di colonna \'\'{0}\'\' non coincide con un alias o nome di tabella usato nella query.\" },","{ COL_READONLY                    , \"La colonna \'\'{0}\'\' Ã¨ di sola lettura.\" },","{ COL_INVALID_NAME                , \"Nome di colonna non valido \'\'{0}\'\'.\" },","{ COL_IDX_OUT_RANGE               , \"Indice di colonna fuori dall\'\'intervallo valido: {0}.\" },","{ COL_AMBIGUOUS                   , \"Il nome di colonna \'\'{0}\'\' Ã¨ ambiguo.\" },","{ GROUP_AGGR_INVALID              , \"Funzione di aggregrazione non valida per la clausola GROUP BY: ({0}).\" },","{ GROUP_AGGR_NOTPART              , \"L\'\'espressione \'\'{0}\'\' non Ã¨ parte di una funzione di aggregazione o della clausola GROUP BY.\" },","{ ORDERBY_INTERNAL                , \"Errore interno per ORDER BY.\" },","{ UNION_DIFFERENT_COLS            , \"SELECT appartenenti ad una UNION con numero di colonne differenti: {0} e {1}.\" },","{ INDEX_EXISTS                    , \"L\'\'indice \'\'{0}\'\' Ã¨ giÃ\u00a0 esistente.\" },","{ INDEX_MISSING                   , \"L\'\'indice \'\'{0}\'\' non esiste.\" },","{ INDEX_FILE_INVALID              , \"Il file \'\'{0}\'\' non Ã¨ un contenitore valido per un indice.\" },","{ INDEX_CORRUPT                   , \"Errore durante il caricamento dell\'\'indice. File dell\'\'indice corrotto: \'\'{0}\'\'.\" },","{ INDEX_TOOMANY_EQUALS            , \"Troppe voci uguali nell\'\'indice.\" },","{ FILE_TOONEW                     , \"La versione ({0}) del file \'\'{1}\'\' Ã¨ troppo recente per questo runtime.\" },","{ FILE_TOOOLD                     , \"La versione ({0}) del file \'\'{1}\'\' Ã¨ troppo vecchia per questo runtime.\" },","{ FILE_CANT_DELETE                , \"File \'\'(0)\'\' non possono essere eliminati.\" },","{ ROW_0_ABSOLUTE                  , \"Il numero di riga 0 non Ã¨ valido per il metodo \'\'absolute()\'\'.\" },","{ ROW_NOCURRENT                   , \"Nessuna riga corrente.\" },","{ ROWS_WRONG_MAX                  , \"Numero massimo di righe non valido ({0}).\" },","{ ROW_LOCKED                      , \"La riga Ã¨ bloccata da un\'\'altra connessione.\" },","{ ROW_DELETED                     , \"Riga giÃ\u00a0 cancellata.\" },","{ SAVEPT_INVALID_TRANS            , \"SAVEPOINT non valido per questa transazione.\" },","{ SAVEPT_INVALID_DRIVER           , \"SAVEPOINT non valido per questo driver {0}.\" },","{ ALIAS_UNSUPPORTED               , \"Alias non supportato per questo tipo di sorgente righe.\" },","{ ISOLATION_UNKNOWN               , \"Livello di Isolamento transazione sconosciuto: {0}.\" },","{ FLAGVALUE_INVALID               , \"Flag non valida nel metodo \'\'getMoreResults\'\': {0}.\" },","{ ARGUMENT_INVALID                , \"Argomento non valido nel metodo \'\'setNeedGenratedKeys\'\': {0}.\" },","{ GENER_KEYS_UNREQUIRED           , \"GeneratedKeys non richieste.\" },","{ SEQUENCE_HEX_INVALID            , \"Sequenza esadecimale non valido alla posizione {0}.\" },","{ SEQUENCE_HEX_INVALID_STR        , \"Sequence esadecimale non valida alla positione {0} in \'\'{1}\'\'.\" },","{ SYNTAX_BASE_OFS            \t  , \"Errore di sintassi alla posizione {0} in \'\'{1}\'\'. \" },","{ SYNTAX_BASE_END        \t\t  , \"Errore di sintassi, fine inattesa della stringa SQL. \" },","{ STXADD_ADDITIONAL_TOK\t\t\t  , \"Token aggiuntivo dopo la fine dell\'\'istruzione SQL.\" },","{ STXADD_IDENT_EXPECT\t\t\t  , \"Identificatore atteso.\" },","{ STXADD_IDENT_EMPTY \t\t\t  , \"Identificatore vuoto.\" },","{ STXADD_IDENT_WRONG \t\t\t  , \"Identificatore errato \'\'{0}\'\'.\" },","{ STXADD_OPER_MINUS \t\t\t  , \"Operatore \'\'meno\'\' non valido per il tipo di dato varbinary.\" },","{ STXADD_FUNC_UNKNOWN \t\t\t  , \"Funzione sconosciuta.\" },","{ STXADD_PARAM_INVALID_COUNT\t  , \"Totale parametri non valido.\" },","{ STXADD_JOIN_INVALID\t  \t\t  , \"Sintassi della join non valida.\" },","{ STXADD_FROM_PAR_CLOSE\t  \t\t  , \"Parentesi chiusa non attesa nella clausola from.\" },","{ STXADD_KEYS_REQUIRED\t  \t\t  , \"Le parole chiave richieste sono: \" },","{ STXADD_NOT_NUMBER\t  \t\t      , \"Richiesto valore numerico (passato = \'\'{0}\'\').\" },","{ STXADD_COMMENT_OPEN\t  \t\t  , \"Chiusura del commento mancante (\'\'*/\'\').\" },","\t};","}"],|project://smallsql/src/smallsql/database/LongList.java|:["package smallsql.database;","class LongList {","\tprivate int size;","\tprivate long[] data;","\tLongList(){","\t\tthis(16);","\t}","\tLongList(int initialSize){","\t\tdata = new long[initialSize];","\t}","\tfinal int size(){","\t\treturn size;","\t}","\tfinal long get(int idx){","\t\tif (idx \>= size)","\t\t\tthrow new IndexOutOfBoundsException(\"Index: \"+idx+\", Size: \"+size);","\t\treturn data[idx];","\t}","\tfinal void add(long value){","\t\tif(size \>= data.length ){","\t\t\tresize(size \<\< 1);","\t\t}","\t\tdata[ size++ ] = value;","\t}","\tfinal void clear(){","\t\tsize = 0;","\t}","\tprivate final void resize(int newSize){","\t\tlong[] dataNew = new long[newSize];","\t\tSystem.arraycopy(data, 0, dataNew, 0, size);","\t\tdata = dataNew;\t\t","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java|:["package smallsql.database;","abstract class ExpressionFunctionReturnP1StringAndBinary extends ExpressionFunctionReturnP1 {","\tfinal boolean getBoolean() throws Exception {","\t\tif(isNull()) return false;","\t\treturn Utils.string2boolean(getString().trim());","\t}","\tfinal int getInt() throws Exception {","\t\tif(isNull()) return 0;","\t\treturn Integer.parseInt(getString().trim());","\t}","\tfinal long getLong() throws Exception {","\t\tif(isNull()) return 0;","\t\treturn Long.parseLong(getString().trim());","\t}","\tfinal float getFloat() throws Exception {","\t\tif(isNull()) return 0;","\t\treturn Float.parseFloat(getString().trim());","\t}","\tfinal double getDouble() throws Exception {","\t\tif(isNull()) return 0;","\t\treturn Double.parseDouble(getString().trim());","\t}","\tfinal long getMoney() throws Exception {","\t\tif(isNull()) return 0;","\t\treturn Money.parseMoney(getString().trim());","\t}","\tfinal MutableNumeric getNumeric() throws Exception {","\t\tif(isNull()) return null;","\t\treturn new MutableNumeric(getString().trim());","\t}","\tfinal Object getObject() throws Exception {","\t\tif(SSResultSetMetaData.isBinaryDataType(param1.getDataType()))","\t\t\treturn getBytes();","\t\treturn getString();","\t}","}"],|project://smallsql/src/smallsql/database/SortedResult.java|:["package smallsql.database;","import smallsql.database.language.Language;","final class SortedResult extends RowSource {","\tfinal private Expressions orderBy;","\tfinal private RowSource rowSource;","\tprivate IndexScrollStatus scrollStatus;","\tprivate int row;","    private final LongList insertedRows = new LongList();","\tprivate boolean useSetRowPosition;","    private int sortedRowCount;","    private long lastRowOffset;","\tSortedResult(RowSource rowSource, Expressions orderBy){","\t\tthis.rowSource = rowSource;","\t\tthis.orderBy = orderBy;","\t}","\tfinal boolean isScrollable(){","\t\treturn true;","\t}","\tfinal void execute() throws Exception{","\t\trowSource.execute();","\t\tIndex index = new Index(false);\t","        lastRowOffset = -1;","\t\twhile(rowSource.next()){","            lastRowOffset = rowSource.getRowPosition();","\t\t\tindex.addValues( lastRowOffset, orderBy);","            sortedRowCount++;","\t\t}","\t\tscrollStatus = index.createScrollStatus(orderBy);","\t\tuseSetRowPosition = false;","\t}","    final boolean isBeforeFirst(){","        return row == 0;","    }","    final boolean isFirst(){","        return row == 1;","    }","    void beforeFirst() throws Exception {","\t\tscrollStatus.reset();","\t\trow = 0;","\t\tuseSetRowPosition = false;","\t}","\tboolean first() throws Exception {","\t\tbeforeFirst();","\t\treturn next();","\t}","    boolean previous() throws Exception{","        if(useSetRowPosition) throw SmallSQLException.create(Language.ORDERBY_INTERNAL);","        if(currentInsertedRow() == 0){","            scrollStatus.afterLast();","        }","        row--;","        if(currentInsertedRow() \>= 0){","            rowSource.setRowPosition( insertedRows.get( currentInsertedRow() ) );","            return true;","        }","        long rowPosition = scrollStatus.getRowOffset(false);","        if(rowPosition \>= 0){","            rowSource.setRowPosition( rowPosition );","            return true;","        }else{","            rowSource.noRow();","            row = 0;","            return false;","        }","    }","\tboolean next() throws Exception {","\t\tif(useSetRowPosition) throw SmallSQLException.create(Language.ORDERBY_INTERNAL);","        if(currentInsertedRow() \< 0){","    \t\tlong rowPosition = scrollStatus.getRowOffset(true);","    \t\tif(rowPosition \>= 0){","                row++;","    \t\t\trowSource.setRowPosition( rowPosition );","    \t\t\treturn true;","    \t\t}","        }","        if(currentInsertedRow() \< insertedRows.size()-1){","            row++;","            rowSource.setRowPosition( insertedRows.get( currentInsertedRow() ) );","            return true;","        }","        if(lastRowOffset \>= 0){","            rowSource.setRowPosition( lastRowOffset );","        }else{","            rowSource.beforeFirst();","        }","        if(rowSource.next()){","            row++;","            lastRowOffset = rowSource.getRowPosition();","            insertedRows.add( lastRowOffset );","            return true;","        }","        rowSource.noRow();","        row = (getRowCount() \> 0) ? getRowCount() + 1 : 0;","\t\treturn false;","\t}","\tboolean last() throws Exception{","\t\tafterLast();","\t\treturn previous();","\t}","    final boolean isLast() throws Exception{","        if(row == 0){","            return false;","        }","        if(row \> getRowCount()){","            return false;","        }","        boolean isNext = next();","        previous();","        return !isNext;","    }","    final boolean isAfterLast(){","        int rowCount = getRowCount();","        return row \> rowCount || rowCount == 0;","    }","\tvoid afterLast() throws Exception{","        useSetRowPosition = false;","        if(sortedRowCount \> 0){","            scrollStatus.afterLast();","            scrollStatus.getRowOffset(false); ","        }else{","            rowSource.beforeFirst();","        }","        row = sortedRowCount;","        while(next()){","        }","\t}","    boolean absolute(int newRow) throws Exception{","        if(newRow == 0) throw SmallSQLException.create(Language.ROW_0_ABSOLUTE);","        if(newRow \> 0){","            beforeFirst();","            while(newRow-- \> 0){","                if(!next()){","                    return false;","                }","            }","        }else{","            afterLast();","            while(newRow++ \< 0){","                if(!previous()){","                    return false;","                }","            }","        }","        return true;","    }","    boolean relative(int rows) throws Exception{","        if(rows == 0) return (row != 0);","        if(rows \> 0){","            while(rows-- \> 0){","                if(!next()){","                    return false;","                }","            }","        }else{","            while(rows++ \< 0){","                if(!previous()){","                    return false;","                }","            }","        }","        return true;","    }","\tint getRow(){","\t\treturn row \> getRowCount() ? 0 : row;","\t}","\tfinal long getRowPosition(){","\t\treturn rowSource.getRowPosition();","\t}","\tfinal void setRowPosition(long rowPosition) throws Exception{","\t\trowSource.setRowPosition(rowPosition);","\t\tuseSetRowPosition = true;","\t}","\tfinal boolean rowInserted(){","\t\treturn rowSource.rowInserted();","\t}","\tfinal boolean rowDeleted(){","\t\treturn rowSource.rowDeleted();","\t}","\tvoid nullRow() {","\t\trowSource.nullRow();","\t\trow = 0;","\t}","\tvoid noRow() {","\t\trowSource.noRow();","\t\trow = 0;","\t}","    boolean isExpressionsFromThisRowSource(Expressions columns){","        return rowSource.isExpressionsFromThisRowSource(columns);","    }","    private final int getRowCount(){","        return sortedRowCount + insertedRows.size();","    }","    private final int currentInsertedRow(){","        return row - sortedRowCount - 1;","    }","}"],|project://smallsql/src/smallsql/database/Mutable.java|:["package smallsql.database;","interface Mutable {","\tObject getImmutableObject();","}"],|project://smallsql/src/smallsql/database/LongTreeListEnum.java|:["package smallsql.database;","public class LongTreeListEnum {","\tlong[] resultStack = new long[4];","\tint[]  offsetStack = new int[4];","\tint stack;","\tfinal void reset(){","\t\tstack = 0;","\t\toffsetStack[0] = 0;","\t}","}"],|project://smallsql/src/smallsql/database/SSResultSet.java|:["package smallsql.database;","import java.sql.*;","import java.math.*;","import java.io.ByteArrayInputStream;","import java.io.InputStream;","import java.io.Reader;","import java.util.Map;","import java.util.Calendar;","import java.net.URL;","import smallsql.database.language.Language;","public class SSResultSet implements ResultSet {","    SSResultSetMetaData metaData = new SSResultSetMetaData();","    private CommandSelect cmd;","    private boolean wasNull;","    SSStatement st;","    private boolean isUpdatable;","    private boolean isInsertRow;","    private ExpressionValue[] values;","    private int fetchDirection;","    private int fetchSize;","    SSResultSet( SSStatement st, CommandSelect cmd ){","        this.st = st;","        metaData.columns = cmd.columnExpressions;","        this.cmd = cmd;","\t\tisUpdatable = st != null && st.rsConcurrency == CONCUR_UPDATABLE && !cmd.isGroupResult();","    }","    public void close(){","    \tst.con.log.println(\"ResultSet.close\");","        cmd = null;","    }","    public boolean wasNull(){","        return wasNull;","    }","    public String getString(int columnIndex) throws SQLException {","        try{","            Object obj = getObject(columnIndex);","            if(obj instanceof String || obj == null){","                return (String)obj;","            }","            if(obj instanceof byte[]){","                return \"0x\" + Utils.bytes2hex( (byte[])obj );","            }","            return getValue(columnIndex).getString();","        }catch(Exception e){","            throw SmallSQLException.createFromException( e );","        }","    }","    public boolean getBoolean(int columnIndex) throws SQLException {","        try{","            Expression expr = getValue(columnIndex);","            wasNull = expr.isNull();","            return expr.getBoolean();","        }catch(Exception e){","            throw SmallSQLException.createFromException( e );","        }","    }","    public byte getByte(int columnIndex) throws SQLException {","        return (byte)getInt( columnIndex );","    }","    public short getShort(int columnIndex) throws SQLException {","        return (short)getInt( columnIndex );","    }","    public int getInt(int columnIndex) throws SQLException {","        try{","            Expression expr = getValue(columnIndex);","            wasNull = expr.isNull();","            return expr.getInt();","        }catch(Exception e){","            throw SmallSQLException.createFromException( e );","        }","    }","    public long getLong(int columnIndex) throws SQLException {","        try{","            Expression expr = getValue(columnIndex);","            wasNull = expr.isNull();","            return expr.getLong();","        }catch(Exception e){","            throw SmallSQLException.createFromException( e );","        }","    }","    public float getFloat(int columnIndex) throws SQLException {","        try{","            Expression expr = getValue(columnIndex);","            wasNull = expr.isNull();","            return expr.getFloat();","        }catch(Exception e){","            throw SmallSQLException.createFromException( e );","        }","    }","    public double getDouble(int columnIndex) throws SQLException {","        try{","            Expression expr = getValue(columnIndex);","            wasNull = expr.isNull();","            return expr.getDouble();","        }catch(Exception e){","            throw SmallSQLException.createFromException( e );","        }","    }","    public BigDecimal getBigDecimal(int columnIndex, int scale) throws SQLException {","        try{","            MutableNumeric obj = getValue(columnIndex).getNumeric();","            wasNull = obj == null;","            if(wasNull) return null;","            return obj.toBigDecimal(scale);","        }catch(Exception e){","            throw SmallSQLException.createFromException( e );","        }","    }","    public byte[] getBytes(int columnIndex) throws SQLException {","        try{","            byte[] obj = getValue(columnIndex).getBytes();","            wasNull = obj == null;","            return obj;","        }catch(Exception e){","            throw SmallSQLException.createFromException( e );","        }","    }","    public Date getDate(int columnIndex) throws SQLException {","        try{","\t\t\tExpression expr = getValue(columnIndex);","            wasNull = expr.isNull();","\t\t\tif(wasNull) return null;","\t\t\treturn DateTime.getDate( expr.getLong() );","        }catch(Exception e){","            throw SmallSQLException.createFromException( e );","        }","    }","    public Time getTime(int columnIndex) throws SQLException {","        try{","\t\t\tExpression expr = getValue(columnIndex);","            wasNull = expr.isNull();","\t\t\tif(wasNull) return null;","\t\t\treturn DateTime.getTime( expr.getLong() );","        }catch(Exception e){","            throw SmallSQLException.createFromException( e );","        }","    }","    public Timestamp getTimestamp(int columnIndex) throws SQLException {","        try{","\t\t\tExpression expr = getValue(columnIndex);","            wasNull = expr.isNull();","\t\t\tif(wasNull) return null;","\t\t\treturn DateTime.getTimestamp( expr.getLong() );","        }catch(Exception e){","            throw SmallSQLException.createFromException( e );","        }","    }","    public InputStream getAsciiStream(int columnIndex) throws SQLException {","        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"getAsciiStream\");","    }","    public InputStream getUnicodeStream(int columnIndex) throws SQLException {","        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"getUnicodeStream\");","    }","    public InputStream getBinaryStream(int columnIndex) throws SQLException {","        return new ByteArrayInputStream(getBytes(columnIndex));","    }","    public String getString(String columnName) throws SQLException {","        return getString( findColumn( columnName ) );","    }","    public boolean getBoolean(String columnName) throws SQLException {","        return getBoolean( findColumn( columnName ) );","    }","    public byte getByte(String columnName) throws SQLException {","        return getByte( findColumn( columnName ) );","    }","    public short getShort(String columnName) throws SQLException {","        return getShort( findColumn( columnName ) );","    }","    public int getInt(String columnName) throws SQLException {","        return getInt( findColumn( columnName ) );","    }","    public long getLong(String columnName) throws SQLException {","        return getLong( findColumn( columnName ) );","    }","    public float getFloat(String columnName) throws SQLException {","        return getFloat( findColumn( columnName ) );","    }","    public double getDouble(String columnName) throws SQLException {","        return getDouble( findColumn( columnName ) );","    }","    public BigDecimal getBigDecimal(String columnName, int scale) throws SQLException {","        return getBigDecimal( findColumn( columnName ), scale );","    }","    public byte[] getBytes(String columnName) throws SQLException {","        return getBytes( findColumn( columnName ) );","    }","    public Date getDate(String columnName) throws SQLException {","        return getDate( findColumn( columnName ) );","    }","    public Time getTime(String columnName) throws SQLException {","        return getTime( findColumn( columnName ) );","    }","    public Timestamp getTimestamp(String columnName) throws SQLException {","        return getTimestamp( findColumn( columnName ) );","    }","    public InputStream getAsciiStream(String columnName) throws SQLException {","        return getAsciiStream( findColumn( columnName ) );","    }","    public InputStream getUnicodeStream(String columnName) throws SQLException {","        return getUnicodeStream( findColumn( columnName ) );","    }","    public InputStream getBinaryStream(String columnName) throws SQLException {","        return getBinaryStream( findColumn( columnName ) );","    }","    public SQLWarning getWarnings(){","        return null;","    }","    public void clearWarnings(){","    }","    public String getCursorName(){","        return null;","    }","    public ResultSetMetaData getMetaData(){","        return metaData;","    }","    public Object getObject(int columnIndex) throws SQLException {","        try{","            Object obj = getValue(columnIndex).getApiObject();","            wasNull = obj == null;","            return obj;","        }catch(Exception e){","            throw SmallSQLException.createFromException( e );","        }","    }","    public Object getObject(String columnName) throws SQLException {","        return getObject( findColumn( columnName ) );","    }","    public int findColumn(String columnName) throws SQLException {","    \treturn getCmd().findColumn(columnName) + 1;","    }","    public Reader getCharacterStream(int columnIndex) throws SQLException {","        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"getCharacterStream\");","    }","    public Reader getCharacterStream(String columnName) throws SQLException {","        return getCharacterStream( findColumn( columnName ) );","    }","    public BigDecimal getBigDecimal(int columnIndex) throws SQLException {","        try{","            MutableNumeric obj = getValue(columnIndex).getNumeric();","            wasNull = obj == null;","            if(wasNull) return null;","            return obj.toBigDecimal();","        }catch(Exception e){","            throw SmallSQLException.createFromException( e );","        }","    }","    public BigDecimal getBigDecimal(String columnName) throws SQLException {","        return getBigDecimal( findColumn( columnName ) );","    }","    public boolean isBeforeFirst() throws SQLException {","\t\treturn getCmd().isBeforeFirst();","    }","    public boolean isAfterLast() throws SQLException {","        try{","            return getCmd().isAfterLast();","        }catch(Exception e){","            throw SmallSQLException.createFromException(e);","        }","    }","    public boolean isFirst() throws SQLException {","    \treturn getCmd().isFirst();","    }","    public boolean isLast() throws SQLException {","    \ttry{","    \t\treturn getCmd().isLast();","\t\t}catch(Exception e){","\t\t\tthrow SmallSQLException.createFromException(e);","\t\t}","    }","    public void beforeFirst() throws SQLException {","    \ttry{","            moveToCurrentRow();","    \t\tgetCmd().beforeFirst();","    \t}catch(Exception e){","    \t\tthrow SmallSQLException.createFromException(e);","    \t}","    }","    public boolean first() throws SQLException {","\t\ttry{","\t\t\tif(st.rsType == ResultSet.TYPE_FORWARD_ONLY) throw SmallSQLException.create(Language.RSET_FWDONLY);","            moveToCurrentRow();","\t\t\treturn getCmd().first();","\t\t}catch(Exception e){","\t\t\tthrow SmallSQLException.createFromException(e);","\t\t}","    }","\tpublic boolean previous() throws SQLException {","\t\ttry{","            moveToCurrentRow();","\t\t\treturn getCmd().previous();","\t\t}catch(Exception e){","\t\t\tthrow SmallSQLException.createFromException(e);","\t\t}","\t}","\tpublic boolean next() throws SQLException {","\t\ttry{","            moveToCurrentRow();","            return getCmd().next();","\t\t}catch(Exception e){","\t\t\tthrow SmallSQLException.createFromException(e);","\t\t}","\t}","    public boolean last() throws SQLException {","\t\ttry{","            moveToCurrentRow();","            return getCmd().last();","\t\t}catch(Exception e){","\t\t\tthrow SmallSQLException.createFromException(e);","\t\t}","    }","\tpublic void afterLast() throws SQLException {","\t\ttry{","\t\t\tif(st.rsType == ResultSet.TYPE_FORWARD_ONLY) throw SmallSQLException.create(Language.RSET_FWDONLY);","            moveToCurrentRow();","            getCmd().afterLast();","\t\t}catch(Exception e){","\t\t\tthrow SmallSQLException.createFromException(e);","\t\t}","\t}","    public boolean absolute(int row) throws SQLException {","\t\ttry{","            moveToCurrentRow();","\t\t\treturn getCmd().absolute(row);","\t\t}catch(Exception e){","\t\t\tthrow SmallSQLException.createFromException(e);","\t\t}","    }","    public boolean relative(int rows) throws SQLException {","\t\ttry{","            moveToCurrentRow();","\t\t\treturn getCmd().relative(rows);","\t\t}catch(Exception e){","\t\t\tthrow SmallSQLException.createFromException(e);","\t\t}","    }","\tpublic int getRow() throws SQLException {","\t\ttry{","\t\t\treturn getCmd().getRow();","\t\t}catch(Exception e){","\t\t\tthrow SmallSQLException.createFromException(e);","\t\t}","\t}","    public void setFetchDirection(int direction){","        fetchDirection = direction;","    }","    public int getFetchDirection(){","        return fetchDirection;","    }","    public void setFetchSize(int rows){","        fetchSize = rows;","    }","    public int getFetchSize(){","        return fetchSize;","    }","    public int getType() throws SQLException {","    \treturn getCmd().from.isScrollable() ? ResultSet.TYPE_SCROLL_SENSITIVE : ResultSet.TYPE_FORWARD_ONLY;","    }","    public int getConcurrency(){","    \treturn isUpdatable ? ResultSet.CONCUR_UPDATABLE : ResultSet.CONCUR_READ_ONLY;","    }","    public boolean rowUpdated(){","    \treturn false;","    }","    public boolean rowInserted() throws SQLException {","    \treturn getCmd().from.rowInserted();","    }","    public boolean rowDeleted() throws SQLException {","    \treturn getCmd().from.rowDeleted();","    }","    public void updateNull(int columnIndex) throws SQLException {","\t\tupdateValue( columnIndex, null, SQLTokenizer.NULL);","    }","    public void updateBoolean(int columnIndex, boolean x) throws SQLException {","\t\tupdateValue( columnIndex, x ? Boolean.TRUE : Boolean.FALSE, SQLTokenizer.BOOLEAN);","    }","    public void updateByte(int columnIndex, byte x) throws SQLException {","\t\tupdateValue( columnIndex, Utils.getShort(x), SQLTokenizer.TINYINT);","    }","    public void updateShort(int columnIndex, short x) throws SQLException {","\t\tupdateValue( columnIndex, Utils.getShort(x), SQLTokenizer.SMALLINT);","    }","    public void updateInt(int columnIndex, int x) throws SQLException {","\t\tupdateValue( columnIndex, Utils.getInteger(x), SQLTokenizer.INT);","    }","    public void updateLong(int columnIndex, long x) throws SQLException {","\t\tupdateValue( columnIndex, new Long(x), SQLTokenizer.BIGINT);","    }","    public void updateFloat(int columnIndex, float x) throws SQLException {","\t\tupdateValue( columnIndex, new Float(x), SQLTokenizer.REAL);","    }","    public void updateDouble(int columnIndex, double x) throws SQLException {","\t\tupdateValue( columnIndex, new Double(x), SQLTokenizer.DOUBLE);","    }","    public void updateBigDecimal(int columnIndex, BigDecimal x) throws SQLException {","\t\tupdateValue( columnIndex, x, SQLTokenizer.DECIMAL);","    }","    public void updateString(int columnIndex, String x) throws SQLException {","\t\tupdateValue( columnIndex, x, SQLTokenizer.VARCHAR);","    }","    public void updateBytes(int columnIndex, byte[] x) throws SQLException {","\t\tupdateValue( columnIndex, x, SQLTokenizer.VARBINARY);","    }","    public void updateDate(int columnIndex, Date x) throws SQLException {","\t\tupdateValue( columnIndex, DateTime.valueOf(x), SQLTokenizer.DATE);","    }","    public void updateTime(int columnIndex, Time x) throws SQLException {","\t\tupdateValue( columnIndex, DateTime.valueOf(x), SQLTokenizer.TIME);","    }","    public void updateTimestamp(int columnIndex, Timestamp x) throws SQLException {","\t\tupdateValue( columnIndex, DateTime.valueOf(x), SQLTokenizer.TIMESTAMP);","    }","    public void updateAsciiStream(int columnIndex, InputStream x, int length) throws SQLException {","\t\tupdateValue( columnIndex, x, SQLTokenizer.LONGVARCHAR, length);","    }","    public void updateBinaryStream(int columnIndex, InputStream x, int length) throws SQLException {","\t\tupdateValue( columnIndex, x, SQLTokenizer.LONGVARBINARY, length);","    }","    public void updateCharacterStream(int columnIndex, Reader x, int length) throws SQLException {","        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Reader object\");","    }","    public void updateObject(int columnIndex, Object x, int scale) throws SQLException {","\t\tupdateValue( columnIndex, x, -1);","    }","    public void updateObject(int columnIndex, Object x) throws SQLException {","    \tupdateValue( columnIndex, x, -1);","    }","    public void updateNull(String columnName) throws SQLException {","        updateNull( findColumn( columnName ) );","    }","    public void updateBoolean(String columnName, boolean x) throws SQLException {","        updateBoolean( findColumn( columnName ), x );","    }","    public void updateByte(String columnName, byte x) throws SQLException {","        updateByte( findColumn( columnName ), x );","    }","    public void updateShort(String columnName, short x) throws SQLException {","        updateShort( findColumn( columnName ), x );","    }","    public void updateInt(String columnName, int x) throws SQLException {","        updateInt( findColumn( columnName ), x );","    }","    public void updateLong(String columnName, long x) throws SQLException {","        updateLong( findColumn( columnName ), x );","    }","    public void updateFloat(String columnName, float x) throws SQLException {","        updateFloat( findColumn( columnName ), x );","    }","    public void updateDouble(String columnName, double x) throws SQLException {","        updateDouble( findColumn( columnName ), x );","    }","    public void updateBigDecimal(String columnName, BigDecimal x) throws SQLException {","        updateBigDecimal( findColumn( columnName ), x );","    }","    public void updateString(String columnName, String x) throws SQLException {","        updateString( findColumn( columnName ), x );","    }","    public void updateBytes(String columnName, byte[] x) throws SQLException {","        updateBytes( findColumn( columnName ), x );","    }","    public void updateDate(String columnName, Date x) throws SQLException {","        updateDate( findColumn( columnName ), x );","    }","    public void updateTime(String columnName, Time x) throws SQLException {","        updateTime( findColumn( columnName ), x );","    }","    public void updateTimestamp(String columnName, Timestamp x) throws SQLException {","        updateTimestamp( findColumn( columnName ), x );","    }","    public void updateAsciiStream(String columnName, InputStream x, int length) throws SQLException {","        updateAsciiStream( findColumn( columnName ), x, length );","    }","    public void updateBinaryStream(String columnName, InputStream x, int length) throws SQLException {","        updateBinaryStream( findColumn( columnName ), x, length );","    }","    public void updateCharacterStream(String columnName, Reader x, int length) throws SQLException {","        updateCharacterStream( findColumn( columnName ), x, length );","    }","    public void updateObject(String columnName, Object x, int scale) throws SQLException {","        updateObject( findColumn( columnName ), x, scale );","    }","    public void updateObject(String columnName, Object x) throws SQLException {","        updateObject( findColumn( columnName ), x );","    }","    public void insertRow() throws SQLException {","\t\tst.con.log.println(\"insertRow()\");","        if(!isInsertRow){","            throw SmallSQLException.create(Language.RSET_NOT_INSERT_ROW);","        }","\t\tgetCmd().insertRow( st.con, values);","        clearRowBuffer();","    }","    private void testNotInsertRow() throws SQLException{","        if(isInsertRow){","            throw SmallSQLException.create(Language.RSET_ON_INSERT_ROW);","        }","    }","    public void updateRow() throws SQLException {","        try {","        \tif(values == null){","                return;","            }","       \t\tst.con.log.println(\"updateRow()\");","            testNotInsertRow();","            final CommandSelect command = getCmd();","            command.updateRow( st.con, values);","            command.relative(0);  ","            clearRowBuffer();","        } catch (Exception e) {","            throw SmallSQLException.createFromException(e);","        }","    }","    public void deleteRow() throws SQLException {","\t\tst.con.log.println(\"deleteRow()\");","        testNotInsertRow();","    \tgetCmd().deleteRow(st.con);","        clearRowBuffer();","    }","    public void refreshRow() throws SQLException {","        testNotInsertRow();","        relative(0);","    }","    public void cancelRowUpdates() throws SQLException{","        testNotInsertRow();","        clearRowBuffer();","    }","    private void clearRowBuffer(){","        if(values != null){","            for(int i=values.length-1; i\>=0; i--){","                values[i].clear();","            }","        }","    }","    public void moveToInsertRow() throws SQLException {","    \tif(isUpdatable){","    \t\tisInsertRow = true;","            clearRowBuffer();","    \t}else{","            throw SmallSQLException.create(Language.RSET_READONLY);","    \t}","    }","    public void moveToCurrentRow() throws SQLException{","\t\tisInsertRow = false;","        clearRowBuffer();","        if(values == null){","            getUpdateValue(1);","        }","    }","    public Statement getStatement() {","        return st;","    }","    public Ref getRef(int i) throws SQLException {","        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Ref object\");","    }","    public Blob getBlob(int i) throws SQLException {","        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Blob object\");","    }","    public Clob getClob(int i) throws SQLException {","        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Clob object\");","    }","    public Array getArray(int i) throws SQLException {","        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Array\");","    }","    public Ref getRef(String columnName) throws SQLException {","        return getRef( findColumn( columnName ) );","    }","    public Blob getBlob(String columnName) throws SQLException {","        return getBlob( findColumn( columnName ) );","    }","    public Clob getClob(String columnName) throws SQLException {","        return getClob( findColumn( columnName ) );","    }","    public Array getArray(String columnName) throws SQLException {","        return getArray( findColumn( columnName ) );","    }","    public Date getDate(int columnIndex, Calendar cal) throws SQLException {","        try{","            if(cal == null){","                return getDate(columnIndex);","            }","            Expression expr = getValue(columnIndex);","            wasNull = expr.isNull();","            if(wasNull) return null;","            return new Date(DateTime.addDateTimeOffset( expr.getLong(), cal.getTimeZone() ));","        }catch(Exception e){","            throw SmallSQLException.createFromException( e );","        }","    }","    public Date getDate(String columnName, Calendar cal) throws SQLException {","        return getDate( findColumn( columnName ), cal );","    }","    public Time getTime(int columnIndex, Calendar cal) throws SQLException {","        try{","            if(cal == null){","                return getTime(columnIndex);","            }","            Expression expr = getValue(columnIndex);","            wasNull = expr.isNull();","            if(wasNull) return null;","            return new Time(DateTime.addDateTimeOffset( expr.getLong(), cal.getTimeZone() ));","        }catch(Exception e){","            throw SmallSQLException.createFromException( e );","        }","    }","    public Time getTime(String columnName, Calendar cal) throws SQLException {","        return getTime( findColumn( columnName ), cal );","    }","    public Timestamp getTimestamp(int columnIndex, Calendar cal) throws SQLException {","        try{","            if(cal == null){","                return getTimestamp(columnIndex);","            }","            Expression expr = getValue(columnIndex);","            wasNull = expr.isNull();","            if(wasNull) return null;","            return new Timestamp(DateTime.addDateTimeOffset( expr.getLong(), cal.getTimeZone() ));","        }catch(Exception e){","            throw SmallSQLException.createFromException( e );","        }","    }","    public Timestamp getTimestamp(String columnName, Calendar cal) throws SQLException {","        return getTimestamp( findColumn( columnName ), cal );","    }","    public URL getURL(int columnIndex) throws SQLException {","        try{","            Expression expr = getValue(columnIndex);","            wasNull = expr.isNull();","            if(wasNull) return null;","            return new URL( expr.getString() );","        }catch(Exception e){","            throw SmallSQLException.createFromException( e );","        }","    }","    public URL getURL(String columnName) throws SQLException {","        return getURL( findColumn( columnName ) );","    }","    public void updateRef(int columnIndex, Ref x) throws SQLException {","        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Ref\");","    }","    public void updateRef(String columnName, Ref x) throws SQLException {","        updateRef( findColumn( columnName ), x );","    }","    public void updateBlob(int columnIndex, Blob x) throws SQLException {","        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Blob\");","    }","    public void updateBlob(String columnName, Blob x) throws SQLException {","        updateBlob( findColumn( columnName ), x );","    }","    public void updateClob(int columnIndex, Clob x) throws SQLException {","        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Clob\");","    }","    public void updateClob(String columnName, Clob x) throws SQLException {","        updateClob( findColumn( columnName ), x );","    }","    public void updateArray(int columnIndex, Array x) throws SQLException {","        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Array\");","    }","    public void updateArray(String columnName, Array x) throws SQLException {","        updateArray( findColumn( columnName ), x );","    }","    final private Expression getValue(int columnIndex) throws SQLException{","        if(values != null){","            ExpressionValue value = values[ metaData.getColumnIdx( columnIndex ) ];","            if(!value.isEmpty() || isInsertRow){ ","                return value;","            }","        }","        return metaData.getColumnExpression(columnIndex);","    }","\tfinal private ExpressionValue getUpdateValue(int columnIndex) throws SQLException{","\t\tif(values == null){","\t\t\tint count = metaData.getColumnCount();","\t\t\tvalues = new ExpressionValue[count];","\t\t\twhile(count-- \> 0){","\t\t\t\tvalues[count] = new ExpressionValue();","\t\t\t}","\t\t}","\t\treturn values[ metaData.getColumnIdx( columnIndex ) ];","\t}","    final private void updateValue(int columnIndex, Object x, int dataType) throws SQLException{","\t\tgetUpdateValue( columnIndex ).set( x, dataType );","\t\tif(st.con.log.isLogging()){","\t\t\tst.con.log.println(\"parameter \'\"+metaData.getColumnName(columnIndex)+\"\' = \"+x+\"; type=\"+dataType);","\t\t}","    }","\tfinal private void updateValue(int columnIndex, Object x, int dataType, int length) throws SQLException{","\t\tgetUpdateValue( columnIndex ).set( x, dataType, length );","\t\tif(st.con.log.isLogging()){","\t\t\tst.con.log.println(\"parameter \'\"+metaData.getColumnName(columnIndex)+\"\' = \"+x+\"; type=\"+dataType+\"; length=\"+length);","\t\t}","\t}","\tfinal private CommandSelect getCmd() throws SQLException {","\t\tif(cmd == null){","            throw SmallSQLException.create(Language.RSET_CLOSED);","        }","        st.con.testClosedConnection();","\t\treturn cmd;","\t}","\t@Override","\tpublic \<T\> T unwrap(Class\<T\> iface) throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic boolean isWrapperFor(Class\<?\> iface) throws SQLException {","\t\treturn false;","\t}","\t@Override","\tpublic Object getObject(int columnIndex, Map\<String, Class\<?\>\> map)","\t\t\tthrows SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic Object getObject(String columnLabel, Map\<String, Class\<?\>\> map)","\t\t\tthrows SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic RowId getRowId(int columnIndex) throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic RowId getRowId(String columnLabel) throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic void updateRowId(int columnIndex, RowId x) throws SQLException {","\t}","\t@Override","\tpublic void updateRowId(String columnLabel, RowId x) throws SQLException {","\t}","\t@Override","\tpublic int getHoldability() throws SQLException {","\t\treturn 0;","\t}","\t@Override","\tpublic boolean isClosed() throws SQLException {","\t\treturn false;","\t}","\t@Override","\tpublic void updateNString(int columnIndex, String nString)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void updateNString(String columnLabel, String nString)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void updateNClob(int columnIndex, NClob nClob) throws SQLException {","\t}","\t@Override","\tpublic void updateNClob(String columnLabel, NClob nClob)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic NClob getNClob(int columnIndex) throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic NClob getNClob(String columnLabel) throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic SQLXML getSQLXML(int columnIndex) throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic SQLXML getSQLXML(String columnLabel) throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic void updateSQLXML(int columnIndex, SQLXML xmlObject)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void updateSQLXML(String columnLabel, SQLXML xmlObject)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic String getNString(int columnIndex) throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic String getNString(String columnLabel) throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic Reader getNCharacterStream(int columnIndex) throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic Reader getNCharacterStream(String columnLabel) throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic void updateNCharacterStream(int columnIndex, Reader x, long length)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void updateNCharacterStream(String columnLabel, Reader reader,","\t\t\tlong length) throws SQLException {","\t}","\t@Override","\tpublic void updateAsciiStream(int columnIndex, InputStream x, long length)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void updateBinaryStream(int columnIndex, InputStream x, long length)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void updateCharacterStream(int columnIndex, Reader x, long length)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void updateAsciiStream(String columnLabel, InputStream x, long length)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void updateBinaryStream(String columnLabel, InputStream x,","\t\t\tlong length) throws SQLException {","\t}","\t@Override","\tpublic void updateCharacterStream(String columnLabel, Reader reader,","\t\t\tlong length) throws SQLException {","\t}","\t@Override","\tpublic void updateBlob(int columnIndex, InputStream inputStream, long length)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void updateBlob(String columnLabel, InputStream inputStream,","\t\t\tlong length) throws SQLException {","\t}","\t@Override","\tpublic void updateClob(int columnIndex, Reader reader, long length)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void updateClob(String columnLabel, Reader reader, long length)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void updateNClob(int columnIndex, Reader reader, long length)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void updateNClob(String columnLabel, Reader reader, long length)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void updateNCharacterStream(int columnIndex, Reader x)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void updateNCharacterStream(String columnLabel, Reader reader)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void updateAsciiStream(int columnIndex, InputStream x)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void updateBinaryStream(int columnIndex, InputStream x)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void updateCharacterStream(int columnIndex, Reader x)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void updateAsciiStream(String columnLabel, InputStream x)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void updateBinaryStream(String columnLabel, InputStream x)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void updateCharacterStream(String columnLabel, Reader reader)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void updateBlob(int columnIndex, InputStream inputStream)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void updateBlob(String columnLabel, InputStream inputStream)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void updateClob(int columnIndex, Reader reader) throws SQLException {","\t}","\t@Override","\tpublic void updateClob(String columnLabel, Reader reader)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void updateNClob(int columnIndex, Reader reader) throws SQLException {","\t}","\t@Override","\tpublic void updateNClob(String columnLabel, Reader reader)","\t\t\tthrows SQLException {","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionInSelect.java|:["package smallsql.database;","import smallsql.database.language.Language;","class ExpressionInSelect extends ExpressionArithmetic {","\tfinal private CommandSelect cmdSel;","\tfinal private Index index = new Index(true);","\tfinal private SSConnection con;","\tExpressionInSelect(SSConnection con, Expression left, CommandSelect cmdSel, int operation) {","\t\tsuper(left, (Expressions)null, operation);","\t\tthis.cmdSel = cmdSel;","\t\tthis.con = con;","\t}","\tprivate void loadInList() throws Exception{","\t\tif(cmdSel.compile(con)){","\t\t\tcmdSel.from.execute();","\t\t\tif(cmdSel.columnExpressions.size() != 1)","\t\t\t\tthrow SmallSQLException.create(Language.SUBQUERY_COL_COUNT, new Integer(cmdSel.columnExpressions.size()));","\t\t\tindex.clear();","\t\t\twhile(cmdSel.next()){","\t\t\t\ttry{","\t\t\t\t\tindex.addValues(0, cmdSel.columnExpressions );","\t\t\t\t}catch(Exception e){","\t\t\t\t}","\t\t\t}","\t\t}","\t}","\tboolean isInList() throws Exception{","\t\tloadInList();","\t\treturn index.findRows(getParams(), false, null) != null;","\t}","}"],|project://smallsql/src/smallsql/database/language/Language_en.java|:["package smallsql.database.language;","public class Language_en extends Language{","}"],|project://smallsql/src/smallsql/database/CreateFile.java|:["package smallsql.database;","import java.io.File;","import java.nio.channels.FileChannel;","import java.sql.SQLException;","import smallsql.database.language.Language;","public class CreateFile extends TransactionStep{","    private final File file;","    private final SSConnection con;","    private final Database database;","    CreateFile(File file, FileChannel raFile,SSConnection con, Database database){","        super(raFile);","        this.file = file;","        this.con = con;","        this.database = database;","    }","    @Override","    long commit(){","        raFile = null;","        return -1;","    }","    @Override","    void rollback() throws SQLException{","        FileChannel currentRaFile = raFile;","        if(raFile == null){","            return;","        }","        raFile = null;","        try{","            currentRaFile.close();","        }catch(Throwable ex){","        }","        con.rollbackFile(currentRaFile);","        if(!file.delete()){","            file.deleteOnExit();","            throw SmallSQLException.create(Language.FILE_CANT_DELETE, file.getPath());","        }","        String name = file.getName();","        name = name.substring(0, name.lastIndexOf(\'.\'));","        database.removeTableView(name);","    }","}"],|project://smallsql/src/smallsql/database/MutableInteger.java|:["package smallsql.database;","final class MutableInteger extends Number implements Mutable{","\tint value;","\tMutableInteger(int value){","\t\tthis.value = value;","\t}","\tpublic double doubleValue() {","\t\treturn value;","\t}","\tpublic float floatValue() {","\t\treturn value;","\t}","\tpublic int intValue() {","\t\treturn value;","\t}","\tpublic long longValue() {","\t\treturn value;","\t}","\tpublic String toString(){","\t\treturn String.valueOf(value);","\t}","\tpublic Object getImmutableObject(){","\t\treturn Utils.getInteger(value);","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|:["package smallsql.database;","import java.io.ByteArrayOutputStream;","public class ExpressionFunctionReplace extends ExpressionFunctionReturnP1StringAndBinary {","\tfinal int getFunction() {","\t\treturn SQLTokenizer.REPLACE;","\t}","\tfinal boolean isNull() throws Exception {","\t\treturn param1.isNull() || param2.isNull() || param3.isNull();","\t}","\tfinal byte[] getBytes() throws Exception{","\t\tif(isNull()) return null;","        byte[] str1 = param1.getBytes();","        byte[] str2  = param2.getBytes();","        int length = str2.length;","        if(length == 0){","            return str1;","        }","        byte[] str3  = param3.getBytes();","        ByteArrayOutputStream buffer = new ByteArrayOutputStream();","        int idx1 = 0;","        int idx2 = Utils.indexOf(str2,str1,idx1);","        while(idx2 \> 0){","            buffer.write(str1,idx1,idx2-idx1);","            buffer.write(str3);","            idx1 = idx2 + length;","            idx2 = Utils.indexOf(str2,str1,idx1);","        }","        if(idx1 \> 0){","            buffer.write(str1,idx1,str1.length-idx1);","            return buffer.toByteArray();","        }","        return str1;","\t}","\tfinal String getString() throws Exception {","\t\tif(isNull()) return null;","\t\tString str1 = param1.getString();","\t\tString str2  = param2.getString();","        int length = str2.length();","        if(length == 0){","            return str1;","        }","        String str3  = param3.getString();","        StringBuffer buffer = new StringBuffer();","        int idx1 = 0;","        int idx2 = str1.indexOf(str2,idx1);","        while(idx2 \>= 0){","            buffer.append(str1.substring(idx1,idx2));","            buffer.append(str3);","            idx1 = idx2 + length;","            idx2 = str1.indexOf(str2,idx1);","        }","        if(idx1 \> 0){","            buffer.append(str1.substring(idx1));","            return buffer.toString();","        }","\t\treturn str1;","\t}","    int getPrecision() {","        return SSResultSetMetaData.getDataTypePrecision( getDataType(), -1 );","    }","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionRTrim.java|:["package smallsql.database;","public class ExpressionFunctionRTrim extends ExpressionFunctionReturnP1StringAndBinary {","\tfinal int getFunction() {","\t\treturn SQLTokenizer.RTRIM;","\t}","\tfinal boolean isNull() throws Exception {","\t\treturn param1.isNull();","\t}","\tfinal byte[] getBytes() throws Exception{","\t\tif(isNull()) return null;","\t\tbyte[] bytes = param1.getBytes();","        int length = bytes.length;","        while(length\>0 && bytes[length-1]==0){","            length--;","        }","\t\tbyte[] b = new byte[length];","\t\tSystem.arraycopy(bytes, 0, b, 0, length);","\t\treturn b;\t\t","\t}","\tfinal String getString() throws Exception {","\t\tif(isNull()) return null;","\t\tString str = param1.getString();","        int length = str.length();","        while(length\>0 && str.charAt(length-1)==\' \'){","            length--;","        }","\t\treturn str.substring(0,length);","\t}","}"],|project://smallsql/src/smallsql/database/Expression.java|:["package smallsql.database;","import java.sql.SQLException;","abstract class Expression implements Cloneable{","\tstatic final Expression NULL = new ExpressionValue( null, SQLTokenizer.NULL );","\tfinal private int type;","\tprivate String name; ","\tprivate String alias;","\tprivate Expression[] params;","\tExpression(int type){","\t\tthis.type = type;","\t}","\tprotected Object clone() throws CloneNotSupportedException{","\t\treturn super.clone();","\t}","\tfinal String getName(){ ","\t\treturn name; ","\t}","\tfinal void setName(String name){ ","\t\tthis.alias = this.name = name; ","\t}","\tfinal String getAlias(){ ","\t\treturn alias; ","\t}","\tfinal void setAlias(String alias){ ","\t\tthis.alias = alias; ","\t}","    void setParams( Expression[] params ){","        this.params = params;","    }","    void setParamAt( Expression param, int idx){","    \tparams[idx] = param;","    }","    final Expression[] getParams(){ return params; }","    void optimize() throws SQLException{","        if(params != null){","            for(int p=0; p\<params.length; p++){","                params[p].optimize();","            }","        }","    }","\tpublic boolean equals(Object expr){","\t\tif(!(expr instanceof Expression)) return false;","\t\tif( ((Expression)expr).type == type){","\t\t\tExpression[] p1 = ((Expression)expr).params;","\t\t\tExpression[] p2 = params;","\t\t\tif(p1 != null && p2 != null){","\t\t\t\tif(p1 == null) return false;","\t\t\t\tfor(int i=0; i\<p1.length; i++){","\t\t\t\t\tif(!p2[i].equals(p1[i])) return false;","\t\t\t\t}","\t\t\t}","\t\t\tString name1 = ((Expression)expr).name;","\t\t\tString name2 = name;","\t\t\tif(name1 == name2) return true;","\t\t\tif(name1 == null) return false;","\t\t\tif(name1.equalsIgnoreCase(name2)) return true;","\t\t}","\t\treturn false;","\t}","    abstract boolean isNull() throws Exception;","    abstract boolean getBoolean() throws Exception;","    abstract int getInt() throws Exception;","    abstract long getLong() throws Exception;","    abstract float getFloat() throws Exception;","    abstract double getDouble() throws Exception;","    abstract long getMoney() throws Exception;","    abstract MutableNumeric getNumeric() throws Exception;","    abstract Object getObject() throws Exception;","\tfinal Object getApiObject() throws Exception{","\t\tObject obj = getObject();","\t\tif(obj instanceof Mutable){","\t\t\treturn ((Mutable)obj).getImmutableObject();","\t\t}","\t\treturn obj;","\t}","    abstract String getString() throws Exception;","    abstract byte[] getBytes() throws Exception;","    abstract int getDataType();","    final int getType(){return type;}","\tString getTableName(){","\t\treturn null;","\t}","\tint getPrecision(){","\t\treturn SSResultSetMetaData.getDataTypePrecision( getDataType(), -1 );","\t}","\tint getScale(){","\t\treturn getScale(getDataType());","\t}","\tfinal static int getScale(int dataType){","\t\tswitch(dataType){","\t\t\tcase SQLTokenizer.MONEY:","\t\t\tcase SQLTokenizer.SMALLMONEY:","\t\t\t\treturn 4;","\t\t\tcase SQLTokenizer.TIMESTAMP:","\t\t\t\treturn 9; ","\t\t\tcase SQLTokenizer.NUMERIC:","\t\t\tcase SQLTokenizer.DECIMAL:","\t\t\t\treturn 38;","\t\t\tdefault: return 0;","\t\t}","\t}","\tint getDisplaySize(){","\t\treturn SSResultSetMetaData.getDisplaySize(getDataType(), getPrecision(), getScale());","\t}","\tboolean isDefinitelyWritable(){","\t\treturn false;","\t}","\tboolean isAutoIncrement(){","\t\treturn false;","\t}","\tboolean isCaseSensitive(){","\t\treturn false; ","\t}","\tboolean isNullable(){","\t\treturn true; ","\t}","    static final int VALUE      = 1;","    static final int NAME       = 2;","    static final int FUNCTION   = 3;","\tstatic final int GROUP_BY   = 11;","\tstatic final int COUNT\t    = 12;","\tstatic final int SUM\t    = 13;","\tstatic final int FIRST\t\t= 14;","\tstatic final int LAST\t\t= 15;","\tstatic final int MIN\t\t= 16;","\tstatic final int MAX\t\t= 17;","\tstatic final int GROUP_BEGIN= GROUP_BY;","}"],|project://smallsql/src/smallsql/database/LongTreeList.java|:["package smallsql.database;","import java.sql.*;","import smallsql.database.language.Language;","final class LongTreeList {","\tprivate byte[] data;","\tprivate int size;","\tprivate int offset;","\tstatic final private int pointerSize = 3; ","\tLongTreeList(){","\t\tdata = new byte[25];","\t}","\tLongTreeList(long value) throws SQLException{","\t\tthis();","\t\tadd(value);","\t}","\tLongTreeList(StoreImpl input){","\t\tint readSize = input.readInt();","\t\tdata     = input.readBytes(readSize);","\t}","\tfinal void save(StoreImpl output){","\t\toutput.writeInt(size);","\t\toutput.writeBytes(data, 0, size);","\t}","\tfinal void add(long value) throws SQLException{","\t\toffset = 0;","\t\tif(size == 0){","\t\t\twriteShort( (int)(value \>\> 48) );","\t\t\twritePointer ( offset+pointerSize+2 );","\t\t\twriteShort( 0 );","\t\t\twriteShort( (int)(value \>\> 32) );","\t\t\twritePointer ( offset+pointerSize+2 );","\t\t\twriteShort( 0 );","\t\t\twriteShort( (int)(value \>\> 16) );","\t\t\twritePointer ( offset+pointerSize+2 );","\t\t\twriteShort( 0 );","\t\t\twriteShort( (int)(value) );","\t\t\twriteShort( 0 );","\t\t\tsize = offset;","\t\t\treturn;","\t\t}","\t\tint shift = 48;","\t\tboolean firstNode = (size \> 2); ","\t\twhile(shift\>=0){","\t\t\tint octet = (int)(value \>\> shift) & 0xFFFF;","\t\t\twhile(true){","\t\t\t\tint nextEntry = getUnsignedShort();","\t\t\t\tif(nextEntry == octet){","\t\t\t\t\tif(shift == 0) return; ","\t\t\t\t\toffset = getPointer();","\t\t\t\t\tfirstNode = true;","\t\t\t\t\tbreak;","\t\t\t\t}","\t\t\t\tif((nextEntry == 0 && !firstNode) || nextEntry \> octet){","\t\t\t\t\toffset -= 2;","\t\t\t\t\twhile(true){","\t\t\t\t\t\tif(shift != 0){","\t\t\t\t\t\t\toffset = insertNode(octet);\t\t\t\t\t\t","\t\t\t\t\t\t}else{","\t\t\t\t\t\t\tinsertNodeLastLevel(octet);\t","\t\t\t\t\t\t\treturn;","\t\t\t\t\t\t}","\t\t\t\t\t\tshift -= 16;","\t\t\t\t\t\toctet = (int)(value \>\> shift) & 0xFFFF;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\tfirstNode = false;","\t\t\t\tif(shift != 0) offset += pointerSize;","\t\t\t}","\t\t\tshift -= 16;","\t\t}","\t}","\tfinal void remove(long value) throws SQLException{","\t\tif(size == 0) return;","\t\tint offset1 = 0;","\t\tint offset2 = 0;","\t\tint offset3 = 0;","\t\toffset = 0;","\t\tint shift = 48;","\t\tboolean firstNode = true; ","\t\tboolean firstNode1 = true;","\t\tboolean firstNode2 = true;","\t\tboolean firstNode3 = true;","\t\twhile(shift\>=0){","\t\t\tint octet = (int)(value \>\> shift) & 0xFFFF;","\t\t\twhile(true){","\t\t\t\tint nextEntry = getUnsignedShort();","\t\t\t\tif(nextEntry == octet){","\t\t\t\t\tif(shift == 0){","\t\t\t\t\t\toffset -= 2;","\t\t\t\t\t\tremoveNodeLastLevel();","\t\t\t\t\t\twhile(firstNode && getUnsignedShort() == 0){","\t\t\t\t\t\t\toffset -= 2;","\t\t\t\t\t\t\tremoveNodeLastLevel(); ","\t\t\t\t\t\t\tif(shift \>= 3) ","\t\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\t\toffset = offset1;","\t\t\t\t\t\t\toffset1 = offset2;","\t\t\t\t\t\t\toffset2 = offset3;","\t\t\t\t\t\t\tfirstNode = firstNode1;","\t\t\t\t\t\t\tfirstNode1 = firstNode2;","\t\t\t\t\t\t\tfirstNode2 = firstNode3;","\t\t\t\t\t\t\tremoveNode();","\t\t\t\t\t\t\tshift++;","\t\t\t\t\t\t}","\t\t\t\t\t\treturn;","\t\t\t\t\t}","\t\t\t\t\toffset3 = offset2;","\t\t\t\t\toffset2 = offset1;","\t\t\t\t\toffset1 = offset -2;","\t\t\t\t\toffset = getPointer();","\t\t\t\t\tfirstNode3 = firstNode2;","\t\t\t\t\tfirstNode2 = firstNode1;","\t\t\t\t\tfirstNode1 = firstNode;","\t\t\t\t\tfirstNode = true;","\t\t\t\t\tbreak;","\t\t\t\t}","\t\t\t\tif((nextEntry == 0 && !firstNode) || nextEntry \> octet){","\t\t\t\t\treturn;","\t\t\t\t}","\t\t\t\tfirstNode = false;","\t\t\t\tif(shift != 0) offset += pointerSize;","\t\t\t}","\t\t\tshift -= 16;","\t\t}","\t}","\tfinal long getNext(LongTreeListEnum listEnum){","\t\tint shift = (3-listEnum.stack) \<\< 4;","\t\tif(shift \>= 64) return -1; ","\t\toffset \t\t= listEnum.offsetStack[listEnum.stack];","\t\tlong result = listEnum.resultStack[listEnum.stack];","\t\tboolean firstNode = (offset == 0); ","\t\twhile(true){","\t\t\tint nextEntry = getUnsignedShort();","\t\t\tif(nextEntry != 0 || firstNode){","\t\t\t\tresult |= (((long)nextEntry) \<\< shift);","\t\t\t\tif(listEnum.stack\>=3){","\t\t\t\t\tlistEnum.offsetStack[listEnum.stack] = offset;","\t\t\t\t\treturn result;","\t\t\t\t}","\t\t\t\tlistEnum.offsetStack[listEnum.stack] = offset+pointerSize;","\t\t\t\toffset = getPointer();","\t\t\t\tshift -= 16;","\t\t\t\tlistEnum.stack++;","\t\t\t\tlistEnum.resultStack[listEnum.stack] = result;","\t\t\t\tfirstNode = true;","\t\t\t}else{","\t\t\t\tshift += 16;","\t\t\t\tlistEnum.stack--;","\t\t\t\tif(listEnum.stack\<0) return -1; ","\t\t\t\tresult = listEnum.resultStack[listEnum.stack];","\t\t\t\toffset = listEnum.offsetStack[listEnum.stack];","\t\t\t\tfirstNode = false;","\t\t\t}","\t\t}","\t}","\tfinal long getPrevious(LongTreeListEnum listEnum){","\t\tint shift = (3-listEnum.stack) \<\< 4;","\t\tif(shift \>= 64){ ","\t\t\tshift = 48;","\t\t\toffset = 0;","\t\t\tlistEnum.stack = 0;","\t\t\tlistEnum.offsetStack[0] = 2 + pointerSize;","\t\t\tloopToEndOfNode(listEnum);","\t\t}else{","\t\t\tsetPreviousOffset(listEnum);","\t\t}","\t\tlong result = listEnum.resultStack[listEnum.stack];","\t\twhile(true){","\t\t\tint nextEntry = (offset \< 0) ? -1 : getUnsignedShort();","\t\t\tif(nextEntry \>= 0){","\t\t\t\tresult |= (((long)nextEntry) \<\< shift);","\t\t\t\tif(listEnum.stack\>=3){","\t\t\t\t\tlistEnum.offsetStack[listEnum.stack] = offset;","\t\t\t\t\treturn result;","\t\t\t\t}","\t\t\t\tlistEnum.offsetStack[listEnum.stack] = offset+pointerSize;","\t\t\t\toffset = getPointer();","\t\t\t\tshift -= 16;","\t\t\t\tlistEnum.stack++;","\t\t\t\tlistEnum.resultStack[listEnum.stack] = result;","\t\t\t\tloopToEndOfNode(listEnum);","\t\t\t}else{","\t\t\t\tshift += 16;","\t\t\t\tlistEnum.stack--;","\t\t\t\tif(listEnum.stack\<0) return -1; ","\t\t\t\tresult = listEnum.resultStack[listEnum.stack];","\t\t\t\tsetPreviousOffset(listEnum);","\t\t\t}","\t\t}","\t}","\tfinal private void setPreviousOffset(LongTreeListEnum listEnum){","\t\tint previousOffset = listEnum.offsetStack[listEnum.stack] - 2*(2 + (listEnum.stack\>=3 ? 0 : pointerSize));","\t\tif(listEnum.stack == 0){","\t\t\toffset = previousOffset;","\t\t\treturn;","\t\t}","\t\toffset = listEnum.offsetStack[listEnum.stack-1] - pointerSize;","\t\tint pointer = getPointer();","\t\tif(pointer \<= previousOffset){","\t\t\toffset = previousOffset;","\t\t\treturn;","\t\t}","\t\toffset = -1;","\t}","\tfinal private void loopToEndOfNode(LongTreeListEnum listEnum){","\t\tint nextEntry;","\t\tint nextOffset1, nextOffset2;","\t\tnextOffset1 = offset;","\t\toffset += 2;","\t\tif(listEnum.stack\<3)","\t\t\toffset += pointerSize;","\t\tdo{","\t\t\tnextOffset2 = nextOffset1;","\t\t\tnextOffset1 = offset;","\t\t\tnextEntry = getUnsignedShort();","\t\t\tif(listEnum.stack\<3)","\t\t\t\toffset += pointerSize;","\t\t}while(nextEntry != 0);","\t\toffset = nextOffset2;","\t}","\tfinal private int insertNode(int octet) throws SQLException{","\t\tint oldOffset = offset;","\t\tif(data.length \< size + 4 + pointerSize) resize();","\t\tSystem.arraycopy(data, oldOffset, data, oldOffset + 2+pointerSize, size-oldOffset);","\t\tsize += 2+pointerSize;","\t\twriteShort( octet );","\t\twritePointer( size );","\t\tcorrectPointers( 0, oldOffset, 2+pointerSize, 0 );","\t\tdata[size++] = (byte)0;","\t\tdata[size++] = (byte)0;","\t\treturn size-2;","\t}","\tfinal private void insertNodeLastLevel(int octet) throws SQLException{","\t\tint oldOffset = offset;","\t\tif(data.length \< size + 2) resize();","\t\tSystem.arraycopy(data, offset, data, offset + 2, size-offset);","\t\tsize += 2;","\t\twriteShort( octet );","\t\tcorrectPointers( 0, oldOffset, 2, 0 );\t","\t}","\tfinal private void removeNode() throws SQLException{","\t\tint oldOffset = offset;","\t\tcorrectPointers( 0, oldOffset, -(2+pointerSize), 0 );","\t\tsize -= 2+pointerSize;","\t\tSystem.arraycopy(data, oldOffset + 2+pointerSize, data, oldOffset, size-oldOffset);","\t\toffset = oldOffset;","\t}","\tfinal private void removeNodeLastLevel() throws SQLException{","\t\tint oldOffset = offset;","\t\tcorrectPointers( 0, oldOffset, -2, 0 );","\t\tsize -= 2;","\t\tSystem.arraycopy(data, oldOffset + 2, data, oldOffset, size-oldOffset);","\t\toffset = oldOffset;","\t}","\tfinal private void correctPointers(int startOffset, int oldOffset, int diff, int level){","\t\toffset = startOffset;","\t\tboolean firstNode = true;","\t\twhile(offset \< size){","\t\t\tif(offset == oldOffset){","\t\t\t\tint absDiff = Math.abs(diff);","\t\t\t\tif(absDiff == 2) return;","\t\t\t\toffset += absDiff;","\t\t\t\tfirstNode = false;","\t\t\t\tcontinue;","\t\t\t}","\t\t\tint value = getUnsignedShort();","\t\t\tif(value != 0 || firstNode){","\t\t\t\tint pointer = getPointer();","\t\t\t\tif(pointer \> oldOffset){","\t\t\t\t\toffset  -= pointerSize;","\t\t\t\t\twritePointer( pointer + diff );","\t\t\t\t\tif(diff \> 0) pointer += diff;","\t\t\t\t}\t\t\t\t","\t\t\t\tif(level \< 2){","\t\t\t\t\tstartOffset = offset;","\t\t\t\t\tcorrectPointers( pointer, oldOffset, diff, level+1);","\t\t\t\t\toffset = startOffset;","\t\t\t\t}","\t\t\t\tfirstNode = false;","\t\t\t}else{","\t\t\t\treturn;","\t\t\t}","\t\t}","\t}","\tfinal private int getPointer(){","\t\tint value = 0;","\t\tfor(int i=0; i\<pointerSize; i++){","\t\t\tvalue \<\<= 8;","\t\t\tvalue += (data[offset++] & 0xFF);","\t\t}","\t\treturn value;","\t}","\tfinal private void writePointer(int value){","\t\tfor(int i=pointerSize-1; i\>=0; i--){","\t\t\tdata[offset++] = (byte)(value \>\> (i*8));","\t\t}","\t}","\tfinal private int getUnsignedShort(){","\t\treturn ((data[ offset++ ] & 0xFF) \<\< 8) | (data[ offset++ ] & 0xFF);","\t}","\tfinal private void writeShort(int value){","\t\tdata[offset++] = (byte)(value \>\> 8);","\t\tdata[offset++] = (byte)(value);","\t}","\tprivate final void resize() throws SQLException{","\t\tint newsize = data.length \<\< 1;","\t\tif(newsize \> 0xFFFFFF){ ","\t\t\tnewsize = 0xFFFFFF;","\t\t\tif(newsize == data.length) throw SmallSQLException.create(Language.INDEX_TOOMANY_EQUALS);","\t\t}","\t\tbyte[] temp = new byte[newsize];","\t\tSystem.arraycopy(data, 0, temp, 0, data.length);","\t\tdata = temp;","\t}","\tfinal int getSize() {","\t\treturn size;","\t}","}"],|project://smallsql/src/smallsql/database/CommandInsert.java|:["package smallsql.database;","import java.sql.SQLException;","import java.util.ArrayList;","import smallsql.database.language.Language;","public class CommandInsert extends Command {","    boolean noColumns; ","    private CommandSelect cmdSel;","    private Table table;","    private long tableTimestamp;","    private int[] matrix;  ","    CommandInsert(Logger log, String name){","        super(log);","        this.name = name;","    }","    void addColumnExpression(Expression column) throws SQLException{","        if(columnExpressions.indexOf(column) \>= 0){","            throw SmallSQLException.create(Language.COL_DUPLICATE, column);","        }","        super.addColumnExpression(column);","    }","    void addValues(Expressions values){","\t\tthis.cmdSel = new CommandSelect(log, values );","    }","    void addValues( CommandSelect cmdSel ){","    \tthis.cmdSel = cmdSel;","    }","    private void compile(SSConnection con) throws Exception{    \t","        TableView tableView = con.getDatabase(false).getTableView( con, name);","        if(!(tableView instanceof Table))","        \tthrow SmallSQLException.create(Language.VIEW_INSERT);","        table = (Table)tableView;","        tableTimestamp = table.getTimestamp();","\t\tcmdSel.compile(con);","        int count = table.columns.size();","        matrix = new int[count];","        if(noColumns){","            columnExpressions.clear();","            for(int i=0; i\<count; i++){","                matrix[i] = i;","            }","\t\t\tif(count != cmdSel.columnExpressions.size())","\t\t\t\t\tthrow SmallSQLException.create(Language.COL_VAL_UNMATCH);","        }else{","            for(int i=0; i\<count; i++) matrix[i] = -1;","            for(int c=0; c\<columnExpressions.size(); c++){","                Expression sqlCol = columnExpressions.get(c);","                String sqlColName = sqlCol.getName();","                int idx = table.findColumnIdx( sqlColName );","                if(idx \>= 0){","                    matrix[idx] = c;","                }else{","                    throw SmallSQLException.create(Language.COL_MISSING, sqlColName);","                }","            }","\t\t\tif(columnExpressions.size() != cmdSel.columnExpressions.size())","\t\t\t\t\tthrow SmallSQLException.create(Language.COL_VAL_UNMATCH);","        }","    }","    void executeImpl(SSConnection con, SSStatement st) throws Exception {","        if(table == null || tableTimestamp != table.getTimestamp()) compile( con );","\t\tfinal IndexDescriptions indexes = table.indexes;","\t\tupdateCount = 0;","\t\tcmdSel.from.execute();","\t\tcmdSel.beforeFirst();","        Strings keyColumnNames = null;","        ArrayList keys = null;","        boolean needGeneratedKeys = st.needGeneratedKeys();","        int generatedKeysType = 0;","        while(cmdSel.next()){","            if(needGeneratedKeys){","                keyColumnNames = new Strings();","                keys = new ArrayList();","                if(st.getGeneratedKeyNames() != null)","                    generatedKeysType = 1;","                if(st.getGeneratedKeyIndexes() != null)","                    generatedKeysType = 2;","            }","\t        StoreImpl store = table.getStoreInsert( con );","\t        for(int c=0; c\<matrix.length; c++){","\t            Column column = table.columns.get(c);","\t            int idx = matrix[c];","\t            Expression valueExpress;","                if(idx \>= 0){","                    valueExpress = cmdSel.columnExpressions.get(idx);","                }else{","                    valueExpress = column.getDefaultValue(con);","                    if(needGeneratedKeys && generatedKeysType == 0 && valueExpress != Expression.NULL){","                        keyColumnNames.add(column.getName());","                        keys.add(valueExpress.getObject());","                    }","                }","                if(needGeneratedKeys && generatedKeysType == 1){","                    String[] keyNames = st.getGeneratedKeyNames();","                    for(int i=0; i\<keyNames.length; i++){","                        if(column.getName().equalsIgnoreCase(keyNames[i])){","                            keyColumnNames.add(column.getName());","                            keys.add(valueExpress.getObject());","                            break;","                        }","                    }","                }","                if(needGeneratedKeys && generatedKeysType == 2){","                    int[] keyIndexes = st.getGeneratedKeyIndexes();","                    for(int i=0; i\<keyIndexes.length; i++){","                        if(c+1 == keyIndexes[i]){","                            keyColumnNames.add(column.getName());","                            keys.add(valueExpress.getObject());","                            break;","                        }","                    }","                }","\t            store.writeExpression( valueExpress, column );","\t\t\t\tfor(int i=0; i\<indexes.size(); i++){","\t\t\t\t\tindexes.get(i).writeExpression( c, valueExpress );","\t\t\t\t}","\t        }","\t        store.writeFinsh( con );","\t\t\tfor(int i=0; i\<indexes.size(); i++){","\t\t\t\tindexes.get(i).writeFinish( con );","\t\t\t}","\t        updateCount++;","            if(needGeneratedKeys){","                Object[][] data = new Object[1][keys.size()];","                keys.toArray(data[0]);","                st.setGeneratedKeys(new SSResultSet( st, Utils.createMemoryCommandSelect( con, keyColumnNames.toArray(), data)));","            }","        }","    }","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionBitLen.java|:["package smallsql.database;","final class ExpressionFunctionBitLen extends ExpressionFunctionReturnInt {","\tprivate static final int BYTES_PER_CHAR = 2;","\tfinal int getFunction() {","\t\treturn SQLTokenizer.BITLEN;","\t}","    boolean isNull() throws Exception {","        return param1.isNull();","    }","\tfinal int getInt() throws Exception {","        if(isNull()) return 0;","        String str = param1.getString();","\t\treturn str.length() * BYTES_PER_CHAR * 8;","\t}","}"],|project://smallsql/src/smallsql/database/JoinScroll.java|:["package smallsql.database;","class JoinScroll{","    private final Expression condition; ","    final int type;","    final RowSource left; ","    final RowSource right;","    private boolean isBeforeFirst = true;","    private boolean isOuterValid = true;","    private boolean[] isFullNotValid;","    private int fullRightRowCounter;","    private int fullRowCount;","    private int fullReturnCounter = -1;","    JoinScroll( int type, RowSource left, RowSource right, Expression condition ){","        this.type = type;","        this.condition = condition;","        this.left = left;","        this.right = right;","        if(type == Join.FULL_JOIN){","            isFullNotValid = new boolean[10];","        }","    }","    void beforeFirst() throws Exception{","        left.beforeFirst();","        right.beforeFirst();","        isBeforeFirst = true;","        fullRightRowCounter = 0;","        fullRowCount        = 0;","        fullReturnCounter   = -1;","    }","    boolean next() throws Exception{","        boolean result;","        if(fullReturnCounter \>=0){","            do{","                if(fullReturnCounter \>= fullRowCount){","                    return false; ","                }","                right.next();","            }while(isFullNotValid[fullReturnCounter++]);","            return true;","        }","        do{","            if(isBeforeFirst){               ","                result = left.next();","                if(result){ ","                    result = right.first();","                    if(!result){","                        switch(type){","                            case Join.LEFT_JOIN:","                            case Join.FULL_JOIN:","                                isOuterValid = false;","                                isBeforeFirst = false;","                                right.nullRow();","                                return true;","                        }","                    }else fullRightRowCounter++;","                }else{","                    if(type == Join.FULL_JOIN){","                        while(right.next()){","                            fullRightRowCounter++;","                        }","                        fullRowCount = fullRightRowCounter;","                    }","                }","            }else{","                result = right.next();              ","                if(!result){","                    switch(type){","                        case Join.LEFT_JOIN:","                        case Join.FULL_JOIN:","                            if(isOuterValid){","                                isOuterValid = false;","                                right.nullRow();","                                return true;","                            }","                            fullRowCount = Math.max( fullRowCount, fullRightRowCounter);","                            fullRightRowCounter = 0;","                    }","                    isOuterValid = true;","                    result = left.next();","                    if(result){ ","                        result = right.first();","                        if(!result){","                            switch(type){","                                case Join.LEFT_JOIN:","                                case Join.FULL_JOIN:","                                    isOuterValid = false;","                                    right.nullRow();","                                    return true;","                            }","                        }else fullRightRowCounter++;","                    }","                }else fullRightRowCounter++;","            }","            isBeforeFirst = false;","        }while(result && !getBoolean());","        isOuterValid = false;","        if(type == Join.FULL_JOIN){","            if(fullRightRowCounter \>= isFullNotValid.length){","                boolean[] temp = new boolean[fullRightRowCounter \<\< 1];","                System.arraycopy( isFullNotValid, 0, temp, 0, fullRightRowCounter);","                isFullNotValid = temp;","            }","            if(!result){","                if(fullRowCount == 0){","                    return false; ","                }","                if(fullReturnCounter\<0) {","                    fullReturnCounter = 0;","                    right.first();","                    left.nullRow();","                }","                while(isFullNotValid[fullReturnCounter++]){","                    if(fullReturnCounter \>= fullRowCount){","                       return false; ","                    }","                    right.next();","                }","                return true;","            }else","                isFullNotValid[fullRightRowCounter-1] = result;","        }","        return result;","    }","    private boolean getBoolean() throws Exception{","        return type == Join.CROSS_JOIN || condition.getBoolean();","    }","}"],|project://smallsql/src/smallsql/tools/CommandLine.java|:["package smallsql.tools;","import java.io.*;","import java.sql.*;","import java.util.Properties;","import javax.swing.JOptionPane;","import smallsql.database.*;","public class CommandLine {","    public static void main(String[] args) throws Exception {","        System.out.println(\"SmallSQL Database command line tool\\n\");","        Connection con = new SSDriver().connect(\"jdbc:smallsql\", new Properties());","        Statement st = con.createStatement();","        if(args.length\>0){","            con.setCatalog(args[0]);","        }","        System.out.println(\"\\tVersion: \"+con.getMetaData().getDatabaseProductVersion());","        System.out.println(\"\\tCurrent database: \"+con.getCatalog());","        System.out.println();","        System.out.println(\"\\tUse the USE command to change the database context.\");","        System.out.println(\"\\tType 2 times ENTER to execute any SQL command.\");","        StringBuffer command = new StringBuffer();","        BufferedReader input = new BufferedReader(new InputStreamReader(System.in));","        while(true){","            try {","                String line;","                try{","                    line = input.readLine();","                }catch(IOException ex){","                    ex.printStackTrace();","                    JOptionPane.showMessageDialog( null, \"You need to start the command line of the \\nSmallSQL Database with a console window:\\n\\n       java -jar smallsql.jar\\n\\n\" + ex, \"Fatal Error\", JOptionPane.OK_OPTION);","                    return;","                }","                if(line == null){","                    return; ","                }","                if(line.length() == 0 && command.length() \> 0){","                    boolean isRS = st.execute(command.toString());","                    if(isRS){","                        printRS(st.getResultSet());","                    }","                    command.setLength(0);","                }","                command.append(line).append(\'\\n\');","            } catch (Exception e) {","                command.setLength(0);","                e.printStackTrace();","            }","        }","    }","    private static void printRS(ResultSet rs) throws SQLException {","        ResultSetMetaData md = rs.getMetaData();","        int count = md.getColumnCount();","        for(int i=1; i\<=count; i++){","            System.out.print(md.getColumnLabel(i));","            System.out.print(\'\\t\');","        }","        System.out.println();","        while(rs.next()){","            for(int i=1; i\<=count; i++){","                System.out.print(rs.getObject(i));","                System.out.print(\'\\t\');","            }","            System.out.println();","        }","    }","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|:["package smallsql.database;","import java.util.Arrays;","import smallsql.database.language.Language;","public class ExpressionFunctionConvert extends ExpressionFunction {","\tfinal private Column datatype;","\tpublic ExpressionFunctionConvert(Column datatype, Expression value, Expression style) {","\t\tsuper();","\t\tthis.datatype = datatype;","\t\tExpression[] params = (style == null) ? new Expression[]{value} : new Expression[]{value, style};","\t\tsetParams( params );","\t}","\tint getFunction() {","\t\treturn SQLTokenizer.CONVERT;","\t}","\tboolean isNull() throws Exception {","\t\treturn param1.isNull();","\t}","\tboolean getBoolean() throws Exception {","\t\treturn ExpressionValue.getBoolean( getObject(), getDataType() );","\t}","\tint getInt() throws Exception {","\t\treturn ExpressionValue.getInt( getObject(), getDataType() );","\t}","\tlong getLong() throws Exception {","\t\treturn ExpressionValue.getLong( getObject(), getDataType() );","\t}","\tfloat getFloat() throws Exception {","\t\treturn ExpressionValue.getFloat( getObject(), getDataType() );","\t}","\tdouble getDouble() throws Exception {","\t\treturn ExpressionValue.getDouble( getObject(), getDataType() );","\t}","\tlong getMoney() throws Exception {","\t\treturn ExpressionValue.getMoney(getObject(), getDataType());","\t}","\tMutableNumeric getNumeric() throws Exception {","\t\treturn ExpressionValue.getNumeric(getObject(), getDataType());","\t}","\tString getString() throws Exception {","\t\tObject obj = getObject();","\t\tif(obj == null) return null;","\t\tswitch(datatype.getDataType()){","\t\t\tcase SQLTokenizer.BIT:","\t\t\t\treturn ((Boolean)obj).booleanValue() ? \"1\" : \"0\";","            case SQLTokenizer.BINARY:","            case SQLTokenizer.VARBINARY:","            case SQLTokenizer.LONGVARBINARY:","                    return new String( (byte[])obj );","\t\t}","\t\treturn obj.toString();","\t}","\tObject getObject() throws Exception {","\t\tif(param1.isNull()) return null;","\t\tfinal int dataType = getDataType();","\t\tswitch(dataType){","\t\t\tcase SQLTokenizer.LONGVARCHAR:","\t\t\t\treturn convertToString();","\t\t\tcase SQLTokenizer.VARCHAR:{","\t\t\t\tString str = convertToString();","\t\t\t\tint length = datatype.getDisplaySize();","\t\t\t\tif(length \> str.length())","\t\t\t\t\treturn str;","\t\t\t\treturn str.substring(0,length);","\t\t\t}","\t\t\tcase SQLTokenizer.CHAR:{","\t\t\t\tString str = convertToString();","\t\t\t\tint length = datatype.getDisplaySize();","\t\t\t\tif(length \> str.length()){","\t\t\t\t\tchar[] buffer = new char[length-str.length()];","\t\t\t\t\tArrays.fill(buffer, \' \');","\t\t\t\t\treturn str + new String(buffer);","\t\t\t\t}","\t\t\t\treturn str.substring(0,length);","\t\t\t}","\t\t\tcase SQLTokenizer.LONGVARBINARY:","\t\t\t\treturn param1.getBytes();","\t\t\tcase SQLTokenizer.VARBINARY:{","\t\t\t\tbyte[] bytes = param1.getBytes();","\t\t\t\tint length = datatype.getPrecision();","\t\t\t\tif(length \< bytes.length){","\t\t\t\t\tbyte[] buffer = new byte[length];","\t\t\t\t\tSystem.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );","\t\t\t\t\treturn buffer;","\t\t\t\t}","\t\t\t\treturn bytes;","\t\t\t}","\t\t\tcase SQLTokenizer.BINARY:{","\t\t\t\tbyte[] bytes = param1.getBytes();","\t\t\t\tint length = datatype.getPrecision();","\t\t\t\tif(length != bytes.length){","\t\t\t\t\tbyte[] buffer = new byte[length];","\t\t\t\t\tSystem.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );","\t\t\t\t\treturn buffer;","\t\t\t\t}","\t\t\t\treturn bytes;","\t\t\t}","\t\t\tcase SQLTokenizer.BOOLEAN:","\t\t\tcase SQLTokenizer.BIT:","\t\t\t\treturn param1.getBoolean() ? Boolean.TRUE : Boolean.FALSE;","\t\t\tcase SQLTokenizer.TINYINT:","\t\t\t\treturn Utils.getInteger(param1.getInt() & 0xFF);","\t\t\tcase SQLTokenizer.SMALLINT:","\t\t\t\treturn Utils.getInteger((short)param1.getInt());","\t\t\tcase SQLTokenizer.INT:","\t\t\t\treturn Utils.getInteger(param1.getInt());","\t\t\tcase SQLTokenizer.BIGINT:","\t\t\t\treturn new Long(param1.getLong());","\t\t\tcase SQLTokenizer.REAL:","\t\t\t\treturn new Float(param1.getFloat());","\t\t\tcase SQLTokenizer.FLOAT:","\t\t\tcase SQLTokenizer.DOUBLE:","\t\t\t\treturn new Double(param1.getDouble());","\t\t\tcase SQLTokenizer.DATE:","\t\t\tcase SQLTokenizer.TIME:","\t\t\tcase SQLTokenizer.TIMESTAMP:","\t\t\tcase SQLTokenizer.SMALLDATETIME:","\t\t\t\treturn new DateTime( getDateTimeLong(), dataType );","\t\t\tcase SQLTokenizer.NUMERIC:","\t\t\tcase SQLTokenizer.DECIMAL:","\t\t\t\tMutableNumeric num = param1.getNumeric();","\t\t\t\tif(num != null && (dataType == SQLTokenizer.NUMERIC || dataType == SQLTokenizer.DECIMAL))","\t\t\t\t\tnum.setScale(getScale());","\t\t\t\treturn num;","\t\t\tcase SQLTokenizer.MONEY:","\t\t\tcase SQLTokenizer.SMALLMONEY:","\t\t\t\treturn Money.createFromUnscaledValue(param1.getMoney());","\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:","\t\t\t\tswitch(param1.getDataType()){","\t\t\t\t\tcase SQLTokenizer.VARCHAR:","\t\t\t\t\tcase SQLTokenizer.CHAR:","\t\t\t\t\tcase SQLTokenizer.LONGVARCHAR:","\t\t\t\t\tcase SQLTokenizer.CLOB:","\t\t\t\t\t\treturn Utils.bytes2unique( Utils.unique2bytes(param1.getString()), 0);","\t\t\t\t}","\t\t\t\treturn Utils.bytes2unique(param1.getBytes(), 0);","\t\t}","\t\tObject[] param = { SQLTokenizer.getKeyWord(dataType) };","\t\tthrow SmallSQLException.create(Language.UNSUPPORTED_TYPE_CONV, param);","\t}","\tfinal private String convertToString() throws Exception{","\t\tif(param2 != null){","\t\t\tint type = param1.getDataType();","\t\t\tswitch(type){","\t\t\t\tcase SQLTokenizer.SMALLDATETIME:","\t\t\t\t\ttype = SQLTokenizer.TIMESTAMP;","\t\t\t\tcase SQLTokenizer.TIMESTAMP:","\t\t\t\tcase SQLTokenizer.DATE:","\t\t\t\tcase SQLTokenizer.TIME:","\t\t\t\t\treturn new DateTime( param1.getLong(), type ).toString(param2.getInt());","\t\t\t\tdefault:","\t\t\t\t\treturn param1.getString();","\t\t\t}","\t\t}else","\t\t\treturn param1.getString();","\t}","\tfinal private long getDateTimeLong() throws Exception{","\t\t\tswitch(param1.getDataType()){","\t\t\t\tcase SQLTokenizer.LONGVARCHAR:","\t\t\t\tcase SQLTokenizer.VARCHAR:","\t\t\t\tcase SQLTokenizer.CHAR:","\t\t\t\t\treturn DateTime.parse( param1.getString() );","\t\t\t}","\t\treturn param1.getLong();","\t}","\tfinal int getDataType() {","\t\treturn datatype.getDataType();","\t}","\tfinal int getPrecision(){","\t\tfinal int dataType = getDataType();","\t\tswitch(dataType){","\t\t\tcase SQLTokenizer.VARCHAR:","\t\t\tcase SQLTokenizer.VARBINARY:","\t\t\tcase SQLTokenizer.BINARY:","\t\t\tcase SQLTokenizer.CHAR:","\t\t\tcase SQLTokenizer.NUMERIC:","\t\t\tcase SQLTokenizer.DECIMAL:","\t\t\t\treturn datatype.getPrecision();","\t\t\tdefault:","\t\t\t\treturn super.getPrecision();","\t\t}","\t}","\tfinal int getScale() {","\t\treturn datatype.getScale();","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionLeft.java|:["package smallsql.database;","public class ExpressionFunctionLeft extends ExpressionFunctionReturnP1StringAndBinary {","\tfinal int getFunction() {","\t\treturn SQLTokenizer.LEFT;","\t}","\tfinal boolean isNull() throws Exception {","\t\treturn param1.isNull() || param2.isNull();","\t}","\tfinal byte[] getBytes() throws Exception{","\t\tif(isNull()) return null;","\t\tbyte[] bytes = param1.getBytes();","\t\tint length = param2.getInt();","\t\tif(bytes.length \<= length) return bytes;","\t\tbyte[] b = new byte[length];","\t\tSystem.arraycopy(bytes, 0, b, 0, length);","\t\treturn b;\t\t","\t}","\tfinal String getString() throws Exception {","\t\tif(isNull()) return null;","\t\tString str = param1.getString();","\t\tint length = param2.getInt();","\t\tlength = Math.min( length, str.length() );","\t\treturn str.substring(0,length);","\t}","}"],|project://smallsql/src/smallsql/database/CommandSet.java|:["package smallsql.database;","public class CommandSet extends Command {","    int isolationLevel;","    CommandSet( Logger log, int type ){","\t\tsuper(log);","        this.type = type;","    }","    void executeImpl(SSConnection con, SSStatement st) throws java.sql.SQLException {","        switch(type){","            case SQLTokenizer.LEVEL:","                con.isolationLevel = isolationLevel;","                break;","            case SQLTokenizer.USE:","            \tcon.setCatalog(name);","            \tbreak;","            default:","                throw new Error();","        }","    }","}"],|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|:["package smallsql.database;","import java.sql.*;","import smallsql.database.language.Language;","public class StoreNoCurrentRow extends Store {","\tprivate SQLException noCurrentRow(){","\t\treturn SmallSQLException.create(Language.ROW_NOCURRENT);","\t}","\tboolean isNull(int offset) throws SQLException {","\t\tthrow noCurrentRow();","\t}","\tboolean getBoolean(int offset, int dataType) throws Exception {","\t\tthrow noCurrentRow();","\t}","\tbyte[] getBytes(int offset, int dataType) throws Exception {","\t\tthrow noCurrentRow();","\t}","\tdouble getDouble(int offset, int dataType) throws Exception {","\t\tthrow noCurrentRow();","\t}","\tfloat getFloat(int offset, int dataType) throws Exception {","\t\tthrow noCurrentRow();","\t}","\tint getInt(int offset, int dataType) throws Exception {","\t\tthrow noCurrentRow();","\t}","\tlong getLong(int offset, int dataType) throws Exception {","\t\tthrow noCurrentRow();","\t}","\tlong getMoney(int offset, int dataType) throws Exception {","\t\tthrow noCurrentRow();","\t}","\tMutableNumeric getNumeric(int offset, int dataType) throws Exception {","\t\tthrow noCurrentRow();","\t}","\tObject getObject(int offset, int dataType) throws Exception {","\t\tthrow noCurrentRow();","\t}","\tString getString(int offset, int dataType) throws Exception {","\t\tthrow noCurrentRow();","\t}","\tvoid scanObjectOffsets(int[] offsets, int[] dataTypes) {","\t}","\tint getUsedSize() {","\t\treturn 0;","\t}","\tlong getNextPagePos(){","\t\treturn -1;","\t}","\tvoid deleteRow(SSConnection con) throws SQLException{","\t\tthrow noCurrentRow();","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionTruncate.java|:["package smallsql.database;","final class ExpressionFunctionTruncate extends ExpressionFunctionReturnP1Number {","    final int getFunction(){ return SQLTokenizer.TRUNCATE; }","    boolean isNull() throws Exception{","        return param1.isNull() || param2.isNull();","    }","    final double getDouble() throws Exception{","\t\tif(isNull()) return 0;","\t\tfinal int places = param2.getInt();","\t\tdouble value = param1.getDouble();","\t\tlong factor = 1;","\t\tif(places \> 0){","\t\t\tfor(int i=0; i\<places; i++){","\t\t\t\tfactor *= 10;","\t\t\t}","\t\t\tvalue *= factor;","\t\t}else{","\t\t\tfor(int i=0; i\>places; i--){","\t\t\t\tfactor *= 10;","\t\t\t}","\t\t\tvalue /= factor;","\t\t}","        value -= value % 1; ","\t\tif(places \> 0){","\t\t\tvalue /= factor;","\t\t}else{","\t\t\tvalue *= factor;","\t\t}","\t\treturn value;","    }","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionATan2.java|:["package smallsql.database;","final class ExpressionFunctionATan2 extends ExpressionFunctionReturnFloat {","    final int getFunction(){ return SQLTokenizer.ATAN2; }","    boolean isNull() throws Exception{","        return param1.isNull() || param2.isNull();","    }","    final double getDouble() throws Exception{","\t\tif(isNull()) return 0;","        return Math.atan2( param1.getDouble(), param2.getDouble() );","    }","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionRadians.java|:["package smallsql.database;","final class ExpressionFunctionRadians extends ExpressionFunctionReturnFloat {","    final int getFunction(){ return SQLTokenizer.RADIANS; }","    final double getDouble() throws Exception{","\t\tif(isNull()) return 0;","        return Math.toRadians( param1.getDouble() );","    }","}"],|project://smallsql/src/smallsql/database/Strings.java|:["package smallsql.database;","class Strings {","\tprivate int size;","\tprivate String[] data;","\tStrings(){","\t\tdata = new String[16];","\t}","\tfinal int size(){","\t\treturn size;","\t}","\tfinal String get(int idx){","\t\tif (idx \>= size)","\t\t\tthrow new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);","\t\treturn data[idx];","\t}","\tfinal void add(String descr){","\t\tif(size \>= data.length ){","\t\t\tresize(size \<\< 1);","\t\t}","\t\tdata[size++] = descr;","\t}","\tprivate final void resize(int newSize){","\t\tString[] dataNew = new String[newSize];","\t\tSystem.arraycopy(data, 0, dataNew, 0, size);","\t\tdata = dataNew;\t\t","\t}","    public String[] toArray() {","        String[] array = new String[size];","        System.arraycopy(data, 0, array, 0, size);","        return array;     ","    }","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|:["package smallsql.database;","class ExpressionFunctionAbs extends ExpressionFunctionReturnP1 {","    int getFunction(){ return SQLTokenizer.ABS; }","\tboolean getBoolean() throws Exception{","        return getDouble() != 0;","    }","    int getInt() throws Exception{","        return Math.abs( param1.getInt() );","    }","    long getLong() throws Exception{","        return Math.abs( param1.getLong() );","    }","    float getFloat() throws Exception{","        return Math.abs( param1.getFloat() );","    }","    double getDouble() throws Exception{","        return Math.abs( param1.getDouble() );","    }","    long getMoney() throws Exception{","        return Math.abs( param1.getMoney() );","    }","    MutableNumeric getNumeric() throws Exception{","\t\tif(param1.isNull()) return null;","        MutableNumeric num = param1.getNumeric();","        if(num.getSignum() \< 0) num.setSignum(1);","        return num;","    }","    Object getObject() throws Exception{","\t\tif(param1.isNull()) return null;","        Object para1 = param1.getObject();","        switch(param1.getDataType()){","        case SQLTokenizer.FLOAT:","        case SQLTokenizer.DOUBLE:","            double dValue = ((Double)para1).doubleValue();","            return (dValue\<0) ? new Double(-dValue) : para1;","        case SQLTokenizer.REAL:","            double fValue = ((Float)para1).floatValue();","            return (fValue\<0) ? new Float(-fValue) : para1;","        case SQLTokenizer.BIGINT:","            long lValue = ((Number)para1).longValue();","            return (lValue\<0) ? new Long(-lValue) : para1;","        case SQLTokenizer.TINYINT:","        case SQLTokenizer.SMALLINT:","        case SQLTokenizer.INT:","            int iValue = ((Number)para1).intValue();","            return (iValue\<0) ? new Integer(-iValue) : para1;","        case SQLTokenizer.NUMERIC:","        case SQLTokenizer.DECIMAL:","            MutableNumeric nValue = (MutableNumeric)para1;","            if(nValue.getSignum() \<0) nValue.setSignum(1);","            return nValue;","        case SQLTokenizer.MONEY:","            Money mValue = (Money)para1;","            if(mValue.value \<0) mValue.value = -mValue.value;","            return mValue;","        default: throw createUnspportedDataType(param1.getDataType());","        }","    }","    String getString() throws Exception{","        Object obj = getObject();","        if(obj == null) return null;","        return obj.toString();","    }","}"],|project://smallsql/src/smallsql/database/MutableLong.java|:["package smallsql.database;","final class MutableLong extends Number implements Mutable{","\tlong value;","\tMutableLong(long value){","\t\tthis.value = value;","\t}","\tpublic double doubleValue() {","\t\treturn value;","\t}","\tpublic float floatValue() {","\t\treturn value;","\t}","\tpublic int intValue() {","\t\treturn (int)value;","\t}","\tpublic long longValue() {","\t\treturn value;","\t}","\tpublic String toString(){","\t\treturn String.valueOf(value);","\t}","\tpublic Object getImmutableObject(){","\t\treturn new Long(value);","\t}","}"],|project://smallsql/src/smallsql/database/MutableFloat.java|:["package smallsql.database;","final class MutableFloat extends Number implements Mutable{","\tfloat value;","\tMutableFloat(float value){","\t\tthis.value = value;","\t}","\tpublic double doubleValue() {","\t\treturn value;","\t}","\tpublic float floatValue() {","\t\treturn value;","\t}","\tpublic int intValue() {","\t\treturn (int)value;","\t}","\tpublic long longValue() {","\t\treturn (long)value;","\t}","\tpublic String toString(){","\t\treturn String.valueOf(value);","\t}","\tpublic Object getImmutableObject(){","\t\treturn new Float(value);","\t}","}"],|project://smallsql/src/smallsql/database/CommandCreateDatabase.java|:["package smallsql.database;","import java.io.*;","import smallsql.database.language.Language;","public class CommandCreateDatabase extends Command{","    CommandCreateDatabase( Logger log, String name ){","    \tsuper(log);","        this.type = SQLTokenizer.DATABASE;","        if(name.startsWith(\"file:\"))","            name = name.substring(5);","        this.name = name;","    }","    @Override","    void executeImpl(SSConnection con, SSStatement st) throws Exception{","        if( con.isReadOnly() ){","            throw SmallSQLException.create(Language.DB_READONLY);","        }","        File dir = new File( name );","        dir.mkdirs();","        if(!new File(dir, Utils.MASTER_FILENAME).createNewFile()){","        \tthrow SmallSQLException.create(Language.DB_EXISTENT, name);","        }","    }","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionOctetLen.java|:["package smallsql.database;","final class ExpressionFunctionOctetLen extends ExpressionFunctionReturnInt {","\tprivate static final int BYTES_PER_CHAR = 2;","\tfinal int getFunction() {","\t\treturn SQLTokenizer.OCTETLEN;","\t}","    boolean isNull() throws Exception {","        return param1.isNull();","    }","\tfinal int getInt() throws Exception {","        if(isNull()) return 0;","        String str = param1.getString();","\t\treturn str.length() * BYTES_PER_CHAR;","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionACos.java|:["package smallsql.database;","final class ExpressionFunctionACos extends ExpressionFunctionReturnFloat {","    final int getFunction(){ return SQLTokenizer.ACOS; }","    final double getDouble() throws Exception{","\t\tif(isNull()) return 0;","        return Math.acos( param1.getDouble() );","    }","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionLength.java|:["package smallsql.database;","final class ExpressionFunctionLength extends ExpressionFunctionReturnInt {","\tfinal int getFunction() {","\t\treturn SQLTokenizer.LENGTH;","\t}","\tfinal int getInt() throws Exception {","\t\tString str = param1.getString();","\t\tif(str == null) return 0;","\t\tint length = str.length();","\t\twhile(length\>=0 && str.charAt(length-1) == \' \') length--;","\t\treturn length;","\t}","}"],|project://smallsql/src/smallsql/database/Column.java|:["package smallsql.database;","import java.io.*;","import java.nio.channels.FileChannel;","import java.sql.*;","import smallsql.database.language.Language;","class Column implements Cloneable{","    private Expression defaultValue = Expression.NULL; ","    private String defaultDefinition; ","    private String name;","    private boolean identity;","    private boolean caseSensitive;","    private boolean nullable = true;","    private int scale;","    private int precision;","    private int dataType;","    private Identity counter; ","    void setName( String name ){","        this.name = name;","    }","    void setDefaultValue(Expression defaultValue, String defaultDefinition){","        this.defaultValue \t\t= defaultValue;","        this.defaultDefinition\t= defaultDefinition;","    }","    Expression getDefaultValue(SSConnection con) throws SQLException{","    \tif(identity)","    \t\tcounter.createNextValue(con);","        return defaultValue;","    }","\tString getDefaultDefinition(){","\t\treturn defaultDefinition;","\t}","    String getName(){","        return name;","    }","    boolean isAutoIncrement(){","        return identity;","    }","    void setAutoIncrement(boolean identity){","        this.identity = identity;","    }","    int initAutoIncrement(FileChannel raFile, long filePos) throws IOException{","    \tif(identity){","\t\t\tcounter = new Identity(raFile, filePos);","\t\t\tdefaultValue = new ExpressionValue( counter, SQLTokenizer.BIGINT );","    \t}","    \treturn 8;","    }","    void setNewAutoIncrementValue(Expression obj) throws Exception{","\t\tif(identity){","\t\t\tcounter.setNextValue(obj);","\t\t}","    }","    boolean isCaseSensitive(){","        return caseSensitive;","    }","    void setNullable(boolean nullable){","        this.nullable = nullable;","    }","    boolean isNullable(){","        return nullable;","    }","    void setDataType(int dataType){","        this.dataType = dataType;","    }","    int getDataType(){","        return dataType;","    }","    int getDisplaySize(){","\t\treturn SSResultSetMetaData.getDisplaySize( dataType, precision, scale);","    }","    void setScale(int scale){","        this.scale = scale;","    }","    int getScale(){","\t\tswitch(dataType){","\t\t\tcase SQLTokenizer.DECIMAL:","\t\t\tcase SQLTokenizer.NUMERIC:","\t\t\t\treturn scale;","\t\t\tdefault:","\t\t\t\treturn Expression.getScale(dataType);","\t\t}","    }","    void setPrecision(int precision) throws SQLException{","\t    if(precision\<0) throw SmallSQLException.create(Language.COL_INVALID_SIZE, new Object[] { new Integer(precision), name});","        this.precision = precision;","    }","    int getPrecision(){","\t\treturn SSResultSetMetaData.getDataTypePrecision( dataType, precision );","    }","    int getColumnSize(){","    \tif(SSResultSetMetaData.isNumberDataType(dataType))","    \t\t return getPrecision();","    \telse return getDisplaySize();","    }","    int getFlag(){","        return (identity        ? 1 : 0) |","               (caseSensitive   ? 2 : 0) |","               (nullable        ? 4 : 0);","    }","    void setFlag(int flag){","        identity        = (flag & 1) \> 0;","        caseSensitive   = (flag & 2) \> 0;","        nullable        = (flag & 4) \> 0;","    }","    Column copy(){","    \ttry{","    \t\treturn (Column)clone();","    \t}catch(Exception e){return null;}","    }","}"],|project://smallsql/src/smallsql/database/LongLongList.java|:["package smallsql.database;","final class LongLongList {","\tprivate int size;","\tprivate long[] data;","\tLongLongList(){","\t\tthis(16);","\t}","\tLongLongList(int initialSize){","\t\tdata = new long[initialSize*2];","\t}","\tfinal int size(){","\t\treturn size;","\t}","\tfinal long get1(int idx){","\t\tif (idx \>= size)","\t\t\tthrow new IndexOutOfBoundsException(\"Index: \"+idx+\", Size: \"+size);","\t\treturn data[idx \<\< 1];","\t}","\tfinal long get2(int idx){","\t\tif (idx \>= size)","\t\t\tthrow new IndexOutOfBoundsException(\"Index: \"+idx+\", Size: \"+size);","\t\treturn data[(idx \<\< 1) +1];","\t}","\tfinal void add(long value1, long value2){","\t\tint size2 = size \<\< 1;","\t\tif(size2 \>= data.length ){","\t\t\tresize(size2);","\t\t}","\t\tdata[ size2   ] = value1;","\t\tdata[ size2 +1] = value2;","\t\tsize++;","\t}","\tfinal void clear(){","\t\tsize = 0;","\t}","\tprivate final void resize(int newSize){","\t\tlong[] dataNew = new long[newSize \<\< 1];","\t\tSystem.arraycopy(data, 0, dataNew, 0, size \<\< 1);","\t\tdata = dataNew;\t\t","\t}","}"],|project://smallsql/src/smallsql/database/Store.java|:["package smallsql.database;","import java.sql.*;","abstract class Store {","\tstatic final Store NULL = new StoreNull();","\tstatic final Store NOROW= new StoreNoCurrentRow();","\tabstract boolean isNull(int offset) throws Exception;","\tabstract boolean getBoolean( int offset, int dataType) throws Exception;","\tabstract byte[] getBytes( int offset, int dataType) throws Exception;","\tabstract double getDouble( int offset, int dataType) throws Exception;","\tabstract float getFloat( int offset, int dataType) throws Exception;","\tabstract int getInt( int offset, int dataType) throws Exception;","\tabstract long getLong( int offset, int dataType) throws Exception;","\tabstract long getMoney( int offset, int dataType) throws Exception;","\tabstract MutableNumeric getNumeric( int offset, int dataType) throws Exception;","\tabstract Object getObject( int offset, int dataType) throws Exception;","\tabstract String getString( int offset, int dataType) throws Exception;","\tboolean isValidPage(){","\t\treturn false;","\t}","\tabstract void scanObjectOffsets( int[] offsets, int dataTypes[] );","\tabstract int getUsedSize();","\tabstract long getNextPagePos();","\tabstract void deleteRow(SSConnection con) throws SQLException;","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionAscii.java|:["package smallsql.database;","final class ExpressionFunctionAscii extends ExpressionFunctionReturnInt {","\tfinal int getFunction() {","\t\treturn SQLTokenizer.ASCII;","\t}","\tfinal boolean isNull() throws Exception {","\t\treturn param1.isNull() || param1.getString().length() == 0;","\t}","\tfinal int getInt() throws Exception {","\t\tString str = param1.getString();","\t\tif(str == null || str.length() == 0) return 0;","\t\treturn str.charAt(0);","\t}","\tfinal Object getObject() throws Exception {","\t\tString str = param1.getString();","\t\tif(str == null || str.length() == 0) return null;","\t\treturn Utils.getInteger(str.charAt(0));","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionRand.java|:["package smallsql.database;","import java.util.Random;","final class ExpressionFunctionRand extends ExpressionFunctionReturnFloat {","\tfinal static private Random random = new Random(); ","    final int getFunction(){ return SQLTokenizer.RAND; }","    boolean isNull() throws Exception{","        return getParams().length == 1 && param1.isNull();","    }","    final double getDouble() throws Exception{","\t\tif(getParams().length == 0)","\t\t\treturn random.nextDouble();","\t\tif(isNull()) return 0;","\t\treturn new Random(param1.getLong()).nextDouble(); ","    }","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionSubstring.java|:["package smallsql.database;","import smallsql.database.language.Language;","final class ExpressionFunctionSubstring extends ExpressionFunctionReturnP1StringAndBinary {","\tfinal int getFunction() {","\t\treturn SQLTokenizer.SUBSTRING;","\t}","\tfinal boolean isNull() throws Exception {","\t\treturn param1.isNull() || param2.isNull() || param3.isNull();","\t}","\tfinal byte[] getBytes() throws Exception{","\t\tif(isNull()) return null;","\t\tbyte[] bytes = param1.getBytes();","\t\tint byteLen = bytes.length;","\t\tint start  = Math.min( Math.max( 0, param2.getInt() - 1), byteLen);","\t\tint length = param3.getInt();","\t\tif(length \< 0) ","\t\t\tthrow SmallSQLException.create(Language.SUBSTR_INVALID_LEN, new Integer(length));","\t\tif(start == 0 && byteLen == length) return bytes;","\t\tif(byteLen \> length + start){","\t\t\tbyte[] b = new byte[length];","\t\t\tSystem.arraycopy(bytes, start, b, 0, length);","\t\t\treturn b;\t\t","\t\t}else{","\t\t\tbyte[] b = new byte[byteLen - start];","\t\t\tSystem.arraycopy(bytes, start, b, 0, b.length);","\t\t\treturn b;\t\t","\t\t}","\t}","\tfinal String getString() throws Exception {","\t\tif(isNull()) return null;","\t\tString str = param1.getString();","\t\tint strLen = str.length();","\t\tint start  = Math.min( Math.max( 0, param2.getInt() - 1), strLen);","\t\tint length = param3.getInt();","\t\tif(length \< 0) ","\t\t\tthrow SmallSQLException.create(Language.SUBSTR_INVALID_LEN, new Integer(length));","\t\tlength = Math.min( length, strLen-start );","\t\treturn str.substring(start, start+length);","\t}","}"],|project://smallsql/src/smallsql/database/StoreImpl.java|:["package smallsql.database;","import java.io.*;","import java.nio.ByteBuffer;","import java.nio.channels.FileChannel;","import java.sql.SQLException;","import smallsql.database.language.Language;","public class StoreImpl extends Store {","    private static final int DEFAULT_PAGE_SIZE = 8192; ","\tprivate static final int PAGE_MAGIC = 0x12DD13DE; ","\tprivate static final int PAGE_CONTROL_SIZE = 28;","\tprivate static final byte[] page_control = new byte[PAGE_CONTROL_SIZE]; ","\tprivate static final ByteBuffer pageControlBuffer = ByteBuffer.wrap(page_control); ","\tprivate int status; ","\tprivate static final int NORMAL = 0;","    private static final int DELETED = 1;","\tprivate static final int UPDATE_POINTER = 2;","\tprivate static final int UPDATED_PAGE = 3;","    final private Table table;","    private byte[] page; ","    private boolean sharedPageData;","    private StorePage storePage;","    private long filePos; ","    private int sizeUsed;","    private int sizePhysical;","    private int nextPageOffset;","    private long filePosUpdated;","    private int type;","    private StoreImpl updatePointer;","    private StoreImpl( Table table, StorePage storePage, int type, long filePos ){","\t\tthis.table     = table;","\t\tthis.storePage    = storePage;","\t\tthis.filePos   = filePos;","\t\tthis.type      = type;","    }","    static StoreImpl createStore( Table table, StorePage storePage, int type, long filePos ) throws SQLException{","        try {","            StoreImpl store = new StoreImpl(table, storePage, type, filePos);","            switch(type){","                case SQLTokenizer.LONGVARBINARY:","                    store.page = new byte[(int)filePos + PAGE_CONTROL_SIZE];","                    store.filePos = -1;","                    break;","                case SQLTokenizer.INSERT:","                case SQLTokenizer.CREATE:","                    store.page = new byte[DEFAULT_PAGE_SIZE];","                    break;","                case SQLTokenizer.SELECT:","                case SQLTokenizer.UPDATE:","            \tcase SQLTokenizer.DELETE:","                    if(storePage.page == null){","                        FileChannel raFile = storePage.raFile;","                        synchronized(raFile){","                            if(filePos \>= raFile.size() - PAGE_CONTROL_SIZE){","                                return null;","                            }","                            raFile.position(filePos);","                            synchronized(page_control){","                                pageControlBuffer.position(0);","                                raFile.read(pageControlBuffer);","                                store.page = page_control;","                                store.readPageHeader();","                            }","                            store.page = new byte[store.sizeUsed];","                            raFile.position(filePos);","                            ByteBuffer buffer = ByteBuffer.wrap(store.page);","                            raFile.read(buffer);","                        }","                    }else{","                        store.page = storePage.page;","                        store.sharedPageData = true;","                        store.readPageHeader();","                    }","                    store = store.loadUpdatedStore();","                    break;","                default: throw new Error();","            }","            store.offset = PAGE_CONTROL_SIZE;","            return store;","        } catch (Throwable th) {","            throw SmallSQLException.createFromException(th);","        }","    }","\tstatic StoreImpl recreateStore( Table table, StorePage storePage, int type) throws Exception{","\t\tStoreImpl store = new StoreImpl(table, storePage, type, -1);","\t\tstore.page = storePage.page;","\t\tstore.sharedPageData = true;","\t\tstore.readPageHeader();","\t\tstore = store.loadUpdatedStore();","\t\tstore.offset = PAGE_CONTROL_SIZE;","\t\treturn store;","\t}","    private final void readPageHeader() throws SQLException{","\t\tif(readInt() != PAGE_MAGIC){","\t\t\tthrow SmallSQLException.create(Language.TABLE_CORRUPT_PAGE, new Object[] { new Long(filePos) });","\t\t}","\t\tstatus = readInt();","\t\tsizeUsed  = readInt();","\t\tsizePhysical = readInt();","\t\tnextPageOffset = readInt();","\t\tfilePosUpdated = readLong();","    }","\tfinal private StoreImpl loadUpdatedStore() throws Exception{","\t\tif(status != UPDATE_POINTER) return this;","\t\tStoreImpl storeTemp = table.getStore( ((TableStorePage)storePage).con, filePosUpdated, type);","\t\tstoreTemp.updatePointer = this;","\t\treturn storeTemp;","    }","    private void resizePage(int minNewSize){","    \tint newSize = Math.max(minNewSize, page.length*2);","    \tbyte[] newPage = new byte[newSize];","    \tSystem.arraycopy( page, 0, newPage, 0, page.length);","    \tpage = newPage;","    }","\t@Override","    boolean isValidPage(){","\t\treturn status == NORMAL || (status == UPDATED_PAGE && updatePointer != null); ","\t}","    @Override","    int getUsedSize(){","        return sizeUsed;","    }","    @Override","    long getNextPagePos(){","    \tif(updatePointer != null) return updatePointer.getNextPagePos();","    \tif(nextPageOffset \<= 0){","\t\t\tnextPageOffset = sizePhysical; ","    \t}","\t\treturn filePos + nextPageOffset;","    }","    long writeFinsh(SSConnection con) throws SQLException{","        switch(type){","            case SQLTokenizer.LONGVARBINARY:","            case SQLTokenizer.INSERT:","            case SQLTokenizer.CREATE:","                sizeUsed = sizePhysical = offset;","                break;","\t\t\tcase SQLTokenizer.UPDATE:","\t\t\t\tif(status != UPDATE_POINTER) {","\t\t\t\t\tsizeUsed = offset;","\t\t\t\t\tbreak;","\t\t\t\t}","            case SQLTokenizer.DELETE:","\t\t\t\tsizeUsed = PAGE_CONTROL_SIZE;","                break;","            default: throw new Error(\"\"+type);","        }","\t\toffset = 0;","\t\twriteInt( PAGE_MAGIC ); ","\t\twriteInt( status);","\t\twriteInt( sizeUsed );","\t\twriteInt( sizePhysical );","\t\twriteInt( 0 ); ","\t\twriteLong( filePosUpdated ); ","\t\tstorePage.setPageData( page, sizeUsed ); ","        if(con == null){","\t\t\treturn storePage.commit();","        }else{","            return 0;","        }","    }","    final void createWriteLock() throws SQLException{","\t\tTableStorePage storePageWrite = table.requestWriteLock( ((TableStorePage)storePage).con, (TableStorePage)storePage );","\t\tif(storePageWrite == null)","\t\t\tthrow SmallSQLException.create(Language.ROW_LOCKED);","\t\tstorePage = storePageWrite;","    }","\tvoid updateFinsh(SSConnection con, StoreImpl newData) throws SQLException{","\t\ttype = SQLTokenizer.UPDATE;","\t\tif(newData.offset \<= sizePhysical || filePos == -1){","\t\t\tpage = newData.page; ","\t\t\toffset = newData.offset;","\t\t\tif(sizePhysical \< offset) sizePhysical = offset; ","\t\t\twriteFinsh(con);","\t\t}else{","\t\t\tnewData.status = UPDATED_PAGE;","\t\t\tif(updatePointer == null){","\t\t\t\t((TableStorePage)newData.storePage).lockType = TableView.LOCK_INSERT;","\t\t\t\tfilePosUpdated = newData.writeFinsh(null);","\t\t\t\tstatus = UPDATE_POINTER;","\t\t\t}else{","\t\t\t\t((TableStorePage)newData.storePage).lockType = TableView.LOCK_INSERT;","\t\t\t\tupdatePointer.filePosUpdated = newData.writeFinsh(null);","\t\t\t\tupdatePointer.status = UPDATE_POINTER;","\t\t\t\tupdatePointer.type = SQLTokenizer.UPDATE;","\t\t\t\tupdatePointer.createWriteLock();","\t\t\t\tif(updatePointer.sharedPageData){","\t\t\t\t    updatePointer.page = new byte[PAGE_CONTROL_SIZE];","\t\t\t\t}","\t\t\t\tupdatePointer.writeFinsh(con);","\t\t\t\tstatus = DELETED;","                if(sharedPageData){","                    page = new byte[PAGE_CONTROL_SIZE];","                }","\t\t\t}","\t\t\twriteFinsh(con);","\t\t}","\t}","    private int offset; ","\tint getCurrentOffsetInPage(){","\t\treturn offset;","\t}","\tvoid setCurrentOffsetInPage(int newOffset){","\t\tthis.offset = newOffset;","\t}","    void writeByte( int value ){","    \tint newSize = offset + 1;","        if(newSize \> page.length) resizePage(newSize);","        page[ offset++ ] = (byte)(value);","    }","    int readByte(){","        return page[ offset++ ];","    }","    int readUnsignedByte(){","        return page[ offset++ ] & 0xFF;","    }","    void writeBoolean( boolean value ){","    \tint newSize = offset + 1;","        if(newSize \> page.length) resizePage(newSize);","        page[ offset++ ] = (byte)(value ? 1 : 0);","    }","    boolean readBoolean(){","        return page[ offset++ ] != 0;","    }","    void writeShort( int value ){","    \tint newSize = offset + 2;","        if(newSize \> page.length) resizePage(newSize);","        page[ offset++ ] = (byte)(value \>\> 8);","        page[ offset++ ] = (byte)(value);","    }","    int readShort(){","        return (page[ offset++ ] \<\< 8) | (page[ offset++ ] & 0xFF);","    }","    void writeInt( int value ){","    \tint newSize = offset + 4;","        if(newSize \> page.length) resizePage(newSize);","        page[ offset++ ] = (byte)(value \>\> 24);","        page[ offset++ ] = (byte)(value \>\> 16);","        page[ offset++ ] = (byte)(value \>\> 8);","        page[ offset++ ] = (byte)(value);","    }","    int readInt(){","        return  ((page[ offset++ ]) \<\< 24) |","                ((page[ offset++ ] & 0xFF) \<\< 16) |","                ((page[ offset++ ] & 0xFF) \<\< 8) |","                ((page[ offset++ ] & 0xFF));","    }","    void writeLong( long value ){","    \tint newSize = offset + 8;","        if(newSize \> page.length) resizePage(newSize);","        page[ offset++ ] = (byte)(value \>\> 56);","        page[ offset++ ] = (byte)(value \>\> 48);","        page[ offset++ ] = (byte)(value \>\> 40);","        page[ offset++ ] = (byte)(value \>\> 32);","        page[ offset++ ] = (byte)(value \>\> 24);","        page[ offset++ ] = (byte)(value \>\> 16);","        page[ offset++ ] = (byte)(value \>\> 8);","        page[ offset++ ] = (byte)(value);","    }","    long readLong(){","        return  ((long)(page[ offset++ ]) \<\< 56) |","                ((long)(page[ offset++ ] & 0xFF) \<\< 48) |","                ((long)(page[ offset++ ] & 0xFF) \<\< 40) |","                ((long)(page[ offset++ ] & 0xFF) \<\< 32) |","                ((long)(page[ offset++ ] & 0xFF) \<\< 24) |","                ((page[ offset++ ] & 0xFF) \<\< 16) |","                ((page[ offset++ ] & 0xFF) \<\< 8) |","                ((page[ offset++ ] & 0xFF));","    }","    void writeDouble(double value){","        writeLong( Double.doubleToLongBits(value) );","    }","    double readDouble(){","        return Double.longBitsToDouble( readLong() );","    }","    void writeFloat(float value){","        writeInt( Float.floatToIntBits(value) );","    }","    float readFloat(){","        return Float.intBitsToFloat( readInt() );","    }","    void writeNumeric( MutableNumeric num){","        writeByte( num.getInternalValue().length );","        writeByte( num.getScale() );","        writeByte( num.getSignum() );","        for(int i=0; i\<num.getInternalValue().length; i++){","            writeInt( num.getInternalValue()[i] );","        }","    }","    MutableNumeric readNumeric(){","        int[] value = new int[ readByte() ];","        int scale   = readByte();","        int signum  = readByte();","        for(int i=0; i\<value.length; i++){","            value[i] = readInt();","        }","        return new MutableNumeric( signum, value, scale );","    }","    void writeTimestamp( long ts){","        writeLong( ts );","    }","    long readTimestamp(){","        return readLong();","    }","    void writeTime( long time){","        writeInt( (int)((time / 1000) % 86400) );","    }","    long readTime(){","        return readInt() * 1000L;","    }","    void writeDate( long date){","        writeInt( (int)(date / 86400000));","    }","    long readDate(){","        return readInt() * 86400000L;","    }","    void writeSmallDateTime( long datetime){","        writeInt( (int)(datetime / 60000));","    }","    long readSmallDateTime(){","        return readInt() * 60000L;","    }","    void writeString( String strDaten ) throws SQLException{","        writeString( strDaten, Short.MAX_VALUE, true );","    }","    void writeString( String strDaten, int lengthColumn, boolean varchar ) throws SQLException{","        char[] daten = strDaten.toCharArray();","        int length = daten.length;","        if(lengthColumn \< length){","            throw SmallSQLException.create(Language.VALUE_STR_TOOLARGE);","        }","\t\tif(varchar) lengthColumn = length;","    \tint newSize = offset + 2 + 2*lengthColumn;","        if(newSize \> page.length) resizePage(newSize);","        writeShort( lengthColumn );","        writeChars( daten );","        for(int i=length; i\<lengthColumn; i++){","            page[ offset++ ] = \' \';","            page[ offset++ ] = 0;","        }","    }","    String readString(){","        int length = readShort() & 0xFFFF;","        return new String( readChars(length) );","    }","    void writeBytes(byte[] daten){","        int newSize = offset + daten.length;","        if(newSize \> page.length) resizePage(newSize );","        System.arraycopy( daten, 0, page, offset, daten.length);","        offset += daten.length;","    }","    void writeBytes(byte[] daten, int off, int length){","        int newSize = offset + length;","        if(newSize \> page.length) resizePage(newSize );","        System.arraycopy( daten, off, page, offset, length);","        offset += length;","    }","    byte[] readBytes(int length){","        byte[] daten = new byte[length];","        System.arraycopy( page, offset, daten, 0, length);","        offset += length;","        return daten;","    }","    void writeBinary( byte[] daten, int lengthColumn, boolean varBinary ) throws SQLException{","        int length = daten.length;","        if(lengthColumn \< length){","        \tObject params = new Object[] { new Integer(length), new Integer(lengthColumn) };","            throw SmallSQLException.create(Language.VALUE_BIN_TOOLARGE, params);","        }","        if(varBinary) lengthColumn = length;","    \tint newSize = offset + 2 + lengthColumn;","        if(newSize \> page.length) resizePage(newSize);","        page[ offset++ ] = (byte)(lengthColumn \>\> 8);","        page[ offset++ ] = (byte)(lengthColumn);","        writeBytes( daten );","        if(!varBinary){","            for(int i=length; i\<lengthColumn; i++){","                page[ offset++ ] = 0;","            }","        }","    }","    byte[] readBinary(){","        int length = readShort() & 0xFFFF;","        return readBytes(length);","    }","    void writeLongBinary( byte[] daten ) throws Exception{","        StoreImpl store = table.getLobStore( ((TableStorePage)storePage).con, daten.length + 4, SQLTokenizer.LONGVARBINARY);","        store.writeInt( daten.length );","        store.writeBytes( daten );","        writeLong( store.writeFinsh(null) );","    }","    byte[] readLongBinary() throws Exception{","        long lobFilePos = readLong();","        StoreImpl store = table.getLobStore( ((TableStorePage)storePage).con, lobFilePos, SQLTokenizer.SELECT );","        return store.readBytes( store.readInt() );","    }","    void writeChars(char[] daten){","        int length = daten.length;","        int newSize = offset + 2*length;","        if(newSize \> page.length) resizePage(newSize );","        for(int i=0; i\<length; i++){","            char c = daten[i];","            page[ offset++ ] = (byte)(c);","            page[ offset++ ] = (byte)(c \>\> 8);","        }","    }","    char[] readChars(int length){","        char[] daten = new char[length];","        for(int i=0; i\<length; i++){","            daten[i] = (char)((page[ offset++ ] & 0xFF) | (page[ offset++ ] \<\< 8));","        }","        return daten;","    }","    void writeLongString(String daten) throws Exception{","        char[] chars = daten.toCharArray();","        StoreImpl store = table.getLobStore( ((TableStorePage)storePage).con, chars.length * 2L + 4, SQLTokenizer.LONGVARBINARY);","        store.writeInt( chars.length );","        store.writeChars( chars );","        writeLong( store.writeFinsh(null) );","    }","    String readLongString() throws Exception{","        long lobFilePos = readLong();","        StoreImpl store = table.getLobStore( ((TableStorePage)storePage).con, lobFilePos, SQLTokenizer.SELECT );","        if(store == null) throw SmallSQLException.create(Language.LOB_DELETED);","        return new String(store.readChars( store.readInt() ) );","    }","    void writeColumn(Column column ) throws Exception{","    \tint newSize = offset + 25;","        if(newSize \> page.length) resizePage(newSize);","        writeByte   ( column.getFlag() );","        writeString ( column.getName() );","        writeShort  ( column.getDataType() );","\t\twriteInt    ( column.getPrecision() );","\t\twriteByte   ( column.getScale() );","\t\toffset += column.initAutoIncrement(storePage.raFile, filePos+offset);","\t\tString def = column.getDefaultDefinition();","\t\twriteBoolean( def == null );","\t\tif(def != null)","\t\t\twriteString ( column.getDefaultDefinition() );","    }","    Column readColumn(int tableFormatVersion) throws Exception{","        Column column = new Column();","        column.setFlag( readByte() );","        column.setName( readString() );","        column.setDataType( readShort() );","\t\tint precision;","\t\tif(tableFormatVersion == TableView.TABLE_VIEW_OLD_VERSION)","\t\t\tprecision = readByte();","\t\telse","\t\t\tprecision = readInt();","\t\tcolumn.setPrecision( precision );","\t\tcolumn.setScale( readByte() );","\t\toffset += column.initAutoIncrement(storePage.raFile, filePos+offset);","\t\tif(!readBoolean()){","\t\t\tString def = readString();","\t\t\tcolumn.setDefaultValue( new SQLParser().parseExpression(def), def);","\t\t}","        return column;","    }","    void copyValueFrom( StoreImpl store, int valueOffset, int length){","\t\tSystem.arraycopy( store.page, valueOffset, this.page, this.offset, length);","\t\tthis.offset += length;","    }","    void writeExpression( Expression expr, Column column) throws Exception{","        boolean isNull = expr.isNull();","        if(isNull && !column.isNullable()){","            throw SmallSQLException.create(Language.VALUE_NULL_INVALID, column.getName());","        }","        int dataType = column.getDataType();","        if(isNull){","            writeBoolean(true); ","            switch(dataType){","                case SQLTokenizer.BIT:","                case SQLTokenizer.BOOLEAN:","                case SQLTokenizer.TINYINT:","                    offset++;","                    break;","                case SQLTokenizer.SMALLINT:","                case SQLTokenizer.BINARY:","                case SQLTokenizer.VARBINARY:","                case SQLTokenizer.CHAR:","                case SQLTokenizer.NCHAR:","                case SQLTokenizer.VARCHAR:","                case SQLTokenizer.NVARCHAR:","                    offset += 2;","                    break;","                case SQLTokenizer.INT:","                case SQLTokenizer.REAL:","                case SQLTokenizer.SMALLMONEY:","                case SQLTokenizer.TIME:","                case SQLTokenizer.DATE:","                case SQLTokenizer.SMALLDATETIME:","                    offset += 4;","                    break;","                case SQLTokenizer.BIGINT:","                case SQLTokenizer.FLOAT:","                case SQLTokenizer.DOUBLE:","                case SQLTokenizer.MONEY:","                case SQLTokenizer.JAVA_OBJECT:","                case SQLTokenizer.LONGVARBINARY:","                case SQLTokenizer.BLOB:","\t\t\t\tcase SQLTokenizer.CLOB:","\t\t\t\tcase SQLTokenizer.NCLOB:","                case SQLTokenizer.LONGNVARCHAR:","                case SQLTokenizer.LONGVARCHAR:","                case SQLTokenizer.TIMESTAMP:","                    offset += 8;","                    break;","                case SQLTokenizer.UNIQUEIDENTIFIER:","                    offset += 16;","                    break;","                case SQLTokenizer.NUMERIC:","                case SQLTokenizer.DECIMAL:","                    offset += 3;","                    break;","                default: throw new Error();","            }","            return;","        }","        writeBoolean(false); ","       \tcolumn.setNewAutoIncrementValue(expr);","        switch(dataType){","            case SQLTokenizer.BIT:","            case SQLTokenizer.BOOLEAN:","                    writeBoolean( expr.getBoolean() );","                    break;","            case SQLTokenizer.BINARY:","            case SQLTokenizer.VARBINARY:","                    writeBinary( expr.getBytes(), column.getPrecision(), dataType != SQLTokenizer.BINARY );","                    break;","            case SQLTokenizer.TINYINT:","                    writeByte( expr.getInt() );","                    break;","            case SQLTokenizer.SMALLINT:","                    writeShort( expr.getInt() );","                    break;","            case SQLTokenizer.INT:","                    writeInt( expr.getInt() );","                    break;","            case SQLTokenizer.BIGINT:","                    writeLong( expr.getLong() );","                    break;","            case SQLTokenizer.REAL:","                    writeFloat( expr.getFloat() );","                    break;","            case SQLTokenizer.FLOAT:","            case SQLTokenizer.DOUBLE:","                    writeDouble( expr.getDouble() );","                    break;","            case SQLTokenizer.MONEY:","                    writeLong( expr.getMoney() );","                    break;","            case SQLTokenizer.SMALLMONEY:","                    writeInt( (int)expr.getMoney() );","                    break;","            case SQLTokenizer.NUMERIC:","            case SQLTokenizer.DECIMAL:","            \t\tMutableNumeric numeric = expr.getNumeric();","            \t\tnumeric.setScale( column.getScale() );","                    writeNumeric( numeric );","                    break;","            case SQLTokenizer.CHAR:","            case SQLTokenizer.NCHAR:","                    writeString( expr.getString(), column.getDisplaySize(), false );","                    break;","            case SQLTokenizer.VARCHAR:","            case SQLTokenizer.NVARCHAR:","                    writeString( expr.getString(), column.getDisplaySize(), true );","                    break;","\t\t\tcase SQLTokenizer.CLOB:","\t\t\tcase SQLTokenizer.NCLOB:","            case SQLTokenizer.LONGNVARCHAR:","            case SQLTokenizer.LONGVARCHAR:","                    writeLongString( expr.getString() );","                    break;","            case SQLTokenizer.JAVA_OBJECT:","                    ByteArrayOutputStream baos = new ByteArrayOutputStream();","                    ObjectOutputStream oos = new ObjectOutputStream(baos);","                    oos.writeObject( expr.getObject() );","                    writeLongBinary( baos.toByteArray() );","                    break;","            case SQLTokenizer.LONGVARBINARY:","            case SQLTokenizer.BLOB:","                    writeLongBinary( expr.getBytes() );","                    break;","            case SQLTokenizer.TIMESTAMP:","                    writeTimestamp( expr.getLong() );","                    break;","            case SQLTokenizer.TIME:","                    writeTime( expr.getLong() );","                    break;","            case SQLTokenizer.DATE:","                    writeDate( expr.getLong() );","                    break;","            case SQLTokenizer.SMALLDATETIME:","                    writeSmallDateTime( expr.getLong() );","                    break;","            case SQLTokenizer.UNIQUEIDENTIFIER:","\t\t\t\t\tswitch(expr.getDataType()){","\t\t\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:","\t\t\t\t\tcase SQLTokenizer.BINARY:","\t\t\t\t\tcase SQLTokenizer.VARBINARY:","\t\t\t\t\tcase SQLTokenizer.LONGVARBINARY:","\t\t\t\t\tcase SQLTokenizer.BLOB:","\t\t\t\t\t\tbyte[] bytes = expr.getBytes();","                        if(bytes.length != 16) throw SmallSQLException.create(Language.BYTEARR_INVALID_SIZE, String.valueOf(bytes.length));","                        writeBytes( bytes );","\t\t\t\t\tdefault:","                        writeBytes( Utils.unique2bytes(expr.getString()) );","\t\t\t\t\t}","                    break;","            default: throw new Error(String.valueOf(column.getDataType()));","        }","    }","    @Override","    boolean isNull(int valueOffset){","        return page[ valueOffset ] != 0;","    }","    @Override","    boolean getBoolean(int valueOffset, int dataType) throws Exception{","        this.offset = valueOffset;","        if(readBoolean()) return false;","        switch(dataType){","            case SQLTokenizer.BIT:","            case SQLTokenizer.BOOLEAN:","                    return readBoolean();","            case SQLTokenizer.BINARY:","            case SQLTokenizer.VARBINARY:","                    return Utils.bytes2int( readBinary() ) != 0;","            case SQLTokenizer.TINYINT:","                    return readUnsignedByte() != 0;","            case SQLTokenizer.SMALLINT:","                    return readShort() != 0;","            case SQLTokenizer.INT:","                    return readInt() != 0;","            case SQLTokenizer.BIGINT:","                    return readLong() != 0;","            case SQLTokenizer.REAL:","                    return readFloat() != 0;","            case SQLTokenizer.FLOAT:","            case SQLTokenizer.DOUBLE:","                    return readDouble() != 0;","            case SQLTokenizer.MONEY:","                    return readLong() != 0;","            case SQLTokenizer.SMALLMONEY:","                    return readInt() != 0;","            case SQLTokenizer.NUMERIC:","            case SQLTokenizer.DECIMAL:","                    return readNumeric().getSignum() != 0;","            case SQLTokenizer.CHAR:","            case SQLTokenizer.NCHAR:","            case SQLTokenizer.VARCHAR:","            case SQLTokenizer.NVARCHAR:","                    return Utils.string2boolean( readString() );","\t\t\tcase SQLTokenizer.CLOB:","\t\t\tcase SQLTokenizer.NCLOB:","            case SQLTokenizer.LONGNVARCHAR:","            case SQLTokenizer.LONGVARCHAR:","                    return Utils.string2boolean( readLongString() );","            case SQLTokenizer.JAVA_OBJECT:","                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());","                    ObjectInputStream ois = new ObjectInputStream(bais);","                    return Utils.string2boolean( ois.readObject().toString() );","            case SQLTokenizer.LONGVARBINARY:","            case SQLTokenizer.BLOB:","                    return Utils.bytes2int( readLongBinary() ) != 0;","\t\t\tcase SQLTokenizer.TIMESTAMP:","\t\t\t\t\treturn readTimestamp() != 0;","\t\t\tcase SQLTokenizer.TIME:","\t\t\t\t\treturn readTime() != 0;","\t\t\tcase SQLTokenizer.DATE:","\t\t\t\t\treturn readDate() != 0;","\t\t\tcase SQLTokenizer.SMALLDATETIME:","\t\t\t\t\treturn readSmallDateTime() != 0;","            case SQLTokenizer.UNIQUEIDENTIFIER:","                return false;","\t\t\tdefault: ","\t\t\t\tthrow SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"BOOLEAN\" });","        }","    }","    @Override","    int getInt(int valueOffset, int dataType) throws Exception{","        this.offset = valueOffset;","        if(readBoolean()) return 0;","        switch(dataType){","            case SQLTokenizer.BIT:","            case SQLTokenizer.BOOLEAN:","                    return readBoolean() ? 1 : 0;","            case SQLTokenizer.BINARY:","            case SQLTokenizer.VARBINARY:","                    return Utils.bytes2int( readBinary() );","            case SQLTokenizer.TINYINT:","                    return readUnsignedByte();","            case SQLTokenizer.SMALLINT:","                    return readShort();","            case SQLTokenizer.INT:","                    return readInt();","            case SQLTokenizer.BIGINT:","                    return (int)readLong();","            case SQLTokenizer.REAL:","                    return (int)readFloat();","            case SQLTokenizer.FLOAT:","            case SQLTokenizer.DOUBLE:","                    return (int)readDouble();","            case SQLTokenizer.MONEY:","            \t\tlong longValue = readLong() / 10000;","            \t\treturn Utils.money2int(longValue);","            case SQLTokenizer.SMALLMONEY:","                    return readInt() / 10000;","            case SQLTokenizer.NUMERIC:","            case SQLTokenizer.DECIMAL:","                    return readNumeric().intValue();","            case SQLTokenizer.CHAR:","            case SQLTokenizer.NCHAR:","            case SQLTokenizer.VARCHAR:","            case SQLTokenizer.NVARCHAR:","                    return Integer.parseInt( readString() );","\t\t\tcase SQLTokenizer.CLOB:","\t\t\tcase SQLTokenizer.NCLOB:","            case SQLTokenizer.LONGNVARCHAR:","            case SQLTokenizer.LONGVARCHAR:","                    return Integer.parseInt( readLongString() );","            case SQLTokenizer.JAVA_OBJECT:","                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());","                    ObjectInputStream ois = new ObjectInputStream(bais);","                    return ExpressionValue.getInt(ois.readObject().toString(), SQLTokenizer.VARCHAR);","            case SQLTokenizer.LONGVARBINARY:","            case SQLTokenizer.BLOB:","                    return Utils.bytes2int( readLongBinary() );","\t\t\tcase SQLTokenizer.TIMESTAMP:","\t\t\t\t\treturn (int)readTimestamp();","\t\t\tcase SQLTokenizer.TIME:","\t\t\t\t\treturn (int)readTime();","\t\t\tcase SQLTokenizer.DATE:","\t\t\t\t\treturn (int)readDate();","\t\t\tcase SQLTokenizer.SMALLDATETIME:","\t\t\t\t\treturn (int)readSmallDateTime();","\t\t\tdefault:","\t\t\t\tthrow SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"INT\" });","        }","    }","    @Override","    long getLong(int valueOffset, int dataType) throws Exception{","        this.offset = valueOffset;","        if(readBoolean()) return 0;","        switch(dataType){","            case SQLTokenizer.BIT:","            case SQLTokenizer.BOOLEAN:","                    return readBoolean() ? 1 : 0;","            case SQLTokenizer.BINARY:","            case SQLTokenizer.VARBINARY:","                    return Utils.bytes2long( readBinary() );","            case SQLTokenizer.TINYINT:","                    return readUnsignedByte();","            case SQLTokenizer.SMALLINT:","                    return readShort();","            case SQLTokenizer.INT:","                    return readInt();","            case SQLTokenizer.BIGINT:","                    return readLong();","            case SQLTokenizer.REAL:","                    return (long)readFloat();","            case SQLTokenizer.FLOAT:","            case SQLTokenizer.DOUBLE:","                    return (long)readDouble();","            case SQLTokenizer.MONEY:","                    return readLong() / 10000;","            case SQLTokenizer.SMALLMONEY:","                    return readInt() / 10000;","            case SQLTokenizer.NUMERIC:","            case SQLTokenizer.DECIMAL:","                    return readNumeric().longValue();","            case SQLTokenizer.CHAR:","            case SQLTokenizer.NCHAR:","            case SQLTokenizer.VARCHAR:","            case SQLTokenizer.NVARCHAR:","                    return Long.parseLong( readString() );","\t\t\tcase SQLTokenizer.CLOB:","\t\t\tcase SQLTokenizer.NCLOB:","            case SQLTokenizer.LONGNVARCHAR:","            case SQLTokenizer.LONGVARCHAR:","                    return Long.parseLong( readLongString() );","            case SQLTokenizer.JAVA_OBJECT:","                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());","                    ObjectInputStream ois = new ObjectInputStream(bais);","                    return ExpressionValue.getLong( ois.readObject().toString(), SQLTokenizer.VARCHAR );","            case SQLTokenizer.LONGVARBINARY:","            case SQLTokenizer.BLOB:","                    return Utils.bytes2long( readLongBinary() );","\t\t\tcase SQLTokenizer.TIMESTAMP:","\t\t\t\t\treturn readTimestamp();","\t\t\tcase SQLTokenizer.TIME:","\t\t\t\t\treturn readTime();","\t\t\tcase SQLTokenizer.DATE:","\t\t\t\t\treturn readDate();","\t\t\tcase SQLTokenizer.SMALLDATETIME:","\t\t\t\t\treturn readSmallDateTime();","\t\t\tdefault:","\t\t\t\tthrow SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"BIGINT\" });","        }","    }","    @Override","    float getFloat(int valueOffset, int dataType) throws Exception{","        this.offset = valueOffset;","        if(readBoolean()) return 0;","        switch(dataType){","            case SQLTokenizer.BIT:","            case SQLTokenizer.BOOLEAN:","                    return readBoolean() ? 1 : 0;","            case SQLTokenizer.BINARY:","            case SQLTokenizer.VARBINARY:","                    return Utils.bytes2float( readBinary() );","            case SQLTokenizer.TINYINT:","                    return readUnsignedByte();","            case SQLTokenizer.SMALLINT:","                    return readShort();","            case SQLTokenizer.INT:","                    return readInt();","            case SQLTokenizer.BIGINT:","                    return readLong();","            case SQLTokenizer.REAL:","                    return readFloat();","            case SQLTokenizer.FLOAT:","            case SQLTokenizer.DOUBLE:","                    return (float)readDouble();","            case SQLTokenizer.MONEY:","                    return readLong() / (float)10000.0;","            case SQLTokenizer.SMALLMONEY:","                    return readInt() / (float)10000.0;","            case SQLTokenizer.NUMERIC:","            case SQLTokenizer.DECIMAL:","                    return readNumeric().floatValue();","            case SQLTokenizer.CHAR:","            case SQLTokenizer.NCHAR:","            case SQLTokenizer.VARCHAR:","            case SQLTokenizer.NVARCHAR:","                    return Float.parseFloat( readString() );","\t\t\tcase SQLTokenizer.CLOB:","\t\t\tcase SQLTokenizer.NCLOB:","            case SQLTokenizer.LONGNVARCHAR:","            case SQLTokenizer.LONGVARCHAR:","                    return Float.parseFloat( readLongString() );","            case SQLTokenizer.JAVA_OBJECT:","                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());","                    ObjectInputStream ois = new ObjectInputStream(bais);","                    return Float.parseFloat( ois.readObject().toString() );","            case SQLTokenizer.LONGVARBINARY:","            case SQLTokenizer.BLOB:","                    return Utils.bytes2float( readLongBinary() );","\t\t\tcase SQLTokenizer.TIMESTAMP:","\t\t\t\t\treturn readTimestamp();","\t\t\tcase SQLTokenizer.TIME:","\t\t\t\t\treturn readTime();","\t\t\tcase SQLTokenizer.DATE:","\t\t\t\t\treturn readDate();","\t\t\tcase SQLTokenizer.SMALLDATETIME:","\t\t\t\t\treturn readSmallDateTime();","\t\t\tdefault:","\t\t\t\tthrow SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"REAL\" });","        }","    }","    @Override","    double getDouble(int valueOffset, int dataType) throws Exception{","        this.offset = valueOffset;","        if(readBoolean()) return 0;","        switch(dataType){","            case SQLTokenizer.BIT:","            case SQLTokenizer.BOOLEAN:","                    return readBoolean() ? 1 : 0;","            case SQLTokenizer.BINARY:","            case SQLTokenizer.VARBINARY:","                    return Utils.bytes2double( readBinary() );","            case SQLTokenizer.TINYINT:","                    return readUnsignedByte();","            case SQLTokenizer.SMALLINT:","                    return readShort();","            case SQLTokenizer.INT:","                    return readInt();","            case SQLTokenizer.BIGINT:","                    return readLong();","            case SQLTokenizer.REAL:","                    return readFloat();","            case SQLTokenizer.FLOAT:","            case SQLTokenizer.DOUBLE:","                    return readDouble();","            case SQLTokenizer.MONEY:","                    return readLong() / 10000.0;","            case SQLTokenizer.SMALLMONEY:","                    return readInt() / 10000.0;","            case SQLTokenizer.NUMERIC:","            case SQLTokenizer.DECIMAL:","                    return readNumeric().doubleValue();","            case SQLTokenizer.CHAR:","            case SQLTokenizer.NCHAR:","            case SQLTokenizer.VARCHAR:","            case SQLTokenizer.NVARCHAR:","                    return Double.parseDouble( readString() );","\t\t\tcase SQLTokenizer.CLOB:","\t\t\tcase SQLTokenizer.NCLOB:","            case SQLTokenizer.LONGNVARCHAR:","            case SQLTokenizer.LONGVARCHAR:","                    return Double.parseDouble( readLongString() );","            case SQLTokenizer.JAVA_OBJECT:","                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());","                    ObjectInputStream ois = new ObjectInputStream(bais);","                    return Double.parseDouble( ois.readObject().toString() );","            case SQLTokenizer.LONGVARBINARY:","            case SQLTokenizer.BLOB:","                    return Utils.bytes2double( readLongBinary() );","\t\t\tcase SQLTokenizer.TIMESTAMP:","\t\t\t\t\treturn readTimestamp();","\t\t\tcase SQLTokenizer.TIME:","\t\t\t\t\treturn readTime();","\t\t\tcase SQLTokenizer.DATE:","\t\t\t\t\treturn readDate();","\t\t\tcase SQLTokenizer.SMALLDATETIME:","\t\t\t\t\treturn readSmallDateTime();","\t\t\tdefault:","\t\t\t\tthrow SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"NUMERIC\" });","        }","    }","    @Override","    long getMoney( int valueOffset, int dataType) throws Exception{","        this.offset = valueOffset;","        if(readBoolean()) return 0;","        switch(dataType){","            case SQLTokenizer.BIT:","            case SQLTokenizer.BOOLEAN:","                    return readBoolean() ? 10000 : 0;","            case SQLTokenizer.BINARY:","            case SQLTokenizer.VARBINARY:","                    return (long)(Utils.bytes2double( readBinary() ) * 10000L);","            case SQLTokenizer.TINYINT:","                    return readUnsignedByte() * 10000L;","            case SQLTokenizer.SMALLINT:","                    return readShort() * 10000L;","            case SQLTokenizer.INT:","                    return readInt() * 10000L;","            case SQLTokenizer.BIGINT:","                    return readLong() * 10000L;","            case SQLTokenizer.REAL:","                    return (long)(readFloat() * 10000L);","            case SQLTokenizer.FLOAT:","            case SQLTokenizer.DOUBLE:","                    return (long)(readDouble() * 10000L);","            case SQLTokenizer.MONEY:","                    return readLong();","            case SQLTokenizer.SMALLMONEY:","                    return readInt();","            case SQLTokenizer.NUMERIC:","            case SQLTokenizer.DECIMAL:","                    return (long)(readNumeric().doubleValue() * 10000L);","            case SQLTokenizer.CHAR:","            case SQLTokenizer.NCHAR:","            case SQLTokenizer.VARCHAR:","            case SQLTokenizer.NVARCHAR:","                    return Money.parseMoney( readString() );","\t\t\tcase SQLTokenizer.CLOB:","\t\t\tcase SQLTokenizer.NCLOB:","            case SQLTokenizer.LONGNVARCHAR:","            case SQLTokenizer.LONGVARCHAR:","                    return Money.parseMoney( readLongString() );","            case SQLTokenizer.JAVA_OBJECT:","                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());","                    ObjectInputStream ois = new ObjectInputStream(bais);","                    return Money.parseMoney( ois.readObject().toString() );","            case SQLTokenizer.LONGVARBINARY:","            case SQLTokenizer.BLOB:","                    return (long)(Utils.bytes2double( readLongBinary() ) * 10000L);","            case SQLTokenizer.TIMESTAMP:","            case SQLTokenizer.TIME:","            case SQLTokenizer.DATE:","            case SQLTokenizer.SMALLDATETIME:","\t\t\t\t\tthrow SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"MONEY\" });","            default: throw new Error();","        }","    }","    @Override","    MutableNumeric getNumeric(int valueOffset, int dataType) throws Exception{","        this.offset = valueOffset;","        if(readBoolean()) return null;","        switch(dataType){","            case SQLTokenizer.BIT:","            case SQLTokenizer.BOOLEAN:","                    return readBoolean() ? new MutableNumeric(1) : new MutableNumeric(0);","            case SQLTokenizer.BINARY:","            case SQLTokenizer.VARBINARY:","                    return new MutableNumeric(Utils.bytes2double( readBinary() ));","            case SQLTokenizer.TINYINT:","                    return new MutableNumeric(readUnsignedByte());","            case SQLTokenizer.SMALLINT:","                    return new MutableNumeric(readShort());","            case SQLTokenizer.INT:","                    return new MutableNumeric(readInt());","            case SQLTokenizer.BIGINT:","                    return new MutableNumeric(readLong());","            case SQLTokenizer.REAL:","                    return new MutableNumeric(readFloat());","            case SQLTokenizer.FLOAT:","            case SQLTokenizer.DOUBLE:","                    return new MutableNumeric(readDouble());","            case SQLTokenizer.MONEY:","                    return new MutableNumeric( readLong(), 4);","            case SQLTokenizer.SMALLMONEY:","                    return new MutableNumeric( readInt(), 4);","            case SQLTokenizer.NUMERIC:","            case SQLTokenizer.DECIMAL:","                    return readNumeric();","            case SQLTokenizer.CHAR:","            case SQLTokenizer.NCHAR:","            case SQLTokenizer.VARCHAR:","            case SQLTokenizer.NVARCHAR:","                    return new MutableNumeric( readString() );","\t\t\tcase SQLTokenizer.CLOB:","\t\t\tcase SQLTokenizer.NCLOB:","            case SQLTokenizer.LONGNVARCHAR:","            case SQLTokenizer.LONGVARCHAR:","                    return new MutableNumeric( readLongString() );","            case SQLTokenizer.JAVA_OBJECT:","                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());","                    ObjectInputStream ois = new ObjectInputStream(bais);","                    return new MutableNumeric( ois.readObject().toString() );","            case SQLTokenizer.LONGVARBINARY:","            case SQLTokenizer.BLOB:","                    return new MutableNumeric( Utils.bytes2double( readLongBinary() ) );","            case SQLTokenizer.TIMESTAMP:","            case SQLTokenizer.TIME:","            case SQLTokenizer.DATE:","            case SQLTokenizer.SMALLDATETIME:","                    throw SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"NUMERIC\" });","            default: throw new Error();","        }","    }","    @Override","    Object getObject(int valueOffset, int dataType) throws Exception{","        this.offset = valueOffset;","        if(readBoolean()) return null;","        switch(dataType){","            case SQLTokenizer.BIT:","            case SQLTokenizer.BOOLEAN:","                    return readBoolean() ? Boolean.TRUE : Boolean.FALSE;","            case SQLTokenizer.BINARY:","            case SQLTokenizer.VARBINARY:","                    return readBinary();","            case SQLTokenizer.TINYINT:","                    return Utils.getInteger( readUnsignedByte() );","            case SQLTokenizer.SMALLINT:","                    return Utils.getInteger( readShort() );","            case SQLTokenizer.INT:","                    return Utils.getInteger(readInt());","            case SQLTokenizer.BIGINT:","                    return new Long(readLong());","            case SQLTokenizer.REAL:","                    return new Float( readFloat() );","            case SQLTokenizer.FLOAT:","            case SQLTokenizer.DOUBLE:","                    return new Double( readDouble() );","            case SQLTokenizer.MONEY:","                    return Money.createFromUnscaledValue(readLong());","            case SQLTokenizer.SMALLMONEY:","                    return Money.createFromUnscaledValue(readInt());","            case SQLTokenizer.NUMERIC:","            case SQLTokenizer.DECIMAL:","                    return readNumeric();","            case SQLTokenizer.CHAR:","            case SQLTokenizer.NCHAR:","            case SQLTokenizer.VARCHAR:","            case SQLTokenizer.NVARCHAR:","                    return readString();","\t\t\tcase SQLTokenizer.CLOB:","\t\t\tcase SQLTokenizer.NCLOB:","            case SQLTokenizer.LONGNVARCHAR:","            case SQLTokenizer.LONGVARCHAR:","                    return readLongString();","            case SQLTokenizer.JAVA_OBJECT:","                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());","                    ObjectInputStream ois = new ObjectInputStream(bais);","                    return ois.readObject();","            case SQLTokenizer.LONGVARBINARY:","            case SQLTokenizer.BLOB:","                    return readLongBinary();","            case SQLTokenizer.TIMESTAMP:","                    return new DateTime( readTimestamp(), SQLTokenizer.TIMESTAMP );","            case SQLTokenizer.TIME:","                    return new DateTime( readTime(), SQLTokenizer.TIME );","            case SQLTokenizer.DATE:","                    return new DateTime( readDate(), SQLTokenizer.DATE );","            case SQLTokenizer.SMALLDATETIME:","                    return new DateTime( readSmallDateTime(), SQLTokenizer.TIMESTAMP );","            case SQLTokenizer.UNIQUEIDENTIFIER:","                    return Utils.bytes2unique( page, this.offset);","            default: throw new Error();","        }","    }","    @Override","    String getString( int valueOffset, int dataType) throws Exception{","        this.offset = valueOffset;","        if(readBoolean()) return null;","        switch(dataType){","            case SQLTokenizer.BIT:","                    return readBoolean() ? \"1\" : \"0\";","            case SQLTokenizer.BOOLEAN:","                    return String.valueOf( readBoolean() );","            case SQLTokenizer.BINARY:","            case SQLTokenizer.VARBINARY:","                    return Utils.bytes2hex( readBinary() );","            case SQLTokenizer.TINYINT:","                    return String.valueOf( readUnsignedByte() );","            case SQLTokenizer.SMALLINT:","                    return String.valueOf( readShort() );","            case SQLTokenizer.INT:","                    return String.valueOf( readInt() );","            case SQLTokenizer.BIGINT:","                    return String.valueOf( readLong() );","            case SQLTokenizer.REAL:","                    return String.valueOf( readFloat() );","            case SQLTokenizer.FLOAT:","            case SQLTokenizer.DOUBLE:","                    return String.valueOf( readDouble() );","            case SQLTokenizer.MONEY:","                    return Money.createFromUnscaledValue( readLong() ).toString();","            case SQLTokenizer.SMALLMONEY:","                    return Money.createFromUnscaledValue( readInt() ).toString();","            case SQLTokenizer.NUMERIC:","            case SQLTokenizer.DECIMAL:","                    return readNumeric().toString();","            case SQLTokenizer.CHAR:","            case SQLTokenizer.NCHAR:","            case SQLTokenizer.VARCHAR:","            case SQLTokenizer.NVARCHAR:","                    return readString();","\t\t\tcase SQLTokenizer.CLOB:","\t\t\tcase SQLTokenizer.NCLOB:","            case SQLTokenizer.LONGNVARCHAR:","            case SQLTokenizer.LONGVARCHAR:","                    return readLongString();","            case SQLTokenizer.JAVA_OBJECT:","                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());","                    ObjectInputStream ois = new ObjectInputStream(bais);","                    return ois.readObject().toString();","            case SQLTokenizer.LONGVARBINARY:","            case SQLTokenizer.BLOB:","                    return Utils.bytes2hex( readLongBinary() );","            case SQLTokenizer.TIMESTAMP:","                    return new DateTime( readTimestamp(), SQLTokenizer.TIMESTAMP ).toString();","            case SQLTokenizer.TIME:","                    return new DateTime( readTime(), SQLTokenizer.TIME ).toString();","            case SQLTokenizer.DATE:","                    return new DateTime( readDate(), SQLTokenizer.DATE ).toString();","            case SQLTokenizer.SMALLDATETIME:","                    return new DateTime( readSmallDateTime(), SQLTokenizer.TIMESTAMP ).toString();","            case SQLTokenizer.UNIQUEIDENTIFIER:","                    return Utils.bytes2unique( page, this.offset);","            default: throw new Error();","        }","    }","    @Override","    byte[] getBytes(int valueOffset, int dataType) throws Exception{","        this.offset = valueOffset;","        if(readBoolean()) return null;","        switch(dataType){","            case SQLTokenizer.BINARY:","            case SQLTokenizer.VARBINARY:","                    return readBinary();","            case SQLTokenizer.TINYINT:","            case SQLTokenizer.BIT:","            case SQLTokenizer.BOOLEAN:","                    byte[] bytes = new byte[1];","                    System.arraycopy( page, valueOffset, bytes, 0, bytes.length);","                    return bytes;","            case SQLTokenizer.SMALLINT:","                    bytes = new byte[2];","                    System.arraycopy( page, valueOffset, bytes, 0, bytes.length);","                    return bytes;","            case SQLTokenizer.INT:","            case SQLTokenizer.REAL:","            case SQLTokenizer.SMALLMONEY:","            case SQLTokenizer.TIME:","            case SQLTokenizer.DATE:","            case SQLTokenizer.SMALLDATETIME:","                    bytes = new byte[4];","                    System.arraycopy( page, valueOffset, bytes, 0, bytes.length);","                    return bytes;","            case SQLTokenizer.BIGINT:","            case SQLTokenizer.FLOAT:","            case SQLTokenizer.DOUBLE:","            case SQLTokenizer.MONEY:","            case SQLTokenizer.TIMESTAMP:","                    bytes = new byte[8];","                    System.arraycopy( page, valueOffset, bytes, 0, bytes.length);","                    return bytes;","            case SQLTokenizer.NUMERIC:","            case SQLTokenizer.DECIMAL:","                    return readNumeric().toByteArray();","            case SQLTokenizer.CHAR:","            case SQLTokenizer.NCHAR:","            case SQLTokenizer.VARCHAR:","            case SQLTokenizer.NVARCHAR:","                    return readString().getBytes();","\t\t\tcase SQLTokenizer.CLOB:","\t\t\tcase SQLTokenizer.NCLOB:","            case SQLTokenizer.LONGNVARCHAR:","            case SQLTokenizer.LONGVARCHAR:","                    return readLongString().getBytes();","            case SQLTokenizer.JAVA_OBJECT:","            case SQLTokenizer.LONGVARBINARY:","            case SQLTokenizer.BLOB:","                    return readLongBinary();","            case SQLTokenizer.UNIQUEIDENTIFIER:","                    bytes = new byte[16];","                    System.arraycopy( page, valueOffset, bytes, 0, bytes.length);","                    return bytes;","            default: throw new Error();","        }","    }","    @Override","    void scanObjectOffsets( int[] offsets, int dataTypes[] ){","        offset = PAGE_CONTROL_SIZE;","        for(int i=0; i\<offsets.length; i++){","            offsets[i] = offset;","            boolean isNull = readBoolean(); ","            switch(dataTypes[i]){","                case SQLTokenizer.BIT:","                case SQLTokenizer.BOOLEAN:","                case SQLTokenizer.TINYINT:","                    offset++;","                    break;","                case SQLTokenizer.SMALLINT:","                    offset += 2;","                    break;","                case SQLTokenizer.INT:","                case SQLTokenizer.REAL:","                case SQLTokenizer.SMALLMONEY:","                case SQLTokenizer.TIME:","                case SQLTokenizer.DATE:","                case SQLTokenizer.SMALLDATETIME:","                    offset += 4;","                    break;","                case SQLTokenizer.BIGINT:","                case SQLTokenizer.FLOAT:","                case SQLTokenizer.DOUBLE:","                case SQLTokenizer.MONEY:","                case SQLTokenizer.JAVA_OBJECT:","                case SQLTokenizer.LONGVARBINARY:","                case SQLTokenizer.BLOB:","\t\t\t\tcase SQLTokenizer.CLOB:","\t\t\t\tcase SQLTokenizer.NCLOB:","                case SQLTokenizer.LONGNVARCHAR:","                case SQLTokenizer.LONGVARCHAR:","                case SQLTokenizer.TIMESTAMP:","                    offset += 8;","                    break;","                case SQLTokenizer.BINARY:","                case SQLTokenizer.VARBINARY:","                    int count = readShort() & 0xFFFF;","                    if(!isNull) offset += count;  ","                    break;","                case SQLTokenizer.NUMERIC:","                case SQLTokenizer.DECIMAL:","                    count = readByte();","\t\t\t\t\toffset += 2;","\t\t\t\t\tif(!isNull) offset += count*4;","                    break;","                case SQLTokenizer.CHAR:","                case SQLTokenizer.NCHAR:","                case SQLTokenizer.VARCHAR:","                case SQLTokenizer.NVARCHAR:","                    count = readShort() & 0xFFFF;","                    if(!isNull) offset += count \<\< 1; ","                    break;","                case SQLTokenizer.UNIQUEIDENTIFIER:","                    offset += 16;","                    break;","                default: throw new Error(String.valueOf( dataTypes[i] ) );","            }","        }","    }","\t@Override","    void deleteRow(SSConnection con) throws SQLException{","\t\tstatus = DELETED;","\t\ttype   = SQLTokenizer.DELETE;","\t\tcreateWriteLock();","\t\twriteFinsh(con);","\t}","\tStorePageLink getLink(){","\t\treturn ((TableStorePageInsert)storePage).getLink();","\t}","    boolean isRollback(){","        return storePage.raFile == null;","    }","}"],|project://smallsql/src/smallsql/database/Money.java|:["package smallsql.database;","import java.math.*;","public class Money extends Number implements Mutable{","    private static final long serialVersionUID = -620300937494609089L;","    long value;","    private Money(){}","    public Money(double value){","        this.value = (long)(value * 10000);","    }","    public Money(float value){","        this.value = (long)(value * 10000);","    }","    public static Money createFromUnscaledValue(long value){","        Money money = new Money();","        money.value = value;","        return money;","    }","    public static Money createFromUnscaledValue(int value){","        Money money = new Money();","        money.value = value;","        return money;","    }","    public int intValue() {","        return (int)(value / 10000.0);","    }","    public float floatValue() {","        return value / 10000.0F;","    }","    public double doubleValue() {","        return value / 10000.0;","    }","    public long longValue() {","        return (long)(value / 10000.0);","    }","    public String toString(){","\t\tStringBuffer buffer = new StringBuffer();","\t\tbuffer.append(longValue()).append(\'.\');","\t\tfinal long v = Math.abs(value);","\t\tbuffer.append( (char)((v % 10000) / 1000 + \'0\') );","\t\tbuffer.append( (char)((v % 1000) / 100 + \'0\') );","\t\tbuffer.append( (char)((v % 100) / 10 + \'0\') );","\t\tbuffer.append( (char)((v % 10) + \'0\') );","        return buffer.toString();","    }","    public boolean equals(Object obj){","        return (obj instanceof Money && ((Money)obj).value == value);","    }","    public int hashCode(){","        return (int)(value ^ (value \>\>\> 32));","    }","    public long unscaledValue(){","        return value;","    }","    public static long parseMoney( String str ){","        return Utils.doubleToMoney(Double.parseDouble( str ));","    }","    private byte[] toByteArray(){","    \tbyte[] bytes = new byte[8];","\t\tint offset = 0;","\t\tbytes[offset++] = (byte)(value \>\> 56);","\t\tbytes[offset++] = (byte)(value \>\> 48);","\t\tbytes[offset++] = (byte)(value \>\> 40);","\t\tbytes[offset++] = (byte)(value \>\> 32);","\t\tbytes[offset++] = (byte)(value \>\> 24);","\t\tbytes[offset++] = (byte)(value \>\> 16);","\t\tbytes[offset++] = (byte)(value \>\> 8);","\t\tbytes[offset++] = (byte)(value);","    \treturn bytes;","    }","\tpublic BigDecimal toBigDecimal(){","\t\tif(value == 0) return ZERO;","\t\treturn new BigDecimal( new BigInteger( toByteArray() ), 4 );","\t}","\tpublic Object getImmutableObject(){","\t\treturn toBigDecimal();","\t}","\tstatic private final BigDecimal ZERO = new BigDecimal(\"0.0000\");","}"],|project://smallsql/src/smallsql/junit/TestFunctions.java|:["package smallsql.junit;","import junit.framework.*;","import java.math.*;","import java.sql.*;","public class TestFunctions extends BasicTestCase{","    private TestValue testValue;","    private static final String table = \"table_functions\";","    private static final TestValue[] TESTS = new TestValue[]{","\t\ta(\"$3\"               \t, new BigDecimal(\"3.0000\")),","\t    a(\"$-3.1\"              \t, new BigDecimal(\"-3.1000\")),","\t    a(\"-$3.2\"              \t, new BigDecimal(\"-3.2000\")),","\t    a(\"1 + 2\"               , new Integer(3)),","        a(\"3 * 2\"               , new Integer(6)),","        a(\"Top 1 4 / 2\"         , new Integer(2)),","        a(\"7/3\"         \t\t, new Integer(2)),","        a(\"5 - 2\"               , new Integer(3)),","        a(\"- aint\"              , new Integer(120)),","        a(\"5 - - 2\"             , new Integer(7)),","        a(\"5 - - - 2\"           , new Integer(3)),","\t\ta(\"-.123E-1\"            , new Double(\"-0.0123\")),","\t\ta(\".123E-1\"             , new Double(\"0.0123\")),","\t\ta(\"123e-1\"              , new Double(\"12.3\")),","\t\ta(\"123E1\"               , new Double(\"1230\")),","\t\ta(\"2*5+2\"               , new Integer(\"12\")),","\t\ta(\"\'a\'\'b\'\"              , \"a\'b\"),","\t\ta(\"\'a\\\"b\'\"              , \"a\\\"b\"),","        a(\"~1\"                  , new Integer(-2)),","        a(\"abs(-5)\"             , new Integer(5)),","        a(\"abs(aint)\"           , new Integer(120)),","        a(\"abs(\"+table+\".aint)\" , new Integer(120)),","        a(\"abs(null)\"           , null),","        a(\"abs(cast(5 as money))\"  , new BigDecimal(\"5.0000\")),","        a(\"abs(cast(-5 as money))\" , new BigDecimal(\"5.0000\")),","        a(\"abs(cast(-5 as numeric(4,2)))\" , new BigDecimal(\"5.00\")),","        a(\"abs(cast(5 as real))\"   , new Float(5)),","        a(\"abs(cast(-5 as real))\"  , new Float(5)),","        a(\"abs(cast(-5 as float))\" , new Double(5)),","        a(\"abs(cast(5 as double))\" , new Double(5)),","        a(\"abs(cast(5 as smallint))\",new Integer(5)),","        a(\"abs(cast(-5 as bigint))\", new Long(5)),","        a(\"abs(cast(5 as bigint))\",  new Long(5)),","        a(\"convert(money, abs(-5))\", new BigDecimal(\"5.0000\")),","\t\ta(\"convert(varchar(30), 11)\" \t, \"11\"),","\t\ta(\"convert(varchar(30), null)\" \t, null),","\t\ta(\"convert(varchar(1), 12)\" \t, \"1\"),","\t\ta(\"convert(char(5), 11)\" \t\t, \"11   \"),","\t\ta(\"convert(longvarchar, {d \'1999-10-12\'})\" \t, \"1999-10-12\"),","\t\ta(\"convert(binary(5), \'11\')\" \t, new byte[]{\'1\',\'1\',0,0,0}),","\t\ta(\"convert(binary(5), null)\" \t, null),","\t\ta(\"convert(varbinary(5), 11)\" \t, new byte[]{0,0,0,11}),","\t\ta(\"convert(longvarbinary, \'11\')\", new byte[]{\'1\',\'1\'}),","\t\ta(\"convert(varchar(30),convert(varbinary(30),\'Meherban\'))\", \"Meherban\"),","\t\ta(\"convert(bit, 1)\" \t\t\t, Boolean.TRUE),","\t\ta(\"convert(bit, false)\" \t\t, Boolean.FALSE),","\t\ta(\"convert(boolean, 0)\" \t\t, Boolean.FALSE),","\t\ta(\"convert(varchar(30), convert(bit, false))\" \t\t, \"0\"),","\t\ta(\"convert(varchar(30), convert(boolean, 0))\" \t\t, \"false\"),","\t\ta(\"convert(bigint, 11)\" \t\t, new Long(11)),","\t\ta(\"convert(int, 11)\" \t\t\t, new Integer(11)),","\t\ta(\"{fn convert(11, Sql_integer)}\" \t\t\t, new Integer(11)),","\t\ta(\"convert(integer, 11)\" \t\t\t, new Integer(11)),","\t\ta(\"convert(smallint, 123456789)\", new Integer((short)123456789)),","\t\ta(\"convert(tinyint, 123456789)\"\t, new Integer(123456789 & 0xFF)),","\t\ta(\"convert(date, \'1909-10-12\')\" , Date.valueOf(\"1909-10-12\")),","\t\ta(\"convert(date, null)\" \t\t, null),","\t\ta(\"convert(date, {ts \'1999-10-12 15:14:13.123456\'})\" \t, Date.valueOf(\"1999-10-12\")),","\t\ta(\"convert(date, now())\" \t\t, Date.valueOf( new Date(System.currentTimeMillis()).toString()) ),","\t\ta(\"curdate()\" \t\t\t\t\t, Date.valueOf( new Date(System.currentTimeMillis()).toString()) ),","\t\ta(\"current_date()\" \t\t\t\t, Date.valueOf( new Date(System.currentTimeMillis()).toString()) ),","\t\ta(\"hour(curtime())\" \t\t\t, new Integer(new Time(System.currentTimeMillis()).getHours()) ),","\t\ta(\"minute({t \'10:11:12\'})\" \t\t, new Integer(11) ),","\t\ta(\"month( {ts \'1899-10-12 15:14:13.123456\'})\" \t, new Integer(10)),","\t\ta(\"year({d \'2004-12-31\'})\"    , new Integer(2004)),","\t\ta(\"convert(time, \'15:14:13\')\" \t, Time.valueOf(\"15:14:13\")),","\t\ta(\"convert(time, null)\" \t\t, null),","\t\ta(\"convert(timestamp, \'1999-10-12 15:14:13.123456\')\" \t, Timestamp.valueOf(\"1999-10-12 15:14:13.123\")),","        a(\"cast({ts \'1907-06-05 04:03:02.1\'} as smalldatetime)\", Timestamp.valueOf(\"1907-06-05 04:03:00.0\")),","        a(\"cast({ts \'2007-06-05 04:03:02.1\'} as smalldatetime)\", Timestamp.valueOf(\"2007-06-05 04:03:00.0\")),","\t\ta(\"convert(varchar(30), {d \'1399-10-12 3:14:13\'},  -1)\" \t, \"1399-10-12\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12  3:14:13.12\'},  99)\" \t, \"1999-10-12 03:14:13.12\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12  0:14:13.123456\'},   0)\" \t, getMonth3L(10) + \" 12 1999 12:14AM\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'},   1)\" \t, \"10/12/99\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'},   2)\" \t, \"99.10.12\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'},   3)\" \t, \"12/10/99\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'},   4)\" \t, \"12.10.99\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'},   5)\" \t, \"12-10-99\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'},   6)\" \t, \"12 \" + getMonth3L(10) + \" 99\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'},   7)\" \t, getMonth3L(10) + \" 12, 99\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'},   8)\" \t, \"15:14:13\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'},   9)\" \t, getMonth3L(10) + \" 12 1999 03:14:13:123PM\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'},  10)\" \t, \"10-12-99\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'},  11)\" \t, \"99/10/12\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'},  12)\" \t, \"991012\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'},  13)\" \t, \"12 \" + getMonth3L(10) + \" 1999 15:14:13:123\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'},  14)\" \t, \"15:14:13:123\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'},  20)\" \t, \"1999-10-12 15:14:13\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'},  21)\" \t, \"1999-10-12 15:14:13.123\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'}, 100)\" \t, getMonth3L(10) + \" 12 1999 03:14PM\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'}, 101)\" \t, \"10/12/1999\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'}, 102)\" \t, \"1999.10.12\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'}, 103)\" \t, \"12/10/1999\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'}, 104)\" \t, \"12.10.1999\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'}, 105)\" \t, \"12-10-1999\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'}, 106)\" \t, \"12 \" + getMonth3L(10) + \" 1999\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'}, 107)\" \t, getMonth3L(10) + \" 12, 1999\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'}, 108)\" \t, \"15:14:13\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12  3:14:13.123456\'}, 109)\" \t, getMonth3L(10) + \" 12 1999 03:14:13:123AM\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'}, 109)\" \t, getMonth3L(10) + \" 12 1999 03:14:13:123PM\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'}, 110)\" \t, \"10-12-1999\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'}, 111)\" \t, \"1999/10/12\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'}, 112)\" \t, \"19991012\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'}, 113)\" \t, \"12 \" + getMonth3L(10) + \" 1999 15:14:13:123\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'}, 114)\" \t, \"15:14:13:123\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'}, 120)\" \t, \"1999-10-12 15:14:13\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'}, 121)\" \t, \"1999-10-12 15:14:13.123\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'}, 126)\" \t, \"1999-10-12T15:14:13.123\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12  3:14:13.123456\'}, 130)\" \t, \"12 \" + getMonth3L(10) + \" 1999 03:14:13:123AM\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'}, 130)\" \t, \"12 \" + getMonth3L(10) + \" 1999 03:14:13:123PM\"),","\t\ta(\"convert(varchar(30), {ts \'1999-10-12 15:14:13.123456\'}, 131)\" \t, \"12/10/99 15:14:13:123\"),","\t\ta(\"convert(timestamp, null)\" \t, null),","\t\ta(\"convert(real, 11)\" \t\t\t, new Float(11)),","\t\ta(\"convert(real, null)\" \t\t, null),","\t\ta(\"convert(float, 11.0)\" \t\t, new Double(11)),","\t\ta(\"convert(double, \'11\')\" \t\t, new Double(11)),","\t\ta(\"-convert(decimal, \'11.123456\')\" \t\t, new BigDecimal(\"-11\")),","\t\ta(\"-convert(decimal(38,6), \'11.123456\')\" \t\t, new BigDecimal(\"-11.123456\")),","\t\ta(\"convert(decimal(38,6), \'11.123456\') + 1\" \t\t, new BigDecimal(\"12.123456\")),","\t\ta(\"convert(decimal(38,6), \'11.123456\') - 1\" \t\t, new BigDecimal(\"10.123456\")),","\t\ta(\"convert(decimal(12,2), \'11.0000\') * 1\" \t\t, new BigDecimal(\"11.00\")),","\t\ta(\"convert(decimal(12,2), \'11.0000\') * convert(decimal(12,2), 1)\" \t\t, new BigDecimal(\"11.0000\")),","\t\ta(\"convert(decimal(12,2), \'11.0000\') / 1\" \t\t, new BigDecimal(\"11.0000000\")), ","\t\ta(\"convert(decimal(12,0), 11) / convert(decimal(12,2), 1)\" \t\t, new BigDecimal(\"11.000000\")), ","\t\ta(\"convert(money, -10000 / 10000.0)\" \t\t, new BigDecimal(\"-1.0000\")), ","\t\ta(\"-convert(money, \'11.123456\')\" \t\t, new BigDecimal(\"-11.1235\")),","\t\ta(\"-convert(smallmoney, \'11.123456\')\" \t, new BigDecimal(\"-11.1235\")),","\t\ta(\"convert(uniqueidentifier, 0x12345678901234567890)\" \t, \"78563412-1290-5634-7890-000000000000\"),","\t\ta(\"convert(uniqueidentifier, \'78563412-1290-5634-7890-000000000000\')\" \t, \"78563412-1290-5634-7890-000000000000\"),","\t\ta(\"convert(binary(16), convert(uniqueidentifier, 0x12345678901234567890))\" \t, new byte[]{0x12,0x34,0x56,0x78,(byte)0x90,0x12,0x34,0x56,0x78,(byte)0x90,0,0,0,0,0,0}),","\t\ta(\"Timestampdiff(day,         {d \'2004-10-12\'}, {d \'2004-10-14\'})\" \t\t, new Integer(2)),","\t\ta(\"Timestampdiff(SQL_TSI_DAY, {d \'2004-10-12\'}, {d \'2004-10-15\'})\" \t\t, new Integer(3)),","\t\ta(\"Timestampdiff(d,           {d \'2004-10-12\'}, {d \'2004-10-16\'})\" \t\t, new Integer(4)),","\t\ta(\"Timestampdiff(dd,          {d \'2004-10-12\'}, {d \'2004-10-17\'})\" \t\t, new Integer(5)),","\t\ta(\"Timestampdiff(SQL_TSI_YEAR,{d \'2000-10-12\'}, {d \'2005-10-17\'})\" \t\t, new Integer(5)),","\t\ta(\"Timestampdiff(year,\t\t\t{d \'2000-10-12\'}, {d \'2005-10-17\'})\" \t\t, new Integer(5)),","\t\ta(\"Timestampdiff(SQL_TSI_QUARTER,{d \'2000-10-12\'}, {d \'2005-10-17\'})\" \t, new Integer(20)),","\t\ta(\"Timestampdiff(quarter,\t\t{d \'2000-10-12\'}, {d \'2005-10-17\'})\" \t, new Integer(20)),","\t\ta(\"Timestampdiff(SQL_TSI_MONTH,\t{d \'2004-10-12\'}, {d \'2005-11-17\'})\" \t, new Integer(13)),","\t\ta(\"Timestampdiff(month,\t\t\t{d \'2004-10-12\'}, {d \'2005-11-17\'})\" \t, new Integer(13)),","\t\ta(\"Timestampdiff(SQL_TSI_WEEK,\t{d \'2004-10-09\'}, {d \'2004-10-12\'})\" \t\t, new Integer(1)),","\t\ta(\"Timestampdiff(week,\t\t\t{d \'2004-10-09\'}, {d \'2004-10-12\'})\" \t\t, new Integer(1)),","\t\ta(\"Timestampdiff(SQL_TSI_HOUR,\t{d \'2004-10-12\'}, {d \'2004-10-13\'})\" \t\t, new Integer(24)),","\t\ta(\"Timestampdiff(hour,\t\t\t{d \'2004-10-12\'}, {d \'2004-10-13\'})\" \t\t, new Integer(24)),","\t\ta(\"Timestampdiff(SQL_TSI_MINUTE,{t \'10:10:10\'}, {t \'11:11:11\'})\" \t\t, new Integer(61)),","\t\ta(\"Timestampdiff(minute,\t\t{t \'10:10:10\'}, {t \'11:11:11\'})\" \t\t, new Integer(61)),","\t\ta(\"Timestampdiff(SQL_TSI_SECOND,{t \'00:00:10\'}, {t \'00:10:11\'})\" \t\t, new Integer(601)),","\t\ta(\"Timestampdiff(second,\t\t{t \'00:00:10\'}, {t \'00:10:11\'})\" \t\t, new Integer(601)),","\t\ta(\"Timestampdiff(SQL_TSI_FRAC_SECOND,{ts \'2004-10-12 00:00:10.1\'}, {ts \'2004-10-12 00:00:10.2\'})\" \t\t, new Integer(100)),","\t\ta(\"Timestampdiff(millisecond,{ts \'2004-10-12 00:00:10.1\'}, {ts \'2004-10-12 00:00:10.2\'})\" \t\t, new Integer(100)),","\t\ta(\"{fn TimestampAdd(SQL_TSI_YEAR,     1, {d \'2004-10-17\'})}\" \t\t, Timestamp.valueOf(\"2005-10-17 00:00:00.0\")),","        a(\"{fn TimestampAdd(SQL_TSI_QUARTER,  1, {d \'2004-10-17\'})}\"        , Timestamp.valueOf(\"2005-01-17 00:00:00.0\")),","        a(\"{fn TimestampAdd(SQL_TSI_MONTH,    1, {d \'2004-10-17\'})}\"        , Timestamp.valueOf(\"2004-11-17 00:00:00.0\")),","        a(\"{fn TimestampAdd(SQL_TSI_WEEK,     1, {d \'2004-10-17\'})}\"        , Timestamp.valueOf(\"2004-10-24 00:00:00.0\")),","        a(\"{fn TimestampAdd(SQL_TSI_HOUR,     1, {d \'2004-10-17\'})}\"        , Timestamp.valueOf(\"2004-10-17 01:00:00.0\")),","        a(\"{fn TimestampAdd(SQL_TSI_MINUTE,  61, {d \'2004-10-17\'})}\"        , Timestamp.valueOf(\"2004-10-17 01:01:00.0\")),","        a(\"{fn TimestampAdd(SQL_TSI_SECOND,  61, {d \'2004-10-17\'})}\"        , Timestamp.valueOf(\"2004-10-17 00:01:01.0\")),","        a(\"{fn TimestampAdd(SQL_TSI_FRAC_SECOND,1,{d \'2004-10-17\'})}\"       , Timestamp.valueOf(\"2004-10-17 00:00:00.001\")),","\t\ta(\"Timestampdiff(second, null, {t \'00:10:11\'})\" \t\t, null),","\t\ta(\"Timestampdiff(second, {t \'00:10:11\'}, null)\" \t\t, null),","\t\ta(\"TimestampAdd(year,     1, null)\" \t\t, null),","\t\ta(\"DayOfWeek({d \'2006-02-16\'})\" \t\t, new Integer(4)),","\t\ta(\"DayOfWeek({d \'2006-02-19\'})\" \t\t, new Integer(7)),","\t\ta(\"DayOfYear({d \'2004-01-01\'})\" \t\t, new Integer(1)),","\t\ta(\"DayOfYear({d \'2004-02-29\'})\" \t\t, new Integer(60)),","\t\ta(\"DayOfYear({d \'2004-03-01\'})\" \t\t, new Integer(61)),","\t\ta(\"DayOfYear({d \'2004-12-31\'})\" \t\t, new Integer(366)),","\t\ta(\"DayOfMonth({d \'1904-07-17\'})\" \t\t, new Integer(17)),","\t\ta(\"locate(\'ae\', \'QWAERAE\')\"\t\t, new Integer(3)),","\t\ta(\"locate(\'ae\', \'QWAERAE\', 3)\"\t, new Integer(3)),","\t\ta(\"locate(\'ae\', \'QWAERAE\', 4)\"\t, new Integer(6)),","\t\ta(\"locate(\'ae\', \'QWAERAE\', null)\"\t\t, new Integer(3)),","\t\ta(\"locate(null, \'QWAERAE\', 4)\"\t, null),","\t\ta(\"locate(\'ae\', null, 4)\"\t, null),","\t\ta(\"{d \'2004-10-12\'}\"\t, \t\t\t\tjava.sql.Date.valueOf(\"2004-10-12\")),","\t\ta(\"{ts \'1999-10-12 15:14:13.123\'}\"\t, \tTimestamp.valueOf(\"1999-10-12 15:14:13.123\")),","\t\ta(\"{t \'15:14:13\'}\"\t, \t\t\t\t\tTime.valueOf(\"15:14:13\")),","\t\ta(\"{fn length(\'abc\')}\", \t\t\t\tnew Integer(3)),","\t\ta(\"{fn length(\'abc \')}\", \t\t\t\tnew Integer(3)),","\t\ta(\"{fn length(null)}\", \t\t\t\t\tnull),","\t\ta(\"{fn Right(\'qwertzu\', 3)}\", \t\t\t\"tzu\"),","\t\ta(\"{fn Right(\'qwertzu\', 13)}\", \t\t\t\"qwertzu\"),","\t\ta(\"cast( Right(\'1234\', 2) as real)\", \tnew Float(34)),","\t\ta(\"cast( Right(\'1234\', 2) as smallint)\",new Integer(34)),","\t\ta(\"cast( Right(\'1234\', 2) as boolean)\", Boolean.TRUE),","\t\ta(\"right(0x1234567890, 2)\",\t\t\t\tnew byte[]{0x78,(byte)0x90}),","\t\ta(\"right(null, 2)\",\t\t\t\t\t\tnull),","        a(\"left(null, 2)\",                      null),","        a(\"left(\'abcd\', 2)\",                    \"ab\"),","        a(\"left(0x1234567890, 2)\",              new byte[]{0x12,(byte)0x34}),","\t\ta(\"cast({fn SubString(\'ab2.3qw\', 3, 3)} as double)\", \tnew Double(2.3)),","\t\ta(\"subString(\'qwert\', 99, 2)\", \t\t\"\"),","\t\ta(\"{fn SubString(0x1234567890, 0, 99)}\",new byte[]{0x12,0x34,0x56,0x78,(byte)0x90}),","\t\ta(\"{fn SubString(0x1234567890, 2, 2)}\", new byte[]{0x34, 0x56}),","\t\ta(\"{fn SubString(0x1234567890, 99, 2)}\", new byte[]{}),","\t\ta(\"SubString(null, 99, 2)\", \t\t\tnull),","        a(\"Insert(\'abcd\', 2, 1, \'qw\')\",         \"aqwcd\"),","        a(\"Insert(0x1234, 2, 0, 0x56)\",         new byte[]{0x12,0x56,0x34}),","        a(\"STUFF(null, 2, 0, 0x56)\",         \tnull),","        a(\"lcase(\'Abcd\')\",                      \"abcd\"),","        a(\"ucase(\'Abcd\')\",                      \"ABCD\"),","        a(\"lcase(null)\",                        null),","        a(\"ucase(null)\",                        null),","        a(\"cast(1 as money) + SubString(\'a12\', 2, 2)\",new BigDecimal(\"13.0000\")),","        a(\"cast(1 as numeric(5,2)) + SubString(\'a12\', 2, 2)\",new BigDecimal(\"13.00\")),","        a(\"cast(1 as BigInt) + SubString(\'a12\', 2, 2)\",new Long(13)),","        a(\"cast(1 as real) + SubString(\'a12\', 2, 2)\",new Float(13)),","        a(\"1   + SubString(\'a12\', 2, 2)\",       new Integer(13)),","        a(\"1.0 + SubString(\'a12\', 2, 2)\",       new Double(13)),","        a(\"concat(\'abc\', \'def\')\",               \"abcdef\"),","\t\ta(\"{fn IfNull(null, \'abc\')}\", \t\t\t\"abc\"),","\t\ta(\"{fn IfNull(\'asd\', \'abc\')}\", \t\t\t\"asd\"),","\t\ta(\"iif(true, 1, 2)\", \t\t\t\t\tnew Integer(1)),","\t\ta(\"iif(false, 1, 2)\", \t\t\t\t\tnew Integer(2)),","\t\ta(\"CASE aVarchar WHEN \'qwert\' THEN 25 WHEN \'asdfg\' THEN 26 ELSE null END\", new Integer(25)),","\t\ta(\"CASE WHEN aVarchar=\'qwert\' THEN \'uu\' WHEN aVarchar=\'bb\' THEN \'gg\' ELSE \'nn\' END\", \"uu\"),","\t\ta(\"{fn Ascii(\'\')}\", \t\t\tnull),","\t\ta(\"{fn Ascii(null)}\", \t\t\tnull),","\t\ta(\"Ascii(\'abc\')\", \t\t\t\tnew Integer(97)),","\t\ta(\"{fn Char(97)}\", \t\t\t\t\"a\"),","\t\ta(\"Char(null)\", \t\t\t\tnull),","        a(\"$1 + Char(49)\",              new BigDecimal(\"2.0000\")),","\t\ta(\"Exp(null)\", \t\t\t\t\tnull),","\t\ta(\"exp(0)\", \t\t\t\t\tnew Double(1)),","\t\ta(\"log(exp(2.4))\", \t\t\t\tnew Double(2.4)),","\t\ta(\"log10(10)\", \t\t\t\t\tnew Double(1)),","\t\ta(\"cos(null)\", \t\t\t\t\tnull),","\t\ta(\"cos(0)\", \t\t\t\t\tnew Double(1)),","\t\ta(\"acos(1)\", \t\t\t\t\tnew Double(0)),","\t\ta(\"sin(0)\", \t\t\t\t\tnew Double(0)),","\t\ta(\"cos(pi())\", \t\t\t\t\tnew Double(-1)),","\t\ta(\"asin(0)\", \t\t\t\t\tnew Double(0)),","\t\ta(\"asin(sin(0.5))\",\t\t\t\tnew Double(0.5)),","\t\ta(\"tan(0)\", \t\t\t\t\tnew Double(0)),","\t\ta(\"atan(tan(0.5))\",\t\t\t\tnew Double(0.5)),","\t\ta(\"atan2(0,3)\",\t\t\t\t\tnew Double(0)),","\t\ta(\"atan2(0,-3)\",\t\t\t\tnew Double(Math.PI)),","\t\ta(\"atn2(0,null)\",\t\t\t\tnull),","\t\ta(\"cot(0)\",\t\t\t\t\t\tnew Double(Double.POSITIVE_INFINITY)),","\t\ta(\"tan(0)\", \t\t\t\t\tnew Double(0)),","\t\ta(\"degrees(pi())\", \t\t\t\tnew Double(180)),","\t\ta(\"degrees(radians(50))\", \t\tnew Double(50)),","\t\ta(\"ceiling(123.45)\", \t\t\tnew Double(124)),","\t\ta(\"ceiling(-123.45)\", \t\t\tnew Double(-123)),","\t\ta(\"power(2, 3)\", \t\t\t\tnew Double(8)),","\t\ta(\"5.0 % 2\", \t\t\t\t\tnew Double(1)),","\t\ta(\"5 % 2\", \t\t\t\t\t\tnew Integer(1)),","\t\ta(\"mod(5, 2)\", \t\t\t\t\tnew Integer(1)),","\t\ta(\"FLOOR(123.45)\", \t\t\t\tnew Double(123)),","\t\ta(\"FLOOR(\'123.45\')\", \t\t\tnew Double(123)),","\t\ta(\"FLOOR(-123.45)\", \t\t\tnew Double(-124)),","\t\ta(\"FLOOR($123.45)\", \t\t\tnew BigDecimal(\"123.0000\")),","\t\ta(\"Rand(0)\", \t\t\t\t\tnew Double(0.730967787376657)),","\t\ta(\"ROUND(748.58, -4)\", \t\t\tnew Double(0)),","\t\ta(\"ROUND(-748.58, -2)\", \t\tnew Double(-700)),","\t\ta(\"ROUND(\'748.5876\', 2)\", \t\tnew Double(748.59)),","        a(\"round( 1e19, 0)\"       , new Double(1e19)),","        a(\"truncate( -1e19,0)\"      , new Double(-1e19)),","\t\ta(\"Sign(\'748.5876\')\", \t\t\tnew Integer(1)),","\t\ta(\"Sign(-2)\", \t\t\t\t\tnew Integer(-1)),","        a(\"Sign(2)\",                    new Integer(1)),","        a(\"Sign(0)\",                    new Integer(0)),","        a(\"Sign(-$2)\",                  new Integer(-1)),","        a(\"Sign($2)\",                   new Integer(1)),","        a(\"Sign($0)\",                   new Integer(0)),","        a(\"Sign(cast(-2 as bigint))\",   new Integer(-1)),","        a(\"Sign(cast(2 as bigint))\",    new Integer(1)),","        a(\"Sign(cast(0 as bigint))\",    new Integer(0)),","        a(\"Sign(1.0)\",                  new Integer(1)),","\t\ta(\"Sign(0.0)\", \t\t\t\t\tnew Integer(0)),","        a(\"Sign(-.1)\",                  new Integer(-1)),","        a(\"Sign(cast(0 as numeric(5)))\",new Integer(0)),","\t\ta(\"Sign(null)\", \t\t\t\tnull),","\t\ta(\"sqrt(9)\", \t\t\t\t\tnew Double(3)),","\t\ta(\"Truncate(748.58, -4)\", \t\tnew Double(0)),","\t\ta(\"Truncate(-748.58, -2)\", \t\tnew Double(-700)),","\t\ta(\"Truncate(\'748.5876\', 2)\", \tnew Double(748.58)),","        a(\"rtrim(null)\",                null),","        a(\"rtrim(0x0012345600)\",        new byte[]{0x00,0x12,0x34,0x56}),","        a(\"rtrim(\' abc \')\",             \" abc\"),","        a(\"ltrim(null)\",                null),","        a(\"ltrim(0x0012345600)\",        new byte[]{0x12,0x34,0x56,0x00}),","        a(\"ltrim(\' abc \')\",             \"abc \"),","        a(\"space(3)\",                   \"   \"),","        a(\"space(null)\",                null),","        a(\"space(-3)\",                  null),","        a(\"replace(\'abcabc\',\'bc\',\'4\')\", \"a4a4\"),","        a(\"replace(\'abcabc\',\'bc\',null)\",null),","        a(\"replace(\'abcabc\',\'\',\'4\')\",   \"abcabc\"),","        a(\"replace(0x123456,0x3456,0x77)\", new byte[]{0x12,0x77}),","        a(\"replace(0x123456,0x,0x77)\",  new byte[]{0x12,0x34,0x56}),","        a(\"replace(0x123456,0x88,0x77)\",new byte[]{0x12,0x34,0x56}),","        a(\"repeat(\'ab\',4)\",             \"abababab\"),","        a(\"repeat(null,4)\",             null),","        a(\"repeat(0x1234,3)\",           new byte[]{0x12,0x34,0x12,0x34,0x12,0x34}),","        a(\"DIFFERENCE(\'Green\',\'Greene\')\",new Integer(4)),","        a(\"DIFFERENCE(\'Green\',null)\",   null),","        a(\"OCTET_LENGTH(\'SomeWord\')\",   new Integer(16)),","        a(\"OCTET_LENGTH(\'\')\",   \t\tnew Integer(0)),","        a(\"OCTET_LENGTH(null)\",   \t\tnull),","        a(\"BIT_LENGTH(\'SomeWord\')\",     new Integer(128)),","        a(\"BIT_LENGTH(\'\')\",   \t\t    new Integer(0)),","        a(\"BIT_LENGTH(null)\",   \t\tnull),","        a(\"CHAR_LENGTH(\'SomeWord\')\",    new Integer(8)),","        a(\"CHAR_LENGTH(\'\')\",   \t\t    new Integer(0)),","        a(\"CHAR_LENGTH(null)\",   \t\tnull),","        a(\"CHARACTER_LENGTH(\'SomeWord\')\", new Integer(8)),","        a(\"CHARACTER_LENGTH(\'\')\",   \tnew Integer(0)),","        a(\"CHARACTER_LENGTH(null)\",   \tnull),","        a(\"soundex(\'Wikipedia\')\",       \"W213\"),","        a(\"0x10 \< 0x1020\",              Boolean.TRUE),","\t};","    private static TestValue a(String function, Object result){","        TestValue value = new TestValue();","        value.function  = function;","        value.result    = result;","        return value;","    }","    TestFunctions(TestValue testValue){","        super(testValue.function);","        this.testValue = testValue;","    }","    public void tearDown(){","        try{","            Connection con = AllTests.getConnection();","            Statement st = con.createStatement();","            st.execute(\"drop table \" + table);","            st.close();","        }catch(Throwable e){","        }","    }","    public void setUp(){","        tearDown();","        try{","            Connection con = AllTests.getConnection();","            Statement st = con.createStatement();","            st.execute(\"create table \" + table + \"(aInt int, aVarchar varchar(100))\");","            st.execute(\"Insert into \" + table + \"(aInt, aVarchar) Values(-120,\'qwert\')\");","            st.close();","        }catch(Throwable e){","            e.printStackTrace();","        }","    }","    public void runTest() throws Exception{","    \tString query = \"Select \" + testValue.function + \",5 from \" + table;","\t\tassertEqualsRsValue( testValue.result, query);","        if(!testValue.function.startsWith(\"Top\")){","            assertEqualsRsValue( testValue.result, \"Select \" + testValue.function + \" from \" + table + \" Group By \" + testValue.function);","        }","    }","    public static Test suite() throws Exception{","        TestSuite theSuite = new TestSuite(\"Functions\");","        for(int i=0; i\<TESTS.length; i++){","            theSuite.addTest(new TestFunctions( TESTS[i] ) );","        }","        return theSuite;","    }","    private static class TestValue{","        String function;","        Object result;","    }","}"],|project://smallsql/src/smallsql/database/Lobs.java|:["package smallsql.database;","import java.io.File;","class Lobs extends Table {","\tLobs(Table table) throws Exception{","\t\tsuper(table.database, table.name);","\t\traFile = Utils.openRaFile( getFile(database), database.isReadOnly() );","\t}","\t@Override","    File getFile(Database database){","\t\treturn new File( Utils.createLobFileName( database, name ) );","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionHour.java|:["package smallsql.database;","final class ExpressionFunctionHour extends ExpressionFunctionReturnInt {","\tfinal int getFunction() {","\t\treturn SQLTokenizer.HOUR;","\t}","\tfinal int getInt() throws Exception {","\t\tif(param1.isNull()) return 0;","\t\tDateTime.Details details = new DateTime.Details(param1.getLong());","\t\treturn details.hour;","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionDayOfYear.java|:["package smallsql.database;","final class ExpressionFunctionDayOfYear extends ExpressionFunctionReturnInt {","\tfinal int getFunction() {","\t\treturn SQLTokenizer.DAYOFYEAR;","\t}","\tfinal int getInt() throws Exception {","\t\tif(param1.isNull()) return 0;","\t\tDateTime.Details details = new DateTime.Details(param1.getLong());","\t\treturn details.dayofyear+1;","\t}","}"],|project://smallsql/src/smallsql/junit/TestAlterTable2.java|:["package smallsql.junit;","import java.sql.*;","public class TestAlterTable2 extends BasicTestCase {","    private final String table = \"AlterTable2\";","    public void setUp(){","        tearDown();","    }","    public void tearDown(){","        try {","            dropTable( AllTests.getConnection(), table );","        } catch (SQLException ex) {","            ex.printStackTrace();","        }","    }","    public void testWithPrimaryKey() throws Exception{","        Connection con = AllTests.getConnection();","        Statement st = con.createStatement();","        st.execute(\"create table \"+table+\" (keyField varchar(2) primary key)\");","        st.execute(\"alter table \"+table+\" add anotherField varchar(4)\");","        ResultSet rs = st.executeQuery(\"Select * From \" + table);","        assertRSMetaData( rs, new String[]{\"keyField\", \"anotherField\"},  new int[]{Types.VARCHAR, Types.VARCHAR} );","        rs = con.getMetaData().getIndexInfo( null, null, table, false, false );","        assertRowCount( 1, rs );","    }","    public void testAddPrimaryKey() throws Exception{","        Connection con = AllTests.getConnection();","        Statement st = con.createStatement();","        st.execute(\"create table \"+table+\" (a varchar(2))\");","        st.execute(\"alter table \"+table+\" add b varchar(4) primary key\");","        ResultSet rs = st.executeQuery(\"Select * From \" + table);","        assertRSMetaData( rs, new String[]{\"a\", \"b\"},  new int[]{Types.VARCHAR, Types.VARCHAR} );","        rs = con.getMetaData().getIndexInfo( null, null, table, false, false );","        assertRowCount( 1, rs );","    }","    public void testAdd2PrimaryKeys() throws Exception{","        Connection con = AllTests.getConnection();","        Statement st = con.createStatement();","        st.execute(\"create table \"+table+\" (a varchar(2) primary key)\");","        try {","            st.execute(\"alter table \"+table+\" add b varchar(4) primary key\");","            fail(\"2 primary keys are invalid\");","        } catch (SQLException ex) {","            assertSQLException(\"01000\",0, ex);","        }","        ResultSet rs = st.executeQuery(\"Select * From \" + table);","        assertRSMetaData( rs, new String[]{\"a\"},  new int[]{Types.VARCHAR} );","        rs = con.getMetaData().getIndexInfo( null, null, table, false, false );","        assertRowCount( 1, rs );","    }","    public void testAdd2Keys() throws Exception{","        Connection con = AllTests.getConnection();","        Statement st = con.createStatement();","        st.execute(\"create table \"+table+\" (a varchar(2) unique)\");","        st.execute(\"alter table \"+table+\" add b varchar(4) primary key\");","        ResultSet rs = st.executeQuery(\"Select * From \" + table);","        assertRSMetaData( rs, new String[]{\"a\", \"b\"},  new int[]{Types.VARCHAR, Types.VARCHAR} );","        rs = con.getMetaData().getIndexInfo( null, null, table, false, false );","        assertRowCount( 2, rs );","    }","}"],|project://smallsql/src/smallsql/junit/TestAlterTable.java|:["package smallsql.junit;","import java.sql.*;","public class TestAlterTable extends BasicTestCase {","    private final String table = \"AlterTable\";","    private final int rowCount = 10;","    public void setUp(){","        tearDown();","        try{","            Connection con = AllTests.getConnection();","            Statement st = con.createStatement();","            st.execute(\"create table \" + table + \"(i int, v varchar(100))\");","            st.execute(\"Insert into \" + table + \" Values(1,\'abc\')\");","            st.execute(\"Insert into \" + table + \" Values(2,\'bcd\')\");","            st.execute(\"Insert into \" + table + \" Values(3,\'cde\')\");","            st.execute(\"Insert into \" + table + \" Values(4,\'def\')\");","            st.execute(\"Insert into \" + table + \" Values(5,\'efg\')\");","            st.execute(\"Insert into \" + table + \" Values(6,\'fgh\')\");","            st.execute(\"Insert into \" + table + \" Values(7,\'ghi\')\");","            st.execute(\"Insert into \" + table + \" Values(8,\'hij\')\");","            st.execute(\"Insert into \" + table + \" Values(9,\'ijk\')\");","            st.execute(\"Insert into \" + table + \" Values(10,\'jkl\')\");","            st.close();","        }catch(Throwable e){","            e.printStackTrace();","        }","    }","    public void tearDown(){","        try {","            dropTable( AllTests.getConnection(), table );","        } catch (SQLException ex) {","            ex.printStackTrace();","        }","    }","    public void testAdd1Column() throws Exception{","        Connection con = AllTests.getConnection();","        Statement st = con.createStatement();","        st.execute(\"Alter Table \" + table + \" Add a Varchar(20)\");","        ResultSet rs = st.executeQuery(\"Select * From \" + table);","        assertRSMetaData( rs, new String[]{\"i\", \"v\", \"a\"},  new int[]{Types.INTEGER, Types.VARCHAR, Types.VARCHAR} );","    }","    public void testAdd2Column() throws Exception{","        Connection con = AllTests.getConnection();","        Statement st = con.createStatement();","        st.execute(\"Alter Table \" + table + \" Add a Varchar(20), b int DEFAULT 25\");","        ResultSet rs = st.executeQuery(\"Select * From \" + table);","        assertRSMetaData( rs, new String[]{\"i\", \"v\", \"a\", \"b\"},  new int[]{Types.INTEGER, Types.VARCHAR, Types.VARCHAR, Types.INTEGER} );","        int count = 0;","        while(rs.next()){","            assertEquals( \"default value\", 25, rs.getInt(\"b\") );","            count++;","        }","        assertEquals( \"RowCount\", rowCount, count );","    }","    public void testAddWithTableLock_REPEATABLE_READ() throws Exception{","        Connection con = AllTests.getConnection();","        Statement st = con.createStatement();","        int isolation = con.getTransactionIsolation();","        con.setAutoCommit(false);","        try{","            con.setTransactionIsolation( Connection.TRANSACTION_REPEATABLE_READ );","            ResultSet rs = st.executeQuery(\"Select * From \" + table);","            rs.next();","            try {","                st.execute(\"Alter Table \" + table + \" Add a Varchar(20)\");","                fail(\"Alter Table should not work on a table with a lock.\");","            } catch (SQLException ex) {","                assertSQLException( \"01000\", 0, ex );","            }","            rs.next();","        }finally{","            con.setTransactionIsolation(isolation);","            con.setAutoCommit(true);","        }","    }","    public void testAddWithTableLock_READ_COMMITTED() throws Exception{","        Connection con = AllTests.getConnection();","        Statement st = con.createStatement();","        int isolation = con.getTransactionIsolation();","        con.setAutoCommit(false);","        try{","            con.setTransactionIsolation( Connection.TRANSACTION_READ_COMMITTED );","            ResultSet rs = st.executeQuery(\"Select * From \" + table);","            rs.next();","            st.execute(\"Alter Table \" + table + \" Add a Varchar(20)\");","            try {","                rs.next();","                fail(\"Alter Table should not work on a table with a lock.\");","            } catch (SQLException ex) {","                assertSQLException( \"01000\", 0, ex );","            }","        }finally{","            con.setTransactionIsolation(isolation);","            con.setAutoCommit(true);","        }","    }","}"],|project://smallsql/src/smallsql/junit/TestIdentifer.java|:["package smallsql.junit;","import java.sql.*;","public class TestIdentifer extends BasicTestCase {","\tpublic TestIdentifer(){","\t\tsuper();","\t}","\tpublic TestIdentifer(String arg0) {","\t\tsuper(arg0);","\t}","\tpublic void testQuoteIdentifer() throws Exception{","\t\tConnection con = AllTests.getConnection();","\t\tdropTable(con,\"QuoteIdentifer\");","\t\tcon.createStatement().execute(\"create table \\\"QuoteIdentifer\\\"(\\\"a\\\" int default 5)\");","\t\tResultSet rs = con.createStatement().executeQuery(\"SELECT tbl.* from \\\"QuoteIdentifer\\\" tbl\");","\t\tassertEquals( \"a\", rs.getMetaData().getColumnName(1));","\t\tassertEquals( \"QuoteIdentifer\", rs.getMetaData().getTableName(1));","\t\twhile(rs.next()){","\t\t}","\t\tdropTable(con,\"QuoteIdentifer\");","\t}","}"],|project://smallsql/src/smallsql/junit/TestLanguage.java|:["package smallsql.junit;","import java.sql.Connection;","import java.sql.SQLException;","import java.sql.Statement;","import java.util.HashSet;","import java.util.Iterator;","import java.util.Locale;","import java.util.Set;","import smallsql.database.language.Language;","public class TestLanguage extends BasicTestCase {","\tprivate static final String TABLE_NAME = \"test_lang\";","\tprivate static final String[] OTHER_LANGUAGES = { \"it\", \"de\" };","\tpublic void setUp() throws SQLException {","\t\ttearDown();","\t}","\tpublic void tearDown() throws SQLException {","\t\tConnection conn = AllTests.createConnection(\"?locale=en\", null);","\t\ttry {","\t\t\tconn.prepareStatement(\"DROP TABLE \" + TABLE_NAME).execute();","\t\t}","\t\tcatch (Exception e) {}","\t\tfinally {","\t\t\tconn.close();","\t\t}","\t}","\tpublic void testBogusLocale() throws SQLException {","\t\tLocale origLocale = Locale.getDefault();","\t\tLocale.setDefault(Locale.ITALY);","\t\tConnection conn = AllTests.createConnection(\"?locale=XXX\", null);","\t\tStatement stat = conn.createStatement();","\t\ttry {","\t\t\trecreateTestTab(stat);","\t\t\tstat.execute(\"CREATE TABLE \" + TABLE_NAME + \" (id_test INT)\");","\t\t\tfail();","\t\t}","\t\tcatch (SQLException e) {","\t\t\tassertMessage(e, \"La tabella/vista \'\" + TABLE_NAME + \"\' Ã¨ giÃ\u00a0 esistente.\");","\t\t}","\t\tfinally {","\t\t\tLocale.setDefault(origLocale);","\t\t\tconn.close();","\t\t}","\t}","\tpublic void testLocalizedErrors() throws Exception {","\t\tConnection conn = AllTests.createConnection(\"?locale=it\", null);","\t\tStatement stat = conn.createStatement();","\t\ttry {","\t\t\ttry {","\t\t\t\trecreateTestTab(stat);","\t\t\t\tstat.execute(\"CREATE TABLE \" + TABLE_NAME + \" (id_test INT)\");","\t\t\t\tfail();","\t\t\t}","\t\t\tcatch(SQLException e) {","\t\t\t\tassertMessage(e, \"La tabella/vista \'\" + TABLE_NAME + \"\' Ã¨ giÃ\u00a0 esistente.\");","\t\t\t}","\t\t\ttry {","\t\t\t\tstat.execute(\"DROP TABLE \" + TABLE_NAME);","\t\t\t\tstat.execute(\"DROP TABLE \" + TABLE_NAME);","\t\t\t}","\t\t\tcatch (SQLException e) {","\t\t\t\tassertMessage(e, \"Non si puÃ² effettuare DROP della tabella\");","\t\t\t}","\t\t\ttry {","\t\t\t\tstat.execute(\"CREATE TABLE foo\");","\t\t\t}","\t\t\tcatch (SQLException e) {","\t\t\t\tassertMessage(e, \"Errore di sintassi, fine inattesa\");","\t\t\t}","\t\t}","\t\tfinally {","\t\t\tconn.close();","\t\t}","\t}","\tpublic void testSyntaxErrors() throws SQLException {","\t\tConnection conn = AllTests.createConnection(\"?locale=it\", null);","\t\tStatement stat = conn.createStatement();","\t\ttry {","\t\t\ttry {","\t\t\t\tstat.execute(\"CREATE TABLE\");","\t\t\t}","\t\t\tcatch (SQLException se) {","\t\t\t\tassertMessage(se, \"Errore di sintassi, fine inattesa della stringa SQL. Le parole chiave richieste sono: \<identifier\>\");","\t\t\t}","\t\t\ttry {","\t\t\t\tstat.execute(\"Some nonsensical sentence.\");","\t\t\t}","\t\t\tcatch (SQLException se) {","\t\t\t\tassertMessage(se, \"Errore di sintassi alla posizione 0 in \'Some\'. Le parole chiave richieste sono\");","\t\t\t}","\t\t\trecreateTestTab(stat);","\t\t\ttry {","\t\t\t\tstat.execute(\"SELECT bar() FROM foo\");","\t\t\t}","\t\t\tcatch (SQLException se) {","\t\t\t\tassertMessage(se, \"Errore di sintassi alla posizione 7 in \'bar\'. Funzione sconosciuta\");","\t\t\t}","\t\t\ttry {","\t\t\t\tstat.execute(\"SELECT UCASE(\'a\', \'\');\");","\t\t\t}","\t\t\tcatch (SQLException se) {","\t\t\t\tassertMessage(se, \"Errore di sintassi alla posizione 7 in \'UCASE\'. Totale parametri non valido.\");","\t\t\t}","\t\t}","\t\tfinally {","\t\t\tconn.close();","\t\t}","\t}","\tprivate void assertMessage(SQLException e, String expectedText) {","\t\tassertMessage(e, new String[] { expectedText });","\t}","\tprivate void assertMessage(SQLException e, String[] expectedTexts) {","\t\tString message = e.getMessage();","\t\tboolean found = true;","\t\tfor (int i = 0; found && i \< expectedTexts.length; i++) {","\t\t\tfound = found && message.indexOf(expectedTexts[i]) \>= 0;","\t\t}","\t\tif (! found) {","\t\t\tSystem.err.println(\"ERROR [Wrong message]:\" + message);","\t\t\tfail();","\t\t}","\t}","\tprivate void recreateTestTab(Statement stat) throws SQLException {","\t\tstat.execute(\"CREATE TABLE \" + TABLE_NAME + \" (id_test INT)\");","\t}","\tpublic void testEntries() throws Exception {","\t\tboolean failed = false;","        StringBuffer msgBuf = new StringBuffer();","\t\tLanguage eng = Language.getLanguage(\"en\"); ","        HashSet engEntriesSet = new HashSet();","        String[][] engEntriesArr = eng.getEntries();","        for (int j = 1; j \< engEntriesArr.length; j++) {","            engEntriesSet.add(engEntriesArr[j][0]);","        }","\t\tfor (int i = 0; i \< OTHER_LANGUAGES.length; i++) {","\t\t\tString localeStr = OTHER_LANGUAGES[i];","\t\t\tLanguage lang2 = Language.getLanguage(localeStr);","            HashSet otherEntriesSet = new HashSet();        ","            String[][] otherEntriesArr = lang2.getEntries();        ","            for (int j = 0; j \< otherEntriesArr.length; j++) {","                otherEntriesSet.add(otherEntriesArr[j][0]);","            }","\t\t\tSet diff = (Set)engEntriesSet.clone();","            diff.removeAll(otherEntriesSet);","\t\t\tif (diff.size() \> 0) {","\t\t\t\tfailed = true;","                msgBuf.append(\"\\nMissing entries for language \").append( OTHER_LANGUAGES[i] ).append(\": \");","\t\t\t\tfor (Iterator itr = diff.iterator(); itr.hasNext(); ) {","\t\t\t\t\tmsgBuf.append(itr.next());","\t\t\t\t\tif (itr.hasNext()) msgBuf.append(\',\');","\t\t\t\t}","\t\t\t}","            diff = (Set)otherEntriesSet.clone();","            diff.removeAll(engEntriesSet);","            if (diff.size() \> 0) {","                failed = true;","                msgBuf.append(\"\\nAdditional entries for language \").append( OTHER_LANGUAGES[i] ).append(\": \");","                for (Iterator itr = diff.iterator(); itr.hasNext(); ) {","                    msgBuf.append(itr.next());","                    if (itr.hasNext()) msgBuf.append(\',\');","                }","            }","            StringBuffer buf = new StringBuffer();","            for (int j = 1; j \< engEntriesArr.length; j++) {","                String key = engEntriesArr[j][0];","                String engValue = eng.getMessage(key);","                String otherValue = lang2.getMessage(key);","                if(engValue.equals(otherValue)){","                    failed = true;","                    if(buf.length() \> 0){","                        buf.append(\',\');","                    }","                    buf.append(key);","                }","            }","            if(buf.length()\>0){","                msgBuf.append(\"\\nNot translated entries for language \").append( OTHER_LANGUAGES[i] ).append(\": \");","                msgBuf.append(buf);","            }","\t\t}\t\t","\t\tif (failed){","            System.err.println(msgBuf);","            fail(msgBuf.toString());","        }","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionLTrim.java|:["package smallsql.database;","public class ExpressionFunctionLTrim extends ExpressionFunctionReturnP1StringAndBinary {","\tfinal int getFunction() {","\t\treturn SQLTokenizer.LTRIM;","\t}","\tfinal boolean isNull() throws Exception {","\t\treturn param1.isNull();","\t}","\tfinal byte[] getBytes() throws Exception{","\t\tif(isNull()) return null;","\t\tbyte[] bytes = param1.getBytes();","        int start = 0;","        int length = bytes.length;","        while(start\<length && bytes[start]==0){","            start++;","        }","        length -= start; ","\t\tbyte[] b = new byte[length];","\t\tSystem.arraycopy(bytes, start, b, 0, length);","\t\treturn b;\t\t","\t}","\tfinal String getString() throws Exception {","\t\tif(isNull()) return null;","\t\tString str = param1.getString();","        int start = 0;","        while(start\<str.length() && str.charAt(start)==\' \'){","            start++;","        }","\t\treturn str.substring(start);","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionRound.java|:["package smallsql.database;","final class ExpressionFunctionRound extends ExpressionFunctionReturnP1Number {","    final int getFunction(){ return SQLTokenizer.ROUND; }","    boolean isNull() throws Exception{","        return param1.isNull() || param2.isNull();","    }","    final double getDouble() throws Exception{","\t\tif(isNull()) return 0;","\t\tfinal int places = param2.getInt();","\t\tdouble value = param1.getDouble();","\t\tlong factor = 1;","\t\tif(places \> 0){","\t\t\tfor(int i=0; i\<places; i++){","\t\t\t\tfactor *= 10;","\t\t\t}","\t\t\tvalue *= factor;","\t\t}else{","\t\t\tfor(int i=0; i\>places; i--){","\t\t\t\tfactor *= 10;","\t\t\t}","\t\t\tvalue /= factor;","\t\t}","\t\tvalue = Math.rint( value );","\t\tif(places \> 0){","\t\t\tvalue /= factor;","\t\t}else{","\t\t\tvalue *= factor;","\t\t}","\t\treturn value;","    }","}"],|project://smallsql/src/smallsql/database/UnionAll.java|:["package smallsql.database;","import smallsql.database.language.Language;","final class UnionAll extends DataSource {","\tprivate final DataSources dataSources = new DataSources();","\tprivate int dataSourceIdx;","\tprivate DataSource currentDS;","\tprivate int row;","\tvoid addDataSource(DataSource ds){","\t\tdataSources.add(ds);","\t\tcurrentDS = dataSources.get(0);","\t}","\tboolean init(SSConnection con) throws Exception{","\t\tboolean result = false;","\t\tint colCount = -1;","\t\tfor(int i=0; i\<dataSources.size(); i++){","\t\t\tDataSource ds = dataSources.get(i);","\t\t\tresult |= ds.init(con);","\t\t\tint nextColCount = ds.getTableView().columns.size();","\t\t\tif(colCount == -1)","\t\t\t\tcolCount = nextColCount;","\t\t\telse","\t\t\t\tif(colCount != nextColCount)","\t\t\t\t\tthrow SmallSQLException.create(Language.UNION_DIFFERENT_COLS, new Object[] { new Integer(colCount), new Integer(nextColCount)});","\t\t}\t","\t\treturn result;","\t}","\tfinal boolean isNull(int colIdx) throws Exception {","\t\treturn currentDS.isNull(colIdx);","\t}","\tfinal boolean getBoolean(int colIdx) throws Exception {","\t\treturn currentDS.getBoolean(colIdx);","\t}","\tfinal int getInt(int colIdx) throws Exception {","\t\treturn currentDS.getInt(colIdx);","\t}","\tfinal long getLong(int colIdx) throws Exception {","\t\treturn currentDS.getLong(colIdx);","\t}","\tfinal float getFloat(int colIdx) throws Exception {","\t\treturn currentDS.getFloat(colIdx);","\t}","\tfinal double getDouble(int colIdx) throws Exception {","\t\treturn currentDS.getDouble(colIdx);","\t}","\tfinal long getMoney(int colIdx) throws Exception {","\t\treturn currentDS.getMoney(colIdx);","\t}","\tfinal MutableNumeric getNumeric(int colIdx) throws Exception {","\t\treturn currentDS.getNumeric(colIdx);","\t}","\tfinal Object getObject(int colIdx) throws Exception {","\t\treturn currentDS.getObject(colIdx);","\t}","\tfinal String getString(int colIdx) throws Exception {","\t\treturn currentDS.getString(colIdx);","\t}","\tfinal byte[] getBytes(int colIdx) throws Exception {","\t\treturn currentDS.getBytes(colIdx);","\t}","\tfinal int getDataType(int colIdx) {","\t\treturn currentDS.getDataType(colIdx);","\t}","\tTableView getTableView(){","\t\treturn currentDS.getTableView();","\t}","\tfinal boolean isScrollable(){","\t\treturn false; ","\t}","\tfinal void beforeFirst() throws Exception {","\t\tdataSourceIdx = 0;","\t\tcurrentDS = dataSources.get(0);","\t\tcurrentDS.beforeFirst();","\t\trow = 0;","\t}","\tfinal boolean first() throws Exception {","\t\tdataSourceIdx = 0;","\t\tcurrentDS = dataSources.get(0);","\t\tboolean b = currentDS.first();","\t\trow = b ? 1 : 0;","\t\treturn b;","\t}","\tfinal boolean next() throws Exception {","\t\tboolean n = currentDS.next();","\t\trow++;","\t\tif(n) return true;","\t\twhile(dataSources.size() \> dataSourceIdx+1){","\t\t\tcurrentDS = dataSources.get(++dataSourceIdx);","\t\t\tcurrentDS.beforeFirst();","\t\t\tn = currentDS.next();","\t\t\tif(n) return true;","\t\t}","\t\trow = 0;","\t\treturn false;","\t}","\tfinal void afterLast() throws Exception {","\t\tdataSourceIdx = dataSources.size()-1;","\t\tcurrentDS = dataSources.get(dataSourceIdx);","\t\tcurrentDS.afterLast();","\t\trow = 0;","\t}","\tfinal int getRow() throws Exception {","\t\treturn row;","\t}","\tprivate final int getBitCount(){","\t\tint size = dataSources.size();","\t\tint bitCount = 0;","\t\twhile(size\>0){","\t\t\tbitCount++;","\t\t\tsize \>\>= 1;","\t\t}","\t\treturn bitCount;","\t}","\tfinal long getRowPosition() {","\t\tint bitCount = getBitCount();","\t\treturn dataSourceIdx | currentDS.getRowPosition() \<\< bitCount;","\t}","\tfinal void setRowPosition(long rowPosition) throws Exception {","\t\tint bitCount = getBitCount();","\t\tint mask = 0xFFFFFFFF \>\>\> (32 - bitCount);","\t\tdataSourceIdx = (int)rowPosition & mask;","\t\tcurrentDS = dataSources.get(dataSourceIdx);","\t\tcurrentDS.setRowPosition( rowPosition \>\> bitCount );","\t}","\tfinal boolean rowInserted(){","\t\treturn currentDS.rowInserted();","\t}","\tfinal boolean rowDeleted(){","\t\treturn currentDS.rowDeleted();","\t}","\tfinal void nullRow() {","\t\tcurrentDS.nullRow();","\t\trow = 0;","\t}","\tfinal void noRow() {","\t\tcurrentDS.noRow();","\t\trow = 0;","\t}","\tfinal void execute() throws Exception{","\t\tfor(int i=0; i\<dataSources.size(); i++){","\t\t\tdataSources.get(i).execute();\t\t\t","\t\t}","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionReturnString.java|:["package smallsql.database;","abstract class ExpressionFunctionReturnString extends ExpressionFunction {","    boolean isNull() throws Exception {","\t\treturn param1.isNull();","\t}","\tfinal boolean getBoolean() throws Exception {","\t\tif(isNull()) return false;","\t\treturn Utils.string2boolean(getString().trim());","\t}","\tfinal int getInt() throws Exception {","\t\tif(isNull()) return 0;","\t\treturn Integer.parseInt(getString().trim());","\t}","\tfinal long getLong() throws Exception {","\t\tif(isNull()) return 0;","\t\treturn Long.parseLong(getString().trim());","\t}","\tfinal float getFloat() throws Exception {","\t\tif(isNull()) return 0;","\t\treturn Float.parseFloat(getString().trim());","\t}","\tfinal double getDouble() throws Exception {","\t\tif(isNull()) return 0;","\t\treturn Double.parseDouble(getString().trim());","\t}","\tfinal long getMoney() throws Exception {","\t\tif(isNull()) return 0;","\t\treturn Money.parseMoney(getString().trim());","\t}","\tfinal MutableNumeric getNumeric() throws Exception {","\t\tif(isNull()) return null;","\t\treturn new MutableNumeric(getString().trim());","\t}","\tfinal Object getObject() throws Exception {","\t\treturn getString();","\t}","}"],|project://smallsql/src/smallsql/database/Columns.java|:["package smallsql.database;","final class Columns {","\tprivate int size;","\tprivate Column[] data;","\tColumns(){","\t\tdata = new Column[16];","\t}","\tfinal int size(){","\t\treturn size;","\t}","\tfinal Column get(int idx){","\t\tif (idx \>= size)","\t\t\tthrow new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);","\t\treturn data[idx];","\t}","    final Column get(String name){","        for(int i = 0; i \< size; i++){","            Column column = data[i];","            if(name.equalsIgnoreCase(column.getName())){","                return column;","            }","        }","        return null;","    }","    final void add(Column column){","        if(column == null){","            throw new NullPointerException(\"Column is null.\");","        }","        if(size \>= data.length){","            resize(size \<\< 1);","        }","        data[size++] = column;","    }","    Columns copy(){","        Columns copy = new Columns();","        Column[] cols = copy.data = (Column[]) data.clone(); ","        for(int i=0; i\<size; i++){","            cols[i] = cols[i].copy();","        }","        copy.size = size;","        return copy;","    }","\tprivate final void resize(int newSize){","\t\tColumn[] dataNew = new Column[newSize];","\t\tSystem.arraycopy(data, 0, dataNew, 0, size);","\t\tdata = dataNew;\t\t","\t}","}"],|project://smallsql/src/smallsql/database/language/Language_de.java|:["package smallsql.database.language;","public class Language_de extends Language {","\tprotected Language_de() {","\t\taddMessages(ENTRIES);","\t}","\tpublic String[][] getEntries() {","\t\treturn ENTRIES;","\t}","    private final String[][] ENTRIES = {","            { UNSUPPORTED_OPERATION           , \"Nicht unterstÃ¼tzte Funktion: {0}\" },","            { CANT_LOCK_FILE                  , \"Die Datei \'\'{0}\'\' kann nicht gelockt werden. Eine einzelne SmallSQL Datenbank kann nur fÃ¼r einen einzigen Prozess geÃ¶ffnet werden.\" },","            { DB_EXISTENT                     , \"Die Datenbank \'\'{0}\'\' existiert bereits.\" },","            { DB_NONEXISTENT                  , \"Die Datenbank \'\'{0}\'\' existiert nicht.\" },","            { DB_NOT_DIRECTORY                , \"Das Verzeichnis \'\'{0}\'\' ist keine SmallSQL Datenbank.\" },","            { DB_NOTCONNECTED                 , \"Sie sind nicht mit einer Datenbank verbunden.\" },","            { CONNECTION_CLOSED               , \"Die Verbindung ist bereits geschlossen.\" },","            { VIEW_INSERT                     , \"INSERT wird nicht unterstÃ¼tzt fÃ¼r eine View.\" },","            { VIEWDROP_NOT_VIEW               , \"DROP VIEW kann nicht mit \'\'{0}\'\' verwendet werden, weil es keine View ist.\" },","            { VIEW_CANTDROP                   , \"View \'\'{0}\'\' kann nicht gelÃ¶scht werden.\" },","            { RSET_NOT_PRODUCED               , \"Es wurde kein ResultSet erzeugt.\" },","            { RSET_READONLY                   , \"Das ResultSet ist schreibgeschÃ¼tzt.\" },","            { RSET_FWDONLY                    , \"Das ResultSet ist forward only.\" },","            { RSET_CLOSED                     , \"Das ResultSet ist geschlossen.\" },","            { RSET_NOT_INSERT_ROW             , \"Der Cursor zeigt aktuell nicht auf die EinfÃ¼geposition (insert row).\" },","            { RSET_ON_INSERT_ROW              , \"Der Cursor zeigt aktuell auf die EinfÃ¼geposition (insert row).\" },","            { ROWSOURCE_READONLY              , \"Die Rowsource ist schreibgeschÃ¼tzt.\" },","            { STMT_IS_CLOSED                  , \"Das Statement ist bereits geschlossen.\" },","            { SUBQUERY_COL_COUNT              , \"Die Anzahl der Spalten in der Subquery muss 1 sein und nicht {0}.\" },","            { JOIN_DELETE                     , \"Die Methode deleteRow wird nicht unterstÃ¼tzt fÃ¼r Joins.\" },","            { JOIN_INSERT                     , \"Die Methode insertRow wird nicht unterstÃ¼tzt fÃ¼r Joins.\" },","            { DELETE_WO_FROM                  , \"Die Methode deleteRow benÃ¶tigt einen FROM Ausdruck.\" },","            { INSERT_WO_FROM                  , \"Die Methode insertRow benÃ¶tigt einen FROM Ausdruck.\" },","            { TABLE_CANT_RENAME               , \"Die Tabelle \'\'{0}\'\' kann nicht umbenannt werden.\" },","            { TABLE_CANT_DROP                 , \"Die Tabelle \'\'{0}\'\' kann nicht gelÃ¶scht werden.\" },","            { TABLE_CANT_DROP_LOCKED          , \"Die Tabelle \'\'{0}\'\' kann nicht gelÃ¶scht werden, weil sie gelockt ist.\" },","            { TABLE_CORRUPT_PAGE              , \"BeschÃ¤digte Tabellenseite bei Position: {0}.\" },","            { TABLE_MODIFIED                  , \"Die Tabelle \'\'{0}\'\' wurde modifiziert.\" },","            { TABLE_DEADLOCK                  , \"Deadlock, es kann kein Lock erzeugt werden fÃ¼r Tabelle \'\'{0}\'\'.\" },","            { TABLE_OR_VIEW_MISSING           , \"Tabelle oder View \'\'{0}\'\' existiert nicht.\" },","            { TABLE_FILE_INVALID              , \"Die Datei \'\'{0}\'\' enthÃ¤lt keine gÃ¼ltige SmallSQL Tabelle.\" },","            { TABLE_OR_VIEW_FILE_INVALID      , \"Die Datei \'\'{0}\'\' ist keine gÃ¼ltiger Tabellen oder View Speicher.\" },","            { TABLE_EXISTENT                  , \"Die Tabelle oder View \'\'{0}\'\' existiert bereits.\" },","            { FK_NOT_TABLE                    , \"\'\'{0}\'\' ist keine Tabelle.\" },","            { PK_ONLYONE                      , \"Eine Tabelle kann nur einen PrimÃ¤rschlÃ¼ssel haben.\" },","            { KEY_DUPLICATE                   , \"Doppelter SchlÃ¼ssel.\" },","            { MONTH_TOOLARGE                  , \"Der Monat ist zu groÃŸ im DATE oder TIMESTAMP Wert \'\'{0}\'\'.\" },","            { DAYS_TOOLARGE                   , \"Die Tage sind zu groÃŸ im DATE oder TIMESTAMP Wert \'\'{0}\'\'.\" },","            { HOURS_TOOLARGE                  , \"Die Stunden sind zu groÃŸ im TIME oder TIMESTAMP Wert \'\'{0}\'\'.\" },","            { MINUTES_TOOLARGE                , \"Die Minuten sind zu groÃŸ im TIME oder TIMESTAMP Wert \'\'{0}\'\'.\" },","            { SECS_TOOLARGE                   , \"Die Sekunden sind zu groÃŸ im TIME oder TIMESTAMP Wert \'\'{0}\'\'.\" },","            { MILLIS_TOOLARGE                 , \"Die Millisekunden sind zu groÃŸ im TIMESTAMP Wert \'\'{0}\'\'.\" },","            { DATETIME_INVALID                , \"\'\'{0}\'\' ist ein ungÃ¼ltiges DATE, TIME or TIMESTAMP.\" },","            { UNSUPPORTED_CONVERSION_OPER     , \"Nicht unterstÃ¼tzte Konvertierung zu Datentyp \'\'{0}\'\' von Datentyp \'\'{1}\'\' fÃ¼r die Operation \'\'{2}\'\'.\" },","            { UNSUPPORTED_DATATYPE_OPER       , \"Nicht unterstÃ¼tzter Datentyp \'\'{0}\'\' fÃ¼r Operation \'\'{1}\'\'.\" },","            { UNSUPPORTED_DATATYPE_FUNC       , \"Nicht unterstÃ¼tzter Datentyp \'\'{0}\'\' fÃ¼r Funktion \'\'{1}\'\'.\" },","            { UNSUPPORTED_CONVERSION_FUNC     , \"Nicht unterstÃ¼tzte Konvertierung zu Datentyp \'\'{0}\'\' fÃ¼r Funktion \'\'{1}\'\'.\" },","            { UNSUPPORTED_TYPE_CONV           , \"Nicht unterstÃ¼tzter Typ fÃ¼r CONVERT Funktion: {0}.\" },","            { UNSUPPORTED_TYPE_SUM            , \"Nicht unterstÃ¼tzter Datentyp \'\'{0}\'\' fÃ¼r SUM Funktion.\" },","            { UNSUPPORTED_TYPE_MAX            , \"Nicht unterstÃ¼tzter Datentyp \'\'{0}\'\' fÃ¼r MAX Funktion.\" },","            { UNSUPPORTED_CONVERSION          , \"Kann nicht konvertieren \'\'{0}\'\' [{1}] zu \'\'{2}\'\'.\" },","            { INSERT_INVALID_LEN              , \"UngÃ¼ltige LÃ¤nge \'\'{0}\'\' in Funktion INSERT.\" },","            { SUBSTR_INVALID_LEN              , \"UngÃ¼ltige LÃ¤nge \'\'{0}\'\' in Funktion SUBSTRING.\" },","            { VALUE_STR_TOOLARGE              , \"Der String Wert ist zu groÃŸ fÃ¼r die Spalte.\" },","            { VALUE_BIN_TOOLARGE              , \"Ein BinÃ¤re Wert mit LÃ¤nge {0} ist zu groÃŸ fÃ¼r eine Spalte mit der GrÃ¶ÃŸe {1}.\" },","            { VALUE_NULL_INVALID              , \"Null Werte sind ungÃ¼ltig fÃ¼r die Spalte \'\'{0}\'\'.\" },","            { VALUE_CANT_CONVERT              , \"Kann nicht konvertieren ein {0} Wert zu einem {1} Wert.\" },","            { BYTEARR_INVALID_SIZE            , \"UngÃ¼ltige Bytearray GroÃŸe {0} fÃ¼r UNIQUEIDENFIER.\" },","            { LOB_DELETED                     , \"Lob Objekt wurde gelÃ¶scht.\" },","            { PARAM_CLASS_UNKNOWN             , \"Unbekante Parameter Klasse: \'\'{0}\'\'.\" },","            { PARAM_EMPTY                     , \"Parameter {0} ist leer.\" },","            { PARAM_IDX_OUT_RANGE             , \"Parameter Index {0} liegt auÃŸerhalb des GÃ¼ltigkeitsbereiches. Der Wert muss zwischen 1 und {1} liegen.\" },","            { COL_DUPLICATE                   , \"Es gibt einen doppelten Spaltennamen: \'\'{0}\'\'.\" },","            { COL_MISSING                     , \"Spalte \'\'{0}\'\' wurde nicht gefunden.\" },","            { COL_VAL_UNMATCH                 , \"Die Spaltenanzahl und Werteanzahl ist nicht identisch.\" },","            { COL_INVALID_SIZE                , \"UngÃ¼ltige SpaltengrÃ¶ÃŸe {0} fÃ¼r Spalte \'\'{1}\'\'.\" },","            { COL_WRONG_PREFIX                , \"Der Spaltenprefix \'\'{0}\'\' passt zu keinem Tabellennamen oder Aliasnamen in dieser Abfrage.\" },","            { COL_READONLY                    , \"Die Spalte {0} ist schreibgeschÃ¼tzt.\" },","            { COL_INVALID_NAME                , \"UngÃ¼ltiger Spaltenname \'\'{0}\'\'.\" },","            { COL_IDX_OUT_RANGE               , \"Spaltenindex auÃŸerhalb des GÃ¼ltigkeitsbereiches: {0}.\" },","            { COL_AMBIGUOUS                   , \"Die Spalte \'\'{0}\'\' ist mehrdeutig.\" },","            { GROUP_AGGR_INVALID              , \"Aggregatfunktion sind nicht erlaubt im GROUP BY Klausel: ({0}).\" },","            { GROUP_AGGR_NOTPART              , \"Der Ausdruck \'\'{0}\'\' ist nicht Teil einer Aggregatfunktion oder GROUP BY Klausel.\" },","            { ORDERBY_INTERNAL                , \"Interner Error mit ORDER BY.\" },","            { UNION_DIFFERENT_COLS            , \"Die SELECT Teile des UNION haben eine unterschiedliche Spaltenanzahl: {0} und {1}.\" },","            { INDEX_EXISTS                    , \"Index \'\'{0}\'\' existiert bereits.\" },","            { INDEX_MISSING                   , \"Index \'\'{0}\'\' existiert nicht.\" },","            { INDEX_FILE_INVALID              , \"Die Datei \'\'{0}\'\' ist kein gÃ¼ltiger Indexspeicher.\" },","            { INDEX_CORRUPT                   , \"Error beim Laden des Index. Die Index Datei ist beschÃ¤digt. ({0}).\" },","            { INDEX_TOOMANY_EQUALS            , \"Zu viele identische EintrÃ¤ge im Index.\" },","            { FILE_TOONEW                     , \"Dateiversion ({0}) der Datei \'\'{1}\'\' ist zu neu fÃ¼r diese Laufzeitbibliothek.\" },","            { FILE_TOOOLD                     , \"Dateiversion ({0}) der Datei \'\'{1}\'\' ist zu alt fÃ¼r diese Laufzeitbibliothek.\" },","            { FILE_CANT_DELETE                , \"Datei \'\'{0}\'\' kann nicht gelÃ¶scht werden.\" },","            { ROW_0_ABSOLUTE                  , \"Datensatz 0 ist ungÃ¼ltig fÃ¼r die Methode absolute().\" },","            { ROW_NOCURRENT                   , \"Kein aktueller Datensatz.\" },","            { ROWS_WRONG_MAX                  , \"Fehlerhafter Wert fÃ¼r Maximale Datensatzanzahl: {0}.\" },","            { ROW_LOCKED                      , \"Der Datensatz ist gelocked von einer anderen Verbindung.\" },","            { ROW_DELETED                     , \"Der Datensatz ist bereits gelÃ¶scht.\" },","            { SAVEPT_INVALID_TRANS            , \"Der Savepoint ist nicht gÃ¼ltig fÃ¼r die aktuelle Transaction.\" },","            { SAVEPT_INVALID_DRIVER           , \"Der Savepoint ist nicht gÃ¼ltig fÃ¼r diesen Treiber {0}.\" },","            { ALIAS_UNSUPPORTED               , \"Ein Alias ist nicht erlaubt fÃ¼r diesen Typ von Rowsource.\" },","            { ISOLATION_UNKNOWN               , \"Unbekantes Transaktion Isolation Level: {0}.\" },","            { FLAGVALUE_INVALID               , \"UngÃ¼ltiger Wert des Flags in Methode getMoreResults: {0}.\" },","            { ARGUMENT_INVALID                , \"UngÃ¼ltiges Argument in Methode setNeedGenratedKeys: {0}.\" },","            { GENER_KEYS_UNREQUIRED           , \"GeneratedKeys wurden nicht angefordert.\" },","            { SEQUENCE_HEX_INVALID            , \"UngÃ¼ltige Hexadecimal Sequenze bei Position {0}.\" },","            { SEQUENCE_HEX_INVALID_STR        , \"UngÃ¼ltige Hexadecimal Sequenze bei Position {0} in \'\'{1}\'\'.\" },","            { SYNTAX_BASE_OFS                 , \"Syntax Error bei Position {0} in \'\'{1}\'\'. \" },","            { SYNTAX_BASE_END                 , \"Syntax Error, unerwartetes Ende des SQL Strings. \" },","            { STXADD_ADDITIONAL_TOK           , \"ZusÃ¤tzliche Zeichen nach dem Ende des SQL statement.\" },","            { STXADD_IDENT_EXPECT             , \"Bezeichner erwartet.\" },","            { STXADD_IDENT_EMPTY              , \"Leerer Bezeichner.\" },","            { STXADD_IDENT_WRONG              , \"UngÃ¼ltiger Bezeichner \'\'{0}\'\'.\" },","            { STXADD_OPER_MINUS               , \"UngÃ¼ltiger Operator Minus fÃ¼r Datentyp VARBINARY.\" },","            { STXADD_FUNC_UNKNOWN             , \"Unbekannte Funktion.\" },","            { STXADD_PARAM_INVALID_COUNT      , \"UngÃ¼ltige Paramter Anzahl.\" },","            { STXADD_JOIN_INVALID             , \"UngÃ¼ltige Join Syntax.\" },","            { STXADD_FROM_PAR_CLOSE           , \"Unerwartet schlieÃŸende Klammer in FROM Klausel.\" },","            { STXADD_KEYS_REQUIRED            , \"BenÃ¶tige SchlÃ¼sselwÃ¶rter sind: \" },","            { STXADD_NOT_NUMBER               , \"Eine Zahl ist erforderlich: \'\'{0}\'\'.\" },","            { STXADD_COMMENT_OPEN             , \"Fehlendes Kommentarende \'\'*/\'\'.\" },","    };","}"],|project://smallsql/src/smallsql/junit/TestTransactions.java|:["package smallsql.junit;","import java.sql.*;","public class TestTransactions extends BasicTestCase {","\tpublic void testCreateTable() throws Exception{","\t\tConnection con = AllTests.getConnection();","        Connection con2 = AllTests.createConnection();","\t\ttry{\t\t\t","\t\t\tcon.setAutoCommit(false);","\t\t\tcon.createStatement().execute(\"create table transactions (ID  INTEGER NOT NULL, Name VARCHAR(100), FirstName VARCHAR(100), Points INTEGER, LicenseID INTEGER, PRIMARY KEY(ID))\");","\t\t\tcon.commit();","\t\t\tcon2.setAutoCommit(false);","\t\t\tPreparedStatement pr = con2.prepareStatement(\"insert into transactions (id,Name,FirstName,Points,LicenseID) values (?,?,?,?,?)\");","\t\t\tpr.setInt( \t\t1, 0 );","\t\t\tpr.setString( \t2, \"Pilot_1\" );","\t\t\tpr.setString( \t3, \"Herkules\" );","\t\t\tpr.setInt( \t\t4, 1 );","\t\t\tpr.setInt( \t\t5, 1 );","\t\t\tpr.addBatch();","\t\t\tpr.executeBatch();","\t\t\tassertRowCount( 0, \"Select * from transactions\");","\t\t\tcon2.commit();","\t\t\tassertRowCount( 1, \"Select * from transactions\");","\t\t}finally{","            con2.close();","\t\t\ttry{","\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");","\t\t\t}catch(Throwable e){e.printStackTrace();}","\t\t\tcon.setAutoCommit(true);","\t\t}","\t}","\tpublic void testCommit() throws Exception{","\t\tConnection con = AllTests.getConnection();","\t\ttry{\t\t\t","\t\t\tcon.setAutoCommit(false);","\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");","\t\t\tassertRowCount( 0, \"Select * from transactions\");","\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values(\'qwert\')\");","\t\t\tassertRowCount( 1, \"Select * from transactions\");","\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");","\t\t\tassertRowCount( 2, \"Select * from transactions\");","\t\t\tcon.createStatement().execute(\"Insert Into transactions Select * From transactions\");","\t\t\tassertRowCount( 4, \"Select * from transactions\");","\t\t\tcon.commit();","\t\t\tassertRowCount( 4, \"Select * from transactions\");","\t\t}finally{","\t\t\ttry{","\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");","\t\t\t}catch(Throwable e){e.printStackTrace();}","\t\t\tcon.setAutoCommit(true);","\t\t}","\t}","\tpublic void testCommitWithOneCommitRow() throws Exception{","\t\tConnection con = AllTests.getConnection();","\t\ttry{\t\t\t","\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");","\t\t\tassertRowCount( 0, \"Select * from transactions\");","\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values(\'qwert\')\");","\t\t\tassertRowCount( 1, \"Select * from transactions\");","\t\t\tcon.setAutoCommit(false);","\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");","\t\t\tassertRowCount( 2, \"Select * from transactions\");","\t\t\tcon.createStatement().execute(\"Insert Into transactions (Select * From transactions)\");","\t\t\tassertRowCount( 4, \"Select * from transactions\");","\t\t\tcon.commit();","\t\t\tassertRowCount( 4, \"Select * from transactions\");","\t\t}finally{","\t\t\ttry{","\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");","\t\t\t}catch(Throwable e){e.printStackTrace();}","\t\t\tcon.setAutoCommit(true);","\t\t}","\t}","\tpublic void testRollback() throws Exception{","\t\tConnection con = AllTests.getConnection();","\t\ttry{\t\t\t","\t\t    con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");","\t\t\tcon.setAutoCommit(false);","\t\t\tassertRowCount( 0, \"Select * from transactions\");","\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values(\'qwert\')\");","\t\t\tassertRowCount( 1, \"Select * from transactions\");","\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");","\t\t\tassertRowCount( 2, \"Select * from transactions\");","\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) (Select v From transactions)\");","\t\t\tassertRowCount( 4, \"Select * from transactions\");","\t\t\tcon.rollback();","\t\t\tassertRowCount( 0, \"Select * from transactions\");","\t\t}finally{","\t\t\ttry{","\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");","\t\t\t}catch(Throwable e){e.printStackTrace();}","\t\t\tcon.setAutoCommit(true);","\t\t}","\t}","\tpublic void testRollbackWithOneCommitRow() throws Exception{","\t\tConnection con = AllTests.getConnection();","\t\ttry{\t\t\t","\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");","\t\t\tassertRowCount( 0, \"Select * from transactions\");","\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values(\'qwert\')\");","\t\t\tassertRowCount( 1, \"Select * from transactions\");","\t\t\tcon.setAutoCommit(false);","\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");","\t\t\tassertRowCount( 2, \"Select * from transactions\");","\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) (Select v From transactions)\");","\t\t\tassertRowCount( 4, \"Select * from transactions\");","\t\t\tcon.rollback();","\t\t\tassertRowCount( 1, \"Select * from transactions\");","\t\t}finally{","\t\t\ttry{","\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");","\t\t\t}catch(Throwable e){e.printStackTrace();}","\t\t\tcon.setAutoCommit(true);","\t\t}","\t}","\tprivate void testInsertRow_Last(Connection con, boolean callLastBefore) throws Exception{","\t\ttry{\t\t\t","\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");","\t\t\tassertRowCount( 0, \"Select * from transactions\");","\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values(\'qwert\')\");","\t\t\tResultSet rs = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)","\t\t\t\t\t\t\t\t.executeQuery(\"Select * from transactions Where 1=0\");","\t\t\tif(callLastBefore) rs.last();","\t\t\trs.moveToInsertRow();","\t\t\trs.updateString(\"v\", \"qwert2\");","\t\t\trs.insertRow();","\t\t\trs.last();","\t\t\tassertEquals(\"qwert2\", rs.getString(\"v\"));","\t\t\tassertFalse( rs.next() );","\t\t\tassertTrue( rs.previous() );","\t\t\tassertEquals(\"qwert2\", rs.getString(\"v\"));","\t\t\trs.beforeFirst();","\t\t\tassertTrue( rs.next() );","\t\t\tassertEquals(\"qwert2\", rs.getString(\"v\"));","\t\t\tassertFalse( rs.next() );","\t\t}finally{","\t\t\ttry{","\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");","\t\t\t}catch(Throwable e){e.printStackTrace();}","\t\t}","\t}","\tpublic void testInsertRow_Last() throws Exception{","\t\tConnection con = AllTests.getConnection();","\t\ttestInsertRow_Last(con, false);","\t\ttestInsertRow_Last(con, true);","\t\tcon.setAutoCommit(false);","\t\ttestInsertRow_Last(con, false);","\t\tcon.setAutoCommit(true);","\t\tcon.setAutoCommit(false);","\t\ttestInsertRow_Last(con, true);","\t\tcon.setAutoCommit(true);","\t}","\tpublic void testInsertAndUpdate() throws Exception{","\t\tConnection con = AllTests.getConnection();","\t\ttry{\t\t\t","\t\t\tcon.setAutoCommit(false);","\t\t\tcon.createStatement().execute(\"Create Table transactions ( v varchar(20))\");","\t\t\tassertRowCount( 0, \"Select * from transactions\");","\t\t\tassertEquals( 1, con.createStatement().executeUpdate(\"Insert Into transactions(v) Values(\'qwert\')\") );","\t\t\tassertEqualsRsValue(\"qwert\", \"Select * from transactions\");","\t\t\tassertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");","\t\t\tassertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v=\'qwert1\'\") );","\t\t\tassertEqualsRsValue(\"qwert1\", \"Select * from transactions\");","\t\t\tassertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");","            assertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v=\'qwert2\'\") );","            assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");","            assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");","\t\t\tSavepoint savepoint = con.setSavepoint();","\t\t\tassertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v=\'qwert 3\'\") );","\t\t\tassertEqualsRsValue(\"qwert 3\", \"Select * from transactions\");","\t\t\tassertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");","\t\t\tcon.rollback( savepoint );","\t\t\tcon.commit();","\t\t\tassertEqualsRsValue(\"qwert2\", \"Select * from transactions\");","\t\t\tassertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");","\t\t}finally{","\t\t\ttry{","\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");","\t\t\t}catch(Throwable e){e.printStackTrace();}","\t\t\tcon.setAutoCommit(true);","\t\t}","\t}","    public void testUpdateAndSavepoint() throws Exception{","        Connection con = AllTests.getConnection();","        try{","            con.createStatement().execute(\"Create Table transactions ( v varchar(20))\");","            assertRowCount(0, \"Select * from transactions\");","            assertEquals(1, con.createStatement().executeUpdate(\"Insert Into transactions(v) Values(\'qwert\')\"));","            assertEqualsRsValue(\"qwert\", \"Select * from transactions\");","            assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");","            con.setAutoCommit(false);","            assertEquals(1, con.createStatement().executeUpdate(\"Update transactions set v=\'qwert1\'\"));","            assertEqualsRsValue(\"qwert1\", \"Select * from transactions\");","            assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");","            assertEquals(1, con.createStatement().executeUpdate(\"Update transactions set v=\'qwert2\'\"));","            assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");","            assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");","            Savepoint savepoint = con.setSavepoint();","            assertEquals(1, con.createStatement().executeUpdate(\"Update transactions set v=\'qwert 3\'\"));","            assertEqualsRsValue(\"qwert 3\", \"Select * from transactions\");","            assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");","            assertEquals(1, con.createStatement().executeUpdate(\"Update transactions set v=\'qwert 4\'\"));","            assertEqualsRsValue(\"qwert 4\", \"Select * from transactions\");","            assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");","            assertEquals(1, con.createStatement().executeUpdate(\"Update transactions set v=\'qwert 5\'\"));","            assertEqualsRsValue(\"qwert 5\", \"Select * from transactions\");","            assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");","            con.rollback(savepoint);","            con.commit();","            assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");","            assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");","        }finally{","            dropTable(con, \"transactions\");","            con.setAutoCommit(true);","        }","    }","\tpublic void testInsertRow_withWrongWhere() throws Exception{","\t\tConnection con = AllTests.getConnection();","\t\ttry{\t\t\t","\t\t\tcon.setAutoCommit(false);","\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");","\t\t\tassertRowCount( 0, \"Select * from transactions\");","\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values(\'qwert\')\");","\t\t\tResultSet rs = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)","\t\t\t\t\t\t\t\t.executeQuery(\"Select * from transactions Where 1=0\");","\t\t\trs.moveToInsertRow();","\t\t\trs.updateString(\"v\", \"qwert2\");","\t\t\trs.insertRow();","\t\t\trs.beforeFirst();","\t\t\tassertTrue( rs.next() );","\t\t\tassertEquals(\"qwert2\", rs.getString(\"v\"));","\t\t\tassertFalse( rs.next() );","\t\t}finally{","\t\t\ttry{","\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");","\t\t\t}catch(Throwable e){e.printStackTrace();}","\t\t\tcon.setAutoCommit(true);","\t\t}","\t}","\tpublic void testInsertRow_withRightWhere() throws Exception{","\t\tConnection con = AllTests.getConnection();","\t\ttry{\t\t\t","\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");","\t\t\tassertRowCount( 0, \"Select * from transactions\");","\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values(\'qwert2\')\");","\t\t\tResultSet rs = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)","\t\t\t\t\t\t\t\t.executeQuery(\"Select * from transactions Where v = \'qwert\'\");","\t\t\trs.moveToInsertRow();","\t\t\trs.updateString(\"v\", \"qwert\");","\t\t\trs.insertRow();","\t\t\trs.beforeFirst();","\t\t\tassertTrue( rs.next() );","\t\t\tassertEquals(\"qwert\", rs.getString(\"v\"));","\t\t\tassertFalse( rs.next() );","\t\t}finally{","\t\t\ttry{","\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");","\t\t\t}catch(Throwable e){e.printStackTrace();}","\t\t}","\t}","\tpublic void testReadUncommited() throws Exception{","\t\tConnection con1 = AllTests.getConnection();","\t\tConnection con2 = AllTests.createConnection();","\t\ttry{\t\t","\t\t\tcon2.setTransactionIsolation( Connection.TRANSACTION_READ_UNCOMMITTED );","\t\t\tcon1.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");","\t\t\tassertRowCount( 0, \"Select * from transactions\");","\t\t\tcon1.setAutoCommit(false);","\t\t\tcon1.createStatement().execute(\"Insert Into transactions(v) Values(\'qwert2\')\");","\t\t\tResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");","\t\t\tassertTrue( rs2.next() );","\t\t\tassertEquals( 1, rs2.getInt(1) );","\t\t}finally{","\t\t    dropTable(con1, \"transactions\");","\t\t\tcon1.setAutoCommit(true);","\t\t\tcon2.close();","\t\t}","\t}","\tpublic void testReadCommited() throws Exception{","\t\tConnection con1 = AllTests.getConnection();","\t\tConnection con2 = AllTests.createConnection();","\t\ttry{\t\t","\t\t\tcon2.setTransactionIsolation( Connection.TRANSACTION_READ_COMMITTED );","\t\t\tcon1.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");","\t\t\tassertRowCount( 0, \"Select * from transactions\");","\t\t\tcon1.setAutoCommit(false);","\t\t\tcon1.createStatement().execute(\"Insert Into transactions(v) Values(\'qwert2\')\");","\t\t\tResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");","\t\t\tassertTrue( rs2.next() );","\t\t\tassertEquals( 0, rs2.getInt(1) );","\t\t}finally{","            dropTable(con1, \"transactions\");","\t\t\tcon1.setAutoCommit(true);","\t\t\tcon2.close();","\t\t}","\t}","    public void testReadSerialized() throws Exception{","        Connection con1 = AllTests.getConnection();","        Connection con2 = AllTests.createConnection();","        try{        ","            con1.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");","            assertRowCount( 0, \"Select * from transactions\");","            con1.createStatement().execute(\"Insert Into transactions(v) Values(\'qwert2\')\");","            assertRowCount( 1, \"Select * from transactions\");","            con1.setTransactionIsolation( Connection.TRANSACTION_SERIALIZABLE );","            con1.setAutoCommit(false);","            ResultSet rs1 = con1.createStatement().executeQuery(\"Select count(*) from transactions\");","            assertTrue( rs1.next() );","            assertEquals( \"Count(*)\", 1, rs1.getInt(1) );","            ResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");","            assertTrue( rs2.next() );","            assertEquals( \"Count(*)\", 1, rs2.getInt(1) );","            try{","                con2.createStatement().execute(\"Insert Into transactions(v) Values(\'qwert3\')\");","                fail(\"TRANSACTION_SERIALIZABLE does not lock the table\");","            }catch(SQLException ex){","                assertSQLException(\"01000\", 0, ex);","            }","        }finally{","            con2.close();","            dropTable(con1, \"transactions\");","            con1.setAutoCommit(true);","        }","    }","\tpublic void testReadWriteLock() throws Exception{","\t\tConnection con1 = AllTests.getConnection();","\t\tConnection con2 = AllTests.createConnection();","\t\ttry{\t\t","\t\t\tcon1.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");","\t\t\tcon1.createStatement().execute(\"Insert Into transactions(v) Values(\'qwert1\')\");","\t\t\tcon1.setAutoCommit(false);","\t\t\tcon1.createStatement().execute(\"Update transactions Set v = \'qwert\'\");","\t\t\tlong time = System.currentTimeMillis();","\t\t\ttry{","\t\t\t\tcon2.createStatement().executeQuery(\"Select count(*) from transactions\");","\t\t\t}catch(SQLException ex){","\t\t\t    assertSQLException(\"01000\", 0, ex);","\t\t\t}\t\t","\t\t\tassertTrue(\"Wait time to small\", System.currentTimeMillis()-time\>=5000);","\t\t}finally{","\t\t    con2.close();","\t\t\tcon1.setAutoCommit(true);","\t\t\tdropTable(con1, \"transactions\");","\t\t}","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionFloor.java|:["package smallsql.database;","class ExpressionFunctionFloor extends ExpressionFunctionReturnP1Number {","    int getFunction(){ return SQLTokenizer.FLOOR; }","    double getDouble() throws Exception{","        return Math.floor( param1.getDouble() );","    }","    String getString() throws Exception{","        Object obj = getObject();","        if(obj == null) return null;","        return obj.toString();","    }","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionSqrt.java|:["package smallsql.database;","final class ExpressionFunctionSqrt extends ExpressionFunctionReturnFloat {","    final int getFunction(){ return SQLTokenizer.SQRT; }","    final double getDouble() throws Exception{","\t\tif(isNull()) return 0;","        return Math.sqrt( param1.getDouble() );","    }","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|:["package smallsql.database;","abstract class ExpressionFunctionReturnFloat extends ExpressionFunction {","    boolean isNull() throws Exception{","        return param1.isNull();","    }","    final boolean getBoolean() throws Exception{","        return getDouble() != 0;","    }","\tfinal int getInt() throws Exception{","        return (int)getDouble();","    }","\tfinal long getLong() throws Exception{","        return (long)getDouble();","    }","\tfinal float getFloat() throws Exception{","        return (float)getDouble();","    }","    long getMoney() throws Exception{","        return Utils.doubleToMoney(getDouble());","    }","\tfinal MutableNumeric getNumeric() throws Exception{","\t\tif(isNull()) return null;","\t\tdouble value = getDouble();","\t\tif(Double.isInfinite(value) || Double.isNaN(value))","\t\t\treturn null;","\t\treturn new MutableNumeric(value);","    }","\tfinal Object getObject() throws Exception{","\t\tif(isNull()) return null;","\t\treturn new Double(getDouble());","    }","\tfinal String getString() throws Exception{","        Object obj = getObject();","        if(obj == null) return null;","        return obj.toString();","    }","\tfinal int getDataType() {","\t\treturn SQLTokenizer.FLOAT;","\t}","}"],|project://smallsql/src/smallsql/database/GroupResult.java|:["package smallsql.database;","import java.sql.*;","import smallsql.database.language.Language;","class GroupResult extends MemoryResult{","\tprivate Expression currentGroup; ","\tprivate RowSource from;","\tprivate Expressions groupBy; ","    private Expressions expressions = new Expressions(); ","\tprivate Expressions internalExpressions = new Expressions(); ","\tGroupResult(CommandSelect cmd, RowSource from, Expressions groupBy, Expression having, Expressions orderBy) throws SQLException{","\t\tthis.from = from;","\t\tthis.groupBy = groupBy;","\t\tif(groupBy != null){","\t\t\tfor(int i=0; i\<groupBy.size(); i++){","\t\t\t\tExpression left = groupBy.get(i);","\t\t\t\tint idx = addInternalExpressionFromGroupBy( left );","\t\t\t\tExpressionName right = new ExpressionName(null);","\t\t\t\tright.setFrom(this, idx, new ColumnExpression(left));","\t\t\t\tExpression expr = new ExpressionArithmetic( left, right, ExpressionArithmetic.EQUALS_NULL);","\t\t\t\tcurrentGroup = (currentGroup == null) ? ","\t\t\t\t\t\t\t\texpr :","\t\t\t\t\t\t\t\tnew ExpressionArithmetic( currentGroup, expr, ExpressionArithmetic.AND );","\t\t\t}","\t\t}","\t\texpressions = internalExpressions;","        for(int c=0; c\<expressions.size(); c++){","            addColumn(new ColumnExpression(expressions.get(c)));","        }","\t\tpatchExpressions( cmd.columnExpressions );","\t\tif(having != null) having = patchExpression( having );","\t\tpatchExpressions( orderBy );","\t}","\tfinal private int addInternalExpressionFromGroupBy(Expression expr) throws SQLException{","\t\tint type = expr.getType();","\t\tif(type \>= Expression.GROUP_BEGIN){","\t\t\t\tthrow SmallSQLException.create(Language.GROUP_AGGR_INVALID, expr);","\t\t}else{","\t\t\tint idx = internalExpressions.indexOf(expr);","\t\t\tif(idx \>= 0) return idx;","\t\t\tinternalExpressions.add(expr);","\t\t\treturn internalExpressions.size()-1;","\t\t}","\t}","\tfinal private int addInternalExpressionFromSelect(Expression expr) throws SQLException{","\t\tint type = expr.getType();","\t\tif(type == Expression.NAME){","\t\t\tint idx = internalExpressions.indexOf(expr);","\t\t\tif(idx \>= 0) return idx;","\t\t\tthrow SmallSQLException.create(Language.GROUP_AGGR_NOTPART, expr);","\t\t}else","\t\tif(type \>= Expression.GROUP_BEGIN){","\t\t\tint idx = internalExpressions.indexOf(expr);","\t\t\tif(idx \>= 0) return idx;","\t\t\tinternalExpressions.add(expr);","\t\t\treturn internalExpressions.size()-1;","\t\t}else{","\t\t\tint idx = internalExpressions.indexOf(expr);","\t\t\tif(idx \>= 0) return idx;","\t\t\tExpression[] params = expr.getParams();","\t\t\tif(params != null){","\t\t\t\tfor(int p=0; p\<params.length; p++){","\t\t\t\t\taddInternalExpressionFromSelect( params[p]);","\t\t\t\t}","\t\t\t}","\t\t\treturn -1;","\t\t}","\t}","\tfinal private void patchExpressions(Expressions exprs) throws SQLException{","\t\tif(exprs == null) return;","\t\tfor(int i=0; i\<exprs.size(); i++){","\t\t\texprs.set(i, patchExpression(exprs.get(i)));","\t\t}\t","\t}","\tfinal private void patchExpressions(Expression expression) throws SQLException{","\t\tExpression[] params = expression.getParams();","\t\tif(params == null) return;","\t\tfor(int i=0; i\<params.length; i++){","\t\t\texpression.setParamAt( patchExpression(params[i]), i);","\t\t}","\t}","\tfinal private Expression patchExpression(Expression expr) throws SQLException{","\t\tint idx = addInternalExpressionFromSelect( expr );","\t\tif(idx\>=0){","            Expression origExpression = expr;","\t\t\tExpressionName exprName;","\t\t\tif(expr instanceof ExpressionName){","\t\t\t\texprName = (ExpressionName)expr;","\t\t\t}else{","\t\t\t\texpr = exprName = new ExpressionName(expr.getAlias());","\t\t\t}","\t\t\tColumn column = exprName.getColumn();","\t\t\tif(column == null){","\t\t\t\tcolumn = new Column();","                exprName.setFrom(this, idx, column);","\t\t\t\tswitch(exprName.getType()){","\t\t\t\t\tcase Expression.MAX:","\t\t\t\t\tcase Expression.MIN:","\t\t\t\t\tcase Expression.FIRST:","\t\t\t\t\tcase Expression.LAST:","\t\t\t\t\tcase Expression.SUM:","\t\t\t\t\t\tExpression baseExpression = exprName.getParams()[0];","\t\t\t\t\t\tcolumn.setPrecision(baseExpression.getPrecision());","\t\t\t\t\t\tcolumn.setScale(baseExpression.getScale());","\t\t\t\t\t\tbreak;","                    default:","                        column.setPrecision(origExpression.getPrecision());","                        column.setScale(origExpression.getScale());","\t\t\t\t}","\t\t\t\tcolumn.setDataType(exprName.getDataType());","\t\t\t}else{","\t\t\t\texprName.setFrom(this, idx, column);","\t\t\t}","\t\t}else{","\t\t\tpatchExpressions(expr);","\t\t}","\t\treturn expr;","\t}","\tfinal void execute() throws Exception{","        super.execute();","\t\tfrom.execute();","\t\tNextRow:","\t\twhile(from.next()){","\t\t\tbeforeFirst();","\t\t\twhile(next()){","\t\t\t\tif(currentGroup == null || currentGroup.getBoolean()){","\t\t\t\t\taccumulateRow();","\t\t\t\t\tcontinue NextRow;","\t\t\t\t}","\t\t\t}","\t\t\taddGroupRow();","\t\t\taccumulateRow();","\t\t}","\t\tif(getRowCount() == 0 && groupBy == null){","\t\t\taddGroupRow();","\t\t}","\t\tbeforeFirst();","\t}","\tfinal private void addGroupRow(){","\t\tExpressionValue[] newRow = currentRow = new ExpressionValue[ expressions.size()];","\t\tfor(int i=0; i\<newRow.length; i++){","\t\t\tExpression expr = expressions.get(i);","\t\t\tint type = expr.getType();","\t\t\tif(type \< Expression.GROUP_BEGIN) type = Expression.GROUP_BY; ","\t\t\tnewRow[i] = new ExpressionValue( type );","\t\t}","\t\taddRow(newRow);","\t}","\tfinal private void accumulateRow() throws Exception{","\t\tfor(int i=0; i\<currentRow.length; i++){","\t\t\tExpression src = expressions.get(i);","\t\t\tcurrentRow[i].accumulate(src);","\t\t}","\t}","}"],|project://smallsql/src/smallsql/junit/TestTokenizer.java|:["package smallsql.junit;","import java.io.PrintStream;","import java.sql.Connection;","import java.sql.ResultSet;","import java.sql.SQLException;","import java.sql.Statement;","import java.text.MessageFormat;","public class TestTokenizer extends BasicTestCase {","\tprivate static final String TABLE_NAME = \"table_comments\";","\tprivate static final PrintStream out = System.out;","\tprivate boolean init;","\tprivate Connection conn;","\tprivate Statement stat;","\tpublic void setUp() throws SQLException {","\t\tif (! init) {","\t\t\tconn = AllTests.createConnection(\"?locale=en\", null);","\t\t\tstat = conn.createStatement();","\t\t\tinit = true;","\t\t}","\t\tdropTable();","\t\tcreateTable();","\t}","\tpublic void tearDown() throws SQLException {","\t\tif (conn != null) {","\t\t\tdropTable();","\t\t\tstat.close(); ","\t\t\tconn.close();","\t\t}","\t}","\tprivate void createTable() throws SQLException {","\t\tstat.execute(","\t\t\t\t\"CREATE TABLE \" + TABLE_NAME + ","\t\t\t\t\" (id INT, myint INT)\");","\t\tstat.execute(","\t\t\t\t\"INSERT INTO \" + TABLE_NAME + \" VALUES (1, 2)\");","\t\tstat.execute(","\t\t\t\t\"INSERT INTO \" + TABLE_NAME + \" VALUES (1, 3)\");","\t}","\tprivate void dropTable() throws SQLException {","\t\ttry {","\t\t\tstat.execute(\"DROP TABLE \" + TABLE_NAME);","\t\t} catch (SQLException e) {","\t\t\tout.println(\"REGULAR: \" + e.getMessage() + \'\\n\');","\t\t}","\t}","\tpublic void testSingleLine() throws SQLException {","\t\tfinal String SQL_1 = ","\t\t\t\"SELECT 10/2--mycomment\\n\" + ","\t\t\t\" , -- mycomment    \\r\\n\" +","\t\t\t\"id, SUM(myint)--my comment  \\n\\n\" +","\t\t\t\"FROM \" + TABLE_NAME + \" -- my other comment \\r \\r\" + ","\t\t\t\"GROUP BY id --mycommentC\\n\" +","\t\t\t\"--   myC    omment  E    \\n\" +","\t\t\t\"ORDER BY id \\r\" +","\t\t\t\"--myCommentD   \\r\\r\\r\";","\t\tsuccessTest(SQL_1);","\t\tfinal String SQL_2 = ","\t\t\t\"SELECT 10/2 - - this must fail \";","\t\tfailureTest(SQL_2, \"Tokenized not-comment as a line-comment.\");","\t}","\tpublic void testMultiLine() throws SQLException {","\t\tfinal String SQL_1 = ","\t\t\t\"SELECT 10/2, id, SUM(myint) /* comment, \'ignore it.   \\n\" +","\t\t\t\" */ FROM /* -- comment */\" + TABLE_NAME + \" -- my comment /* \\n\\r\" +","\t\t\t\" /* comment */ GROUP BY id ORDER BY id\\r\" +","\t\t\t\"/* comment */ -- somment\\r\\n\";","\t\tsuccessTest(SQL_1);","\t\tfinal String SQL_2 = ","\t\t\t\"SELECT 10/2 / * this must fail */\";","\t\tfailureTest(SQL_2, \"Tokenized not-comment as a multiline-comment.\");","\t\tfinal String SQL_3 = ","\t\t\t\"SELECT 10/2 /* this must fail \";","\t\tfailureTest(SQL_3, ","\t\t\t\t\"Uncomplete end multiline comment not recognized.\",","\t\t\t\t\"Missing end comment mark\");","\t}","\tprivate void successTest(String sql) throws SQLException {","\t\tResultSet rs_1 = stat.executeQuery(sql);","\t\trs_1.next();","\t\trs_1.close();","\t}","\tprivate void failureTest(String sql, String failureMessage) {","\t\ttry {","\t\t\tstat.executeQuery(sql);","\t\t\tfail(failureMessage);","\t\t}","\t\tcatch (SQLException e) {","\t\t\tout.println(\"REGULAR: \" + e.getMessage() + \'\\n\');","\t\t}","\t}","\tprivate void failureTest(String sql, String failureMessage, String expected) {","\t\ttry {","\t\t\tstat.executeQuery(sql);","\t\t\tfail(failureMessage);","\t\t}","\t\tcatch (SQLException e) {","\t\t\tString foundMsg = e.getMessage();","\t\t\tString assertMsg = MessageFormat.format(","\t\t\t\t\t\"Unexpected error: [{0}], expected: [{1}]\", ","\t\t\t\t\tnew Object[] { foundMsg, expected }); ","\t\t\tassertTrue(assertMsg, foundMsg.indexOf(expected) \> -1);","\t\t\tout.println(\"REGULAR: \" + e.getMessage() + \'\\n\');","\t\t}","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionATan.java|:["package smallsql.database;","final class ExpressionFunctionATan extends ExpressionFunctionReturnFloat {","    final int getFunction(){ return SQLTokenizer.ATAN; }","    final double getDouble() throws Exception{","\t\tif(isNull()) return 0;","        return Math.atan( param1.getDouble() );","    }","}"],|project://smallsql/src/smallsql/database/ExpressionFunction.java|:["package smallsql.database;","import java.sql.*;","import smallsql.database.language.Language;","abstract class ExpressionFunction extends Expression {","    Expression param1;","    Expression param2;","    Expression param3;","    Expression param4;","\tExpressionFunction(){","\t\tsuper(FUNCTION);","\t}","    abstract int getFunction();","    byte[] getBytes() throws Exception{","        return ExpressionValue.getBytes(getObject(), getDataType());","    }","    void setParams( Expression[] params ){","        super.setParams( params );","        if(params.length \>0) param1 = params[0] ;","        if(params.length \>1) param2 = params[1] ;","        if(params.length \>2) param3 = params[2] ;","        if(params.length \>3) param4 = params[3] ;","    }","\tfinal void setParamAt( Expression param, int idx){","\t\tswitch(idx){","\t\t\tcase 0:","\t\t\t\tparam1 = param;","\t\t\t\tbreak;","\t\t\tcase 1:","\t\t\t\tparam2 = param;","\t\t\t\tbreak;","\t\t\tcase 2:","\t\t\t\tparam3 = param;","\t\t\t\tbreak;","\t\t\tcase 3:","\t\t\t\tparam4 = param;","\t\t\t\tbreak;","\t\t}","\t\tsuper.setParamAt( param, idx );","\t}","\tpublic boolean equals(Object expr){","\t\tif(!super.equals(expr)) return false;","\t\tif(!(expr instanceof ExpressionFunction)) return false;","\t\treturn ((ExpressionFunction)expr).getFunction() == getFunction();","\t}","\tSQLException createUnspportedDataType( int dataType ){","\t\tObject[] params = {","\t\t\t\tSQLTokenizer.getKeyWord(dataType),","\t\t\t\tSQLTokenizer.getKeyWord(getFunction())","\t\t};","        return SmallSQLException.create(Language.UNSUPPORTED_DATATYPE_FUNC, params);","    }","    SQLException createUnspportedConversion( int dataType ){","    \tObject[] params = {","    \t\t\tSQLTokenizer.getKeyWord(dataType),","    \t\t\tSQLTokenizer.getKeyWord(getFunction())","    \t};","        return SmallSQLException.create(Language.UNSUPPORTED_CONVERSION_FUNC, params);","    }","}"],|project://smallsql/src/smallsql/database/Logger.java|:["package smallsql.database;","import java.io.PrintWriter;","import java.sql.*;","class Logger {","\tboolean isLogging(){","\t\treturn DriverManager.getLogWriter() != null;","\t}","\tvoid println(String msg){","\t\tPrintWriter log = DriverManager.getLogWriter();","\t\tif(log != null){","\t\t\tsynchronized(log){","\t\t\t\tlog.print(\"[Small SQL]\");","\t\t\t\tlog.println(msg);","\t\t\t\tlog.flush();","\t\t\t}","\t\t}","\t}","}"],|project://smallsql/src/smallsql/database/Expressions.java|:["package smallsql.database;","final class Expressions {","\tprivate int size;","\tprivate Expression[] data;","\tExpressions(){","\t\tdata = new Expression[16];","\t}","\tExpressions(int initSize){","\t\tdata = new Expression[initSize];","\t}","\tfinal int size(){","\t\treturn size;","\t}","\tfinal void setSize(int newSize){","\t\tfor(int i=newSize; i\<size; i++) data[i] = null;","\t\tsize = newSize;","\t\tif(size\>data.length) resize(newSize);","\t}","\tfinal Expression get(int idx){","\t\tif (idx \>= size)","\t\t\tthrow new IndexOutOfBoundsException(\"Index: \"+idx+\", Size: \"+size);","\t\treturn data[idx];","\t}","\tfinal void add(Expression expr){","\t\tif(size \>= data.length ){","\t\t\tresize(size \<\< 1);","\t\t}","\t\tdata[size++] = expr;","\t}","\tfinal void add(int idx, Expression expr){","\t\tif(size \>= data.length ){","\t\t\tresize(size \<\< 1);","\t\t}","\t\tSystem.arraycopy( data, idx, data, idx+1, (size++)-idx);","\t\tdata[idx] = expr;","\t}","\tfinal void addAll(Expressions cols){","\t\tint count = cols.size();","\t\tif(size + count \>= data.length ){","\t\t\tresize(size + count);","\t\t}","\t\tSystem.arraycopy( cols.data, 0, data, size, count);","\t\tsize += count;","\t}","\tfinal void clear(){","\t\tsize = 0;","\t}","\tfinal void remove(int idx){","\t\tSystem.arraycopy( data, idx+1, data, idx, (--size)-idx);","\t}","\tfinal void set(int idx, Expression expr){","\t\tdata[idx] = expr;","\t}","\tfinal int indexOf(Expression expr) {","\t\tif (expr == null) {","\t\t\tfor (int i = 0; i \< size; i++)","\t\t\t\tif (data[i]==null)","\t\t\t\t\treturn i;","\t\t} else {","\t\t\tfor (int i = 0; i \< size; i++)","\t\t\t\tif (expr.equals(data[i]))","\t\t\t\t\treturn i;","\t\t}","\t\treturn -1;","\t}","\tfinal void toArray(Expression[] array){","\t\tSystem.arraycopy( data, 0, array, 0, size);","\t}","\tfinal Expression[] toArray(){","\t\tExpression[] array = new Expression[size];","\t\tSystem.arraycopy( data, 0, array, 0, size);","\t\treturn array;","\t}","\tprivate final void resize(int newSize){","\t\tExpression[] dataNew = new Expression[newSize];","\t\tSystem.arraycopy(data, 0, dataNew, 0, size);","\t\tdata = dataNew;\t\t","\t}","}"],|project://smallsql/src/smallsql/junit/TestGroupBy.java|:["package smallsql.junit;","import java.math.BigDecimal;","import java.sql.*;","public class TestGroupBy extends BasicTestCase {","\tprivate static final String table1 = \"table_GroupBy1\";","\tprivate static final String STR_VALUE1 = \"name1\";","\tprivate static final String STR_VALUE2 = \"name2\";","\tprivate boolean init;","\tpublic TestGroupBy() {","\t\tsuper();","\t}","\tpublic TestGroupBy(String name) {","\t\tsuper(name);","\t}","\tpublic void init(){","\t\tif(init) return;","\t\ttry{","\t\t\tConnection con = AllTests.getConnection();","\t\t\tdropTable( con, table1 );","\t\t\tStatement st = con.createStatement();","\t\t\tst.execute(\"create table \" + table1 + \"(name varchar(30), id int )\");","\t\t\tst.close();","\t\t\tPreparedStatement pr = con.prepareStatement(\"INSERT into \" + table1 + \"(name, id) Values(?,?)\");","\t\t\tpr.setString( 1, STR_VALUE1);","\t\t\tpr.setInt( 2, 1 );","\t\t\tpr.execute();","\t\t\tpr.setString( 1, STR_VALUE1);","\t\t\tpr.setInt( 2, 2 );","\t\t\tpr.execute();","\t\t\tpr.setString( 1, STR_VALUE1);","\t\t\tpr.setNull( 2, Types.INTEGER );","\t\t\tpr.execute();","\t\t\tpr.setString( 1, STR_VALUE2);","\t\t\tpr.setInt( 2, 1 );","\t\t\tpr.execute();","\t\t\tpr.close();","\t\t\tinit = true;","\t\t}catch(Throwable e){","\t\t\te.printStackTrace();","\t\t}","\t}","\tpublic void testTest() throws Exception{","\t\tinit();","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\tResultSet rs;","\t\trs = st.executeQuery(\"Select count(id) FROM \" + table1 + \" Group By name\");","\t\twhile(rs.next()){","\t\t\trs.getObject(1);","\t\t}","\t\trs = st.executeQuery(\"Select count(*) FROM \" + table1 + \" Group By name\");","\t\twhile(rs.next()){","\t\t\trs.getObject(1);","\t\t}","\t\trs = st.executeQuery(\"Select count(*) FROM \" + table1);","\t\tassertTrue(rs.next());","\t\tassertEquals( 4, rs.getInt(1));","\t\trs = st.executeQuery(\"Select count(id) FROM \" + table1);","\t\tassertTrue(rs.next());","\t\tassertEquals( 3, rs.getInt(1));","\t\trs = st.executeQuery(\"Select count(*)+1 FROM \" + table1);","\t\tassertTrue(rs.next());","\t\tassertEquals( 5, rs.getInt(1));","\t}","\tpublic void testCountWhere() throws Exception{","\t\tinit();","\t\tassertEqualsRsValue( new Integer(0), \"Select count(*) FROM \" + table1 + \" Where id=-1234\");","\t}","\tpublic void testCountWherePrepare() throws Exception{","\t\tinit();","\t\tConnection con = AllTests.getConnection();","\t\tPreparedStatement pr = con.prepareStatement(\"Select count(*) FROM \" + table1 + \" Where id=-1234\");","\t\tfor(int i=1; i\<=3; i++){","\t\t\tResultSet rs = pr.executeQuery();","\t\t\tassertTrue( \"No row produce in loop:\"+i, rs.next());\t","\t\t\tassertEquals( \"loop:\"+i, 0, rs.getInt(1));","\t\t}","\t}","\tpublic void testCountOrderBy() throws Exception{","\t\tinit();","\t\tConnection con = AllTests.getConnection();","\t\tPreparedStatement pr = con.prepareStatement(\"Select count(*) FROM \" + table1 + \" Group By name Order By name DESC\");","\t\tfor(int i=1; i\<=3; i++){","\t\t\tResultSet rs = pr.executeQuery( );","\t\t\tassertTrue  ( \"loop:\"+i, rs.next());","\t\t\tassertEquals( \"loop:\"+i, 1, rs.getInt(1));","\t\t\tassertTrue  ( \"loop:\"+i, rs.next());","\t\t\tassertEquals( \"loop:\"+i, 3, rs.getInt(1));","\t\t}","\t}","\tpublic void testGroupByWithExpression() throws Exception{","\t\tinit();","\t\tConnection con = AllTests.getConnection();","\t\tPreparedStatement pr = con.prepareStatement(\"Select sum(id), name+\'a\' as ColumnName FROM \" + table1 + \" Group By name+\'a\' Order By Name+\'a\'\");","\t\tfor(int i=1; i\<=3; i++){","\t\t\tResultSet rs = pr.executeQuery( );","\t\t\tassertTrue  ( \"loop:\"+i, rs.next());","\t\t\tassertEquals( \"loop:\"+i, 3, rs.getInt(1));","\t\t\tassertTrue  ( \"loop:\"+i, rs.next());","\t\t\tassertEquals( \"loop:\"+i, 1, rs.getInt(1));","\t\t\tassertEquals( \"loop:\"+i+\" Alias name von Expression\", \"ColumnName\", rs.getMetaData().getColumnName(2));","\t\t}","\t}","\tpublic void testComplex() throws Exception{","\t\tinit();","\t\tConnection con = AllTests.getConnection();","\t\tPreparedStatement pr = con.prepareStatement(\"Select abs(sum(abs(3-id))+2) FROM \" + table1 + \" Group By name+\'a\' Order By \'b\'+(Name+\'a\')\");","\t\tfor(int i=1; i\<=3; i++){","\t\t\tResultSet rs = pr.executeQuery( );","\t\t\tassertTrue  ( \"loop:\"+i, rs.next());","\t\t\tassertEquals( \"loop:\"+i, 5, rs.getInt(1));","\t\t\tassertTrue  ( \"loop:\"+i, rs.next());","\t\t\tassertEquals( \"loop:\"+i, 4, rs.getInt(1));","\t\t}","\t}","\tpublic void testWithNullValue() throws Exception{","\t\tinit();","\t\tassertEqualsRsValue(new Integer(4), \"Select count(*) FROM \" + table1 + \" Group By name+null\" );","\t}","\tpublic void testSumInt() throws Exception{","\t\tinit();","\t\tassertEqualsRsValue( new Integer(4), \"Select sum(id) FROM \" + table1);","\t}","\tpublic void testSumLong() throws Exception{","\t\tinit();","\t\tassertEqualsRsValue( new Long(4), \"Select sum(cast(id as BigInt)) FROM \" + table1);","\t}","\tpublic void testSumReal() throws Exception{","\t\tinit();","\t\tassertEqualsRsValue( new Float(4), \"Select sum(cast(id as real)) FROM \" + table1);","\t}","\tpublic void testSumDouble() throws Exception{","\t\tinit();","\t\tassertEqualsRsValue( new Double(4), \"Select sum(cast(id as double)) FROM \" + table1);","\t}","\tpublic void testSumDecimal() throws Exception{","\t\tinit();","\t\tassertEqualsRsValue( new BigDecimal(\"4.00\"), \"Select sum(cast(id as decimal(38,2))) FROM \" + table1);","\t}","\tpublic void testMaxInt() throws Exception{","\t\tinit();","\t\tassertEqualsRsValue( new Integer(2), \"Select max(id) FROM \" + table1);","\t}","\tpublic void testMaxBigInt() throws Exception{","\t\tinit();","\t\tassertEqualsRsValue( new Long(2), \"Select max(cast(id as BigInt)) FROM \" + table1);","\t}","\tpublic void testMaxString() throws Exception{","\t\tinit();","\t\tassertEqualsRsValue( STR_VALUE2, \"Select max(name) FROM \" + table1);","\t}","\tpublic void testMaxTinyint() throws Exception{","\t\tinit();","\t\tassertEqualsRsValue( new Integer(2), \"Select max(convert(tinyint,id)) FROM \" + table1);","\t}","\tpublic void testMaxReal() throws Exception{","\t\tinit();","\t\tassertEqualsRsValue( new Float(2), \"Select max(convert(real,id)) FROM \" + table1);","\t}","\tpublic void testMaxFloat() throws Exception{","\t\tinit();","\t\tassertEqualsRsValue( new Double(2), \"Select max(convert(float,id)) FROM \" + table1);","\t}","\tpublic void testMaxDouble() throws Exception{","\t\tinit();","\t\tassertEqualsRsValue( new Double(2), \"Select max(convert(double,id)) FROM \" + table1);","\t}","\tpublic void testMaxMoney() throws Exception{","\t\tinit();","\t\tassertEqualsRsValue( new java.math.BigDecimal(\"2.0000\"), \"Select max(convert(money,id)) FROM \" + table1);","\t}","\tpublic void testMaxNumeric() throws Exception{","\t\tinit();","\t\tassertEqualsRsValue( new java.math.BigDecimal(\"2\"), \"Select max(convert(numeric,id)) FROM \" + table1);","\t}","\tpublic void testMaxDate() throws Exception{","\t\tinit();","\t\tassertEqualsRsValue( java.sql.Date.valueOf(\"2345-01-23\"), \"Select max({d \'2345-01-23\'}) FROM \" + table1);","\t}","\tpublic void testMaxTime() throws Exception{","\t\tinit();","\t\tassertEqualsRsValue( java.sql.Time.valueOf(\"12:34:56\"), \"Select max({t \'12:34:56\'}) FROM \" + table1);","\t}","\tpublic void testMaxTimestamp() throws Exception{","\t\tinit();","\t\tassertEqualsRsValue( java.sql.Timestamp.valueOf(\"2345-01-23 12:34:56.123\"), \"Select max({ts \'2345-01-23 12:34:56.123\'}) FROM \" + table1);","\t}","\tpublic void testMaxUniqueidentifier() throws Exception{","\t\tinit();","\t\tString sql = \"Select max(convert(uniqueidentifier, \'12345678-3445-3445-3445-1234567890ab\')) FROM \" + table1;","\t\tassertEqualsRsValue( \"12345678-3445-3445-3445-1234567890AB\", sql);","\t}","\tpublic void testMaxOfNull() throws Exception{","\t\tinit();","\t\tassertEqualsRsValue( null, \"Select max(id) FROM \" + table1 + \" Where id is null\");","\t}","\tpublic void testMin() throws Exception{","\t\tinit();","\t\tassertEqualsRsValue( new Integer(1), \"Select min(id) FROM \" + table1);","\t}","\tpublic void testMinString() throws Exception{","\t\tinit();","\t\tassertEqualsRsValue( STR_VALUE1, \"Select min(name) FROM \" + table1);","\t}","\tpublic void testMinOfNull() throws Exception{","\t\tinit();","\t\tassertEqualsRsValue( null, \"Select min(id) FROM \" + table1 + \" Where id is null\");","\t}","\tpublic void testFirst1() throws Exception{","\t\tinit();","\t\tassertEqualsRsValue( new Integer(1), \"Select first(id) FROM \" + table1);","\t}","\tpublic void testFirst2() throws Exception{","\t\tinit();","\t\tassertEqualsRsValue( \"name1\", \"Select first(name) FROM \" + table1);","\t}","\tpublic void testLast1() throws Exception{","\t\tinit();","\t\tassertEqualsRsValue( new Integer(1), \"Select last(id) FROM \" + table1);","\t}","\tpublic void testLast2() throws Exception{","\t\tinit();","\t\tassertEqualsRsValue( \"name2\", \"Select last(name) FROM \" + table1);","\t}","\tpublic void testAvg() throws Exception{","\t\tinit();","\t\tassertEqualsRsValue( new Integer(1), \"Select avg(id) FROM \" + table1);","\t}","\tpublic void testGroupBy() throws Exception{","\t\tinit();","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\tResultSet rs;","\t\trs = st.executeQuery(\"Select name FROM \" + table1 + \" Group By name\");","\t\tassertTrue(rs.next());","\t\tassertEquals( STR_VALUE1, rs.getObject(1) ); ","\t\tassertTrue(rs.next());","\t\tassertEquals( STR_VALUE2, rs.getObject(1) ); ","\t}","\tpublic void testViewWidthGroupBy() throws Exception{","\t\tinit();","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\ttry{","\t\t\tResultSet rs;","\t\t\tst.execute(\"Create View qry\" + table1 + \" as Select name, name as name2, count(*) as count FROM \" + table1 + \" Group By name\");","\t\t\trs = st.executeQuery(\"Select * from qry\" + table1);","\t\t\tassertEquals( \"name\",  rs.getMetaData().getColumnLabel(1) );","\t\t\tassertEquals( \"name2\", rs.getMetaData().getColumnLabel(2) );","\t\t\tassertEquals( \"count\", rs.getMetaData().getColumnLabel(3) );","\t\t}finally{","\t\t\tst.execute(\"Drop View qry\" + table1);","\t\t}","\t}","\tpublic void testCountNoRow() throws Exception{","\t\tinit();","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\tst.execute(\"Delete FROM \" + table1);","\t\tinit = false;","\t\tassertEqualsRsValue( new Integer(0), \"Select count(*) FROM \" + table1);","\t}","}"],|project://smallsql/src/smallsql/junit/TestDeleteUpdate.java|:["package smallsql.junit;","import java.sql.*;","public class TestDeleteUpdate extends BasicTestCase {","\tpublic TestDeleteUpdate() {","\t\tsuper();","\t}","\tpublic TestDeleteUpdate(String name) {","\t\tsuper(name);","\t}","\tpublic void testDelete() throws Exception{","\t\tConnection con = AllTests.getConnection();","\t\tdropTable(con,\"testDelete\");","\t\tStatement st = con.createStatement();","\t\tst.execute(\"create table testDelete(a int default 15)\");","\t\tfor(int i=0; i\<10; i++){","\t\t\tst.execute(\"Insert into testDelete Values(\"+i+\")\");","\t\t}","\t\tassertRowCount( 10, \"Select * from testDelete\");","\t\tst.execute(\"delete from testDelete Where a=3\");","\t\tassertRowCount( 9, \"Select * from testDelete\");","\t\tst.execute(\"delete from testDelete Where a\<5\");","\t\tassertRowCount( 5, \"Select * from testDelete\");","\t\tst.execute(\"delete from testDelete\");","\t\tassertRowCount( 0, \"Select * from testDelete\");","\t\tdropTable(con,\"testDelete\");","\t}","\tpublic void testUpdate1() throws Exception{","\t\tConnection con = AllTests.getConnection();","\t\tdropTable(con,\"testUpdate\");","\t\tStatement st = con.createStatement();","\t\tst.execute(\"create table testUpdate(id int default 15, value int)\");","\t\tfor(int i=0; i\<10; i++){","\t\t\tst.execute(\"Insert into testUpdate Values(\"+i+\',\'+i+\")\");","\t\t}","\t\tassertRowCount( 10, \"Select * from testUpdate\");","\t\tint updateCount;","\t\tupdateCount = st.executeUpdate(\"update testUpdate set value=103 Where id=3\");","\t\tassertEqualsRsValue( new Integer(103), \"Select value from testUpdate Where id=3\");","\t\tassertRowCount( 10, \"Select value from testUpdate\");","\t\tassertEquals( 1, updateCount);","\t\tupdateCount = st.executeUpdate(\"update testUpdate set value=104 Where id=3\");","\t\tassertEqualsRsValue( new Integer(104), \"Select value from testUpdate Where id=3\");","\t\tassertRowCount( 10, \"Select value from testUpdate\");","\t\tassertEquals( 1, updateCount);","\t\tupdateCount = st.executeUpdate(\"delete from testUpdate Where id=3\");","\t\tassertRowCount( 9, \"Select * from testUpdate\");","\t\tassertEquals( 1, updateCount);","\t\tupdateCount = st.executeUpdate(\"update testUpdate set value=27 Where id\<5\");","\t\tassertEquals( 4, updateCount);","\t\tdropTable(con,\"testUpdate\");","\t}","\tpublic void testUpdate2() throws Exception{","\t\tConnection con = AllTests.getConnection();","\t\tdropTable(con,\"testUpdate\");","\t\tStatement st = con.createStatement();","\t\tst.execute(\"create table testUpdate(id int default 15, value1 varchar(100), value2 int)\");","\t\tfor(int i=0; i\<10; i++){","\t\t\tst.execute(\"Insert into testUpdate Values(\"+i+\',\'+(i*100)+\',\'+i+\")\");","\t\t}","\t\tassertRowCount( 10, \"Select * from testUpdate\");","\t\tst.execute(\"update testUpdate set value1=13 Where id=3\");","\t\tassertEqualsRsValue( \"13\", \"Select value1 from testUpdate Where id=3\");","\t\tassertRowCount( 10, \"Select * from testUpdate\");","\t\tst.execute(\"update testUpdate set value1=1040 Where id=3\");","\t\tassertEqualsRsValue( \"1040\", \"Select value1 from testUpdate Where id=3\");","\t\tassertRowCount( 10, \"Select * from testUpdate\");","\t\tst.execute(\"update testUpdate set value1=10400 Where id=3\");","\t\tassertEqualsRsValue( \"10400\", \"Select value1 from testUpdate Where id=3\");","\t\tassertRowCount( 10, \"Select * from testUpdate\");","\t\tst.execute(\"update testUpdate set value1=13,id=3 Where id=3\");","\t\tassertEqualsRsValue( \"13\", \"Select value1 from testUpdate Where id=3\");","\t\tassertRowCount( 10, \"Select * from testUpdate\");","\t\tst.execute(\"delete from testUpdate Where id=3\");","\t\tassertRowCount( 9, \"Select * from testUpdate\");","\t\tdropTable(con,\"testUpdate\");","\t}","\tpublic void testUpdateMultiTables() throws Exception{","\t\tConnection con = AllTests.getConnection();","\t\tdropTable(con,\"testUpdate1\");","\t\tdropTable(con,\"testUpdate2\");","\t\tStatement st = con.createStatement();","\t\tst.execute(\"create table testUpdate1(id1 int, value1 varchar(100))\");","\t\tst.execute(\"create table testUpdate2(id2 int, value2 varchar(100))\");","\t\tst.execute(\"Insert into testUpdate1 Values(11, \'qwert1\')\");","\t\tst.execute(\"Insert into testUpdate2 Values(11, \'qwert2\')\");","\t\tst.execute(\"update testUpdate1 inner join testUpdate2 on id1=id2 Set value1=value1+\'update\', value2=value2+\'update\'\");","\t\tResultSet rs = st.executeQuery(\"Select * From testUpdate1 inner join testUpdate2 on id1=id2\");","\t\tassertTrue( rs.next() );","\t\tassertEquals( \"qwert1update\", rs.getString(\"value1\"));","\t\tassertEquals( \"qwert2update\", rs.getString(\"value2\"));","\t\tdropTable(con,\"testUpdate1\");","\t\tdropTable(con,\"testUpdate2\");","\t}","}"],|project://smallsql/src/smallsql/database/JoinScrollIndex.java|:["package smallsql.database;","class JoinScrollIndex extends JoinScroll{","    private final int compare;","    Expressions leftEx;","    Expressions rightEx;","    private Index index;","    private LongTreeList rowList;","    private final LongTreeListEnum longListEnum = new LongTreeListEnum();","    JoinScrollIndex( int joinType, RowSource left, RowSource right, Expressions leftEx, Expressions rightEx, int compare)","            throws Exception{","        super( joinType, left, right, null);","        this.leftEx = leftEx;","        this.rightEx = rightEx;","        this.compare = compare;","        createIndex(rightEx);","    }","    private void createIndex(Expressions rightEx) throws Exception{","        index = new Index(false);","        right.beforeFirst();","        while(right.next()){","            index.addValues(right.getRowPosition(), rightEx);","        }","    }","    boolean next() throws Exception{","        switch(compare){","        case ExpressionArithmetic.EQUALS:","            return nextEquals();","        default:","            throw new Error(\"Compare operation not supported:\" + compare);","        }","    }","    private boolean nextEquals() throws Exception{","        if(rowList != null){","            long rowPosition = rowList.getNext(longListEnum);","            if(rowPosition != -1){","                right.setRowPosition(rowPosition);","                return true;","            }","            rowList = null;","        }","        Object rows;","        do{","            if(!left.next()){","                return false;","            }","            rows = index.findRows(leftEx, false, null);","        }while(rows == null);","        if(rows instanceof Long){","            right.setRowPosition(((Long)rows).longValue());","        }else{","            rowList = (LongTreeList)rows;","            longListEnum.reset();","            right.setRowPosition(rowList.getNext(longListEnum));","        }","        return true;","    }","}"],|project://smallsql/src/smallsql/database/ColumnExpression.java|:["package smallsql.database;","class ColumnExpression extends Column {","\tfinal private Expression expr;","\tColumnExpression(Expression expr){","\t\tthis.expr = expr;","\t}","\tString getName(){","\t\treturn expr.getAlias();","\t}","\tboolean isAutoIncrement(){","\t\treturn expr.isAutoIncrement();","\t}","\tboolean isCaseSensitive(){","\t\treturn expr.isCaseSensitive();","\t}","\tboolean isNullable(){","\t\treturn expr.isNullable();","\t}","\tint getDataType(){","\t\treturn expr.getDataType();","\t}","\tint getDisplaySize(){","\t\treturn expr.getDisplaySize();","\t}","\tint getScale(){","\t\treturn expr.getScale();","\t}","\tint getPrecision(){","\t\treturn expr.getPrecision();","\t}","}"],|project://smallsql/src/smallsql/database/CommandDrop.java|:["package smallsql.database;","import java.io.*;","import smallsql.database.language.Language;","public class CommandDrop extends Command {","    CommandDrop( Logger log, String catalog, String name, int type ){","\t\tsuper(log);","        this.type \t\t= type;","        this.catalog \t= catalog;","        this.name \t\t= name;","    }","    void executeImpl(SSConnection con, SSStatement st) throws Exception {","        switch(type){","            case SQLTokenizer.DATABASE:","                if(name.startsWith(\"file:\"))","                    name = name.substring(5);","                File dir = new File( name );","                if(!dir.isDirectory() || ","                   !new File( dir, Utils.MASTER_FILENAME ).exists())","               \t\t\tthrow SmallSQLException.create(Language.DB_NONEXISTENT, name);","                File files[] = dir.listFiles();","                if(files != null)","\t                for(int i=0; i\<files.length; i++){","\t                    files[i].delete();","\t                }","                dir.delete();","                break;","            case SQLTokenizer.TABLE:","                Database.dropTable( con, catalog, name );","                break;","            case SQLTokenizer.VIEW:","\t\t\t\tDatabase.dropView( con, catalog, name );","\t\t\t\tbreak;","            case SQLTokenizer.INDEX:","            case SQLTokenizer.PROCEDURE:","                throw new java.lang.UnsupportedOperationException();","            default:","                throw new Error();","        }","    }","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionDifference.java|:["package smallsql.database;","final class ExpressionFunctionDifference extends ExpressionFunctionReturnInt {","\tfinal int getFunction() {","\t\treturn SQLTokenizer.DIFFERENCE;","\t}","    boolean isNull() throws Exception {","        return param1.isNull() || param2.isNull();","    }","\tfinal int getInt() throws Exception {","        if(isNull()) return 0;","\t\tString str1 = ExpressionFunctionSoundex.getString(param1.getString());","        String str2 = ExpressionFunctionSoundex.getString(param2.getString());","        int diff = 0;","        for(int i=0; i\<4; i++){","            if(str1.charAt(i) == str2.charAt(i)){","                diff++;","            }","        }","\t\treturn diff;","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionYear.java|:["package smallsql.database;","final class ExpressionFunctionYear extends ExpressionFunctionReturnInt {","\tfinal int getFunction() {","\t\treturn SQLTokenizer.YEAR;","\t}","\tfinal int getInt() throws Exception {","\t\tif(param1.isNull()) return 0;","\t\tDateTime.Details details = new DateTime.Details(param1.getLong());","\t\treturn details.year;","\t}","}"],|project://smallsql/src/smallsql/junit/TestMoneyRounding.java|:["package smallsql.junit;","import junit.framework.*;","import java.math.BigDecimal;","import java.sql.*;","import smallsql.database.Money;","public class TestMoneyRounding extends TestCase{","    static final String table = \"TestMoneyRounding\";","    public void setUp() throws SQLException{","        tearDown();","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\tst.execute(\"create table \" + table + \"(a money, b smallmoney)\");","    }","    public void tearDown(){","        try{","            Connection con = AllTests.getConnection();","            Statement st = con.createStatement();","            st.execute(\"drop table \" + table);","            st.close();","        }catch(Throwable e){","        }","    }","    public void testMoney1() throws Exception{","            Connection con = AllTests.getConnection();","            Statement st = con.createStatement();","            int firstValue = -10000;","            for(int i=firstValue; i\<10000; i++){","                st.execute(\"Insert into \" + table + \"(a,b) values(\" + (i/10000.0) + \",\" +(i/10000.0) +\")\");","            }","            st.close();","            verify(firstValue);","    }","    private void verify(int firstValue) throws Exception{","\t\tConnection con = AllTests.getConnection();","\t\tStatement st = con.createStatement();","\t\tResultSet rs = st.executeQuery(\"Select * FROM \" + table);","\t\tlong i = firstValue;","\t\twhile(rs.next()){","\t\t\tObject obj1 = rs.getObject(1);","\t\t\tObject obj2 = rs.getObject(2);","\t\t\tif(obj1 instanceof Money){","\t\t\t\tMoney mon1 = (Money)obj1;","\t\t\t\tMoney mon2 = (Money)obj2;","\t\t\t\tassertEquals(\"Roundungsfehler money:\", i, mon1.unscaledValue());","\t\t\t\tassertEquals(\"Roundungsfehler smallmoney:\", i, mon2.unscaledValue());","\t\t\t}else{","\t\t\t\tBigDecimal mon1 = (BigDecimal)obj1;","\t\t\t\tBigDecimal mon2 = (BigDecimal)obj2;","\t\t\t\tassertEquals(\"Roundungsfehler money:\", i, mon1.unscaledValue().longValue());","\t\t\t\tassertEquals(\"Roundungsfehler smallmoney:\", i, mon2.unscaledValue().longValue());","\t\t\t}","\t\t\ti++;","\t\t}","\t\tst.close();","    }","\tpublic void testMoney2() throws Exception{","\t\t\tConnection con = AllTests.getConnection();","\t\t\tStatement st = con.createStatement();","\t\t\tint firstValue = -10000;","\t\t\tfor(int i=firstValue; i\<10000; i++){","\t\t\t\tst.execute(\"Insert into \" + table + \"(a,b) values( (\" + i + \"/10000.0), (\" + i + \"/10000.0) )\");","\t\t\t}","\t\t\tst.close();","\t\t\tverify(firstValue);","\t}","}"],|project://smallsql/src/smallsql/junit/BenchTest.java|:["package smallsql.junit;","import java.sql.*;","public class BenchTest","{","    static byte[] byteArray = {23, 34, 67 };","    static byte[] largeByteArray = new byte[4000];","    static String driverClassName = \"smallsql.database.SSDriver\";","    static String userName        = \"sa\";","    static String password        = \"\";","    static String jdbcUrl         = \"jdbc:smallsql:AllTests\";","    static int    rowCount        = 10000;","    static Connection con;","    static final String tableName = \"BenchTest2\";","    public static void main(String[] args) throws SQLException{","        for(int i=0; i\<args.length;){","            String option = args[i++];","            if      (option.equals(\"-driver\")  ) driverClassName = args[i++];","            else if (option.equals(\"-user\")    ) userName = args[i++];","            else if (option.equals(\"-password\")) password = args[i++];","            else if (option.equals(\"-url\")     ) jdbcUrl  = args[i++];","            else if (option.equals(\"-rowcount\")) rowCount = Integer.parseInt(args[i++]);","            else if (option.equals(\"-?\") | option.equals(\"-help\")){","                System.out.println( \"Valid options are :\\n\\t-driver\\n\\t-url\\n\\t-user\\n\\t-password\\n\\t-rowcount\");","                System.exit(0);","            }","            else {System.out.println(\"Option \" + option + \" is ignored\");i++;}","        }","        System.out.println( \"Driver:  \\t\" + driverClassName);","        System.out.println( \"Username:\\t\" + userName);","        System.out.println( \"Password:\\t\" + password);","        System.out.println( \"JDBC URL:\\t\" + jdbcUrl);","        System.out.println( \"Row Count:\\t\" + rowCount);","        System.out.println();","        try{","            Class.forName(driverClassName).newInstance();","            con = DriverManager.getConnection( jdbcUrl, userName,password);","            System.out.println( con.getMetaData().getDriverName() + \" \" + con.getMetaData().getDriverVersion());","            System.out.println();","            createTestTable( con );","            test_InsertClassic( con );","            test_DeleteAll( con );","            test_InsertEmptyRows( con );","            test_DeleteRows( con );","            test_InsertRows( con );","            test_RowRequestPages( con );","            test_UpdateRows( con );","            test_UpdateRowsPrepare( con );","            test_UpdateRowsPrepareSP( con );","            test_UpdateRowsPrepareBatch( con );","            test_Scroll_getXXX( con );","            test_UpdateLargeBinary( con );","            test_UpdateLargeBinaryWithSP( con );","        }catch(Exception e){","            e.printStackTrace();","        }finally{","            if (con != null){","                con.close();","            }","        }","    }","    static void test_InsertClassic(Connection con){","        System.out.println();","        System.out.println( \"Test insert rows with default values with a classic insert statement: \" + rowCount + \" rows\");","        try{","            Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );","            long time = -System.currentTimeMillis();","            for (int i=0; i\<rowCount; i++){","                st.execute(\"INSERT INTO \" + tableName + \"(i) VALUES(\" + i +\")\");","            }","            time += System.currentTimeMillis();","            ResultSet rs = st.executeQuery( \"SELECT count(*) FROM \" + tableName);","            rs.next();","            int count = rs.getInt(1);","            if (count != rowCount)","                System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");","            else System.out.println( \"  Test time: \" + time + \" ms\");","            st.close();","        }catch(Exception e){","            System.out.println(\"  Failed:\"+e);","        }finally{","            System.out.println();","            System.out.println(\"===================================================================\");","        }","    }","    static void test_DeleteAll(Connection con){","        System.out.println();","        System.out.println( \"Test delete all rows: \" + rowCount + \" rows\");","        try{","            long time = -System.currentTimeMillis();","            Statement st = con.createStatement();","            st.execute(\"DELETE FROM \" + tableName);","            time += System.currentTimeMillis();","            System.out.println( \"  Test time: \" + time + \" ms\");","            st.close();","        }catch(Exception e){","            System.out.println(\"  Failed:\"+e);","        }finally{","            System.out.println();","            System.out.println(\"===================================================================\");","        }","    }","    static void test_InsertEmptyRows(Connection con){","        System.out.println();","        System.out.println( \"Test insert empty rows with insertRow(): \" + rowCount + \" rows\");","        try{","            Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );","            ResultSet rs = st.executeQuery(\"SELECT * FROM \"+tableName);","            long time = -System.currentTimeMillis();","            for (int i=0; i\<rowCount; i++){","                rs.moveToInsertRow();","                rs.insertRow();","            }","            time += System.currentTimeMillis();","            rs = st.executeQuery( \"SELECT count(*) FROM \" + tableName);","            rs.next();","            int count = rs.getInt(1);","            if (count != rowCount)","                 System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");","            else System.out.println( \"  Test time: \" + time + \" ms\");","            st.close();","        }catch(Exception e){","            System.out.println(\"  Failed:\"+e);","        }finally{","            System.out.println();","            System.out.println(\"===================================================================\");","        }","    }","    static void test_DeleteRows(Connection con){","        System.out.println();","        System.out.println( \"Test delete rows with deleteRow(): \" + rowCount + \" rows\");","        try{","            Statement st1 = con.createStatement();","            ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);","            rs.next();","            int count = rs.getInt(1);","            if (count != rowCount){","                if (count == 0){","                    createTestDataWithClassicInsert( con );","                    rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);","                    rs.next();","                    count = rs.getInt(1);","                }","                if (count != rowCount){","                    System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were deleted.\");","                    return;","                }","            }","            st1.close();","            Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );","            rs = st.executeQuery(\"SELECT * FROM \"+tableName);","            long time = -System.currentTimeMillis();","            for (int i=0; i\<rowCount; i++){","                rs.next();","                rs.deleteRow();","            }","            time += System.currentTimeMillis();","            rs = st.executeQuery( \"SELECT count(*) FROM \" + tableName);","            rs.next();","            count = rs.getInt(1);","            if (count != 0)","                 System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were deleted.\");","            else System.out.println( \"  Test time: \" + time + \" ms\");","            st.close();","        }catch(Exception e){","            System.out.println(\"  Failed:\"+e);","        }finally{","            System.out.println();","            System.out.println(\"===================================================================\");","        }","    }","    static void test_InsertRows(Connection con){","        System.out.println();","        System.out.println( \"Test insert rows with insertRow(): \" + rowCount + \" rows\");","        try{","            Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );","            ResultSet rs = st.executeQuery(\"SELECT * FROM \" + tableName);","            long time = -System.currentTimeMillis();","            for (int i=0; i\<rowCount; i++){","                rs.moveToInsertRow();","\t            rs.updateBytes (  \"bi\", byteArray );","\t            rs.updateString(  \"c\" , \"Test\" );","\t            rs.updateDate  (  \"d\" , new Date( System.currentTimeMillis() ) );","\t            rs.updateFloat (  \"de\", (float)1234.56789 );","\t            rs.updateFloat (  \"f\" , (float)9876.54321 );","\t            rs.updateBytes (  \"im\", largeByteArray );","\t            rs.updateInt   (  \"i\" , i );","\t            rs.updateDouble(  \"m\" , 23.45 );","\t            rs.updateDouble(  \"n\" , 567.45 );","\t            rs.updateFloat (  \"r\" , (float)78.89 );","\t            rs.updateTime  (  \"sd\", new Time( System.currentTimeMillis() ) );","\t            rs.updateShort (  \"si\", (short)i );","\t            rs.updateFloat (  \"sm\", (float)34.56 );","\t            rs.updateString(  \"sy\", \"sysname (30) NULL\" );","\t            rs.updateString(  \"t\" , \"ntext NULL, sample to save in the field\" );","\t            rs.updateByte  (  \"ti\", (byte)i );","\t            rs.updateBytes (  \"vb\", byteArray );","\t            rs.updateString(  \"vc\", \"nvarchar (255) NULL\" );","                rs.insertRow();","            }","            time += System.currentTimeMillis();","            rs = st.executeQuery( \"SELECT count(*) FROM \" + tableName);","            rs.next();","            int count = rs.getInt(1);","            if (count != rowCount){","                  st.execute(\"DELETE FROM \" + tableName);","                  System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");","            }else System.out.println( \"  Test time: \" + time + \" ms\");","            st.close();","        }catch(Exception e){","        \te.printStackTrace();","            try{","                Statement st = con.createStatement();","                st.execute(\"DELETE FROM \" + tableName);","                st.close();","            }catch(Exception ee){}","            System.out.println(\"  Failed:\"+e);","        }finally{","            System.out.println();","            System.out.println(\"===================================================================\");","        }","    }","    static void test_RowRequestPages(Connection con){","        int pages = 100; ","        int rows  = rowCount / pages;","        System.out.println();","        System.out.println( \"Test request row pages : \" + pages + \" pages, \" +rows + \" rows per page\");","        try{","            Statement st1 = con.createStatement();","            ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);","            rs.next();","            int count = rs.getInt(1);","            if (count != rowCount){","                if (count == 0){","                    createTestDataWithClassicInsert( con );","                    rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);","                    rs.next();","                    count = rs.getInt(1);","                }","                if (count != rowCount){","                    System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were found.\");","                    return;","                }","            }","            st1.close();","            long time = -System.currentTimeMillis();","            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);","            st.setFetchSize( rows );","            for (int i=0; i\<pages; i++){","                rs = st.executeQuery(\"SELECT * FROM \" + tableName);","                rs.absolute( i*rows+1 );","                for (int r=1; r\<rows; r++){","                    if (!rs.next()){","                        System.out.println( \"  Failed: No rows were found at page \" + i + \" page and row \" + r);","                        return;","                    }","                    int col_i = rs.getInt(\"i\");","                    if (col_i != (i*rows+r)){","                        System.out.println( \"  Failed: Wrong row \" + col_i + \", it should be row \" + (i*rows+r));","                        return;","                    }","                }","            }","            time += System.currentTimeMillis();","            System.out.println( \"  Test time: \" + time + \" ms\");","            st.close();","        }catch(Exception e){","            System.out.println(\"  Failed:\"+e);","        }finally{","            System.out.println();","            System.out.println(\"===================================================================\");","        }","    }","    static void test_UpdateRows(Connection con){","        System.out.println();","        System.out.println( \"Test update rows with updateRow(): \" + rowCount + \" rows\");","        try{","            Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );","            ResultSet rs = st.executeQuery(\"SELECT * FROM \" + tableName);","            int colCount = rs.getMetaData().getColumnCount();","            long time = -System.currentTimeMillis();","            int count = 0;","            while(rs.next()){","                for (int i=2; i\<=colCount; i++){","                    rs.updateObject( i, rs.getObject(i) );","                }","                rs.updateRow();","                count++;","            }","            time += System.currentTimeMillis();","            if (count != rowCount)","                 System.out.println( \"  Failed: Only \" + count + \" rows were updated.\");","            else System.out.println( \"  Test time: \" + time + \" ms\");","            st.close();","        }catch(Exception e){","            System.out.println(\"  Failed:\" + e);","        }finally{","            System.out.println();","            System.out.println(\"===================================================================\");","        }","    }","    static void test_UpdateRowsPrepare(Connection con){","        System.out.println();","        System.out.println( \"Test update rows with a PreparedStatement: \" + rowCount + \" rows\");","        try{","            PreparedStatement pr = con.prepareStatement( \"UPDATE \" + tableName + \" SET bi=?,c=?,d=?,de=?,f=?,im=?,i=?,m=?,n=?,r=?,sd=?,si=?,sm=?,sy=?,t=?,ti=?,vb=?,vc=? WHERE i=?\" );","            long time = -System.currentTimeMillis();","            for (int i=0; i\<rowCount; i++){","\t            pr.setBytes (  1, byteArray );","\t            pr.setString(  2 , \"Test\" );","\t            pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );","\t            pr.setFloat (  4, (float)1234.56789 );","\t            pr.setFloat (  5 , (float)9876.54321 );","\t            pr.setBytes (  6, largeByteArray );","\t            pr.setInt   (  7 , i );","\t            pr.setDouble(  8 , 23.45 );","\t            pr.setDouble(  9 , 567.45 );","\t            pr.setFloat (  10 , (float)78.89 );","\t            pr.setTime  (  11, new Time( System.currentTimeMillis() ) );","\t            pr.setShort (  12, (short)23456 );","\t            pr.setFloat (  13, (float)34.56 );","\t            pr.setString(  14, \"sysname (30) NULL\" );","\t            pr.setString(  15 , \"text NULL\" );","\t            pr.setByte  (  16, (byte)28 );","\t            pr.setBytes (  17, byteArray );","\t            pr.setString(  18, \"varchar (255) NULL\" );","\t            pr.setInt   (  19 , i );","                int updateCount = pr.executeUpdate();","                if (updateCount != 1){","                    System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");","                    return;","                }","            }","            time += System.currentTimeMillis();","            System.out.println( \"  Test time: \" + time + \" ms\");","            pr.close();","        }catch(Exception e){","            System.out.println(\"  Failed:\"+e);","        }finally{","            System.out.println();","            System.out.println(\"===================================================================\");","        }","    }","    static void test_UpdateRowsPrepareSP(Connection con){","        System.out.println();","        System.out.println( \"Test update rows with a PreparedStatement and a stored procedure: \" + rowCount + \" rows\");","        try{","            Statement st = con.createStatement();","            try{st.execute(\"drop procedure sp_\"+tableName);}catch(Exception e){}","            st.execute(\"create procedure sp_\"+tableName+\" (@bi binary,@c nchar(255),@d datetime,@de decimal,@f float,@im image,@i int,@m money,@n numeric(18, 0),@r real,@sd smalldatetime,@si smallint,@sm smallmoney,@sy sysname,@t ntext,@ti tinyint,@vb varbinary(255),@vc nvarchar(255)) as UPDATE \" + tableName + \" SET bi=@bi,c=@c,d=@d,de=@de,f=@f,im=@im,i=@i,m=@m,n=@n,r=@r,sd=@sd,si=@si,sm=@sm,sy=@sy,t=@t,ti=@ti,vb=@vb,vc=@vc WHERE i=@i\");","            PreparedStatement pr = con.prepareStatement( \"exec sp_\" + tableName + \" ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?\" );","            long time = -System.currentTimeMillis();","            for (int i=0; i\<rowCount; i++){","\t            pr.setBytes (  1, byteArray );","\t            pr.setString(  2 , \"Test\" );","\t            pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );","\t            pr.setFloat (  4, (float)1234.56789 );","\t            pr.setFloat (  5 , (float)9876.54321 );","\t            pr.setBytes (  6, largeByteArray );","\t            pr.setInt   (  7 , i );","\t            pr.setDouble(  8 , 23.45 );","\t            pr.setDouble(  9 , 567.45 );","\t            pr.setFloat (  10 , (float)78.89 );","\t            pr.setTime  (  11, new Time( System.currentTimeMillis() ) );","\t            pr.setShort (  12, (short)23456 );","\t            pr.setFloat (  13, (float)34.56 );","\t            pr.setString(  14, \"sysname (30) NULL\" );","\t            pr.setString(  15 , \"text NULL\" );","\t            pr.setByte  (  16, (byte)28 );","\t            pr.setBytes (  17, byteArray );","\t            pr.setString(  18, \"varchar (255) NULL\" );","                int updateCount = pr.executeUpdate();","                if (updateCount != 1){","                    System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");","                    return;","                }","            }","            time += System.currentTimeMillis();","            System.out.println( \"  Test time: \" + time + \" ms\");","            st.execute(\"drop procedure sp_\"+tableName);","            st.close();","            pr.close();","        }catch(Exception e){","            System.out.println(\"  Failed:\"+e);","        }finally{","            System.out.println();","            System.out.println(\"===================================================================\");","        }","    }","    static void test_UpdateRowsPrepareBatch(Connection con){","        int batchSize = 10;","        int batches = rowCount / batchSize;","        System.out.println();","        System.out.println( \"Test update rows with PreparedStatement and Batches: \" + batches + \" batches, \" + batchSize + \" batch size\");","        try{","            PreparedStatement pr = con.prepareStatement( \"UPDATE \" + tableName + \" SET bi=?,c=?,d=?,de=?,f=?,im=?,i=?,m=?,n=?,r=?,sd=?,si=?,sm=?,sy=?,t=?,ti=?,vb=?,vc=? WHERE i=?\" );","            long time = -System.currentTimeMillis();","            for (int i=0; i\<batches; i++){","                for (int r=0; r\<batchSize; r++){","\t                pr.setBytes (  1, byteArray );","\t                pr.setString(  2 , \"Test\" );","\t                pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );","\t                pr.setFloat (  4, (float)1234.56789 );","\t                pr.setFloat (  5 , (float)9876.54321 );","\t                pr.setBytes (  6, largeByteArray );","\t                pr.setInt   (  7 , i*batchSize + r );","\t                pr.setDouble(  8 , 23.45 );","\t                pr.setDouble(  9 , 567.45 );","\t                pr.setFloat (  10 , (float)78.89 );","\t                pr.setTime  (  11, new Time( System.currentTimeMillis() ) );","\t                pr.setShort (  12, (short)23456 );","\t                pr.setFloat (  13, (float)34.56 );","\t                pr.setString(  14, \"sysname (30) NULL\" );","\t                pr.setString(  15 , \"text NULL\" );","\t                pr.setByte  (  16, (byte)28 );","\t                pr.setBytes (  17, byteArray );","\t                pr.setString(  18, \"varchar (255) NULL\" );","\t                pr.setInt   (  19 , i );","\t                pr.addBatch();","\t            }","                int[] updateCount = pr.executeBatch();","                if (updateCount.length != batchSize){","                    System.out.println( \"  Failed: Update count size should be \" + batchSize + \" but it is \" + updateCount.length + \".\");","                    return;","                }","            }","            time += System.currentTimeMillis();","            System.out.println( \"  Test time: \" + time + \" ms\");","            pr.close();","        }catch(Exception e){","            System.out.println(\"  Failed:\"+e);","        }finally{","            System.out.println();","            System.out.println(\"===================================================================\");","        }","    }","    static void test_Scroll_getXXX(Connection con){","        System.out.println();","        System.out.println( \"Test scroll and call the getXXX methods for every columns: \" + rowCount + \" rows\");","        try{","            Statement st = con.createStatement();","            long time = -System.currentTimeMillis();","            ResultSet rs = st.executeQuery(\"SELECT * FROM \" + tableName);","            for (int i=0; i\<rowCount; i++){","                    rs.next();","\t                rs.getInt   (  1 );","\t                rs.getBytes (  2 );","\t                rs.getString(  3 );","\t                rs.getDate  (  4 );","\t                rs.getFloat (  5 );","\t                rs.getFloat (  6 );","\t                rs.getBytes (  7 );","\t                rs.getInt   (  8 );","\t                rs.getDouble(  9 );","\t                rs.getDouble(  10 );","\t                rs.getFloat (  11 );","\t                rs.getTime  (  12 );","\t                rs.getShort (  13 );","\t                rs.getFloat (  14 );","\t                rs.getString(  15 );","\t                rs.getString(  16 );","\t                rs.getByte  (  17 );","\t                rs.getBytes (  18 );","\t                rs.getString(  19 );","            }","            time += System.currentTimeMillis();","            System.out.println( \"  Test time: \" + time + \" ms\");","            st.close();","        }catch(Exception e){","            System.out.println(\"  Failed:\"+e);","        }finally{","            System.out.println();","            System.out.println(\"===================================================================\");","        }","    }","    static void test_UpdateLargeBinary(Connection con){","        System.out.println();","        System.out.println( \"Test update large binary data: \" + rowCount + \"KB bytes\");","        try{","            java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+\".bin\");","            byte bytes[] = new byte[1024];","            for(int i=0; i\<rowCount; i++){","                fos.write(bytes);","            }","            fos.close();","            java.io.FileInputStream fis = new java.io.FileInputStream(tableName+\".bin\");","            long time = -System.currentTimeMillis();","            PreparedStatement pr = con.prepareStatement(\"Update \" + tableName + \" set im=? WHERE pr=1\");","            pr.setBinaryStream( 1, fis, rowCount*1024 );","            pr.execute();","            pr.close();","            time += System.currentTimeMillis();","            System.out.println( \"  Test time: \" + time + \" ms\");","            fis.close();","            java.io.File file = new java.io.File(tableName+\".bin\");","            file.delete();","        }catch(Exception e){","            System.out.println(\"  Failed:\"+e);","        }finally{","            System.out.println();","            System.out.println(\"===================================================================\");","        }","    }","    static void test_UpdateLargeBinaryWithSP(Connection con){","        System.out.println();","        System.out.println( \"Test update large binary data with a SP: \" + rowCount + \"KB bytes\");","        try{","            java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+\".bin\");","            byte bytes[] = new byte[1024];","            for(int i=0; i\<rowCount; i++){","                fos.write(bytes);","            }","            fos.close();","            java.io.FileInputStream fis = new java.io.FileInputStream(tableName+\".bin\");","            long time = -System.currentTimeMillis();","            Statement st = con.createStatement();","            st.execute(\"CREATE PROCEDURE #UpdateLargeBinary(@im image) as Update \" + tableName + \" set im=@im WHERE pr=2\");","            PreparedStatement pr = con.prepareStatement(\"exec #UpdateLargeBinary ?\");","            pr.setBinaryStream( 1, fis, rowCount*1024 );","            pr.execute();","            st.execute(\"DROP PROCEDURE #UpdateLargeBinary\");","            st.close();","            pr.close();","            time += System.currentTimeMillis();","            System.out.println( \"  Test time: \" + time + \" ms\");","            fis.close();","            java.io.File file = new java.io.File(tableName+\".bin\");","            file.delete();","        }catch(Exception e){","            System.out.println(\"  Failed:\"+e);","        }finally{","            System.out.println();","            System.out.println(\"===================================================================\");","        }","    }","    static void createTestTable(Connection con) throws SQLException{","            Statement st;","            st = con.createStatement();","            dropTestTable( con );","            st.execute(","                \"CREATE TABLE \" + tableName + \" (\"+","\t            \"    pr  numeric IDENTITY,\"+","\t            \"    bi  binary (255) NULL ,\"+","\t            \"    c   nchar (255) NULL ,\"+","\t            \"    d   datetime NULL ,\"+","\t            \"    de  decimal(18, 0) NULL ,\"+","\t            \"    f   float NULL ,\"+","\t            \"    im  image NULL ,\"+","\t            \"    i   int NULL ,\"+","\t            \"    m   money NULL ,\"+","\t            \"    n   numeric(18, 0) NULL ,\"+","\t            \"    r   real NULL ,\"+","\t            \"    sd  smalldatetime NULL ,\"+","\t            \"    si  smallint NULL ,\"+","\t            \"    sm  smallmoney NULL ,\"+","\t            \"    sy  sysname NULL ,\"+","\t            \"    t   ntext NULL ,\"+","\t            \"    ti  tinyint NULL ,\"+","\t            \"    vb  varbinary (255) NULL ,\"+","\t            \"    vc  nvarchar (255) NULL, \"+","\t            \"CONSTRAINT PK_BenchTest2 PRIMARY KEY CLUSTERED (pr) \"+","\t            \")\");","\t        st.close();  ","    }","    static void deleteTestTable(Connection con){","        try{","            Statement st = con.createStatement();","            st.execute(\"DELETE FROM \" + tableName);","            st.close();","        }catch(Exception e){}","    }","    static void dropTestTable(Connection con){","        try{","            Statement st = con.createStatement();","            st.execute(\"drop table \" + tableName);","            st.close();","        }catch(Exception e){}","    }","    static void createTestDataWithClassicInsert(Connection con) throws SQLException{","        String sql = \"INSERT INTO \" + tableName + \"(bi,c,d,de,f,im,i,m,n,r,si,sd,sm,sy,t,ti,vb,vc) VALUES(0x172243,\'Test\',\'20010101\',1234.56789,9876.54321,0x\";","        for(int i=0; i\<largeByteArray.length; i++){","            sql += \"00\";","        }","        Statement st = con.createStatement();","        for (int i=0; i\<rowCount; i++){","            st.execute(sql + \",\"+i+\",23.45,567.45,78.89,\"+i+\",\'11:11:11\',34.56,\'sysname (30) NULL\',\'ntext NULL, sample to save in the field\',\"+(i & 0xFF)+\",0x172243,\'nvarchar (255) NULL\')\"  );","        }","        st.close();","    }","}"],|project://smallsql/src/smallsql/database/ExpressionValue.java|:["package smallsql.database;","import java.math.BigDecimal;","import java.sql.*;","import smallsql.database.language.Language;","public class ExpressionValue extends Expression {","    private Object value;","    private int dataType;","\tprivate int length;","    ExpressionValue(){","\t\tsuper(VALUE);","        clear();","    }","\tExpressionValue(int type){","\t\tsuper(type);","\t\tswitch(type){","\t\t\tcase GROUP_BY:","\t\t\tcase SUM:","\t\t\tcase FIRST:","\t\t\tcase LAST:","\t\t\t\tclear();","\t\t\t\tbreak;","\t\t\tcase MIN:","\t\t\tcase MAX:","\t\t\t\tbreak;","\t\t\tcase COUNT:","\t\t\t\tvalue = new MutableInteger(0);","\t\t\t\tdataType = SQLTokenizer.INT;","\t\t\t\tbreak;","\t\t\tdefault: throw new Error();","\t\t}","\t}","    ExpressionValue(Object value, int dataType ){","\t\tsuper(VALUE);","        this.value      = value;","        this.dataType   = dataType;","    }","\tpublic boolean equals(Object expr){","\t\tif(!super.equals(expr)) return false;","\t\tif(!(expr instanceof ExpressionValue)) return false;","\t\tObject v = ((ExpressionValue)expr).value;","\t\tif(v == value) return true;","\t\tif(value == null) return false;","\t\treturn value.equals(v);","\t}","    void accumulate(Expression expr) throws Exception{","\t\tint type = getType();","\t\tif(type != GROUP_BY) expr = expr.getParams()[0];","\t\tswitch(type){","\t\t\tcase GROUP_BY:","\t\t\tcase FIRST:","\t\t\t\tif(isEmpty()) set( expr.getObject(), expr.getDataType() );","\t\t\t\tbreak;","\t\t\tcase LAST:","\t\t\t\tset( expr.getObject(), expr.getDataType() );","\t\t\t\tbreak;","\t\t\tcase COUNT:","\t\t\t\tif(!expr.isNull()) ((MutableInteger)value).value++;","\t\t\t\tbreak;","\t\t\tcase SUM:","\t\t\t\tif(isEmpty()){","\t\t\t\t\tinitValue( expr );","\t\t\t\t}else","\t\t\t\tswitch(dataType){","\t\t\t\t\tcase SQLTokenizer.TINYINT:","\t\t\t\t\tcase SQLTokenizer.SMALLINT:","\t\t\t\t\tcase SQLTokenizer.INT:","\t\t\t\t\t\t((MutableInteger)value).value += expr.getInt();","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase SQLTokenizer.BIGINT:","\t\t\t\t\t\t((MutableLong)value).value += expr.getLong();","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase SQLTokenizer.REAL:","\t\t\t\t\t\t((MutableFloat)value).value += expr.getFloat();","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase SQLTokenizer.FLOAT:","\t\t\t\t\tcase SQLTokenizer.DOUBLE:","\t\t\t\t\t\t((MutableDouble)value).value += expr.getDouble();","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase SQLTokenizer.NUMERIC:","\t\t\t\t\tcase SQLTokenizer.DECIMAL:","\t\t\t\t\t\tMutableNumeric newValue = expr.getNumeric();","\t\t\t\t\t\tif(newValue != null)","\t\t\t\t\t\t\t((MutableNumeric)value).add( newValue );","\t\t\t\t\t\tbreak;","\t\t\t\t\tcase SQLTokenizer.MONEY:","\t\t\t\t\t\t((Money)value).value += expr.getMoney();","\t\t\t\t\t\tbreak;\t\t\t\t\t\t","\t\t\t\t\tdefault: throw SmallSQLException.create(Language.UNSUPPORTED_TYPE_SUM, SQLTokenizer.getKeyWord(dataType));","\t\t\t\t}","\t\t\t\tbreak;","\t\t\tcase MAX:","\t\t\t\tif(value == null){","\t\t\t\t\tif(expr.isNull())","\t\t\t\t\t\tdataType = expr.getDataType();","\t\t\t\t\telse","\t\t\t\t\t\tinitValue( expr );","\t\t\t\t}else if(!expr.isNull()){","\t\t\t\t\tswitch(dataType){","\t\t\t\t\t\tcase SQLTokenizer.TINYINT:","\t\t\t\t\t\tcase SQLTokenizer.SMALLINT:","\t\t\t\t\t\tcase SQLTokenizer.INT:","\t\t\t\t\t\t\t((MutableInteger)value).value = Math.max( ((MutableInteger)value).value, expr.getInt());","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase SQLTokenizer.BIGINT:","\t\t\t\t\t\t\t((MutableLong)value).value = Math.max( ((MutableLong)value).value, expr.getLong());","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase SQLTokenizer.REAL:","\t\t\t\t\t\t\t((MutableFloat)value).value = Math.max( ((MutableFloat)value).value, expr.getFloat());","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase SQLTokenizer.FLOAT:","\t\t\t\t\t\tcase SQLTokenizer.DOUBLE:","\t\t\t\t\t\t\t((MutableDouble)value).value = Math.max( ((MutableDouble)value).value, expr.getDouble());","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase SQLTokenizer.CHAR:","\t\t\t\t\t\tcase SQLTokenizer.VARCHAR:","\t\t\t\t\t\tcase SQLTokenizer.LONGVARCHAR:","\t\t\t\t\t\t\tString str = expr.getString();","\t\t\t\t\t\t\tif(String.CASE_INSENSITIVE_ORDER.compare( (String)value, str ) \< 0) ","\t\t\t\t\t\t\t\tvalue = str;","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase SQLTokenizer.NUMERIC:","\t\t\t\t\t\tcase SQLTokenizer.DECIMAL:","\t\t\t\t\t\t\tMutableNumeric newValue = expr.getNumeric();","\t\t\t\t\t\t\tif(((MutableNumeric)value).compareTo( newValue ) \< 0)","\t\t\t\t\t\t\t\tvalue = newValue;","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase SQLTokenizer.MONEY:","\t\t\t\t\t\t\t((Money)value).value = Math.max( ((Money)value).value, expr.getMoney());","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase SQLTokenizer.TIMESTAMP:","\t\t\t\t\t\tcase SQLTokenizer.SMALLDATETIME:","\t\t\t\t\t\tcase SQLTokenizer.DATE:","\t\t\t\t\t\tcase SQLTokenizer.TIME:","\t\t\t\t\t\t\t((DateTime)value).time = Math.max( ((DateTime)value).time, expr.getLong());","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:","\t\t\t\t\t\t\tString uuidStr = expr.getString();","\t\t\t\t\t\t\tif (uuidStr.compareTo( (String)value) \> 0) value = uuidStr;","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tdefault:","\t\t\t\t\t\t\tString keyword = SQLTokenizer.getKeyWord(dataType);","\t\t\t\t\t\t\tthrow SmallSQLException.create(Language.UNSUPPORTED_TYPE_MAX, keyword);","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\tbreak;","\t\t\tcase MIN:","\t\t\t\tif(value == null){","\t\t\t\t\tif(expr.isNull())","\t\t\t\t\t\tdataType = expr.getDataType();","\t\t\t\t\telse","\t\t\t\t\t\tinitValue( expr );","\t\t\t\t}else if(!expr.isNull()){","\t\t\t\t\tswitch(dataType){","\t\t\t\t\t\tcase SQLTokenizer.TINYINT:","\t\t\t\t\t\tcase SQLTokenizer.SMALLINT:","\t\t\t\t\t\tcase SQLTokenizer.INT:","\t\t\t\t\t\t\t((MutableInteger)value).value = Math.min( ((MutableInteger)value).value, expr.getInt());","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase SQLTokenizer.BIGINT:","\t\t\t\t\t\t\t((MutableLong)value).value = Math.min( ((MutableLong)value).value, expr.getLong());","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase SQLTokenizer.REAL:","\t\t\t\t\t\t\t((MutableFloat)value).value = Math.min( ((MutableFloat)value).value, expr.getFloat());","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase SQLTokenizer.FLOAT:","\t\t\t\t\t\tcase SQLTokenizer.DOUBLE:","\t\t\t\t\t\t\t((MutableDouble)value).value = Math.min( ((MutableDouble)value).value, expr.getDouble());","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase SQLTokenizer.CHAR:","\t\t\t\t\t\tcase SQLTokenizer.VARCHAR:","\t\t\t\t\t\tcase SQLTokenizer.LONGVARCHAR:","\t\t\t\t\t\t\tString str = expr.getString();","\t\t\t\t\t\t\tif(String.CASE_INSENSITIVE_ORDER.compare( (String)value, str ) \> 0) ","\t\t\t\t\t\t\t\tvalue = str;","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase SQLTokenizer.NUMERIC:","\t\t\t\t\t\tcase SQLTokenizer.DECIMAL:","\t\t\t\t\t\t\tMutableNumeric newValue = expr.getNumeric();","\t\t\t\t\t\t\tif(((MutableNumeric)value).compareTo( newValue ) \> 0)","\t\t\t\t\t\t\t\tvalue = newValue;","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase SQLTokenizer.MONEY:","\t\t\t\t\t\t\t((Money)value).value = Math.min( ((Money)value).value, expr.getMoney());","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tcase SQLTokenizer.TIMESTAMP:","\t\t\t\t\t\tcase SQLTokenizer.SMALLDATETIME:","\t\t\t\t\t\tcase SQLTokenizer.DATE:","\t\t\t\t\t\tcase SQLTokenizer.TIME:","\t\t\t\t\t\t\t((DateTime)value).time = Math.min( ((DateTime)value).time, expr.getLong());","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\tdefault: throw new Error(\"\"+dataType);","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\tbreak;","\t\t\tdefault: throw new Error();","\t\t}","\t}","\tprivate void initValue(Expression expr) throws Exception{","\t\tdataType = expr.getDataType();","\t\tswitch(dataType){","\t\t\tcase SQLTokenizer.TINYINT:","\t\t\tcase SQLTokenizer.SMALLINT:","\t\t\tcase SQLTokenizer.INT:","\t\t\t\tvalue = new MutableInteger(expr.getInt());","\t\t\t\tbreak;","\t\t\tcase SQLTokenizer.BIGINT:","\t\t\t\tvalue = new MutableLong(expr.getLong());","\t\t\t\tbreak;","\t\t\tcase SQLTokenizer.REAL:","\t\t\t\tvalue = new MutableFloat(expr.getFloat());","\t\t\t\tbreak;","\t\t\tcase SQLTokenizer.FLOAT:","\t\t\tcase SQLTokenizer.DOUBLE:","\t\t\t\tvalue = new MutableDouble(expr.getDouble());","\t\t\t\tbreak;","\t\t\tcase SQLTokenizer.SMALLMONEY:","\t\t\tcase SQLTokenizer.MONEY:","\t\t\t\tvalue = Money.createFromUnscaledValue(expr.getMoney());","\t\t\t\tbreak;","\t\t\tcase SQLTokenizer.NUMERIC:","\t\t\tcase SQLTokenizer.DECIMAL:","\t\t\t\tvalue = new MutableNumeric(expr.getNumeric());","\t\t\t\tbreak;","\t\t\tcase SQLTokenizer.TIMESTAMP:","\t\t\tcase SQLTokenizer.SMALLDATETIME:","\t\t\tcase SQLTokenizer.DATE:","\t\t\tcase SQLTokenizer.TIME:","\t\t\t\tvalue = new DateTime(expr.getLong(), dataType);","\t\t\t\tbreak;","\t\t\tdefault: ","\t\t\t\tvalue = expr.getObject();","\t\t}","\t}","    private static final Object EMPTY = new Object();","    final boolean isEmpty(){","        return value == EMPTY;","    }","    final void clear(){","        value = EMPTY;","    }","\tfinal void set( Object value, int _dataType, int length ) throws SQLException{","\t\tset( value, _dataType );","\t\tthis.length = length;","\t}","    final void set( Object newValue, int newDataType ) throws SQLException{","        this.value      = newValue;","        this.dataType   = newDataType;","        if(dataType \< 0){","            if(newValue == null)","                this.dataType = SQLTokenizer.NULL;","            else","            if(newValue instanceof String)","                this.dataType = SQLTokenizer.VARCHAR;","            else","            if(newValue instanceof Byte)","                this.dataType = SQLTokenizer.TINYINT;","            else","            if(newValue instanceof Short)","                this.dataType = SQLTokenizer.SMALLINT;","            else","            if(newValue instanceof Integer)","                this.dataType = SQLTokenizer.INT;","            else","            if(newValue instanceof Long || newValue instanceof Identity)","                this.dataType = SQLTokenizer.BIGINT;","            else","            if(newValue instanceof Float)","                this.dataType = SQLTokenizer.REAL;","            else","            if(newValue instanceof Double)","                this.dataType = SQLTokenizer.DOUBLE;","            else","            if(newValue instanceof Number)","                this.dataType = SQLTokenizer.DECIMAL;","            else","            if(newValue instanceof java.util.Date){","                DateTime dateTime;","            \tthis.value = dateTime = DateTime.valueOf((java.util.Date)newValue);","\t\t\t\tthis.dataType = dateTime.getDataType();","            }else","            if(newValue instanceof byte[])","                this.dataType = SQLTokenizer.VARBINARY;","            else","            if(newValue instanceof Boolean)","                this.dataType = SQLTokenizer.BOOLEAN;","            else","            if(newValue instanceof Money)","                this.dataType = SQLTokenizer.MONEY;","            else","                throw SmallSQLException.create(Language.PARAM_CLASS_UNKNOWN, newValue.getClass().getName());","        }","    }","    final void set(ExpressionValue val){","    \tthis.value \t\t= val.value;","    \tthis.dataType\t= val.dataType;","    \tthis.length\t\t= val.length;","    }","    boolean isNull(){","        return getObject() == null;","    }","    boolean getBoolean() throws Exception{","\t\treturn getBoolean( getObject(), dataType );","    }","\tstatic boolean getBoolean(Object obj, int dataType) throws Exception{","        if(obj == null) return false;","        switch(dataType){","            case SQLTokenizer.BIT:","            case SQLTokenizer.BOOLEAN:","                return (obj.equals(Boolean.TRUE));","            case SQLTokenizer.TINYINT:","            case SQLTokenizer.SMALLINT:","            case SQLTokenizer.INT:","            case SQLTokenizer.BIGINT:","                return ((Number)obj).intValue() != 0;","            case SQLTokenizer.REAL:","            case SQLTokenizer.DOUBLE:","            case SQLTokenizer.MONEY:","                return ((Number)obj).doubleValue() != 0;","            default: return Utils.string2boolean( obj.toString() );","        }","    }","    int getInt() throws Exception{","\t\treturn getInt( getObject(), dataType );","    }","\tstatic int getInt(Object obj, int dataType) throws Exception{","        if(obj == null) return 0;","        switch(dataType){","            case SQLTokenizer.BIT:","            case SQLTokenizer.BOOLEAN:","                return (obj == Boolean.TRUE) ? 1 : 0;","            case SQLTokenizer.TINYINT:","            case SQLTokenizer.SMALLINT:","            case SQLTokenizer.INT:","            case SQLTokenizer.BIGINT:","            case SQLTokenizer.REAL:","            case SQLTokenizer.FLOAT:","            case SQLTokenizer.DOUBLE:","            case SQLTokenizer.MONEY:","            case SQLTokenizer.DECIMAL:","            case SQLTokenizer.NUMERIC:","                return ((Number)obj).intValue();","\t\t\tcase SQLTokenizer.TIMESTAMP:","\t\t\tcase SQLTokenizer.TIME:","\t\t\tcase SQLTokenizer.DATE:","\t\t\tcase SQLTokenizer.SMALLDATETIME:","\t\t\t\treturn (int)((DateTime)obj).getTimeMillis();","            default:","\t\t\t\tString str = obj.toString().trim();","\t\t\t\ttry{","\t\t\t\t\treturn Integer.parseInt( str );","\t\t\t\t}catch(Throwable th){}","\t\t\t\treturn (int)Double.parseDouble( str );","        }","    }","    long getLong() throws Exception{","    \treturn getLong( getObject(), dataType);","    }","\tstatic long getLong(Object obj, int dataType) throws Exception{","       if(obj == null) return 0;","        switch(dataType){","            case SQLTokenizer.BIT:","            case SQLTokenizer.BOOLEAN:","                return (obj == Boolean.TRUE) ? 1 : 0;","            case SQLTokenizer.TINYINT:","            case SQLTokenizer.SMALLINT:","            case SQLTokenizer.INT:","            case SQLTokenizer.BIGINT:","            case SQLTokenizer.DOUBLE:","            case SQLTokenizer.MONEY:","                return ((Number)obj).longValue();","\t\t\tcase SQLTokenizer.TIMESTAMP:","\t\t\tcase SQLTokenizer.TIME:","\t\t\tcase SQLTokenizer.DATE:","\t\t\tcase SQLTokenizer.SMALLDATETIME:","\t\t\t\treturn ((DateTime)obj).getTimeMillis();","            default: ","            \tString str = obj.toString();","            \tif(str.indexOf(\'-\') \> 0 || str.indexOf(\':\') \> 0)","            \t\treturn DateTime.parse(str);","\t\t\t\ttry{","\t\t\t\t\treturn Long.parseLong( str );","\t\t\t\t}catch(NumberFormatException e){","\t\t\t\t\treturn (long)Double.parseDouble( str );","\t\t\t\t}","        }","    }","    float getFloat() throws Exception{","\t\treturn getFloat( getObject(), dataType);","    }","\tstatic float getFloat(Object obj, int dataType) throws Exception{","        if(obj == null) return 0;","        switch(dataType){","            case SQLTokenizer.BIT:","                return (obj.equals(Boolean.TRUE)) ? 1 : 0;","            case SQLTokenizer.INT:","            case SQLTokenizer.BIGINT:","            case SQLTokenizer.DOUBLE:","\t\t\tcase SQLTokenizer.FLOAT:","            case SQLTokenizer.REAL:","            case SQLTokenizer.MONEY:","                return ((Number)obj).floatValue();","\t\t\tcase SQLTokenizer.TIMESTAMP:","\t\t\tcase SQLTokenizer.TIME:","\t\t\tcase SQLTokenizer.DATE:","\t\t\tcase SQLTokenizer.SMALLDATETIME:","\t\t\t\treturn ((DateTime)obj).getTimeMillis();","            default: return Float.parseFloat( obj.toString() );","        }","    }","    double getDouble() throws Exception{","\t\treturn getDouble( getObject(), dataType);","    }","\tstatic double getDouble(Object obj, int dataType) throws Exception{","        if(obj == null) return 0;","        switch(dataType){","            case SQLTokenizer.BIT:","                return (obj.equals(Boolean.TRUE)) ? 1 : 0;","            case SQLTokenizer.INT:","            case SQLTokenizer.BIGINT:","            case SQLTokenizer.DOUBLE:","            case SQLTokenizer.MONEY:","                return ((Number)obj).doubleValue();","\t\t\tcase SQLTokenizer.TIMESTAMP:","\t\t\tcase SQLTokenizer.TIME:","\t\t\tcase SQLTokenizer.DATE:","\t\t\tcase SQLTokenizer.SMALLDATETIME:","\t\t\t\treturn ((DateTime)obj).getTimeMillis();","            default: return Double.parseDouble( obj.toString() );","        }","    }","    long getMoney() throws Exception{","\t\treturn getMoney( getObject(), dataType );","    }","    static long getMoney(Object obj, int dataType) throws Exception{","        if(obj == null) return 0;","        switch(dataType){","            case SQLTokenizer.BIT:","                return (obj == Boolean.TRUE) ? 10000 : 0;","            case SQLTokenizer.TINYINT:","            case SQLTokenizer.SMALLINT:","            case SQLTokenizer.INT:","            case SQLTokenizer.BIGINT:","                return ((Number)obj).longValue() * 10000;","            case SQLTokenizer.REAL:","            case SQLTokenizer.FLOAT:","            case SQLTokenizer.DOUBLE:","                return Utils.doubleToMoney(((Number)obj).doubleValue());","            case SQLTokenizer.MONEY:","            case SQLTokenizer.SMALLMONEY:","            \treturn ((Money)obj).value;","            default: return Money.parseMoney( obj.toString() );","        }","\t}","    MutableNumeric getNumeric(){","\t\treturn getNumeric( getObject(), dataType );","    }","    static MutableNumeric getNumeric(Object obj, int dataType){","        if(obj == null) return null;","        switch(dataType){","            case SQLTokenizer.BIT:","                return new MutableNumeric( (obj == Boolean.TRUE) ? 1 : 0);","            case SQLTokenizer.INT:","                return new MutableNumeric( ((Number)obj).intValue() );","            case SQLTokenizer.BIGINT:","                return new MutableNumeric( ((Number)obj).longValue() );","            case SQLTokenizer.REAL:","                float fValue = ((Number)obj).floatValue();","                if(Float.isInfinite(fValue) || Float.isNaN(fValue))","                    return null;","                return new MutableNumeric( fValue );","            case SQLTokenizer.FLOAT:","            case SQLTokenizer.DOUBLE:","                double dValue = ((Number)obj).doubleValue();","                if(Double.isInfinite(dValue) || Double.isNaN(dValue))","                    return null;","                return new MutableNumeric( dValue );","            case SQLTokenizer.MONEY:","            case SQLTokenizer.SMALLMONEY:","            \treturn new MutableNumeric( ((Money)obj).value, 4 );","            case SQLTokenizer.DECIMAL:","            case SQLTokenizer.NUMERIC:","\t\t\t\tif(obj instanceof MutableNumeric)","\t\t\t\t\treturn (MutableNumeric)obj;","\t\t\t\treturn new MutableNumeric( (BigDecimal)obj );","            default: return new MutableNumeric( obj.toString() );","        }","\t}","    Object getObject(){","        if(isEmpty()){","            return null;","        }","        return value;","    }","    String getString(){","        Object obj = getObject();","        if(obj == null) return null;","        if(dataType == SQLTokenizer.BIT){","            return (obj == Boolean.TRUE) ? \"1\" : \"0\";","        }","        return obj.toString();","    }","    byte[] getBytes() throws Exception{","    \treturn getBytes( getObject(), dataType);","    }","\tstatic byte[] getBytes(Object obj, int dataType) throws Exception{","\t\tif(obj == null) return null;","\t\tswitch(dataType){","\t\t\tcase SQLTokenizer.BINARY:","\t\t\tcase SQLTokenizer.VARBINARY:","            case SQLTokenizer.LONGVARBINARY:","\t\t\t\treturn (byte[])obj;","\t\t\tcase SQLTokenizer.VARCHAR:","\t\t\tcase SQLTokenizer.CHAR:","\t\t\tcase SQLTokenizer.NVARCHAR:","\t\t\tcase SQLTokenizer.NCHAR:","\t\t\t\treturn ((String)obj).getBytes();","\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:","\t\t\t\treturn Utils.unique2bytes((String)obj);","            case SQLTokenizer.INT:","                return Utils.int2bytes( ((Number)obj).intValue() );","            case SQLTokenizer.DOUBLE:","                return Utils.double2bytes( ((Number)obj).doubleValue() );","            case SQLTokenizer.REAL:","                return Utils.float2bytes( ((Number)obj).floatValue() );","\t\t\tdefault: throw createUnsupportedConversion(dataType, obj, SQLTokenizer.VARBINARY);","\t\t}","\t}","    final int getDataType(){","        return dataType;","    }","\tString getTableName(){","\t\treturn null;","\t}","\tfinal int getPrecision(){","\t\tswitch(dataType){","\t\t\tcase SQLTokenizer.VARCHAR:","\t\t\tcase SQLTokenizer.CHAR:","\t\t\t\treturn ((String)value).length();","\t\t\tcase SQLTokenizer.VARBINARY:","\t\t\tcase SQLTokenizer.BINARY:","\t\t\t\treturn ((byte[])value).length;","\t\t\tdefault: ","\t\t\t\treturn super.getPrecision();","\t\t}","\t}","\tint getScale(){","\t\tswitch(dataType){","\t\t\tcase SQLTokenizer.DECIMAL:","\t\t\tcase SQLTokenizer.NUMERIC:","\t\t\t\tMutableNumeric obj = getNumeric();","\t\t\t\treturn (obj == null) ? 0: obj.getScale();","\t\t\tdefault:","\t\t\t\treturn getScale(dataType);","\t\t}","\t}","\tstatic SQLException createUnsupportedConversion( int fromDataType, Object obj, int toDataType ){","\t\tObject[] params = {","\t\t\tSQLTokenizer.getKeyWord(fromDataType),","\t\t\tobj,","\t\t\tSQLTokenizer.getKeyWord(toDataType)","\t\t};","        return SmallSQLException.create(Language.UNSUPPORTED_CONVERSION, params);","    }","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|:["package smallsql.database;","final class ExpressionFunctionSign extends ExpressionFunctionReturnInt {","\tfinal int getFunction() {","\t\treturn SQLTokenizer.SIGN;","\t}","\tfinal int getInt() throws Exception {","\t\tif(param1.isNull()) return 0;","\t\tswitch(ExpressionArithmetic.getBestNumberDataType(param1.getDataType())){","\t\t\tcase SQLTokenizer.INT:","\t\t\t\tint intValue = param1.getInt();","\t\t\t\tif(intValue \< 0)","\t\t\t\t\treturn -1;","\t\t\t\tif(intValue \> 0)","\t\t\t\t\treturn 1;","\t\t\t\treturn 0;","\t\t\tcase SQLTokenizer.BIGINT:","\t\t\t\tlong longValue = param1.getLong();","\t\t\t\tif(longValue \< 0)","\t\t\t\t\treturn -1;","\t\t\t\tif(longValue \> 0)","\t\t\t\t\treturn 1;","\t\t\t\treturn 0;","\t\t\tcase SQLTokenizer.MONEY:","\t\t\t\tlongValue = param1.getMoney();","\t\t\t\tif(longValue \< 0)","\t\t\t\t\treturn -1;","\t\t\t\tif(longValue \> 0)","\t\t\t\t\treturn 1;","\t\t\t\treturn 0;","\t\t\tcase SQLTokenizer.DECIMAL:","\t\t\t\treturn param1.getNumeric().getSignum();","\t\t\tcase SQLTokenizer.DOUBLE:","\t\t\t\tdouble doubleValue = param1.getDouble();","\t\t\t\tif(doubleValue \< 0)","\t\t\t\t\treturn -1;","\t\t\t\tif(doubleValue \> 0)","\t\t\t\t\treturn 1;","\t\t\t\treturn 0;","\t\t\tdefault:","\t\t\t\tthrow new Error();","\t\t}","\t}","}"],|project://smallsql/src/smallsql/database/FileIndexNode.java|:["package smallsql.database;","import java.io.*;","import java.nio.channels.FileChannel;","import java.sql.SQLException;","public class FileIndexNode extends IndexNode {","\tprivate final FileChannel file;","\tprivate long fileOffset;","\tFileIndexNode(boolean unique, char digit, FileChannel file){","\t\tsuper(unique, digit);","\t\tthis.file = file;","        fileOffset = -1;","\t}","    @Override","    protected IndexNode createIndexNode(boolean unique, char digit){","        return new FileIndexNode(unique, digit, file);","    }","\tvoid save() throws SQLException{","        StorePage storePage = new StorePage( null, -1, file, fileOffset);","        StoreImpl store = StoreImpl.createStore( null, storePage, SQLTokenizer.INSERT, fileOffset);","\t\tsave(store);","        fileOffset = store.writeFinsh(null);","\t}","\t@Override","    void saveRef(StoreImpl output) throws SQLException{","        if(fileOffset \< 0){","            save();","        }","\t\toutput.writeLong(fileOffset);","\t}","    @Override","    IndexNode loadRef( long offset ) throws SQLException{","        StorePage storePage = new StorePage( null, -1, file, offset);","        StoreImpl store = StoreImpl.createStore( null, storePage, SQLTokenizer.INSERT, fileOffset);","        MemoryStream input = new MemoryStream();","\t\tFileIndexNode node = new FileIndexNode( getUnique(), (char)input.readShort(), file );","\t\tnode.fileOffset = offset;","        node.load( store );","\t\treturn node;\t","\t}","    static FileIndexNode loadRootNode(boolean unique, FileChannel file, long offset) throws Exception{","        StorePage storePage = new StorePage( null, -1, file, offset);","        StoreImpl store = StoreImpl.createStore( null, storePage, SQLTokenizer.SELECT, offset);","        FileIndexNode node = new FileIndexNode( unique, (char)store.readShort(), file );","        node.fileOffset = offset;","        node.load( store );","        return node;    ","    }","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionCot.java|:["package smallsql.database;","final class ExpressionFunctionCot extends ExpressionFunctionReturnFloat {","    final int getFunction(){ return SQLTokenizer.COT; }","    final double getDouble() throws Exception{","\t\tif(isNull()) return 0;","        return 1/Math.tan( param1.getDouble() );","    }","}"],|project://smallsql/src/smallsql/database/StorePageMap.java|:["package smallsql.database;","class StorePageMap {","\tprivate Entry[] table;","\tprivate int size;","\tprivate int threshold;","\tStorePageMap() {","\t\tthreshold = 12;","\t\ttable = new Entry[17];","\t}","\tfinal int size() {","\t\treturn size;","\t}","\tfinal boolean isEmpty() {","\t\treturn size == 0;","\t}","\tfinal TableStorePage get(long key) {","\t\tint i = (int)(key % table.length);","\t\tEntry e = table[i]; ","\t\twhile (true) {","\t\t\tif (e == null)","\t\t\t\treturn null;","\t\t\tif (e.key == key) ","\t\t\t\treturn e.value;","\t\t\te = e.next;","\t\t}","\t}","\tfinal boolean containsKey(long key) {","\t\treturn (get(key) != null);","\t}","\tfinal TableStorePage add(long key, TableStorePage value) {","\t\tint i = (int)(key % table.length);","\t\ttable[i] = new Entry(key, value, table[i]);","\t\tif (size++ \>= threshold) ","\t\t\tresize(2 * table.length);","\t\treturn null;","\t}","\tfinal private void resize(int newCapacity) {","\t\tEntry[] newTable = new Entry[newCapacity];","\t\ttransfer(newTable);","\t\ttable = newTable;","\t\tthreshold = (int)(newCapacity * 0.75f);","\t}","\tfinal private void transfer(Entry[] newTable) {","\t\tEntry[] src = table;","\t\tint newCapacity = newTable.length;","\t\tfor (int j = 0; j \< src.length; j++) {","\t\t\tEntry e = src[j];","\t\t\tif (e != null) {","\t\t\t\tsrc[j] = null;","\t\t\t\tdo {","\t\t\t\t\tEntry next = e.next;","\t\t\t\t\te.next = null;","\t\t\t\t\tint i = (int)(e.key % newCapacity);","\t\t\t\t\tif(newTable[i] == null){","\t\t\t\t\t\tnewTable[i] = e;","\t\t\t\t\t}else{","\t\t\t\t\t\tEntry entry = newTable[i];","\t\t\t\t\t\twhile(entry.next != null) entry = entry.next;","\t\t\t\t\t\tentry.next = e;","\t\t\t\t\t}","\t\t\t\t\te = next;","\t\t\t\t} while (e != null);","\t\t\t}","\t\t}","\t}","\tfinal TableStorePage remove(long key) {","\t\tint i = (int)(key % table.length);","\t\tEntry prev = table[i];","\t\tEntry e = prev;","\t\twhile (e != null) {","\t\t\tEntry next = e.next;","\t\t\tif (e.key == key) {","\t\t\t\tsize--;","\t\t\t\tif (prev == e) ","\t\t\t\t\ttable[i] = next;","\t\t\t\telse","\t\t\t\t\tprev.next = next;","\t\t\t\treturn e.value;","\t\t\t}","\t\t\tprev = e;","\t\t\te = next;","\t\t}","\t\treturn null;","\t}","\tfinal void clear() {","\t\tEntry tab[] = table;","\t\tfor (int i = 0; i \< tab.length; i++) ","\t\t\ttab[i] = null;","\t\tsize = 0;","\t}","\tfinal boolean containsValue(TableStorePage value) {","\t\tEntry tab[] = table;","\t\t\tfor (int i = 0; i \< tab.length ; i++)","\t\t\t\tfor (Entry e = tab[i] ; e != null ; e = e.next)","\t\t\t\t\tif (value.equals(e.value))","\t\t\t\t\t\treturn true;","\t\treturn false;","\t}","\tstatic class Entry{","\t\tfinal long key;","\t\tfinal TableStorePage value;","\t\tEntry next;","\t\tEntry(long k, TableStorePage v, Entry n) { ","\t\t\tvalue = v; ","\t\t\tnext = n;","\t\t\tkey = k;","\t\t}","\t}","}"],|project://smallsql/src/smallsql/database/ForeignKey.java|:["package smallsql.database;","import java.sql.*;","class ForeignKey {","\tfinal String pkTable;","\tfinal String fkTable;","\tfinal IndexDescription pk;","\tfinal IndexDescription fk;","\tfinal int updateRule = DatabaseMetaData.importedKeyNoAction;","\tfinal int deleteRule = DatabaseMetaData.importedKeyNoAction;","\tForeignKey(String pkTable, IndexDescription pk, String fkTable, IndexDescription fk){","\t\tthis.pkTable = pkTable;","\t\tthis.fkTable = fkTable;","\t\tthis.pk = pk;","\t\tthis.fk = fk;","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionDegrees.java|:["package smallsql.database;","final class ExpressionFunctionDegrees extends ExpressionFunctionReturnFloat {","    final int getFunction(){ return SQLTokenizer.DEGREES; }","    final double getDouble() throws Exception{","\t\tif(isNull()) return 0;","        return Math.toDegrees( param1.getDouble() );","    }","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionDayOfWeek.java|:["package smallsql.database;","final class ExpressionFunctionDayOfWeek extends ExpressionFunctionReturnInt {","\tfinal int getFunction() {","\t\treturn SQLTokenizer.DAYOFWEEK;","\t}","\tfinal int getInt() throws Exception {","\t\tif(param1.isNull()) return 0;","\t\treturn DateTime.dayOfWeek(param1.getLong())+1;","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionCos.java|:["package smallsql.database;","final class ExpressionFunctionCos extends ExpressionFunctionReturnFloat {","    final int getFunction(){ return SQLTokenizer.COS; }","    final double getDouble() throws Exception{","\t\tif(isNull()) return 0;","        return Math.cos( param1.getDouble() );","    }","}"],|project://smallsql/src/smallsql/database/MutableDouble.java|:["package smallsql.database;","final class MutableDouble extends Number implements Mutable{","\tdouble value;","\tMutableDouble(double value){","\t\tthis.value = value;","\t}","\tpublic double doubleValue() {","\t\treturn value;","\t}","\tpublic float floatValue() {","\t\treturn (float)value;","\t}","\tpublic int intValue() {","\t\treturn (int)value;","\t}","\tpublic long longValue() {","\t\treturn (long)value;","\t}","\tpublic String toString(){","\t\treturn String.valueOf(value);","\t}","\tpublic Object getImmutableObject(){","\t\treturn new Double(value);","\t}","}"],|project://smallsql/src/smallsql/database/SQLToken.java|:["package smallsql.database;","class SQLToken{","\tint value;","\tint offset;  ","\tint length;  ","\tString name;","\tSQLToken (int value, int tokenStart, int tokenEnd){","\t\tthis.value  = value;","\t\tthis.offset = tokenStart;","\t\tthis.length = tokenEnd-tokenStart;","\t}","\tSQLToken (String name, int value, int tokenStart, int tokenEnd){","\t\tthis.value  = value;","\t\tthis.offset = tokenStart;","\t\tthis.length = tokenEnd-tokenStart;","\t\tthis.name   = name;","\t}","\tString getName(char[] sql){","\t\tif(name != null) return name;","\t\treturn new String( sql, offset, length );","\t}","}"],|project://smallsql/src/smallsql/database/SSCallableStatement.java|:["package smallsql.database;","import java.sql.*;","import java.math.*;","import java.util.Map;","import java.util.Calendar;","import java.net.URL;","import java.io.*;","import smallsql.database.language.Language;","public class SSCallableStatement extends SSPreparedStatement implements CallableStatement {","    private boolean wasNull;","    SSCallableStatement( SSConnection con, String sql ) throws SQLException {","        super( con, sql );","    }","    SSCallableStatement( SSConnection con, String sql, int rsType, int rsConcurrency ) throws SQLException {","        super( con, sql, rsType, rsConcurrency );","    }","    private Expression getValue(int i) throws SQLException{","        throw new java.lang.UnsupportedOperationException(\"Method getValue() not yet implemented.\");","    }","    private int findParameter( String parameterName ){","        throw new java.lang.UnsupportedOperationException(\"Method findParameter() not yet implemented.\");","    }","    public void registerOutParameter(int i, int sqlType) throws SQLException {","        throw new java.lang.UnsupportedOperationException(\"Method registerOutParameter() not yet implemented.\");","    }","    public void registerOutParameter(int i, int sqlType, int scale) throws SQLException {","        throw new java.lang.UnsupportedOperationException(\"Method registerOutParameter() not yet implemented.\");","    }","    public boolean wasNull(){","        return wasNull;","    }","    public String getString(int i) throws SQLException {","        try{","            String obj = getValue(i).getString();","            wasNull = obj == null;","            return obj;","        }catch(Exception e){","            throw SmallSQLException.createFromException( e );","        }","    }","    public boolean getBoolean(int i) throws SQLException {","        try{","            Expression expr = getValue(i);","            wasNull = expr.isNull();","            return expr.getBoolean();","        }catch(Exception e){","            throw SmallSQLException.createFromException( e );","        }","    }","    public byte getByte(int i) throws SQLException {","        return (byte)getInt( i );","    }","    public short getShort(int i) throws SQLException {","        return (byte)getInt( i );","    }","    public int getInt(int i) throws SQLException {","        try{","            Expression expr = getValue(i);","            wasNull = expr.isNull();","            return expr.getInt();","        }catch(Exception e){","            throw SmallSQLException.createFromException( e );","        }","    }","    public long getLong(int i) throws SQLException {","        try{","            Expression expr = getValue(i);","            wasNull = expr.isNull();","            return expr.getLong();","        }catch(Exception e){","            throw SmallSQLException.createFromException( e );","        }","    }","    public float getFloat(int i) throws SQLException {","        try{","            Expression expr = getValue(i);","            wasNull = expr.isNull();","            return expr.getFloat();","        }catch(Exception e){","            throw SmallSQLException.createFromException( e );","        }","    }","    public double getDouble(int i) throws SQLException {","        try{","            Expression expr = getValue(i);","            wasNull = expr.isNull();","            return expr.getLong();","        }catch(Exception e){","            throw SmallSQLException.createFromException( e );","        }","    }","    public BigDecimal getBigDecimal(int i, int scale) throws SQLException {","        try{","            MutableNumeric obj = getValue(i).getNumeric();","            wasNull = obj == null;","            if(wasNull) return null;","            return obj.toBigDecimal(scale);","        }catch(Exception e){","            throw SmallSQLException.createFromException( e );","        }","    }","    public byte[] getBytes(int i) throws SQLException {","        try{","            byte[] obj = getValue(i).getBytes();","            wasNull = obj == null;","            return obj;","        }catch(Exception e){","            throw SmallSQLException.createFromException( e );","        }","    }","    public Date getDate(int i) throws SQLException {","        try{","\t\t\tExpression expr = getValue(i);","            wasNull = expr.isNull();","\t\t\tif(wasNull) return null;","\t\t\treturn DateTime.getDate( expr.getLong() );","        }catch(Exception e){","            throw SmallSQLException.createFromException( e );","        }","    }","    public Time getTime(int i) throws SQLException {","        try{","\t\t\tExpression expr = getValue(i);","            wasNull = expr.isNull();","\t\t\tif(wasNull) return null;","\t\t\treturn DateTime.getTime( expr.getLong() );","        }catch(Exception e){","            throw SmallSQLException.createFromException( e );","        }","    }","    public Timestamp getTimestamp(int i) throws SQLException {","        try{","            Expression expr = getValue(i);","            wasNull = expr.isNull();","            if(wasNull) return null;","            return DateTime.getTimestamp( expr.getLong() );","        }catch(Exception e){","            throw SmallSQLException.createFromException( e );","        }","    }","    public Object getObject(int i) throws SQLException {","        try{","            Object obj = getValue(i).getObject();","            wasNull = obj == null;","            return obj;","        }catch(Exception e){","            throw SmallSQLException.createFromException( e );","        }","    }","    public BigDecimal getBigDecimal(int i) throws SQLException {","        try{","            MutableNumeric obj = getValue(i).getNumeric();","            wasNull = obj == null;","            if(wasNull) return null;","            return obj.toBigDecimal();","        }catch(Exception e){","            throw SmallSQLException.createFromException( e );","        }","    }","    public Ref getRef(int i) throws SQLException {","        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Method getRef() not yet implemented.\");","    }","    public Blob getBlob(int i) throws SQLException {","        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Method getBlob() not yet implemented.\");","    }","    public Clob getClob(int i) throws SQLException {","        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Method getClob() not yet implemented.\");","    }","    public Array getArray(int i) throws SQLException {","        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Method getArray() not yet implemented.\");","    }","    public Date getDate(int i, Calendar cal) throws SQLException {","        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Method getDate() not yet implemented.\");","    }","    public Time getTime(int i, Calendar cal) throws SQLException {","        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Method getTime() not yet implemented.\");","    }","    public Timestamp getTimestamp(int i, Calendar cal) throws SQLException {","        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Method getTimestamp() not yet implemented.\");","    }","    public void registerOutParameter(int i, int sqlType, String typeName) throws SQLException {","        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Method registerOutParameter() not yet implemented.\");","    }","    public void registerOutParameter(String parameterName, int sqlType) throws SQLException {","        registerOutParameter( findParameter( parameterName ), sqlType );","    }","    public void registerOutParameter(String parameterName, int sqlType, int scale) throws SQLException {","        registerOutParameter( findParameter( parameterName ), sqlType, scale );","    }","    public void registerOutParameter(String parameterName, int sqlType, String typeName) throws SQLException {","        registerOutParameter( findParameter( parameterName ), sqlType, typeName );","    }","    public URL getURL(int parameterIndex) throws SQLException {","        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Method getURL() not yet implemented.\");","    }","    public void setURL(String parameterName, URL x) throws SQLException {","        setURL( findParameter( parameterName ), x );","    }","    public void setNull(String parameterName, int sqlType) throws SQLException {","        setNull( findParameter( parameterName ), sqlType );","    }","    public void setBoolean(String parameterName, boolean x) throws SQLException {","        setBoolean( findParameter( parameterName ), x );","    }","    public void setByte(String parameterName, byte x) throws SQLException {","        setByte( findParameter( parameterName ), x );","    }","    public void setShort(String parameterName, short x) throws SQLException {","        setShort( findParameter( parameterName ), x );","    }","    public void setInt(String parameterName, int x) throws SQLException {","        setInt( findParameter( parameterName ), x );","    }","    public void setLong(String parameterName, long x) throws SQLException {","        setLong( findParameter( parameterName ), x );","    }","    public void setFloat(String parameterName, float x) throws SQLException {","        setFloat( findParameter( parameterName ), x );","    }","    public void setDouble(String parameterName, double x) throws SQLException {","        setDouble( findParameter( parameterName ), x );","    }","    public void setBigDecimal(String parameterName, BigDecimal x) throws SQLException {","        setBigDecimal( findParameter( parameterName ), x );","    }","    public void setString(String parameterName, String x) throws SQLException {","        setString( findParameter( parameterName ), x );","    }","    public void setBytes(String parameterName, byte[] x) throws SQLException {","        setBytes( findParameter( parameterName ), x );","    }","    public void setDate(String parameterName, Date x) throws SQLException {","        setDate( findParameter( parameterName ), x );","    }","    public void setTime(String parameterName, Time x) throws SQLException {","        setTime( findParameter( parameterName ), x );","    }","    public void setTimestamp(String parameterName, Timestamp x) throws SQLException {","        setTimestamp( findParameter( parameterName ), x );","    }","    public void setAsciiStream(String parameterName, InputStream x, int length) throws SQLException {","        setAsciiStream( findParameter( parameterName ), x, length );","    }","    public void setBinaryStream(String parameterName, InputStream x, int length) throws SQLException {","        setBinaryStream( findParameter( parameterName ), x, length );","    }","    public void setObject(String parameterName, Object x, int sqlType, int scale) throws SQLException {","        setObject( findParameter( parameterName ), x, sqlType, scale );","    }","    public void setObject(String parameterName, Object x, int sqlType) throws SQLException {","        setObject( findParameter( parameterName ), x, sqlType );","    }","    public void setObject(String parameterName, Object x) throws SQLException {","        setObject( findParameter( parameterName ), x );","    }","    public void setCharacterStream(String parameterName, Reader x, int length) throws SQLException {","        setCharacterStream( findParameter( parameterName ), x, length );","    }","    public void setDate(String parameterName, Date x, Calendar cal) throws SQLException {","        setDate( findParameter( parameterName ), x, cal );","    }","    public void setTime(String parameterName, Time x, Calendar cal) throws SQLException {","        setTime( findParameter( parameterName ), x, cal );","    }","    public void setTimestamp(String parameterName, Timestamp x, Calendar cal) throws SQLException {","        setTimestamp( findParameter( parameterName ), x, cal );","    }","    public void setNull(String parameterName, int sqlType, String typeName) throws SQLException {","        setNull( findParameter( parameterName ), sqlType, typeName );","    }","    public String getString(String parameterName) throws SQLException {","        return getString( findParameter( parameterName ) );","    }","    public boolean getBoolean(String parameterName) throws SQLException {","        return getBoolean( findParameter( parameterName ) );","    }","    public byte getByte(String parameterName) throws SQLException {","        return getByte( findParameter( parameterName ) );","    }","    public short getShort(String parameterName) throws SQLException {","        return getShort( findParameter( parameterName ) );","    }","    public int getInt(String parameterName) throws SQLException {","        return getInt( findParameter( parameterName ) );","    }","    public long getLong(String parameterName) throws SQLException {","        return getLong( findParameter( parameterName ) );","    }","    public float getFloat(String parameterName) throws SQLException {","        return getFloat( findParameter( parameterName ) );","    }","    public double getDouble(String parameterName) throws SQLException {","        return getDouble( findParameter( parameterName ) );","    }","    public byte[] getBytes(String parameterName) throws SQLException {","        return getBytes( findParameter( parameterName ) );","    }","    public Date getDate(String parameterName) throws SQLException {","        return getDate( findParameter( parameterName ) );","    }","    public Time getTime(String parameterName) throws SQLException {","        return getTime( findParameter( parameterName ) );","    }","    public Timestamp getTimestamp(String parameterName) throws SQLException {","        return getTimestamp( findParameter( parameterName ) );","    }","    public Object getObject(String parameterName) throws SQLException {","        return getObject( findParameter( parameterName ) );","    }","    public BigDecimal getBigDecimal(String parameterName) throws SQLException {","        return getBigDecimal( findParameter( parameterName ) );","    }","    public Ref getRef(String parameterName) throws SQLException {","        return getRef( findParameter( parameterName ) );","    }","    public Blob getBlob(String parameterName) throws SQLException {","        return getBlob( findParameter( parameterName ) );","    }","    public Clob getClob(String parameterName) throws SQLException {","        return getClob( findParameter( parameterName ) );","    }","    public Array getArray(String parameterName) throws SQLException {","        return getArray( findParameter( parameterName ) );","    }","    public Date getDate(String parameterName, Calendar cal) throws SQLException {","        return getDate( findParameter( parameterName ), cal );","    }","    public Time getTime(String parameterName, Calendar cal) throws SQLException {","        return getTime( findParameter( parameterName ), cal );","    }","    public Timestamp getTimestamp(String parameterName, Calendar cal) throws SQLException {","        return getTimestamp( findParameter( parameterName ), cal );","    }","    public URL getURL(String parameterName) throws SQLException {","        return getURL( findParameter( parameterName ) );","    }","\t@Override","\tpublic void setRowId(int parameterIndex, RowId x) throws SQLException {","\t}","\t@Override","\tpublic void setNString(int parameterIndex, String value)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void setNCharacterStream(int parameterIndex, Reader value,","\t\t\tlong length) throws SQLException {","\t}","\t@Override","\tpublic void setNClob(int parameterIndex, NClob value) throws SQLException {","\t}","\t@Override","\tpublic void setClob(int parameterIndex, Reader reader, long length)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void setBlob(int parameterIndex, InputStream inputStream, long length)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void setNClob(int parameterIndex, Reader reader, long length)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void setSQLXML(int parameterIndex, SQLXML xmlObject)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void setAsciiStream(int parameterIndex, InputStream x, long length)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void setBinaryStream(int parameterIndex, InputStream x, long length)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void setCharacterStream(int parameterIndex, Reader reader,","\t\t\tlong length) throws SQLException {","\t}","\t@Override","\tpublic void setAsciiStream(int parameterIndex, InputStream x)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void setBinaryStream(int parameterIndex, InputStream x)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void setCharacterStream(int parameterIndex, Reader reader)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void setNCharacterStream(int parameterIndex, Reader value)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void setClob(int parameterIndex, Reader reader) throws SQLException {","\t}","\t@Override","\tpublic void setBlob(int parameterIndex, InputStream inputStream)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void setNClob(int parameterIndex, Reader reader) throws SQLException {","\t}","\t@Override","\tpublic boolean isClosed() throws SQLException {","\t\treturn false;","\t}","\t@Override","\tpublic void setPoolable(boolean poolable) throws SQLException {","\t}","\t@Override","\tpublic boolean isPoolable() throws SQLException {","\t\treturn false;","\t}","\t@Override","\tpublic \<T\> T unwrap(Class\<T\> iface) throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic boolean isWrapperFor(Class\<?\> iface) throws SQLException {","\t\treturn false;","\t}","\t@Override","\tpublic Object getObject(int parameterIndex, Map\<String, Class\<?\>\> map)","\t\t\tthrows SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic Object getObject(String parameterName, Map\<String, Class\<?\>\> map)","\t\t\tthrows SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic RowId getRowId(int parameterIndex) throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic RowId getRowId(String parameterName) throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic void setRowId(String parameterName, RowId x) throws SQLException {","\t}","\t@Override","\tpublic void setNString(String parameterName, String value)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void setNCharacterStream(String parameterName, Reader value,","\t\t\tlong length) throws SQLException {","\t}","\t@Override","\tpublic void setNClob(String parameterName, NClob value) throws SQLException {","\t}","\t@Override","\tpublic void setClob(String parameterName, Reader reader, long length)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void setBlob(String parameterName, InputStream inputStream,","\t\t\tlong length) throws SQLException {","\t}","\t@Override","\tpublic void setNClob(String parameterName, Reader reader, long length)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic NClob getNClob(int parameterIndex) throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic NClob getNClob(String parameterName) throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic void setSQLXML(String parameterName, SQLXML xmlObject)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic SQLXML getSQLXML(int parameterIndex) throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic SQLXML getSQLXML(String parameterName) throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic String getNString(int parameterIndex) throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic String getNString(String parameterName) throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic Reader getNCharacterStream(int parameterIndex) throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic Reader getNCharacterStream(String parameterName) throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic Reader getCharacterStream(int parameterIndex) throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic Reader getCharacterStream(String parameterName) throws SQLException {","\t\treturn null;","\t}","\t@Override","\tpublic void setBlob(String parameterName, Blob x) throws SQLException {","\t}","\t@Override","\tpublic void setClob(String parameterName, Clob x) throws SQLException {","\t}","\t@Override","\tpublic void setAsciiStream(String parameterName, InputStream x, long length)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void setBinaryStream(String parameterName, InputStream x, long length)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void setCharacterStream(String parameterName, Reader reader,","\t\t\tlong length) throws SQLException {","\t}","\t@Override","\tpublic void setAsciiStream(String parameterName, InputStream x)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void setBinaryStream(String parameterName, InputStream x)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void setCharacterStream(String parameterName, Reader reader)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void setNCharacterStream(String parameterName, Reader value)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void setClob(String parameterName, Reader reader)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void setBlob(String parameterName, InputStream inputStream)","\t\t\tthrows SQLException {","\t}","\t@Override","\tpublic void setNClob(String parameterName, Reader reader)","\t\t\tthrows SQLException {","\t}","}"],|project://smallsql/src/smallsql/database/ExpressionFunctionRepeat.java|:["package smallsql.database;","import java.io.ByteArrayOutputStream;","public class ExpressionFunctionRepeat extends ExpressionFunctionReturnP1StringAndBinary {","\tfinal int getFunction() {","\t\treturn SQLTokenizer.REPEAT;","\t}","\tfinal byte[] getBytes() throws Exception{","        if(isNull()) return null;","        byte[] bytes = param1.getBytes();","        int count  = param2.getInt();","        ByteArrayOutputStream buffer = new ByteArrayOutputStream();","        for(int i=0; i\<count; i++){","            buffer.write(bytes);","        }","        return buffer.toByteArray();","\t}","\tfinal String getString() throws Exception {","\t\tif(isNull()) return null;","\t\tString str = param1.getString();","        int count  = param2.getInt();","        StringBuffer buffer = new StringBuffer();","        for(int i=0; i\<count; i++){","            buffer.append(str);","        }","\t\treturn buffer.toString();","\t}","    int getPrecision() {","        return SSResultSetMetaData.getDataTypePrecision( getDataType(), -1 );","    }","}"]),186,39497,24680,5662>)