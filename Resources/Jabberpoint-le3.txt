results(|project://Jabberpoint-le3|,<<<52.67423015,22.04213938,12.96596434,12.31766613>,score("Very Low","--",1)>,<<100.0,0.0,0.0,0.0>,score("Very High","++",5)>,76,8.118421053,1.592105263,[<|project://Jabberpoint-le3/src/AboutBox.java|(430,636,<13,2>,<27,3>),"show",14,1>,<|project://Jabberpoint-le3/src/Accessor.java|(632,83,<19,2>,<21,3>),"getDemoAccessor",3,1>,<|project://Jabberpoint-le3/src/SlideViewerComponent.java|(1137,212,<27,2>,<31,3>),"SlideViewerComponent",5,1>,<|project://Jabberpoint-le3/src/MenuController.java|(2696,87,<68,6>,<70,7>),"actionPerformed",3,1>,<|project://Jabberpoint-le3/src/JabberPoint.java|(707,632,<19,2>,<36,3>),"main",17,3>,<|project://Jabberpoint-le3/src/SlideItem.java|(847,68,<28,0>,<31,3>),"getLevel",3,1>,<|project://Jabberpoint-le3/src/Presentation.java|(2291,218,<72,0>,<77,3>),"nextSlide",5,2>,<|project://Jabberpoint-le3/src/Slide.java|(2356,721,<84,0>,<99,3>),"draw",14,2>,<|project://Jabberpoint-le3/src/Presentation.java|(1828,258,<57,0>,<63,3>),"setSlideNumber",6,2>,<|project://Jabberpoint-le3/src/Presentation.java|(1306,148,<34,0>,<38,3>),"getSize",3,1>,<|project://Jabberpoint-le3/src/BitmapItem.java|(1839,404,<56,0>,<62,3>),"draw",6,1>,<|project://Jabberpoint-le3/src/SlideItem.java|(804,39,<24,2>,<26,3>),"SlideItem",3,1>,<|project://Jabberpoint-le3/src/BitmapItem.java|(2249,95,<64,2>,<66,3>),"toString",3,1>,<|project://Jabberpoint-le3/src/Presentation.java|(3022,107,<99,0>,<102,3>),"getCurrentSlide",3,1>,<|project://Jabberpoint-le3/src/MenuController.java|(2964,91,<76,6>,<78,7>),"actionPerformed",3,1>,<|project://Jabberpoint-le3/src/TextItem.java|(2217,752,<69,0>,<86,3>),"getBoundingBox",17,4>,<|project://Jabberpoint-le3/src/DemoPresentation.java|(1829,145,<47,2>,<49,3>),"saveFile",3,1>,<|project://Jabberpoint-le3/src/MenuController.java|(1159,2824,<28,2>,<103,3>),"MenuController",76,3>,<|project://Jabberpoint-le3/src/Slide.java|(3081,214,<101,0>,<104,3>),"getScale",3,1>,<|project://Jabberpoint-le3/src/TextItem.java|(1919,294,<62,0>,<67,3>),"getAttributedString",5,1>,<|project://Jabberpoint-le3/src/MenuController.java|(3812,88,<98,6>,<100,7>),"actionPerformed",3,1>,<|project://Jabberpoint-le3/src/TextItem.java|(1827,88,<57,0>,<60,3>),"getText",3,2>,<|project://Jabberpoint-le3/src/MenuController.java|(2232,312,<56,6>,<63,7>),"actionPerformed",8,2>,<|project://Jabberpoint-le3/src/BitmapItem.java|(1310,73,<39,0>,<42,3>),"BitmapItem",3,1>,<|project://Jabberpoint-le3/src/MenuController.java|(1437,437,<35,6>,<45,7>),"actionPerformed",11,2>,<|project://Jabberpoint-le3/src/Slide.java|(1564,103,<49,0>,<52,3>),"append",3,1>,<|project://Jabberpoint-le3/src/Style.java|(1808,98,<50,2>,<52,3>),"toString",3,1>,<|project://Jabberpoint-le3/src/SlideViewerFrame.java|(590,286,<16,2>,<21,3>),"SlideViewerFrame",6,1>,<|project://Jabberpoint-le3/src/Slide.java|(1122,98,<31,1>,<36,2>),"test",6,1>,<|project://Jabberpoint-le3/src/Slide.java|(2163,96,<74,0>,<77,3>),"getSlideItems",3,1>,<|project://Jabberpoint-le3/src/TextItem.java|(1044,144,<31,0>,<35,3>),"TextItem",4,1>,<|project://Jabberpoint-le3/src/Presentation.java|(1086,74,<24,2>,<27,3>),"Presentation",4,1>,<|project://Jabberpoint-le3/src/TextItem.java|(3622,616,<106,2>,<118,3>),"getLayouts",13,2>,<|project://Jabberpoint-le3/src/Presentation.java|(1460,54,<40,2>,<42,3>),"getTitle",3,1>,<|project://Jabberpoint-le3/src/Slide.java|(1866,156,<64,0>,<67,3>),"append",3,1>,<|project://Jabberpoint-le3/src/Presentation.java|(2814,204,<91,0>,<97,3>),"getSlide",6,3>,<|project://Jabberpoint-le3/src/SlideViewerComponent.java|(1475,208,<37,2>,<45,3>),"update",9,2>,<|project://Jabberpoint-le3/src/Accessor.java|(721,24,<23,2>,<24,3>),"Accessor",2,1>,<|project://Jabberpoint-le3/src/XMLAccessor.java|(1844,630,<52,2>,<74,3>),"loadSlideItem",23,5>,<|project://Jabberpoint-le3/src/DemoPresentation.java|(314,1509,<10,2>,<45,3>),"loadFile",34,1>,<|project://Jabberpoint-le3/src/XMLAccessor.java|(2477,1881,<75,1>,<120,3>),"saveFile",46,5>,<|project://Jabberpoint-le3/src/Slide.java|(2026,133,<69,0>,<72,3>),"getSlideItem",3,1>,<|project://Jabberpoint-le3/src/Presentation.java|(2090,197,<65,0>,<70,3>),"prevSlide",5,2>,<|project://Jabberpoint-le3/src/TextItem.java|(1192,631,<37,0>,<55,3>),"TextItem",17,1>,<|project://Jabberpoint-le3/src/Presentation.java|(1585,126,<48,2>,<50,3>),"setShowView",3,1>,<|project://Jabberpoint-le3/src/Presentation.java|(1166,136,<29,2>,<32,3>),"Presentation",4,1>,<|project://Jabberpoint-le3/src/MenuController.java|(1996,114,<49,6>,<52,7>),"actionPerformed",4,1>,<|project://Jabberpoint-le3/src/SlideViewerFrame.java|(880,578,<23,0>,<35,3>),"setupWindow",12,1>,<|project://Jabberpoint-le3/src/Slide.java|(1671,83,<54,0>,<57,3>),"getTitle",3,1>,<|project://Jabberpoint-le3/src/Style.java|(1912,86,<54,2>,<56,3>),"getFont",3,1>,<|project://Jabberpoint-le3/src/XMLAccessor.java|(700,1138,<26,2>,<50,3>),"loadFile",25,4>,<|project://Jabberpoint-le3/src/Presentation.java|(2513,185,<79,0>,<84,3>),"clear",5,1>,<|project://Jabberpoint-le3/src/MenuController.java|(3177,91,<82,6>,<84,7>),"actionPerformed",3,1>,<|project://Jabberpoint-le3/src/Slide.java|(1758,104,<59,0>,<62,3>),"setTitle",3,1>,<|project://Jabberpoint-le3/src/BitmapItem.java|(1387,96,<44,0>,<47,3>),"getName",3,1>,<|project://Jabberpoint-le3/src/BitmapItem.java|(1487,348,<49,0>,<54,3>),"getBoundingBox",5,1>,<|project://Jabberpoint-le3/src/KeyController.java|(852,489,<23,2>,<43,3>),"keyPressed",21,10>,<|project://Jabberpoint-le3/src/Style.java|(1589,213,<43,2>,<48,3>),"Style",6,1>,<|project://Jabberpoint-le3/src/Presentation.java|(1715,109,<52,0>,<55,3>),"getSlideNumber",3,1>,<|project://Jabberpoint-le3/src/TextItem.java|(2973,643,<88,0>,<104,3>),"draw",16,4>,<|project://Jabberpoint-le3/src/TextItem.java|(4244,87,<120,2>,<122,3>),"toString",3,1>,<|project://Jabberpoint-le3/src/Presentation.java|(3135,51,<104,2>,<106,3>),"exit",3,1>,<|project://Jabberpoint-le3/src/Style.java|(906,522,<27,2>,<34,3>),"createStyles",8,1>,<|project://Jabberpoint-le3/src/Style.java|(1434,149,<36,2>,<41,3>),"getStyle",6,2>,<|project://Jabberpoint-le3/src/Presentation.java|(2702,108,<86,0>,<89,3>),"append",3,1>,<|project://Jabberpoint-le3/src/MenuController.java|(3987,141,<105,0>,<108,3>),"mkMenuItem",3,1>,<|project://Jabberpoint-le3/src/KeyController.java|(780,66,<19,2>,<21,3>),"KeyController",3,1>,<|project://Jabberpoint-le3/src/BitmapItem.java|(944,362,<27,0>,<37,3>),"BitmapItem",10,2>,<|project://Jabberpoint-le3/src/SlideViewerFrame.java|(1050,69,<26,6>,<28,7>),"windowClosing",3,1>,<|project://Jabberpoint-le3/src/MenuController.java|(3390,240,<88,6>,<92,7>),"actionPerformed",5,1>,<|project://Jabberpoint-le3/src/SlideViewerComponent.java|(1687,528,<47,0>,<60,3>),"paintComponent",13,3>,<|project://Jabberpoint-le3/src/SlideViewerComponent.java|(1355,114,<33,2>,<35,3>),"getPreferredSize",3,1>,<|project://Jabberpoint-le3/src/SlideItem.java|(748,50,<20,2>,<22,3>),"SlideItem",3,1>,<|project://Jabberpoint-le3/src/Presentation.java|(1520,59,<44,2>,<46,3>),"setTitle",3,1>,<|project://Jabberpoint-le3/src/Slide.java|(2263,89,<79,0>,<82,3>),"getSize",3,1>,<|project://Jabberpoint-le3/src/Slide.java|(1228,332,<38,2>,<47,3>),"Slide",10,1>],10,76,617>,<score("High","+",4),3.949224260>,<score("Very Low","--",1),3,236.3333333>,<score("Very High","++",5),(|project://Jabberpoint-le3/src/BitmapItem.java|:["import java.awt.Rectangle;","import java.awt.Graphics;","import java.awt.image.BufferedImage;","import java.awt.image.ImageObserver;","import java.io.File;","import javax.imageio.ImageIO;","import java.io.IOException;","public class BitmapItem extends SlideItem {","  private BufferedImage bufferedImage;","  private String imageName;","  public BitmapItem(int level, String name) {","    super(level);","    imageName = name;","    try {","      bufferedImage = ImageIO.read(new File(imageName));","    }","    catch (IOException e) {","      System.err.println(\"Bestand \" + imageName + \" niet gevonden\") ;","    }","  }","  public BitmapItem() {","    this(0, null);","  }","  public String getName() {","    return imageName;","  }","  public Rectangle getBoundingBox(Graphics g, ImageObserver observer, float scale, Style myStyle) {","    return new Rectangle((int) (myStyle.indent * scale), 0,","\t(int) (bufferedImage.getWidth(observer) * scale),","\t((int) (myStyle.leading * scale)) + (int) (bufferedImage.getHeight(observer) * scale));","  }","  public void draw(int x, int y, float scale, Graphics g, Style myStyle, ImageObserver observer) {","    int width = x + (int) (myStyle.indent * scale);","    int height = y + (int) (myStyle.leading * scale);","    g.drawImage(bufferedImage, width, height,(int) (bufferedImage.getWidth(observer)*scale),","                (int) (bufferedImage.getHeight(observer)*scale), observer);","  }","  public String toString() {","    return \"BitmapItem[\" + getLevel() + \",\" + imageName + \"]\";","  }","}"],|project://Jabberpoint-le3/src/TextItem.java|:["import java.awt.Rectangle;","import java.awt.Graphics;","import java.awt.Graphics2D;","import java.awt.Point;","import java.awt.font.TextLayout;","import java.awt.font.TextAttribute;","import java.awt.font.LineBreakMeasurer;","import java.awt.font.FontRenderContext;","import java.awt.geom.Rectangle2D;","import java.awt.image.ImageObserver;","import java.text.AttributedString;","import java.util.List;","import java.util.Iterator;","import java.util.ArrayList;","public class TextItem extends SlideItem {","  private String text;","  public TextItem(int level, String string) {","    super(level);","    text = string;","  }","  public TextItem() {","    this(0, \"NO TEXT GIVEN\");","    System.out.println(\"HelloWorld\");","    System.out.println(\"HelloWorld\");","    System.out.println(\"HelloWorld\");","    System.out.println(\"HelloWorld\");","    System.out.println(\"HelloWorld\");","    System.out.println(\"HelloWorld\");","    System.out.println(\"HelloWorld\");","    System.out.println(\"HelloWorld\");","    System.out.println(\"HelloWorld\");","    System.out.println(\"HelloWorld\");","    System.out.println(\"HelloWorld\");","    System.out.println(\"HelloWorld\");","    System.out.println(\"HelloWorld\");","    System.out.println(\"HelloWorld\");","  }","  public String getText() {","    return text == null ? \"\" : text;","  }","  public AttributedString getAttributedString(Style style, float scale) {","    AttributedString attrStr = new AttributedString(getText());","    attrStr.addAttribute(TextAttribute.FONT, style.getFont(scale), 0, text.length());","    return attrStr;","  }","public Rectangle getBoundingBox(Graphics g, ImageObserver observer, float scale, Style myStyle) {","    List layouts = getLayouts(g, myStyle, scale);","    int xsize = 0, ysize = (int) (myStyle.leading * scale);","    Iterator iterator = layouts.iterator();","    while (iterator.hasNext()) {","      TextLayout layout = (TextLayout) iterator.next();","      Rectangle2D bounds = layout.getBounds();","      if (bounds.getWidth() \> xsize) {","        xsize = (int) bounds.getWidth();","      }","      if (bounds.getHeight() \> 0) {","        ysize += bounds.getHeight();","      }","      ysize += layout.getLeading() + layout.getDescent();","    }","    return new Rectangle((int) (myStyle.indent*scale), 0, xsize, ysize );","  }","  public void draw(int x, int y, float scale, Graphics g, Style myStyle, ImageObserver o) {","    if (text == null || text.length() == 0) {","      return;","    }","    List layouts = getLayouts(g, myStyle, scale);","    Point pen = new Point(x + (int)(myStyle.indent * scale), y + (int) (myStyle.leading * scale));","    Graphics2D g2d = (Graphics2D)g;","    g2d.setColor(myStyle.color);","    Iterator it = layouts.iterator();","    while (it.hasNext()) {","      TextLayout layout = (TextLayout) it.next();","      pen.y += layout.getAscent();","      layout.draw(g2d, pen.x, pen.y);","      pen.y += layout.getDescent();","    }","  }","  private List getLayouts(Graphics g, Style s, float scale) {","    List\<TextLayout\> layouts = new ArrayList\<TextLayout\>();","    AttributedString attrStr = getAttributedString(s, scale);","    Graphics2D g2d = (Graphics2D) g;","    FontRenderContext frc = g2d.getFontRenderContext();","    LineBreakMeasurer measurer = new LineBreakMeasurer(attrStr.getIterator(), frc);","    float wrappingWidth = (Slide.referenceWidth - s.indent) * scale;","    while (measurer.getPosition() \< getText().length()) {","      TextLayout layout = measurer.nextLayout(wrappingWidth);","      layouts.add(layout);","    }","    return layouts;","  }","  public String toString() {","    return \"TextItem[\" + getLevel()+\",\"+getText()+\"]\";","  }","}"],|project://Jabberpoint-le3/src/AboutBox.java|:["import java.awt.Frame;","import javax.swing.JOptionPane;","public class AboutBox {","  public static void show(Frame parent) {","    JOptionPane.showMessageDialog(parent,","\t\"JabberPoint is a primitive slide-show program in Java(tm). It\\n\" +","\t\"is freely copyable as long as you keep this notice and\\n\" +","\t\"the splash screen intact.\\n\" +","\t\"Copyright (c) 1995-1997 by Ian F. Darwin, ian@darwinsys.com.\\n\" +","\t\"Adapted by Gert Florijn (version 1.1) and \" +","\t\"Sylvia Stuurman (version 1.2 and 1.3) for the Open\" +","\t\"University of the Netherlands, 2002 -- 2007.\" +","\t\"Author\'s version available from http://www.darwinsys.com/\",","\t\"About JabberPoint\",","\tJOptionPane.INFORMATION_MESSAGE","\t);","  }","}"],|project://Jabberpoint-le3/src/MenuController.java|:["import java.awt.MenuBar;","import java.awt.Frame;","import java.awt.Menu;","import java.awt.MenuItem;","import java.awt.MenuShortcut;","import java.awt.event.ActionListener;","import java.awt.event.ActionEvent;","import java.io.IOException;","import javax.swing.JOptionPane;","public class MenuController extends MenuBar {","\tprivate static final long serialVersionUID = 227L;","  private Frame parent; ","  private Presentation presentation; ","  public MenuController(Frame frame, Presentation pres) {","    parent = frame;","    presentation = pres;","    MenuItem menuItem;","    Menu fileMenu = new Menu(\"File\");","    fileMenu.add(menuItem = mkMenuItem(\"Open\"));","    menuItem.addActionListener(new ActionListener() {","      public void actionPerformed(ActionEvent actionEvent) {","        presentation.clear();","        Accessor xmlAccessor = new XMLAccessor();","        try {","          xmlAccessor.loadFile(presentation, \"test.xml\");","          presentation.setSlideNumber(0);","        } catch (IOException exc) {","          JOptionPane.showMessageDialog(parent, \"IOException: \" + exc, \"Load Error\", JOptionPane.ERROR_MESSAGE);","\t}","\tparent.repaint();","      }","    } );","    fileMenu.add(menuItem = mkMenuItem(\"New\"));","    menuItem.addActionListener(new ActionListener() {","      public void actionPerformed(ActionEvent actionEvent) {","        presentation.clear();","\tparent.repaint();","      }","    });","    fileMenu.add(menuItem = mkMenuItem(\"Save\"));","    menuItem.addActionListener(new ActionListener() {","      public void actionPerformed(ActionEvent e) {","\tAccessor xmlAccessor = new XMLAccessor();","\ttry {","          xmlAccessor.saveFile(presentation, \"dump.xml\");","\t} catch (IOException exc) {","          JOptionPane.showMessageDialog(parent, \"IOException: \" + exc, \"Save Error\", JOptionPane.ERROR_MESSAGE);","\t}","      }","    });","    fileMenu.addSeparator();","    fileMenu.add(menuItem = mkMenuItem(\"Exit\"));","    menuItem.addActionListener(new ActionListener() {","      public void actionPerformed(ActionEvent actionEvent) {","\tpresentation.exit(0);","      }","    });","    add(fileMenu);","    Menu viewMenu = new Menu(\"View\");","    viewMenu.add(menuItem = mkMenuItem(\"Next\"));","    menuItem.addActionListener(new ActionListener() {","      public void actionPerformed(ActionEvent actionEvent) {","\tpresentation.nextSlide();","      }","    });","    viewMenu.add(menuItem = mkMenuItem(\"Prev\"));","    menuItem.addActionListener(new ActionListener() {","      public void actionPerformed(ActionEvent actionEvent) {","\tpresentation.prevSlide();","      }","    });","    viewMenu.add(menuItem = mkMenuItem(\"Goto\"));","    menuItem.addActionListener(new ActionListener() {","      public void actionPerformed(ActionEvent actionEvent) {","\tString pageNumberStr = JOptionPane.showInputDialog((Object)\"Page number?\");","\tint pageNumber = Integer.parseInt(pageNumberStr);","\tpresentation.setSlideNumber(pageNumber - 1);","      }","    });","    add(viewMenu);","    Menu helpMenu = new Menu(\"Help\");","    helpMenu.add(menuItem = mkMenuItem(\"About\"));","    menuItem.addActionListener(new ActionListener() {","      public void actionPerformed(ActionEvent actionEvent) {","\tAboutBox.show(parent);","      }","    });","    setHelpMenu(helpMenu);\t\t","  }","  public MenuItem mkMenuItem(String name) {","    return new MenuItem(name, new MenuShortcut(name.charAt(0)));","  }","}"],|project://Jabberpoint-le3/src/JabberPoint.java|:["import javax.swing.JOptionPane;","import java.io.IOException;","public class JabberPoint {","  public static void main(String argv[]) {","    Style.createStyles();","    Presentation presentation = new Presentation();","    new SlideViewerFrame(\"JabberPoint 1.4 - OU version\", presentation);","    try {","      if (argv.length == 0) { ","        Accessor.getDemoAccessor().loadFile(presentation, \"\");","      } else {","        new XMLAccessor().loadFile(presentation, argv[0]);","      }","      presentation.setSlideNumber(0);","    } catch (IOException ex) {","\tJOptionPane.showMessageDialog(null,","\t\t\"IO Error: \" + ex, \"JabberPoint Error\",","\t\tJOptionPane.ERROR_MESSAGE);","    }","  }","}"],|project://Jabberpoint-le3/src/SlideItem.java|:["import java.awt.Rectangle;","import java.awt.Graphics;","import java.awt.image.ImageObserver;","public abstract class SlideItem {","  private int level = 0; ","  public SlideItem(int lev) {","    level = lev;","  }","  public SlideItem() {","    this(0);","  }","  public int getLevel() {","    return level;","  }","  public abstract Rectangle getBoundingBox(Graphics g, ImageObserver observer, float scale, Style style);","  public abstract void draw(int x, int y, float scale, Graphics g, Style style, ImageObserver observer);","}"],|project://Jabberpoint-le3/src/Accessor.java|:["import java.io.IOException;","public abstract class Accessor {","  public static final String DEMO_NAME = \"Demonstratie presentatie\";","  public static final String DEFAULT_EXTENSION = \".xml\";","  public static Accessor getDemoAccessor() {","    return new DemoPresentation();","  }","  public Accessor() {","  }","  abstract public void loadFile(Presentation p, String fn) throws IOException;","  abstract public void saveFile(Presentation p, String fn) throws IOException;","}"],|project://Jabberpoint-le3/src/KeyController.java|:["import java.awt.event.KeyEvent;","import java.awt.event.KeyAdapter;","public class KeyController extends KeyAdapter {","  private Presentation presentation; ","  public KeyController(Presentation p) {","    presentation = p;","  }","  public void keyPressed(KeyEvent keyEvent) {","    switch(keyEvent.getKeyCode()) {","      case KeyEvent.VK_PAGE_DOWN:","      case KeyEvent.VK_DOWN:","      case KeyEvent.VK_ENTER:","      case \'+\':","        presentation.nextSlide();","\tbreak;","      case KeyEvent.VK_PAGE_UP:","      case KeyEvent.VK_UP:","      case \'-\':","\tpresentation.prevSlide();","\tbreak;","      case \'q\':","      case \'Q\':","\tSystem.exit(0);","\tbreak; ","      default:","\tbreak;","    }","  }","}"],|project://Jabberpoint-le3/src/DemoPresentation.java|:["class DemoPresentation extends Accessor {","  public void loadFile(Presentation presentation, String unusedFilename) {","    Slide slide;","    slide = new Slide();","    slide.setTitle(\"JabberPoint\");","    slide.append(1, \"Het Java Presentatie Tool\");","    slide.append(2, \"Copyright (c) 1996-2000: Ian Darwin\");","    slide.append(2, \"Copyright (c) 2000-2004:\");","    slide.append(2, \"Gert Florijn en Sylvia Stuurman\");","    slide.append(4, \"JabberPoint aanroepen zonder bestandsnaam\");","    slide.append(4, \"laat deze presentatie zien\");","    slide.append(1, \"Navigeren:\");","    slide.append(3, \"Volgende slide: PgDn of Enter\");","    slide.append(3, \"Vorige slide: PgUp of up-arrow\");","    slide.append(3, \"Stoppen: q or Q\");","    presentation.append(slide);","    slide = new Slide();","    slide.setTitle(\"Demonstratie van levels en stijlen\");","    slide.append(1, \"Level 1\");","    slide.append(2, \"Level 2\");","    slide.append(1, \"Nogmaals level 1\");","    slide.append(1, \"Level 1 heeft stijl nummer 1\");","    slide.append(2, \"Level 2 heeft stijl nummer 2\");","    slide.append(3, \"Zo ziet level 3 er uit\");","    slide.append(4, \"En dit is level 4\");","    presentation.append(slide);","    slide = new Slide();","    slide.setTitle(\"De derde slide\");","    slide.append(1, \"Om een nieuwe presentatie te openen,\");","    slide.append(2, \"gebruik File-\>Open uit het menu.\");","    slide.append(1, \" \");","    slide.append(1, \"Dit is het einde van de presentatie.\");","    slide.append(new BitmapItem(1, \"JabberPoint.jpg\"));","    presentation.append(slide);","  }","  public void saveFile(Presentation presentation, String unusedFilename) {","    throw new IllegalStateException(\"Save As-\>Demo! aangeroepen\");","  }","}"],|project://Jabberpoint-le3/src/Style.java|:["import java.awt.Color;","import java.awt.Font;","public class Style {","  private static Style[] styles; ","  int indent;","  Color color;","  Font font;","  int fontSize;","  int leading;","  public static void createStyles() {","    styles = new Style[5];     ","    styles[0] = new Style(0, Color.red,   48, 20);\t","    styles[1] = new Style(20, Color.blue,  40, 10);\t","    styles[2] = new Style(50, Color.black, 36, 10);\t","    styles[3] = new Style(70, Color.black, 30, 10);\t","    styles[4] = new Style(90, Color.black, 24, 10);\t","  }","  public static Style getStyle(int level) {","    if (level \>= styles.length) {","      level = styles.length - 1;","    }","    return styles[level];","  }","  public Style(int indent, Color color, int points, int leading) {","    this.indent = indent;","    this.color = color;","    font = new Font(\"Helvetica\", Font.BOLD, fontSize=points);","    this.leading = leading;","  }","  public String toString() {","    return \"[\"+indent+\",\"+color+\"; \"+fontSize+\" on \"+leading+\"]\";","  }","  public Font getFont(float scale) {","    return font.deriveFont(fontSize * scale);","  }","}"],|project://Jabberpoint-le3/src/Slide.java|:["import static org.junit.Assert.assertEquals;","import static org.junit.Assert.assertFalse;","import static org.junit.Assert.assertTrue;","import java.awt.Graphics;","import java.awt.Rectangle;","import java.awt.image.ImageObserver;","import java.util.Vector;","import org.junit.Test;","public class Slide {","  public final static int referenceWidth = 800;","  public final static int referenceHeight = 600;","  protected String title; ","  protected Vector\<SlideItem\> items; ","\t@Test","\tpublic void test() {","\t\tassertEquals(1,1);","\t\tassertTrue(true);","\t\tassertFalse(false);","\t}","  public Slide() {","    items = new Vector\<SlideItem\>();","    System.out.println(\"HelloWorld\");","    System.out.println(\"HelloWorld\");","    System.out.println(\"HelloWorld\");","    System.out.println(\"HelloWorld\");","    System.out.println(\"HelloWorld\");","    System.out.println(\"HelloWorld\");","    System.out.println(\"HelloWorld\");","  }","  public void append(SlideItem anItem) {","    items.addElement(anItem);","  }","  public String getTitle() {","    return title;","  }","  public void setTitle(String newTitle) {","    title = newTitle;","  }","  public void append(int level, String message) {","    append(new TextItem(level, message));","  }","  public SlideItem getSlideItem(int number) {","    return (SlideItem)items.elementAt(number);","  }","  public Vector getSlideItems() {","    return items;","  }","  public int getSize() {","    return items.size();","  }","  public void draw(Graphics g, Rectangle area, ImageObserver view) {","    float scale = getScale(area);","    int y = area.y;","    SlideItem slideItem = new TextItem(0, getTitle());","    Style style = Style.getStyle(slideItem.getLevel());","    slideItem.draw(area.x, y, scale, g, style, view);","    y += slideItem.getBoundingBox(g, view, scale, style).height;","    for (int number=0; number\<getSize(); number++) {","      slideItem = (SlideItem)getSlideItems().elementAt(number);","      style = Style.getStyle(slideItem.getLevel());","      slideItem.draw(area.x, y, scale, g, style, view);","      y += slideItem.getBoundingBox(g, view, scale, style).height;","    }","  }","  private float getScale(Rectangle area) {","    return Math.min(((float)area.width) / ((float)referenceWidth), ((float)area.height) / ((float)referenceHeight));","  }","}"],|project://Jabberpoint-le3/src/Presentation.java|:["import java.util.ArrayList;","public class Presentation {","  private String showTitle; ","  private ArrayList\<Slide\> showList = null; ","  private int currentSlideNumber = 0; ","  private SlideViewerComponent slideViewComponent = null; ","  public Presentation() {","    slideViewComponent = null;","    clear();","  }","  public Presentation(SlideViewerComponent slideViewerComponent) {","    this.slideViewComponent = slideViewerComponent;","    clear();","  }","  public int getSize() {","    return showList.size();","  }","  public String getTitle() {","    return showTitle;","  }","  public void setTitle(String nt) {","    showTitle = nt;","  }","  public void setShowView(SlideViewerComponent slideViewerComponent) {","    this.slideViewComponent = slideViewerComponent;","  }","  public int getSlideNumber() {","    return currentSlideNumber;","  }","  public void setSlideNumber(int number) {","    currentSlideNumber = number;","    if (slideViewComponent != null) {","      slideViewComponent.update(this, getCurrentSlide());","    }","  }","  public void prevSlide() {","    if (currentSlideNumber \> 0) {","      setSlideNumber(currentSlideNumber - 1);","    }","  }","  public void nextSlide() {","    if (currentSlideNumber \< (showList.size()-1)) {","      setSlideNumber(currentSlideNumber + 1);","    }","  }","  void clear() {","    showList = new ArrayList\<Slide\>();","    setTitle(\"New presentation\");","    setSlideNumber(-1);","  }","  public void append(Slide slide) {","    showList.add(slide);","  }","  public Slide getSlide(int number) {","    if (number \< 0 || number \>= getSize()){","        return null;","    }","    return (Slide)showList.get(number);","  }","  public Slide getCurrentSlide() {","    return getSlide(currentSlideNumber);","  }","  public void exit(int n) {","    System.exit(n);","  }","}"],|project://Jabberpoint-le3/src/SlideViewerComponent.java|:["import java.awt.Color;","import java.awt.Font;","import java.awt.Dimension;","import java.awt.Graphics;","import java.awt.Rectangle;","import javax.swing.JComponent;","public class SlideViewerComponent extends JComponent {","\tprivate static final long serialVersionUID = 227L;","  private Slide slide; ","  private Font labelFont = null; ","  private Presentation presentation = null; ","  public SlideViewerComponent(Presentation pres) {","    setBackground(Color.white); ","    presentation = pres;","    labelFont = new Font(\"Dialog\", Font.BOLD, 10);","  }","  public Dimension getPreferredSize() {","    return new Dimension(Slide.referenceWidth, Slide.referenceHeight);","  }","  public void update(Presentation presentation, Slide data) {","    if (data == null) {","      repaint();","      return;","    }","    this.presentation = presentation;","    this.slide = data;","    repaint();","  }","  public void paintComponent(Graphics g) {","    g.setColor(Color.white);","    g.fillRect(0, 0, getSize().width, getSize().height);","    if (presentation.getSlideNumber() \< 0 || slide == null) {","      return;","    }","    g.setFont(labelFont);","    g.setColor(Color.black);","    g.drawString(\"Slide \" + (1+presentation.getSlideNumber()) + \" of \" +","                 presentation.getSize(), 600, 30);","    Rectangle area = new Rectangle(0, 20, getWidth(), (getHeight()-20));","    slide.draw(g, area, this);","  }","}"],|project://Jabberpoint-le3/src/SlideViewerFrame.java|:["import java.awt.Dimension;","import java.awt.event.WindowEvent;","import java.awt.event.WindowAdapter;","import javax.swing.JFrame;","public class SlideViewerFrame extends JFrame {","\tprivate static final long serialVersionUID = 3227L;","  public SlideViewerFrame(String title, Presentation presentation) {","    super(title);","    SlideViewerComponent slideViewerComponent = new SlideViewerComponent(presentation);","    presentation.setShowView(slideViewerComponent);","    setupWindow(slideViewerComponent, presentation);","  }","  public void setupWindow(SlideViewerComponent slideViewerComponent, Presentation presentation) {","    addWindowListener(new WindowAdapter() {","      public void windowClosing(WindowEvent e) {","\tSystem.exit(0);","      }","    });","    getContentPane().add(slideViewerComponent);","    addKeyListener(new KeyController(presentation)); ","    setMenuBar(new MenuController(this, presentation));\t","    setSize(new Dimension(800, 600)); ","    setVisible(true);","  }","}"],|project://Jabberpoint-le3/src/XMLAccessor.java|:["import java.util.List;","import java.util.Vector;","import org.jdom.Document;","import org.jdom.Element;","import org.jdom.JDOMException;","import org.jdom.input.SAXBuilder;","import org.junit.Test;","import java.io.File;","import java.io.IOException;","import java.io.PrintWriter;","import java.io.FileWriter;","public class XMLAccessor extends Accessor {","  public void loadFile(Presentation presentation, String filename) throws IOException {","    try {","      SAXBuilder builder = new SAXBuilder(true);    ","      Document document = builder.build(new File(filename)); ","      Element element = document.getRootElement();","      String title = element.getChild(\"head\").getChild(\"title\").getText();","      presentation.setTitle(title);","      List slides = element.getChildren(\"slide\");","      for (int slideNumber = 0; slideNumber \< slides.size(); slideNumber++) {","\tElement xmlSlide = (Element)slides.get(slideNumber);","\tSlide slide = new Slide();","\tslide.setTitle(xmlSlide.getChild(\"title\").getText());","\tpresentation.append(slide);","\tElement items = xmlSlide.getChild(\"items\");","\tList slideItems = items.getChildren();","\tfor (int itemNumber = 0; itemNumber \< slideItems.size(); itemNumber++) {","          Element item = (Element)slideItems.get(itemNumber);","          loadSlideItem(slide, item);","\t}","      }","    } catch (JDOMException jdx) {","      System.err.println(jdx.toString());","      throw new IOException(\"Parse Exception\");","    }","  }","  protected void loadSlideItem(Slide slide, Element item) {","    String type = item.getName();","    int level = 1; ","    String leveltext = item.getAttributeValue(\"level\");","    if (leveltext != null) {","      try {","\tlevel = Integer.parseInt(leveltext);","      }","      catch(NumberFormatException x) {","      }","    }","    if (\"text\".equals(type)) {","      slide.append(new TextItem(level, item.getText()));","    }","    else {","      if (\"image\".equals(type)) {","        slide.append(new BitmapItem(level, item.getText()));","      }","      else {","        System.err.println(\"Unknown element type\");","      }","    }","  }"," @Test","  public void saveFile(Presentation presentation, String filename) throws IOException {","\t    System.out.println(\"HelloWorld\");","\t    System.out.println(\"HelloWorld\");","\t    System.out.println(\"HelloWorld\");","\t    System.out.println(\"HelloWorld\");","\t    System.out.println(\"HelloWorld\");","\t    System.out.println(\"HelloWorld\");","\t    System.out.println(\"HelloWorld\");","    PrintWriter out = new PrintWriter(new FileWriter(filename));","    out.println(\"\<?xml version=\\\"1.0\\\"?\>\");","    out.println(\"\<!DOCTYPE slideshow SYSTEM \\\"jabberpoint.dtd\\\"\>\");","    out.println(\"\<presentation\>\");","    out.print(\"\<head\>\<title\>\");","    out.print(presentation.getTitle());","    out.println(\"\</title\>\</head\>\");","    for (int slideNumber=0; slideNumber\<presentation.getSize(); slideNumber++) {","      Slide slide = presentation.getSlide(slideNumber);","      out.println(\"\<slide\>\");","      out.println(\"\<title\>\" + slide.getTitle() + \"\</title\>\");","      out.println(\"\<items\>\");","      Vector slideItems = slide.getSlideItems();","      for (int itemNumber = 0; itemNumber\<slideItems.size(); itemNumber++) {","        SlideItem slideItem = (SlideItem) slideItems.elementAt(itemNumber);","        if (slideItem instanceof TextItem) {","          out.print(\"\<text level=\\\"\" + slideItem.getLevel() + \"\\\"\>\");","          out.print( ( (TextItem) slideItem).getText());","          out.println(\"\</text\>\");","        }","        else {","          if (slideItem instanceof BitmapItem) {","            out.print(\"\<image level=\\\"\" + slideItem.getLevel() + \"\\\"\>\");","            out.print( ( (BitmapItem) slideItem).getName());","            out.println(\"\</image\>\");","          }","          else {","            System.out.println(\"Ignoring \" + slideItem);","          }","        }","      }","      out.println(\"\</items\>\");","      out.println(\"\</slide\>\");","    }","    out.println(\"\</slideshow\>\");","    out.close();","  }","}"]),15,1014,709,106>)